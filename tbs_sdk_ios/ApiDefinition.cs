using System;
using AVFoundation;
using CloudKit;
using CoreAnimation;
using CoreData;
using CoreFoundation;
using CoreGraphics;
using CoreImage;
using CoreLocation;
using CoreVideo;
using FileProvider;
using Foundation;
using IOSurface;
using ImageIO;
using Intents;
using Metal;
using ObjCRuntime;
using OpenGLES;
using Security;
using UIKit;
using WebKit;

namespace TBS
{



    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern _RuneLocale _DefaultRuneLocale;
        [Field("_DefaultRuneLocale", "__Internal")]
        _RuneLocale _DefaultRuneLocale { get; }

        // extern _RuneLocale * _CurrentRuneLocale;
        [Field("_CurrentRuneLocale", "__Internal")]
        unsafe _RuneLocale* _CurrentRuneLocale { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern int signgam;
        [Field("signgam", "__Internal")]
        int signgam { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const char *const [32] sys_signame;
        [Field("sys_signame", "__Internal")]
        unsafe sbyte*[] sys_signame { get; }

        // extern const char *const [32] sys_siglist;
        [Field("sys_siglist", "__Internal")]
        unsafe sbyte*[] sys_siglist { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern FILE * __stdinp;
        [Field("__stdinp", "__Internal")]
        unsafe FILE* __stdinp { get; }

        // extern FILE * __stdoutp;
        [Field("__stdoutp", "__Internal")]
        unsafe FILE* __stdoutp { get; }

        // extern FILE * __stderrp;
        [Field("__stderrp", "__Internal")]
        unsafe FILE* __stderrp { get; }

        // extern const int sys_nerr;
        [Field("sys_nerr", "__Internal")]
        int sys_nerr { get; }

        // extern const char *const [] sys_errlist;
        [Field("sys_errlist", "__Internal")]
        unsafe sbyte*[] sys_errlist { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern int __mb_cur_max;
        [Field("__mb_cur_max", "__Internal")]
        int __mb_cur_max { get; }

        // extern char * suboptarg;
        [Field("suboptarg", "__Internal")]
        unsafe sbyte* suboptarg { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern char *[] tzname;
        [Field("tzname", "__Internal")]
        unsafe sbyte*[] tzname { get; }

        // extern int getdate_err;
        [Field("getdate_err", "__Internal")]
        int getdate_err { get; }

        // extern long timezone asm("_timezone");
        [Field("timezone", "__Internal")]
        nint timezone { get; }

        // extern int daylight;
        [Field("daylight", "__Internal")]
        int daylight { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern void *[32] _NSConcreteGlobalBlock __attribute__((availability(ios, introduced=3.2)));
        [iOS(3, 2)]
        [Field("_NSConcreteGlobalBlock", "__Internal")]
        unsafe void*[] _NSConcreteGlobalBlock { get; }

        // extern void *[32] _NSConcreteStackBlock __attribute__((availability(ios, introduced=3.2)));
        [iOS(3, 2)]
        [Field("_NSConcreteStackBlock", "__Internal")]
        unsafe void*[] _NSConcreteStackBlock { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern double kCFCoreFoundationVersionNumber;
        [Field("kCFCoreFoundationVersionNumber", "__Internal")]
        double kCFCoreFoundationVersionNumber { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFNullRef kCFNull;
        [Field("kCFNull", "__Internal")]
        unsafe CFNullRef* kCFNull { get; }

        // extern const CFAllocatorRef kCFAllocatorDefault;
        [Field("kCFAllocatorDefault", "__Internal")]
        unsafe CFAllocatorRef* kCFAllocatorDefault { get; }

        // extern const CFAllocatorRef kCFAllocatorSystemDefault;
        [Field("kCFAllocatorSystemDefault", "__Internal")]
        unsafe CFAllocatorRef* kCFAllocatorSystemDefault { get; }

        // extern const CFAllocatorRef kCFAllocatorMalloc;
        [Field("kCFAllocatorMalloc", "__Internal")]
        unsafe CFAllocatorRef* kCFAllocatorMalloc { get; }

        // extern const CFAllocatorRef kCFAllocatorMallocZone;
        [Field("kCFAllocatorMallocZone", "__Internal")]
        unsafe CFAllocatorRef* kCFAllocatorMallocZone { get; }

        // extern const CFAllocatorRef kCFAllocatorNull;
        [Field("kCFAllocatorNull", "__Internal")]
        unsafe CFAllocatorRef* kCFAllocatorNull { get; }

        // extern const CFAllocatorRef kCFAllocatorUseContext;
        [Field("kCFAllocatorUseContext", "__Internal")]
        unsafe CFAllocatorRef* kCFAllocatorUseContext { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFArrayCallBacks kCFTypeArrayCallBacks;
        [Field("kCFTypeArrayCallBacks", "__Internal")]
        CFArrayCallBacks kCFTypeArrayCallBacks { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFBagCallBacks kCFTypeBagCallBacks;
        [Field("kCFTypeBagCallBacks", "__Internal")]
        CFBagCallBacks kCFTypeBagCallBacks { get; }

        // extern const CFBagCallBacks kCFCopyStringBagCallBacks;
        [Field("kCFCopyStringBagCallBacks", "__Internal")]
        CFBagCallBacks kCFCopyStringBagCallBacks { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFBinaryHeapCallBacks kCFStringBinaryHeapCallBacks;
        [Field("kCFStringBinaryHeapCallBacks", "__Internal")]
        CFBinaryHeapCallBacks kCFStringBinaryHeapCallBacks { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFDictionaryKeyCallBacks kCFTypeDictionaryKeyCallBacks;
        [Field("kCFTypeDictionaryKeyCallBacks", "__Internal")]
        CFDictionaryKeyCallBacks kCFTypeDictionaryKeyCallBacks { get; }

        // extern const CFDictionaryKeyCallBacks kCFCopyStringDictionaryKeyCallBacks;
        [Field("kCFCopyStringDictionaryKeyCallBacks", "__Internal")]
        CFDictionaryKeyCallBacks kCFCopyStringDictionaryKeyCallBacks { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFDictionaryValueCallBacks kCFTypeDictionaryValueCallBacks;
        [Field("kCFTypeDictionaryValueCallBacks", "__Internal")]
        CFDictionaryValueCallBacks kCFTypeDictionaryValueCallBacks { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFNotificationName kCFLocaleCurrentLocaleDidChangeNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFLocaleCurrentLocaleDidChangeNotification", "__Internal")]
        unsafe CFNotificationName* kCFLocaleCurrentLocaleDidChangeNotification { get; }

        // extern const CFLocaleKey kCFLocaleIdentifier;
        [Field("kCFLocaleIdentifier", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleIdentifier { get; }

        // extern const CFLocaleKey kCFLocaleLanguageCode;
        [Field("kCFLocaleLanguageCode", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleLanguageCode { get; }

        // extern const CFLocaleKey kCFLocaleCountryCode;
        [Field("kCFLocaleCountryCode", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleCountryCode { get; }

        // extern const CFLocaleKey kCFLocaleScriptCode;
        [Field("kCFLocaleScriptCode", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleScriptCode { get; }

        // extern const CFLocaleKey kCFLocaleVariantCode;
        [Field("kCFLocaleVariantCode", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleVariantCode { get; }

        // extern const CFLocaleKey kCFLocaleExemplarCharacterSet;
        [Field("kCFLocaleExemplarCharacterSet", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleExemplarCharacterSet { get; }

        // extern const CFLocaleKey kCFLocaleCalendarIdentifier;
        [Field("kCFLocaleCalendarIdentifier", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleCalendarIdentifier { get; }

        // extern const CFLocaleKey kCFLocaleCalendar;
        [Field("kCFLocaleCalendar", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleCalendar { get; }

        // extern const CFLocaleKey kCFLocaleCollationIdentifier;
        [Field("kCFLocaleCollationIdentifier", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleCollationIdentifier { get; }

        // extern const CFLocaleKey kCFLocaleUsesMetricSystem;
        [Field("kCFLocaleUsesMetricSystem", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleUsesMetricSystem { get; }

        // extern const CFLocaleKey kCFLocaleMeasurementSystem;
        [Field("kCFLocaleMeasurementSystem", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleMeasurementSystem { get; }

        // extern const CFLocaleKey kCFLocaleDecimalSeparator;
        [Field("kCFLocaleDecimalSeparator", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleDecimalSeparator { get; }

        // extern const CFLocaleKey kCFLocaleGroupingSeparator;
        [Field("kCFLocaleGroupingSeparator", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleGroupingSeparator { get; }

        // extern const CFLocaleKey kCFLocaleCurrencySymbol;
        [Field("kCFLocaleCurrencySymbol", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleCurrencySymbol { get; }

        // extern const CFLocaleKey kCFLocaleCurrencyCode;
        [Field("kCFLocaleCurrencyCode", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleCurrencyCode { get; }

        // extern const CFLocaleKey kCFLocaleCollatorIdentifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFLocaleCollatorIdentifier", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleCollatorIdentifier { get; }

        // extern const CFLocaleKey kCFLocaleQuotationBeginDelimiterKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFLocaleQuotationBeginDelimiterKey", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleQuotationBeginDelimiterKey { get; }

        // extern const CFLocaleKey kCFLocaleQuotationEndDelimiterKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFLocaleQuotationEndDelimiterKey", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleQuotationEndDelimiterKey { get; }

        // extern const CFLocaleKey kCFLocaleAlternateQuotationBeginDelimiterKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFLocaleAlternateQuotationBeginDelimiterKey", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleAlternateQuotationBeginDelimiterKey { get; }

        // extern const CFLocaleKey kCFLocaleAlternateQuotationEndDelimiterKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFLocaleAlternateQuotationEndDelimiterKey", "__Internal")]
        unsafe CFLocaleKey* kCFLocaleAlternateQuotationEndDelimiterKey { get; }

        // extern const CFCalendarIdentifier kCFGregorianCalendar;
        [Field("kCFGregorianCalendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFGregorianCalendar { get; }

        // extern const CFCalendarIdentifier kCFBuddhistCalendar;
        [Field("kCFBuddhistCalendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFBuddhistCalendar { get; }

        // extern const CFCalendarIdentifier kCFChineseCalendar;
        [Field("kCFChineseCalendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFChineseCalendar { get; }

        // extern const CFCalendarIdentifier kCFHebrewCalendar;
        [Field("kCFHebrewCalendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFHebrewCalendar { get; }

        // extern const CFCalendarIdentifier kCFIslamicCalendar;
        [Field("kCFIslamicCalendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFIslamicCalendar { get; }

        // extern const CFCalendarIdentifier kCFIslamicCivilCalendar;
        [Field("kCFIslamicCivilCalendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFIslamicCivilCalendar { get; }

        // extern const CFCalendarIdentifier kCFJapaneseCalendar;
        [Field("kCFJapaneseCalendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFJapaneseCalendar { get; }

        // extern const CFCalendarIdentifier kCFRepublicOfChinaCalendar __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFRepublicOfChinaCalendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFRepublicOfChinaCalendar { get; }

        // extern const CFCalendarIdentifier kCFPersianCalendar __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFPersianCalendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFPersianCalendar { get; }

        // extern const CFCalendarIdentifier kCFIndianCalendar __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFIndianCalendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFIndianCalendar { get; }

        // extern const CFCalendarIdentifier kCFISO8601Calendar __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFISO8601Calendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFISO8601Calendar { get; }

        // extern const CFCalendarIdentifier kCFIslamicTabularCalendar __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("kCFIslamicTabularCalendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFIslamicTabularCalendar { get; }

        // extern const CFCalendarIdentifier kCFIslamicUmmAlQuraCalendar __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("kCFIslamicUmmAlQuraCalendar", "__Internal")]
        unsafe CFCalendarIdentifier* kCFIslamicUmmAlQuraCalendar { get; }

        // extern const CFTimeInterval kCFAbsoluteTimeIntervalSince1970;
        [Field("kCFAbsoluteTimeIntervalSince1970", "__Internal")]
        double kCFAbsoluteTimeIntervalSince1970 { get; }

        // extern const CFTimeInterval kCFAbsoluteTimeIntervalSince1904;
        [Field("kCFAbsoluteTimeIntervalSince1904", "__Internal")]
        double kCFAbsoluteTimeIntervalSince1904 { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef kCFStringTransformStripCombiningMarks;
        [Field("kCFStringTransformStripCombiningMarks", "__Internal")]
        unsafe CFStringRef* kCFStringTransformStripCombiningMarks { get; }

        // extern const CFStringRef kCFStringTransformToLatin;
        [Field("kCFStringTransformToLatin", "__Internal")]
        unsafe CFStringRef* kCFStringTransformToLatin { get; }

        // extern const CFStringRef kCFStringTransformFullwidthHalfwidth;
        [Field("kCFStringTransformFullwidthHalfwidth", "__Internal")]
        unsafe CFStringRef* kCFStringTransformFullwidthHalfwidth { get; }

        // extern const CFStringRef kCFStringTransformLatinKatakana;
        [Field("kCFStringTransformLatinKatakana", "__Internal")]
        unsafe CFStringRef* kCFStringTransformLatinKatakana { get; }

        // extern const CFStringRef kCFStringTransformLatinHiragana;
        [Field("kCFStringTransformLatinHiragana", "__Internal")]
        unsafe CFStringRef* kCFStringTransformLatinHiragana { get; }

        // extern const CFStringRef kCFStringTransformHiraganaKatakana;
        [Field("kCFStringTransformHiraganaKatakana", "__Internal")]
        unsafe CFStringRef* kCFStringTransformHiraganaKatakana { get; }

        // extern const CFStringRef kCFStringTransformMandarinLatin;
        [Field("kCFStringTransformMandarinLatin", "__Internal")]
        unsafe CFStringRef* kCFStringTransformMandarinLatin { get; }

        // extern const CFStringRef kCFStringTransformLatinHangul;
        [Field("kCFStringTransformLatinHangul", "__Internal")]
        unsafe CFStringRef* kCFStringTransformLatinHangul { get; }

        // extern const CFStringRef kCFStringTransformLatinArabic;
        [Field("kCFStringTransformLatinArabic", "__Internal")]
        unsafe CFStringRef* kCFStringTransformLatinArabic { get; }

        // extern const CFStringRef kCFStringTransformLatinHebrew;
        [Field("kCFStringTransformLatinHebrew", "__Internal")]
        unsafe CFStringRef* kCFStringTransformLatinHebrew { get; }

        // extern const CFStringRef kCFStringTransformLatinThai;
        [Field("kCFStringTransformLatinThai", "__Internal")]
        unsafe CFStringRef* kCFStringTransformLatinThai { get; }

        // extern const CFStringRef kCFStringTransformLatinCyrillic;
        [Field("kCFStringTransformLatinCyrillic", "__Internal")]
        unsafe CFStringRef* kCFStringTransformLatinCyrillic { get; }

        // extern const CFStringRef kCFStringTransformLatinGreek;
        [Field("kCFStringTransformLatinGreek", "__Internal")]
        unsafe CFStringRef* kCFStringTransformLatinGreek { get; }

        // extern const CFStringRef kCFStringTransformToXMLHex;
        [Field("kCFStringTransformToXMLHex", "__Internal")]
        unsafe CFStringRef* kCFStringTransformToXMLHex { get; }

        // extern const CFStringRef kCFStringTransformToUnicodeName;
        [Field("kCFStringTransformToUnicodeName", "__Internal")]
        unsafe CFStringRef* kCFStringTransformToUnicodeName { get; }

        // extern const CFStringRef kCFStringTransformStripDiacritics __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFStringTransformStripDiacritics", "__Internal")]
        unsafe CFStringRef* kCFStringTransformStripDiacritics { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFNotificationName kCFTimeZoneSystemTimeZoneDidChangeNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFTimeZoneSystemTimeZoneDidChangeNotification", "__Internal")]
        unsafe CFNotificationName* kCFTimeZoneSystemTimeZoneDidChangeNotification { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFDateFormatterKey kCFDateFormatterIsLenient;
        [Field("kCFDateFormatterIsLenient", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterIsLenient { get; }

        // extern const CFDateFormatterKey kCFDateFormatterTimeZone;
        [Field("kCFDateFormatterTimeZone", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterTimeZone { get; }

        // extern const CFDateFormatterKey kCFDateFormatterCalendarName;
        [Field("kCFDateFormatterCalendarName", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterCalendarName { get; }

        // extern const CFDateFormatterKey kCFDateFormatterDefaultFormat;
        [Field("kCFDateFormatterDefaultFormat", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterDefaultFormat { get; }

        // extern const CFDateFormatterKey kCFDateFormatterTwoDigitStartDate;
        [Field("kCFDateFormatterTwoDigitStartDate", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterTwoDigitStartDate { get; }

        // extern const CFDateFormatterKey kCFDateFormatterDefaultDate;
        [Field("kCFDateFormatterDefaultDate", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterDefaultDate { get; }

        // extern const CFDateFormatterKey kCFDateFormatterCalendar;
        [Field("kCFDateFormatterCalendar", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterCalendar { get; }

        // extern const CFDateFormatterKey kCFDateFormatterEraSymbols;
        [Field("kCFDateFormatterEraSymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterEraSymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterMonthSymbols;
        [Field("kCFDateFormatterMonthSymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterMonthSymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterShortMonthSymbols;
        [Field("kCFDateFormatterShortMonthSymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterShortMonthSymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterWeekdaySymbols;
        [Field("kCFDateFormatterWeekdaySymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterWeekdaySymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterShortWeekdaySymbols;
        [Field("kCFDateFormatterShortWeekdaySymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterShortWeekdaySymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterAMSymbol;
        [Field("kCFDateFormatterAMSymbol", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterAMSymbol { get; }

        // extern const CFDateFormatterKey kCFDateFormatterPMSymbol;
        [Field("kCFDateFormatterPMSymbol", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterPMSymbol { get; }

        // extern const CFDateFormatterKey kCFDateFormatterLongEraSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterLongEraSymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterLongEraSymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterVeryShortMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterVeryShortMonthSymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterVeryShortMonthSymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterStandaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterStandaloneMonthSymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterStandaloneMonthSymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterShortStandaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterShortStandaloneMonthSymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterShortStandaloneMonthSymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterVeryShortStandaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterVeryShortStandaloneMonthSymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterVeryShortStandaloneMonthSymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterVeryShortWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterVeryShortWeekdaySymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterVeryShortWeekdaySymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterStandaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterStandaloneWeekdaySymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterStandaloneWeekdaySymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterShortStandaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterShortStandaloneWeekdaySymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterShortStandaloneWeekdaySymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterVeryShortStandaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterVeryShortStandaloneWeekdaySymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterVeryShortStandaloneWeekdaySymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterQuarterSymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterQuarterSymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterShortQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterShortQuarterSymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterShortQuarterSymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterStandaloneQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterStandaloneQuarterSymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterStandaloneQuarterSymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterShortStandaloneQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterShortStandaloneQuarterSymbols", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterShortStandaloneQuarterSymbols { get; }

        // extern const CFDateFormatterKey kCFDateFormatterGregorianStartDate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFDateFormatterGregorianStartDate", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterGregorianStartDate { get; }

        // extern const CFDateFormatterKey kCFDateFormatterDoesRelativeDateFormattingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFDateFormatterDoesRelativeDateFormattingKey", "__Internal")]
        unsafe CFDateFormatterKey* kCFDateFormatterDoesRelativeDateFormattingKey { get; }

        // extern const CFErrorDomain kCFErrorDomainPOSIX __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFErrorDomainPOSIX", "__Internal")]
        unsafe CFErrorDomain* kCFErrorDomainPOSIX { get; }

        // extern const CFErrorDomain kCFErrorDomainOSStatus __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFErrorDomainOSStatus", "__Internal")]
        unsafe CFErrorDomain* kCFErrorDomainOSStatus { get; }

        // extern const CFErrorDomain kCFErrorDomainMach __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFErrorDomainMach", "__Internal")]
        unsafe CFErrorDomain* kCFErrorDomainMach { get; }

        // extern const CFErrorDomain kCFErrorDomainCocoa __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFErrorDomainCocoa", "__Internal")]
        unsafe CFErrorDomain* kCFErrorDomainCocoa { get; }

        // extern const CFStringRef kCFErrorLocalizedDescriptionKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFErrorLocalizedDescriptionKey", "__Internal")]
        unsafe CFStringRef* kCFErrorLocalizedDescriptionKey { get; }

        // extern const CFStringRef kCFErrorLocalizedFailureKey __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kCFErrorLocalizedFailureKey", "__Internal")]
        unsafe CFStringRef* kCFErrorLocalizedFailureKey { get; }

        // extern const CFStringRef kCFErrorLocalizedFailureReasonKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFErrorLocalizedFailureReasonKey", "__Internal")]
        unsafe CFStringRef* kCFErrorLocalizedFailureReasonKey { get; }

        // extern const CFStringRef kCFErrorLocalizedRecoverySuggestionKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFErrorLocalizedRecoverySuggestionKey", "__Internal")]
        unsafe CFStringRef* kCFErrorLocalizedRecoverySuggestionKey { get; }

        // extern const CFStringRef kCFErrorDescriptionKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFErrorDescriptionKey", "__Internal")]
        unsafe CFStringRef* kCFErrorDescriptionKey { get; }

        // extern const CFStringRef kCFErrorUnderlyingErrorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFErrorUnderlyingErrorKey", "__Internal")]
        unsafe CFStringRef* kCFErrorUnderlyingErrorKey { get; }

        // extern const CFStringRef kCFErrorURLKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFErrorURLKey", "__Internal")]
        unsafe CFStringRef* kCFErrorURLKey { get; }

        // extern const CFStringRef kCFErrorFilePathKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFErrorFilePathKey", "__Internal")]
        unsafe CFStringRef* kCFErrorFilePathKey { get; }

        // extern const CFBooleanRef kCFBooleanTrue;
        [Field("kCFBooleanTrue", "__Internal")]
        unsafe CFBooleanRef* kCFBooleanTrue { get; }

        // extern const CFBooleanRef kCFBooleanFalse;
        [Field("kCFBooleanFalse", "__Internal")]
        unsafe CFBooleanRef* kCFBooleanFalse { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFNumberRef kCFNumberPositiveInfinity;
        [Field("kCFNumberPositiveInfinity", "__Internal")]
        unsafe CFNumberRef* kCFNumberPositiveInfinity { get; }

        // extern const CFNumberRef kCFNumberNegativeInfinity;
        [Field("kCFNumberNegativeInfinity", "__Internal")]
        unsafe CFNumberRef* kCFNumberNegativeInfinity { get; }

        // extern const CFNumberRef kCFNumberNaN;
        [Field("kCFNumberNaN", "__Internal")]
        unsafe CFNumberRef* kCFNumberNaN { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFNumberFormatterKey kCFNumberFormatterCurrencyCode;
        [Field("kCFNumberFormatterCurrencyCode", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterCurrencyCode { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterDecimalSeparator;
        [Field("kCFNumberFormatterDecimalSeparator", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterDecimalSeparator { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterCurrencyDecimalSeparator;
        [Field("kCFNumberFormatterCurrencyDecimalSeparator", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterCurrencyDecimalSeparator { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterAlwaysShowDecimalSeparator;
        [Field("kCFNumberFormatterAlwaysShowDecimalSeparator", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterAlwaysShowDecimalSeparator { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterGroupingSeparator;
        [Field("kCFNumberFormatterGroupingSeparator", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterGroupingSeparator { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterUseGroupingSeparator;
        [Field("kCFNumberFormatterUseGroupingSeparator", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterUseGroupingSeparator { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterPercentSymbol;
        [Field("kCFNumberFormatterPercentSymbol", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterPercentSymbol { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterZeroSymbol;
        [Field("kCFNumberFormatterZeroSymbol", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterZeroSymbol { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterNaNSymbol;
        [Field("kCFNumberFormatterNaNSymbol", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterNaNSymbol { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterInfinitySymbol;
        [Field("kCFNumberFormatterInfinitySymbol", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterInfinitySymbol { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterMinusSign;
        [Field("kCFNumberFormatterMinusSign", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterMinusSign { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterPlusSign;
        [Field("kCFNumberFormatterPlusSign", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterPlusSign { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterCurrencySymbol;
        [Field("kCFNumberFormatterCurrencySymbol", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterCurrencySymbol { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterExponentSymbol;
        [Field("kCFNumberFormatterExponentSymbol", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterExponentSymbol { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterMinIntegerDigits;
        [Field("kCFNumberFormatterMinIntegerDigits", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterMinIntegerDigits { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterMaxIntegerDigits;
        [Field("kCFNumberFormatterMaxIntegerDigits", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterMaxIntegerDigits { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterMinFractionDigits;
        [Field("kCFNumberFormatterMinFractionDigits", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterMinFractionDigits { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterMaxFractionDigits;
        [Field("kCFNumberFormatterMaxFractionDigits", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterMaxFractionDigits { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterGroupingSize;
        [Field("kCFNumberFormatterGroupingSize", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterGroupingSize { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterSecondaryGroupingSize;
        [Field("kCFNumberFormatterSecondaryGroupingSize", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterSecondaryGroupingSize { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterRoundingMode;
        [Field("kCFNumberFormatterRoundingMode", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterRoundingMode { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterRoundingIncrement;
        [Field("kCFNumberFormatterRoundingIncrement", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterRoundingIncrement { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterFormatWidth;
        [Field("kCFNumberFormatterFormatWidth", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterFormatWidth { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterPaddingPosition;
        [Field("kCFNumberFormatterPaddingPosition", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterPaddingPosition { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterPaddingCharacter;
        [Field("kCFNumberFormatterPaddingCharacter", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterPaddingCharacter { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterDefaultFormat;
        [Field("kCFNumberFormatterDefaultFormat", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterDefaultFormat { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterMultiplier;
        [Field("kCFNumberFormatterMultiplier", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterMultiplier { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterPositivePrefix;
        [Field("kCFNumberFormatterPositivePrefix", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterPositivePrefix { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterPositiveSuffix;
        [Field("kCFNumberFormatterPositiveSuffix", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterPositiveSuffix { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterNegativePrefix;
        [Field("kCFNumberFormatterNegativePrefix", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterNegativePrefix { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterNegativeSuffix;
        [Field("kCFNumberFormatterNegativeSuffix", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterNegativeSuffix { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterPerMillSymbol;
        [Field("kCFNumberFormatterPerMillSymbol", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterPerMillSymbol { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterInternationalCurrencySymbol;
        [Field("kCFNumberFormatterInternationalCurrencySymbol", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterInternationalCurrencySymbol { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterCurrencyGroupingSeparator __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFNumberFormatterCurrencyGroupingSeparator", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterCurrencyGroupingSeparator { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterIsLenient __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFNumberFormatterIsLenient", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterIsLenient { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterUseSignificantDigits __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFNumberFormatterUseSignificantDigits", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterUseSignificantDigits { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterMinSignificantDigits __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFNumberFormatterMinSignificantDigits", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterMinSignificantDigits { get; }

        // extern const CFNumberFormatterKey kCFNumberFormatterMaxSignificantDigits __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCFNumberFormatterMaxSignificantDigits", "__Internal")]
        unsafe CFNumberFormatterKey* kCFNumberFormatterMaxSignificantDigits { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCFPreferencesAnyApplication;
        [Field("kCFPreferencesAnyApplication", "__Internal")]
        unsafe CFStringRef* kCFPreferencesAnyApplication { get; }

        // extern const CFStringRef _Nonnull kCFPreferencesCurrentApplication;
        [Field("kCFPreferencesCurrentApplication", "__Internal")]
        unsafe CFStringRef* kCFPreferencesCurrentApplication { get; }

        // extern const CFStringRef _Nonnull kCFPreferencesAnyHost;
        [Field("kCFPreferencesAnyHost", "__Internal")]
        unsafe CFStringRef* kCFPreferencesAnyHost { get; }

        // extern const CFStringRef _Nonnull kCFPreferencesCurrentHost;
        [Field("kCFPreferencesCurrentHost", "__Internal")]
        unsafe CFStringRef* kCFPreferencesCurrentHost { get; }

        // extern const CFStringRef _Nonnull kCFPreferencesAnyUser;
        [Field("kCFPreferencesAnyUser", "__Internal")]
        unsafe CFStringRef* kCFPreferencesAnyUser { get; }

        // extern const CFStringRef _Nonnull kCFPreferencesCurrentUser;
        [Field("kCFPreferencesCurrentUser", "__Internal")]
        unsafe CFStringRef* kCFPreferencesCurrentUser { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef kCFURLKeysOfUnsetValuesKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLKeysOfUnsetValuesKey", "__Internal")]
        unsafe CFStringRef* kCFURLKeysOfUnsetValuesKey { get; }

        // extern const CFStringRef kCFURLNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLNameKey", "__Internal")]
        unsafe CFStringRef* kCFURLNameKey { get; }

        // extern const CFStringRef kCFURLLocalizedNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLLocalizedNameKey", "__Internal")]
        unsafe CFStringRef* kCFURLLocalizedNameKey { get; }

        // extern const CFStringRef kCFURLIsRegularFileKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLIsRegularFileKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsRegularFileKey { get; }

        // extern const CFStringRef kCFURLIsDirectoryKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLIsDirectoryKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsDirectoryKey { get; }

        // extern const CFStringRef kCFURLIsSymbolicLinkKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLIsSymbolicLinkKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsSymbolicLinkKey { get; }

        // extern const CFStringRef kCFURLIsVolumeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLIsVolumeKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsVolumeKey { get; }

        // extern const CFStringRef kCFURLIsPackageKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLIsPackageKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsPackageKey { get; }

        // extern const CFStringRef kCFURLIsApplicationKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("kCFURLIsApplicationKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsApplicationKey { get; }

        // extern const CFStringRef kCFURLApplicationIsScriptableKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11)));
        [NoWatch, NoTV, NoiOS, Mac(10, 11)]
        [Field("kCFURLApplicationIsScriptableKey", "__Internal")]
        unsafe CFStringRef* kCFURLApplicationIsScriptableKey { get; }

        // extern const CFStringRef kCFURLIsSystemImmutableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLIsSystemImmutableKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsSystemImmutableKey { get; }

        // extern const CFStringRef kCFURLIsUserImmutableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLIsUserImmutableKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsUserImmutableKey { get; }

        // extern const CFStringRef kCFURLIsHiddenKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLIsHiddenKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsHiddenKey { get; }

        // extern const CFStringRef kCFURLHasHiddenExtensionKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLHasHiddenExtensionKey", "__Internal")]
        unsafe CFStringRef* kCFURLHasHiddenExtensionKey { get; }

        // extern const CFStringRef kCFURLCreationDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLCreationDateKey", "__Internal")]
        unsafe CFStringRef* kCFURLCreationDateKey { get; }

        // extern const CFStringRef kCFURLContentAccessDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLContentAccessDateKey", "__Internal")]
        unsafe CFStringRef* kCFURLContentAccessDateKey { get; }

        // extern const CFStringRef kCFURLContentModificationDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLContentModificationDateKey", "__Internal")]
        unsafe CFStringRef* kCFURLContentModificationDateKey { get; }

        // extern const CFStringRef kCFURLAttributeModificationDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLAttributeModificationDateKey", "__Internal")]
        unsafe CFStringRef* kCFURLAttributeModificationDateKey { get; }

        // extern const CFStringRef kCFURLLinkCountKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLLinkCountKey", "__Internal")]
        unsafe CFStringRef* kCFURLLinkCountKey { get; }

        // extern const CFStringRef kCFURLParentDirectoryURLKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLParentDirectoryURLKey", "__Internal")]
        unsafe CFStringRef* kCFURLParentDirectoryURLKey { get; }

        // extern const CFStringRef kCFURLVolumeURLKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeURLKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeURLKey { get; }

        // extern const CFStringRef kCFURLTypeIdentifierKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLTypeIdentifierKey", "__Internal")]
        unsafe CFStringRef* kCFURLTypeIdentifierKey { get; }

        // extern const CFStringRef kCFURLLocalizedTypeDescriptionKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLLocalizedTypeDescriptionKey", "__Internal")]
        unsafe CFStringRef* kCFURLLocalizedTypeDescriptionKey { get; }

        // extern const CFStringRef kCFURLLabelNumberKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLLabelNumberKey", "__Internal")]
        unsafe CFStringRef* kCFURLLabelNumberKey { get; }

        // extern const CFStringRef kCFURLLabelColorKey __attribute__((availability(tvos, introduced=9.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(ios, introduced=4.0, deprecated=10.0))) __attribute__((availability(macos, introduced=10.6, deprecated=10.12)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSURLLabelColorKey")]
        [Deprecated(PlatformName.TvOS, 10, 0, message: "Use NSURLLabelColorKey")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSURLLabelColorKey")]
        [Deprecated(PlatformName.WatchOS, 3, 0, message: "Use NSURLLabelColorKey")]
        [Introduced(PlatformName.iOS, 4, 0, message: "Use NSURLLabelColorKey")]
        [Deprecated(PlatformName.iOS, 10, 0, message: "Use NSURLLabelColorKey")]
        [Introduced(PlatformName.MacOSX, 10, 6, message: "Use NSURLLabelColorKey")]
        [Deprecated(PlatformName.MacOSX, 10, 12, message: "Use NSURLLabelColorKey")]
        [Field("kCFURLLabelColorKey", "__Internal")]
        unsafe CFStringRef* kCFURLLabelColorKey { get; }

        // extern const CFStringRef kCFURLLocalizedLabelKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLLocalizedLabelKey", "__Internal")]
        unsafe CFStringRef* kCFURLLocalizedLabelKey { get; }

        // extern const CFStringRef kCFURLEffectiveIconKey __attribute__((availability(tvos, introduced=9.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(ios, introduced=4.0, deprecated=10.0))) __attribute__((availability(macos, introduced=10.6, deprecated=10.12)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSURLEffectiveIconKey")]
        [Deprecated(PlatformName.TvOS, 10, 0, message: "Use NSURLEffectiveIconKey")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSURLEffectiveIconKey")]
        [Deprecated(PlatformName.WatchOS, 3, 0, message: "Use NSURLEffectiveIconKey")]
        [Introduced(PlatformName.iOS, 4, 0, message: "Use NSURLEffectiveIconKey")]
        [Deprecated(PlatformName.iOS, 10, 0, message: "Use NSURLEffectiveIconKey")]
        [Introduced(PlatformName.MacOSX, 10, 6, message: "Use NSURLEffectiveIconKey")]
        [Deprecated(PlatformName.MacOSX, 10, 12, message: "Use NSURLEffectiveIconKey")]
        [Field("kCFURLEffectiveIconKey", "__Internal")]
        unsafe CFStringRef* kCFURLEffectiveIconKey { get; }

        // extern const CFStringRef kCFURLCustomIconKey __attribute__((availability(tvos, introduced=9.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(ios, introduced=4.0, deprecated=10.0))) __attribute__((availability(macos, introduced=10.6, deprecated=10.12)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSURLCustomIconKey")]
        [Deprecated(PlatformName.TvOS, 10, 0, message: "Use NSURLCustomIconKey")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSURLCustomIconKey")]
        [Deprecated(PlatformName.WatchOS, 3, 0, message: "Use NSURLCustomIconKey")]
        [Introduced(PlatformName.iOS, 4, 0, message: "Use NSURLCustomIconKey")]
        [Deprecated(PlatformName.iOS, 10, 0, message: "Use NSURLCustomIconKey")]
        [Introduced(PlatformName.MacOSX, 10, 6, message: "Use NSURLCustomIconKey")]
        [Deprecated(PlatformName.MacOSX, 10, 12, message: "Use NSURLCustomIconKey")]
        [Field("kCFURLCustomIconKey", "__Internal")]
        unsafe CFStringRef* kCFURLCustomIconKey { get; }

        // extern const CFStringRef kCFURLFileResourceIdentifierKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLFileResourceIdentifierKey", "__Internal")]
        unsafe CFStringRef* kCFURLFileResourceIdentifierKey { get; }

        // extern const CFStringRef kCFURLVolumeIdentifierKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeIdentifierKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeIdentifierKey { get; }

        // extern const CFStringRef kCFURLPreferredIOBlockSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLPreferredIOBlockSizeKey", "__Internal")]
        unsafe CFStringRef* kCFURLPreferredIOBlockSizeKey { get; }

        // extern const CFStringRef kCFURLIsReadableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLIsReadableKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsReadableKey { get; }

        // extern const CFStringRef kCFURLIsWritableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLIsWritableKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsWritableKey { get; }

        // extern const CFStringRef kCFURLIsExecutableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLIsExecutableKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsExecutableKey { get; }

        // extern const CFStringRef kCFURLFileSecurityKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLFileSecurityKey", "__Internal")]
        unsafe CFStringRef* kCFURLFileSecurityKey { get; }

        // extern const CFStringRef kCFURLIsExcludedFromBackupKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.1))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(5, 1)]
        [Field("kCFURLIsExcludedFromBackupKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsExcludedFromBackupKey { get; }

        // extern const CFStringRef kCFURLTagNamesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("kCFURLTagNamesKey", "__Internal")]
        unsafe CFStringRef* kCFURLTagNamesKey { get; }

        // extern const CFStringRef kCFURLPathKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Field("kCFURLPathKey", "__Internal")]
        unsafe CFStringRef* kCFURLPathKey { get; }

        // extern const CFStringRef kCFURLCanonicalPathKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kCFURLCanonicalPathKey", "__Internal")]
        unsafe CFStringRef* kCFURLCanonicalPathKey { get; }

        // extern const CFStringRef kCFURLIsMountTriggerKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Field("kCFURLIsMountTriggerKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsMountTriggerKey { get; }

        // extern const CFStringRef kCFURLGenerationIdentifierKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("kCFURLGenerationIdentifierKey", "__Internal")]
        unsafe CFStringRef* kCFURLGenerationIdentifierKey { get; }

        // extern const CFStringRef kCFURLDocumentIdentifierKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("kCFURLDocumentIdentifierKey", "__Internal")]
        unsafe CFStringRef* kCFURLDocumentIdentifierKey { get; }

        // extern const CFStringRef kCFURLAddedToDirectoryDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("kCFURLAddedToDirectoryDateKey", "__Internal")]
        unsafe CFStringRef* kCFURLAddedToDirectoryDateKey { get; }

        // extern const CFStringRef kCFURLQuarantinePropertiesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.10)));
        [NoWatch, NoTV, NoiOS, Mac(10, 10)]
        [Field("kCFURLQuarantinePropertiesKey", "__Internal")]
        unsafe CFStringRef* kCFURLQuarantinePropertiesKey { get; }

        // extern const CFStringRef kCFURLFileResourceTypeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLFileResourceTypeKey", "__Internal")]
        unsafe CFStringRef* kCFURLFileResourceTypeKey { get; }

        // extern const CFStringRef kCFURLFileResourceTypeNamedPipe __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLFileResourceTypeNamedPipe", "__Internal")]
        unsafe CFStringRef* kCFURLFileResourceTypeNamedPipe { get; }

        // extern const CFStringRef kCFURLFileResourceTypeCharacterSpecial __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLFileResourceTypeCharacterSpecial", "__Internal")]
        unsafe CFStringRef* kCFURLFileResourceTypeCharacterSpecial { get; }

        // extern const CFStringRef kCFURLFileResourceTypeDirectory __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLFileResourceTypeDirectory", "__Internal")]
        unsafe CFStringRef* kCFURLFileResourceTypeDirectory { get; }

        // extern const CFStringRef kCFURLFileResourceTypeBlockSpecial __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLFileResourceTypeBlockSpecial", "__Internal")]
        unsafe CFStringRef* kCFURLFileResourceTypeBlockSpecial { get; }

        // extern const CFStringRef kCFURLFileResourceTypeRegular __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLFileResourceTypeRegular", "__Internal")]
        unsafe CFStringRef* kCFURLFileResourceTypeRegular { get; }

        // extern const CFStringRef kCFURLFileResourceTypeSymbolicLink __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLFileResourceTypeSymbolicLink", "__Internal")]
        unsafe CFStringRef* kCFURLFileResourceTypeSymbolicLink { get; }

        // extern const CFStringRef kCFURLFileResourceTypeSocket __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLFileResourceTypeSocket", "__Internal")]
        unsafe CFStringRef* kCFURLFileResourceTypeSocket { get; }

        // extern const CFStringRef kCFURLFileResourceTypeUnknown __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLFileResourceTypeUnknown", "__Internal")]
        unsafe CFStringRef* kCFURLFileResourceTypeUnknown { get; }

        // extern const CFStringRef kCFURLFileSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLFileSizeKey", "__Internal")]
        unsafe CFStringRef* kCFURLFileSizeKey { get; }

        // extern const CFStringRef kCFURLFileAllocatedSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLFileAllocatedSizeKey", "__Internal")]
        unsafe CFStringRef* kCFURLFileAllocatedSizeKey { get; }

        // extern const CFStringRef kCFURLTotalFileSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLTotalFileSizeKey", "__Internal")]
        unsafe CFStringRef* kCFURLTotalFileSizeKey { get; }

        // extern const CFStringRef kCFURLTotalFileAllocatedSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLTotalFileAllocatedSizeKey", "__Internal")]
        unsafe CFStringRef* kCFURLTotalFileAllocatedSizeKey { get; }

        // extern const CFStringRef kCFURLIsAliasFileKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLIsAliasFileKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsAliasFileKey { get; }

        // extern const CFStringRef kCFURLFileProtectionKey __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("kCFURLFileProtectionKey", "__Internal")]
        unsafe CFStringRef* kCFURLFileProtectionKey { get; }

        // extern const CFStringRef kCFURLFileProtectionNone __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("kCFURLFileProtectionNone", "__Internal")]
        unsafe CFStringRef* kCFURLFileProtectionNone { get; }

        // extern const CFStringRef kCFURLFileProtectionComplete __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("kCFURLFileProtectionComplete", "__Internal")]
        unsafe CFStringRef* kCFURLFileProtectionComplete { get; }

        // extern const CFStringRef kCFURLFileProtectionCompleteUnlessOpen __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("kCFURLFileProtectionCompleteUnlessOpen", "__Internal")]
        unsafe CFStringRef* kCFURLFileProtectionCompleteUnlessOpen { get; }

        // extern const CFStringRef kCFURLFileProtectionCompleteUntilFirstUserAuthentication __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("kCFURLFileProtectionCompleteUntilFirstUserAuthentication", "__Internal")]
        unsafe CFStringRef* kCFURLFileProtectionCompleteUntilFirstUserAuthentication { get; }

        // extern const CFStringRef kCFURLVolumeLocalizedFormatDescriptionKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeLocalizedFormatDescriptionKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeLocalizedFormatDescriptionKey { get; }

        // extern const CFStringRef kCFURLVolumeTotalCapacityKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeTotalCapacityKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeTotalCapacityKey { get; }

        // extern const CFStringRef kCFURLVolumeAvailableCapacityKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeAvailableCapacityKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeAvailableCapacityKey { get; }

        // extern const CFStringRef kCFURLVolumeAvailableCapacityForImportantUsageKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [NoWatch, NoTV, Mac(10, 13), iOS(11, 0)]
        [Field("kCFURLVolumeAvailableCapacityForImportantUsageKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeAvailableCapacityForImportantUsageKey { get; }

        // extern const CFStringRef kCFURLVolumeAvailableCapacityForOpportunisticUsageKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [NoWatch, NoTV, Mac(10, 13), iOS(11, 0)]
        [Field("kCFURLVolumeAvailableCapacityForOpportunisticUsageKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeAvailableCapacityForOpportunisticUsageKey { get; }

        // extern const CFStringRef kCFURLVolumeResourceCountKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeResourceCountKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeResourceCountKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsPersistentIDsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeSupportsPersistentIDsKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsPersistentIDsKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsSymbolicLinksKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeSupportsSymbolicLinksKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsSymbolicLinksKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsHardLinksKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeSupportsHardLinksKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsHardLinksKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsJournalingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeSupportsJournalingKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsJournalingKey { get; }

        // extern const CFStringRef kCFURLVolumeIsJournalingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeIsJournalingKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeIsJournalingKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsSparseFilesKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeSupportsSparseFilesKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsSparseFilesKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsZeroRunsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeSupportsZeroRunsKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsZeroRunsKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsCaseSensitiveNamesKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeSupportsCaseSensitiveNamesKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsCaseSensitiveNamesKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsCasePreservedNamesKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCFURLVolumeSupportsCasePreservedNamesKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsCasePreservedNamesKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsRootDirectoryDatesKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeSupportsRootDirectoryDatesKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsRootDirectoryDatesKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsVolumeSizesKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeSupportsVolumeSizesKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsVolumeSizesKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsRenamingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeSupportsRenamingKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsRenamingKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsAdvisoryFileLockingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeSupportsAdvisoryFileLockingKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsAdvisoryFileLockingKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsExtendedSecurityKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeSupportsExtendedSecurityKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsExtendedSecurityKey { get; }

        // extern const CFStringRef kCFURLVolumeIsBrowsableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeIsBrowsableKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeIsBrowsableKey { get; }

        // extern const CFStringRef kCFURLVolumeMaximumFileSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeMaximumFileSizeKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeMaximumFileSizeKey { get; }

        // extern const CFStringRef kCFURLVolumeIsEjectableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeIsEjectableKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeIsEjectableKey { get; }

        // extern const CFStringRef kCFURLVolumeIsRemovableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeIsRemovableKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeIsRemovableKey { get; }

        // extern const CFStringRef kCFURLVolumeIsInternalKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeIsInternalKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeIsInternalKey { get; }

        // extern const CFStringRef kCFURLVolumeIsAutomountedKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeIsAutomountedKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeIsAutomountedKey { get; }

        // extern const CFStringRef kCFURLVolumeIsLocalKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeIsLocalKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeIsLocalKey { get; }

        // extern const CFStringRef kCFURLVolumeIsReadOnlyKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeIsReadOnlyKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeIsReadOnlyKey { get; }

        // extern const CFStringRef kCFURLVolumeCreationDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeCreationDateKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeCreationDateKey { get; }

        // extern const CFStringRef kCFURLVolumeURLForRemountingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeURLForRemountingKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeURLForRemountingKey { get; }

        // extern const CFStringRef kCFURLVolumeUUIDStringKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeUUIDStringKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeUUIDStringKey { get; }

        // extern const CFStringRef kCFURLVolumeNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeNameKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeNameKey { get; }

        // extern const CFStringRef kCFURLVolumeLocalizedNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLVolumeLocalizedNameKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeLocalizedNameKey { get; }

        // extern const CFStringRef kCFURLVolumeIsEncryptedKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kCFURLVolumeIsEncryptedKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeIsEncryptedKey { get; }

        // extern const CFStringRef kCFURLVolumeIsRootFileSystemKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kCFURLVolumeIsRootFileSystemKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeIsRootFileSystemKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsCompressionKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kCFURLVolumeSupportsCompressionKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsCompressionKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsFileCloningKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kCFURLVolumeSupportsFileCloningKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsFileCloningKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsSwapRenamingKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kCFURLVolumeSupportsSwapRenamingKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsSwapRenamingKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsExclusiveRenamingKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kCFURLVolumeSupportsExclusiveRenamingKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsExclusiveRenamingKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsImmutableFilesKey __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kCFURLVolumeSupportsImmutableFilesKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsImmutableFilesKey { get; }

        // extern const CFStringRef kCFURLVolumeSupportsAccessPermissionsKey __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kCFURLVolumeSupportsAccessPermissionsKey", "__Internal")]
        unsafe CFStringRef* kCFURLVolumeSupportsAccessPermissionsKey { get; }

        // extern const CFStringRef kCFURLIsUbiquitousItemKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLIsUbiquitousItemKey", "__Internal")]
        unsafe CFStringRef* kCFURLIsUbiquitousItemKey { get; }

        // extern const CFStringRef kCFURLUbiquitousItemHasUnresolvedConflictsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLUbiquitousItemHasUnresolvedConflictsKey", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemHasUnresolvedConflictsKey { get; }

        // extern const CFStringRef kCFURLUbiquitousItemIsDownloadedKey __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=5.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.7, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
        [Introduced(PlatformName.iOS, 5, 0, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
        [Introduced(PlatformName.MacOSX, 10, 7, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
        [Field("kCFURLUbiquitousItemIsDownloadedKey", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemIsDownloadedKey { get; }

        // extern const CFStringRef kCFURLUbiquitousItemIsDownloadingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLUbiquitousItemIsDownloadingKey", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemIsDownloadingKey { get; }

        // extern const CFStringRef kCFURLUbiquitousItemIsUploadedKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLUbiquitousItemIsUploadedKey", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemIsUploadedKey { get; }

        // extern const CFStringRef kCFURLUbiquitousItemIsUploadingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("kCFURLUbiquitousItemIsUploadingKey", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemIsUploadingKey { get; }

        // extern const CFStringRef kCFURLUbiquitousItemPercentDownloadedKey __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=5.0, deprecated=6.0))) __attribute__((availability(macos, introduced=10.7, deprecated=10.8)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
        [Introduced(PlatformName.iOS, 5, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
        [Deprecated(PlatformName.iOS, 6, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
        [Introduced(PlatformName.MacOSX, 10, 7, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
        [Deprecated(PlatformName.MacOSX, 10, 8, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
        [Field("kCFURLUbiquitousItemPercentDownloadedKey", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemPercentDownloadedKey { get; }

        // extern const CFStringRef kCFURLUbiquitousItemPercentUploadedKey __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=5.0, deprecated=6.0))) __attribute__((availability(macos, introduced=10.7, deprecated=10.8)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
        [Introduced(PlatformName.iOS, 5, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
        [Deprecated(PlatformName.iOS, 6, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
        [Introduced(PlatformName.MacOSX, 10, 7, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
        [Deprecated(PlatformName.MacOSX, 10, 8, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
        [Field("kCFURLUbiquitousItemPercentUploadedKey", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemPercentUploadedKey { get; }

        // extern const CFStringRef kCFURLUbiquitousItemDownloadingStatusKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("kCFURLUbiquitousItemDownloadingStatusKey", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemDownloadingStatusKey { get; }

        // extern const CFStringRef kCFURLUbiquitousItemDownloadingErrorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("kCFURLUbiquitousItemDownloadingErrorKey", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemDownloadingErrorKey { get; }

        // extern const CFStringRef kCFURLUbiquitousItemUploadingErrorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("kCFURLUbiquitousItemUploadingErrorKey", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemUploadingErrorKey { get; }

        // extern const CFStringRef kCFURLUbiquitousItemDownloadingStatusNotDownloaded __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("kCFURLUbiquitousItemDownloadingStatusNotDownloaded", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemDownloadingStatusNotDownloaded { get; }

        // extern const CFStringRef kCFURLUbiquitousItemDownloadingStatusDownloaded __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("kCFURLUbiquitousItemDownloadingStatusDownloaded", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemDownloadingStatusDownloaded { get; }

        // extern const CFStringRef kCFURLUbiquitousItemDownloadingStatusCurrent __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("kCFURLUbiquitousItemDownloadingStatusCurrent", "__Internal")]
        unsafe CFStringRef* kCFURLUbiquitousItemDownloadingStatusCurrent { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFRunLoopMode kCFRunLoopDefaultMode;
        [Field("kCFRunLoopDefaultMode", "__Internal")]
        unsafe CFRunLoopMode* kCFRunLoopDefaultMode { get; }

        // extern const CFRunLoopMode kCFRunLoopCommonModes;
        [Field("kCFRunLoopCommonModes", "__Internal")]
        unsafe CFRunLoopMode* kCFRunLoopCommonModes { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef kCFSocketCommandKey;
        [Field("kCFSocketCommandKey", "__Internal")]
        unsafe CFStringRef* kCFSocketCommandKey { get; }

        // extern const CFStringRef kCFSocketNameKey;
        [Field("kCFSocketNameKey", "__Internal")]
        unsafe CFStringRef* kCFSocketNameKey { get; }

        // extern const CFStringRef kCFSocketValueKey;
        [Field("kCFSocketValueKey", "__Internal")]
        unsafe CFStringRef* kCFSocketValueKey { get; }

        // extern const CFStringRef kCFSocketResultKey;
        [Field("kCFSocketResultKey", "__Internal")]
        unsafe CFStringRef* kCFSocketResultKey { get; }

        // extern const CFStringRef kCFSocketErrorKey;
        [Field("kCFSocketErrorKey", "__Internal")]
        unsafe CFStringRef* kCFSocketErrorKey { get; }

        // extern const CFStringRef kCFSocketRegisterCommand;
        [Field("kCFSocketRegisterCommand", "__Internal")]
        unsafe CFStringRef* kCFSocketRegisterCommand { get; }

        // extern const CFStringRef kCFSocketRetrieveCommand;
        [Field("kCFSocketRetrieveCommand", "__Internal")]
        unsafe CFStringRef* kCFSocketRetrieveCommand { get; }
    }

    // typedef void (^os_block_t)();
    delegate void os_block_t();

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern char * optarg;
        [Field("optarg", "__Internal")]
        unsafe sbyte* optarg { get; }

        // extern int optind;
        [Field("optind", "__Internal")]
        int optind { get; }

        // extern int opterr;
        [Field("opterr", "__Internal")]
        int opterr { get; }

        // extern int optopt;
        [Field("optopt", "__Internal")]
        int optopt { get; }

        // extern char * suboptarg;
        [Field("suboptarg", "__Internal")]
        unsafe sbyte* suboptarg { get; }

        // extern int optreset;
        [Field("optreset", "__Internal")]
        int optreset { get; }
    }

    // @protocol NSObject
    [Protocol, Model]
    interface NSObject
    {
        // @required -(BOOL)isEqual:(id)object;
        [Abstract]
        [Export("isEqual:")]
        bool IsEqual(NSObject @object);

        // @required @property (readonly) NSUInteger hash;
        [Abstract]
        [Export("hash")]
        nuint Hash { get; }

        // @required @property (readonly) Class superclass;
        [Abstract]
        [Export("superclass")]
        Class Superclass { get; }

        // @required -(Class)class;
        [Abstract]
        [Export("class")]
        [Verify(MethodToProperty)]
        Class Class { get; }

        // @required -(instancetype)self;
        [Abstract]
        [Export("self")]
        NSObject Self();

        // @required -(id)performSelector:(SEL)aSelector;
        [Abstract]
        [Export("performSelector:")]
        NSObject PerformSelector(Selector aSelector);

        // @required -(id)performSelector:(SEL)aSelector withObject:(id)object;
        [Abstract]
        [Export("performSelector:withObject:")]
        NSObject PerformSelector(Selector aSelector, NSObject @object);

        // @required -(id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;
        [Abstract]
        [Export("performSelector:withObject:withObject:")]
        NSObject PerformSelector(Selector aSelector, NSObject object1, NSObject object2);

        // @required -(BOOL)isProxy;
        [Abstract]
        [Export("isProxy")]
        [Verify(MethodToProperty)]
        bool IsProxy { get; }

        // @required -(BOOL)isKindOfClass:(Class)aClass;
        [Abstract]
        [Export("isKindOfClass:")]
        bool IsKindOfClass(Class aClass);

        // @required -(BOOL)isMemberOfClass:(Class)aClass;
        [Abstract]
        [Export("isMemberOfClass:")]
        bool IsMemberOfClass(Class aClass);

        // @required -(BOOL)conformsToProtocol:(Protocol *)aProtocol;
        [Abstract]
        [Export("conformsToProtocol:")]
        bool ConformsToProtocol(Protocol aProtocol);

        // @required -(BOOL)respondsToSelector:(SEL)aSelector;
        [Abstract]
        [Export("respondsToSelector:")]
        bool RespondsToSelector(Selector aSelector);

        // @required -(instancetype)retain;
        [Abstract]
        [Export("retain")]
        NSObject Retain();

        // @required -(void)release;
        [Abstract]
        [Export("release")]
        void Release();

        // @required -(instancetype)autorelease;
        [Abstract]
        [Export("autorelease")]
        NSObject Autorelease();

        // @required -(NSUInteger)retainCount;
        [Abstract]
        [Export("retainCount")]
        [Verify(MethodToProperty)]
        nuint RetainCount { get; }

        // @required -(struct _NSZone *)zone;
        [Abstract]
        [Export("zone")]
        [Verify(MethodToProperty)]
        unsafe _NSZone* Zone { get; }

        // @required @property (readonly, copy) NSString * description;
        [Abstract]
        [Export("description")]
        string Description { get; }

        // @optional @property (readonly, copy) NSString * debugDescription;
        [Export("debugDescription")]
        string DebugDescription { get; }
    }

    // @interface NSObject <NSObject>
    [Watch(1, 0), TV(9, 0), Mac(10, 0), iOS(2, 0)]
    [BaseType(typeof(NSObject))]
    interface NSObject
    {
        // +(void)load;
        [Static]
        [Export("load")]
        void Load();

        // +(void)initialize;
        [Static]
        [Export("initialize")]
        void Initialize();

        // +(instancetype)new;
        [Static]
        [Export("new")]
        NSObject New();

        // +(instancetype)allocWithZone:(struct _NSZone *)zone;
        [Static]
        [Export("allocWithZone:")]
        unsafe NSObject AllocWithZone(_NSZone* zone);

        // +(instancetype)alloc;
        [Static]
        [Export("alloc")]
        NSObject Alloc();

        // -(void)dealloc;
        [Export("dealloc")]
        void Dealloc();

        // -(void)finalize __attribute__((deprecated("Objective-C garbage collection is no longer supported")));
        [Export("finalize")]
        void Finalize();

        // -(id)copy;
        [Export("copy")]
        [Verify(MethodToProperty)]
        NSObject Copy { get; }

        // -(id)mutableCopy;
        [Export("mutableCopy")]
        [Verify(MethodToProperty)]
        NSObject MutableCopy { get; }

        // +(id)copyWithZone:(struct _NSZone *)zone;
        [Static]
        [Export("copyWithZone:")]
        unsafe NSObject CopyWithZone(_NSZone* zone);

        // +(id)mutableCopyWithZone:(struct _NSZone *)zone;
        [Static]
        [Export("mutableCopyWithZone:")]
        unsafe NSObject MutableCopyWithZone(_NSZone* zone);

        // +(BOOL)instancesRespondToSelector:(SEL)aSelector;
        [Static]
        [Export("instancesRespondToSelector:")]
        bool InstancesRespondToSelector(Selector aSelector);

        // +(BOOL)conformsToProtocol:(Protocol *)protocol;
        [Static]
        [Export("conformsToProtocol:")]
        bool ConformsToProtocol(Protocol protocol);

        // -(IMP)methodForSelector:(SEL)aSelector;
        [Export("methodForSelector:")]
        unsafe IMP* MethodForSelector(Selector aSelector);

        // +(IMP)instanceMethodForSelector:(SEL)aSelector;
        [Static]
        [Export("instanceMethodForSelector:")]
        unsafe IMP* InstanceMethodForSelector(Selector aSelector);

        // -(void)doesNotRecognizeSelector:(SEL)aSelector;
        [Export("doesNotRecognizeSelector:")]
        void DoesNotRecognizeSelector(Selector aSelector);

        // -(id)forwardingTargetForSelector:(SEL)aSelector __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(1, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("forwardingTargetForSelector:")]
        NSObject ForwardingTargetForSelector(Selector aSelector);

        // -(void)forwardInvocation:(NSInvocation *)anInvocation;
        [Export("forwardInvocation:")]
        void ForwardInvocation(NSInvocation anInvocation);

        // -(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector;
        [Export("methodSignatureForSelector:")]
        NSMethodSignature MethodSignatureForSelector(Selector aSelector);

        // +(NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector;
        [Static]
        [Export("instanceMethodSignatureForSelector:")]
        NSMethodSignature InstanceMethodSignatureForSelector(Selector aSelector);

        // +(BOOL)isSubclassOfClass:(Class)aClass;
        [Static]
        [Export("isSubclassOfClass:")]
        bool IsSubclassOfClass(Class aClass);

        // +(BOOL)resolveClassMethod:(SEL)sel __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(1, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("resolveClassMethod:")]
        bool ResolveClassMethod(Selector sel);

        // +(BOOL)resolveInstanceMethod:(SEL)sel __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(1, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("resolveInstanceMethod:")]
        bool ResolveInstanceMethod(Selector sel);

        // +(NSUInteger)hash;
        [Static]
        [Export("hash")]
        [Verify(MethodToProperty)]
        nuint Hash { get; }

        // +(Class)superclass;
        [Static]
        [Export("superclass")]
        [Verify(MethodToProperty)]
        Class Superclass { get; }

        // +(Class)class;
        [Static]
        [Export("class")]
        [Verify(MethodToProperty)]
        Class Class { get; }

        // +(NSString *)description;
        [Static]
        [Export("description")]
        [Verify(MethodToProperty)]
        string Description { get; }

        // +(NSString *)debugDescription;
        [Static]
        [Export("debugDescription")]
        [Verify(MethodToProperty)]
        string DebugDescription { get; }
    }

    // @protocol OS_dispatch_object <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface OS_dispatch_object
    {
    }

    // typedef void (^dispatch_block_t)();
    delegate void dispatch_block_t();

    // @protocol OS_dispatch_queue <OS_dispatch_object>
    [Protocol, Model]
    interface OS_dispatch_queue : IOS_dispatch_object
    {
    }

    // @protocol OS_dispatch_queue_global <OS_dispatch_queue>
    [Protocol, Model]
    interface OS_dispatch_queue_global : IOS_dispatch_queue
    {
    }

    // @protocol OS_dispatch_queue_serial <OS_dispatch_queue>
    [Protocol, Model]
    interface OS_dispatch_queue_serial : IOS_dispatch_queue
    {
    }

    // @protocol OS_dispatch_queue_main <OS_dispatch_queue_serial>
    [Protocol, Model]
    interface OS_dispatch_queue_main : IOS_dispatch_queue_serial
    {
    }

    // @protocol OS_dispatch_queue_concurrent <OS_dispatch_queue>
    [Protocol, Model]
    interface OS_dispatch_queue_concurrent : IOS_dispatch_queue
    {
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern struct dispatch_queue_s _dispatch_main_q __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("_dispatch_main_q", "__Internal")]
        dispatch_queue_s _dispatch_main_q { get; }
    }

    // @protocol OS_dispatch_queue_attr <OS_dispatch_object>
    [Protocol, Model]
    interface OS_dispatch_queue_attr : IOS_dispatch_object
    {
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern struct dispatch_queue_attr_s _dispatch_queue_attr_concurrent __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(4, 3)]
        [Field("_dispatch_queue_attr_concurrent", "__Internal")]
        dispatch_queue_attr_s _dispatch_queue_attr_concurrent { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern security_token_t KERNEL_SECURITY_TOKEN;
        [Field("KERNEL_SECURITY_TOKEN", "__Internal")]
        security_token_t KERNEL_SECURITY_TOKEN { get; }

        // extern audit_token_t KERNEL_AUDIT_TOKEN;
        [Field("KERNEL_AUDIT_TOKEN", "__Internal")]
        audit_token_t KERNEL_AUDIT_TOKEN { get; }
    }

    // @protocol OS_dispatch_source <OS_dispatch_object>
    [Protocol, Model]
    interface OS_dispatch_source : IOS_dispatch_object
    {
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const struct dispatch_source_type_s _dispatch_source_type_data_add __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("_dispatch_source_type_data_add", "__Internal")]
        dispatch_source_type_s _dispatch_source_type_data_add { get; }

        // extern const struct dispatch_source_type_s _dispatch_source_type_data_or __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("_dispatch_source_type_data_or", "__Internal")]
        dispatch_source_type_s _dispatch_source_type_data_or { get; }

        // extern const struct dispatch_source_type_s _dispatch_source_type_data_replace __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("_dispatch_source_type_data_replace", "__Internal")]
        dispatch_source_type_s _dispatch_source_type_data_replace { get; }

        // extern const struct dispatch_source_type_s _dispatch_source_type_mach_send __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("_dispatch_source_type_mach_send", "__Internal")]
        dispatch_source_type_s _dispatch_source_type_mach_send { get; }

        // extern const struct dispatch_source_type_s _dispatch_source_type_mach_recv __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("_dispatch_source_type_mach_recv", "__Internal")]
        dispatch_source_type_s _dispatch_source_type_mach_recv { get; }

        // extern const struct dispatch_source_type_s _dispatch_source_type_memorypressure __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(8, 0)]
        [Field("_dispatch_source_type_memorypressure", "__Internal")]
        dispatch_source_type_s _dispatch_source_type_memorypressure { get; }

        // extern const struct dispatch_source_type_s _dispatch_source_type_proc __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("_dispatch_source_type_proc", "__Internal")]
        dispatch_source_type_s _dispatch_source_type_proc { get; }

        // extern const struct dispatch_source_type_s _dispatch_source_type_read __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("_dispatch_source_type_read", "__Internal")]
        dispatch_source_type_s _dispatch_source_type_read { get; }

        // extern const struct dispatch_source_type_s _dispatch_source_type_signal __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("_dispatch_source_type_signal", "__Internal")]
        dispatch_source_type_s _dispatch_source_type_signal { get; }

        // extern const struct dispatch_source_type_s _dispatch_source_type_timer __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("_dispatch_source_type_timer", "__Internal")]
        dispatch_source_type_s _dispatch_source_type_timer { get; }

        // extern const struct dispatch_source_type_s _dispatch_source_type_vnode __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("_dispatch_source_type_vnode", "__Internal")]
        dispatch_source_type_s _dispatch_source_type_vnode { get; }

        // extern const struct dispatch_source_type_s _dispatch_source_type_write __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("_dispatch_source_type_write", "__Internal")]
        dispatch_source_type_s _dispatch_source_type_write { get; }
    }

    // @protocol OS_dispatch_group <OS_dispatch_object>
    [Protocol, Model]
    interface OS_dispatch_group : IOS_dispatch_object
    {
    }

    // @protocol OS_dispatch_semaphore <OS_dispatch_object>
    [Protocol, Model]
    interface OS_dispatch_semaphore : IOS_dispatch_object
    {
    }

    // @protocol OS_dispatch_data <OS_dispatch_object>
    [Protocol, Model]
    interface OS_dispatch_data : IOS_dispatch_object
    {
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern struct dispatch_data_s _dispatch_data_empty __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("_dispatch_data_empty", "__Internal")]
        dispatch_data_s _dispatch_data_empty { get; }

        // extern const dispatch_block_t _Nonnull _dispatch_data_destructor_free __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("_dispatch_data_destructor_free", "__Internal")]
        dispatch_block_t _dispatch_data_destructor_free { get; }

        // extern const dispatch_block_t _Nonnull _dispatch_data_destructor_munmap __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(7, 0)]
        [Field("_dispatch_data_destructor_munmap", "__Internal")]
        dispatch_block_t _dispatch_data_destructor_munmap { get; }
    }

    // typedef _Bool (^dispatch_data_applier_t)(dispatch_data_t _Nonnull, size_t, const void * _Nonnull, size_t);
    unsafe delegate bool dispatch_data_applier_t(OS_dispatch_data arg0, nuint arg1, void* arg2, nuint arg3);

    // @protocol OS_dispatch_io <OS_dispatch_object>
    [Protocol, Model]
    interface OS_dispatch_io : IOS_dispatch_object
    {
    }

    // typedef void (^dispatch_io_handler_t)(_Bool, dispatch_data_t _Nullable, int);
    delegate void dispatch_io_handler_t(bool arg0, [NullAllowed] OS_dispatch_data arg1, int arg2);

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern CFStreamPropertyKey  _Null_unspecified const kCFStreamPropertyDataWritten;
        [Field("kCFStreamPropertyDataWritten", "__Internal")]
        unsafe CFStreamPropertyKey* kCFStreamPropertyDataWritten { get; }

        // extern CFStreamPropertyKey  _Null_unspecified const kCFStreamPropertyAppendToFile;
        [Field("kCFStreamPropertyAppendToFile", "__Internal")]
        unsafe CFStreamPropertyKey* kCFStreamPropertyAppendToFile { get; }

        // extern CFStreamPropertyKey  _Null_unspecified const kCFStreamPropertyFileCurrentOffset;
        [Field("kCFStreamPropertyFileCurrentOffset", "__Internal")]
        unsafe CFStreamPropertyKey* kCFStreamPropertyFileCurrentOffset { get; }

        // extern CFStreamPropertyKey  _Null_unspecified const kCFStreamPropertySocketNativeHandle;
        [Field("kCFStreamPropertySocketNativeHandle", "__Internal")]
        unsafe CFStreamPropertyKey* kCFStreamPropertySocketNativeHandle { get; }

        // extern CFStreamPropertyKey  _Null_unspecified const kCFStreamPropertySocketRemoteHostName;
        [Field("kCFStreamPropertySocketRemoteHostName", "__Internal")]
        unsafe CFStreamPropertyKey* kCFStreamPropertySocketRemoteHostName { get; }

        // extern CFStreamPropertyKey  _Null_unspecified const kCFStreamPropertySocketRemotePortNumber;
        [Field("kCFStreamPropertySocketRemotePortNumber", "__Internal")]
        unsafe CFStreamPropertyKey* kCFStreamPropertySocketRemotePortNumber { get; }

        // extern const int kCFStreamErrorDomainSOCKS __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamErrorDomainSOCKS", "__Internal")]
        int kCFStreamErrorDomainSOCKS { get; }

        // extern CFStringRef  _Nonnull const kCFStreamPropertySOCKSProxy __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertySOCKSProxy", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySOCKSProxy { get; }

        // extern CFStringRef  _Nonnull const kCFStreamPropertySOCKSProxyHost __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertySOCKSProxyHost", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySOCKSProxyHost { get; }

        // extern CFStringRef  _Nonnull const kCFStreamPropertySOCKSProxyPort __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertySOCKSProxyPort", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySOCKSProxyPort { get; }

        // extern CFStringRef  _Nonnull const kCFStreamPropertySOCKSVersion __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertySOCKSVersion", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySOCKSVersion { get; }

        // extern CFStringRef  _Nonnull const kCFStreamSocketSOCKSVersion4 __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamSocketSOCKSVersion4", "__Internal")]
        unsafe CFStringRef* kCFStreamSocketSOCKSVersion4 { get; }

        // extern CFStringRef  _Nonnull const kCFStreamSocketSOCKSVersion5 __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamSocketSOCKSVersion5", "__Internal")]
        unsafe CFStringRef* kCFStreamSocketSOCKSVersion5 { get; }

        // extern CFStringRef  _Nonnull const kCFStreamPropertySOCKSUser __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertySOCKSUser", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySOCKSUser { get; }

        // extern CFStringRef  _Nonnull const kCFStreamPropertySOCKSPassword __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertySOCKSPassword", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySOCKSPassword { get; }

        // extern const int kCFStreamErrorDomainSSL __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamErrorDomainSSL", "__Internal")]
        int kCFStreamErrorDomainSSL { get; }

        // extern CFStringRef  _Nonnull const kCFStreamPropertySocketSecurityLevel __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertySocketSecurityLevel", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySocketSecurityLevel { get; }

        // extern CFStringRef  _Nonnull const kCFStreamSocketSecurityLevelNone __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamSocketSecurityLevelNone", "__Internal")]
        unsafe CFStringRef* kCFStreamSocketSecurityLevelNone { get; }

        // extern CFStringRef  _Nonnull const kCFStreamSocketSecurityLevelSSLv2 __attribute__((availability(ios, introduced=2_0, deprecated=10_0)));
        [Introduced(PlatformName.iOS, 2, 0)]
        [Deprecated(PlatformName.iOS, 10, 0)]
        [Field("kCFStreamSocketSecurityLevelSSLv2", "__Internal")]
        unsafe CFStringRef* kCFStreamSocketSecurityLevelSSLv2 { get; }

        // extern CFStringRef  _Nonnull const kCFStreamSocketSecurityLevelSSLv3 __attribute__((availability(ios, introduced=2_0, deprecated=10_0)));
        [Introduced(PlatformName.iOS, 2, 0)]
        [Deprecated(PlatformName.iOS, 10, 0)]
        [Field("kCFStreamSocketSecurityLevelSSLv3", "__Internal")]
        unsafe CFStringRef* kCFStreamSocketSecurityLevelSSLv3 { get; }

        // extern CFStringRef  _Nonnull const kCFStreamSocketSecurityLevelTLSv1 __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamSocketSecurityLevelTLSv1", "__Internal")]
        unsafe CFStringRef* kCFStreamSocketSecurityLevelTLSv1 { get; }

        // extern CFStringRef  _Nonnull const kCFStreamSocketSecurityLevelNegotiatedSSL __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamSocketSecurityLevelNegotiatedSSL", "__Internal")]
        unsafe CFStringRef* kCFStreamSocketSecurityLevelNegotiatedSSL { get; }

        // extern CFStringRef  _Nonnull const kCFStreamPropertyShouldCloseNativeSocket __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertyShouldCloseNativeSocket", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyShouldCloseNativeSocket { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFSetCallBacks kCFTypeSetCallBacks;
        [Field("kCFTypeSetCallBacks", "__Internal")]
        CFSetCallBacks kCFTypeSetCallBacks { get; }

        // extern const CFSetCallBacks kCFCopyStringSetCallBacks;
        [Field("kCFCopyStringSetCallBacks", "__Internal")]
        CFSetCallBacks kCFCopyStringSetCallBacks { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef kCFURLFileExists __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use CFURLResourceIsReachable instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use CFURLResourceIsReachable instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use CFURLResourceIsReachable instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use CFURLResourceIsReachable instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use CFURLResourceIsReachable instead.")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use CFURLResourceIsReachable instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use CFURLResourceIsReachable instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use CFURLResourceIsReachable instead.")]
        [Field("kCFURLFileExists", "__Internal")]
        unsafe CFStringRef* kCFURLFileExists { get; }

        // extern const CFStringRef kCFURLFileDirectoryContents __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use the CFURLEnumerator API instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use the CFURLEnumerator API instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use the CFURLEnumerator API instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use the CFURLEnumerator API instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use the CFURLEnumerator API instead.")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use the CFURLEnumerator API instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use the CFURLEnumerator API instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use the CFURLEnumerator API instead.")]
        [Field("kCFURLFileDirectoryContents", "__Internal")]
        unsafe CFStringRef* kCFURLFileDirectoryContents { get; }

        // extern const CFStringRef kCFURLFileLength __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
        [Field("kCFURLFileLength", "__Internal")]
        unsafe CFStringRef* kCFURLFileLength { get; }

        // extern const CFStringRef kCFURLFileLastModificationTime __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
        [Field("kCFURLFileLastModificationTime", "__Internal")]
        unsafe CFStringRef* kCFURLFileLastModificationTime { get; }

        // extern const CFStringRef kCFURLFilePOSIXMode __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Field("kCFURLFilePOSIXMode", "__Internal")]
        unsafe CFStringRef* kCFURLFilePOSIXMode { get; }

        // extern const CFStringRef kCFURLFileOwnerID __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
        [Field("kCFURLFileOwnerID", "__Internal")]
        unsafe CFStringRef* kCFURLFileOwnerID { get; }

        // extern const CFStringRef kCFURLHTTPStatusCode __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use NSHTTPURLResponse methods instead.")]
        [Field("kCFURLHTTPStatusCode", "__Internal")]
        unsafe CFStringRef* kCFURLHTTPStatusCode { get; }

        // extern const CFStringRef kCFURLHTTPStatusLine __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use NSHTTPURLResponse methods instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use NSHTTPURLResponse methods instead.")]
        [Field("kCFURLHTTPStatusLine", "__Internal")]
        unsafe CFStringRef* kCFURLHTTPStatusLine { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef kCFBundleInfoDictionaryVersionKey;
        [Field("kCFBundleInfoDictionaryVersionKey", "__Internal")]
        unsafe CFStringRef* kCFBundleInfoDictionaryVersionKey { get; }

        // extern const CFStringRef kCFBundleExecutableKey;
        [Field("kCFBundleExecutableKey", "__Internal")]
        unsafe CFStringRef* kCFBundleExecutableKey { get; }

        // extern const CFStringRef kCFBundleIdentifierKey;
        [Field("kCFBundleIdentifierKey", "__Internal")]
        unsafe CFStringRef* kCFBundleIdentifierKey { get; }

        // extern const CFStringRef kCFBundleVersionKey;
        [Field("kCFBundleVersionKey", "__Internal")]
        unsafe CFStringRef* kCFBundleVersionKey { get; }

        // extern const CFStringRef kCFBundleDevelopmentRegionKey;
        [Field("kCFBundleDevelopmentRegionKey", "__Internal")]
        unsafe CFStringRef* kCFBundleDevelopmentRegionKey { get; }

        // extern const CFStringRef kCFBundleNameKey;
        [Field("kCFBundleNameKey", "__Internal")]
        unsafe CFStringRef* kCFBundleNameKey { get; }

        // extern const CFStringRef kCFBundleLocalizationsKey;
        [Field("kCFBundleLocalizationsKey", "__Internal")]
        unsafe CFStringRef* kCFBundleLocalizationsKey { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef kCFPlugInDynamicRegistrationKey;
        [Field("kCFPlugInDynamicRegistrationKey", "__Internal")]
        unsafe CFStringRef* kCFPlugInDynamicRegistrationKey { get; }

        // extern const CFStringRef kCFPlugInDynamicRegisterFunctionKey;
        [Field("kCFPlugInDynamicRegisterFunctionKey", "__Internal")]
        unsafe CFStringRef* kCFPlugInDynamicRegisterFunctionKey { get; }

        // extern const CFStringRef kCFPlugInUnloadFunctionKey;
        [Field("kCFPlugInUnloadFunctionKey", "__Internal")]
        unsafe CFStringRef* kCFPlugInUnloadFunctionKey { get; }

        // extern const CFStringRef kCFPlugInFactoriesKey;
        [Field("kCFPlugInFactoriesKey", "__Internal")]
        unsafe CFStringRef* kCFPlugInFactoriesKey { get; }

        // extern const CFStringRef kCFPlugInTypesKey;
        [Field("kCFPlugInTypesKey", "__Internal")]
        unsafe CFStringRef* kCFPlugInTypesKey { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern double NSFoundationVersionNumber;
        [Field("NSFoundationVersionNumber", "__Internal")]
        double NSFoundationVersionNumber { get; }
    }

    // typedef NSComparisonResult (^NSComparator)(id _Nonnull, id _Nonnull);
    delegate NSComparisonResult NSComparator(NSObject arg0, NSObject arg1);

    // @protocol NSCopying
    [Protocol, Model]
    interface NSCopying
    {
        // @required -(id _Nonnull)copyWithZone:(NSZone * _Nullable)zone;
        [Abstract]
        [Export("copyWithZone:")]
        unsafe NSObject CopyWithZone([NullAllowed] NSZone* zone);
    }

    // @protocol NSMutableCopying
    [Protocol, Model]
    interface NSMutableCopying
    {
        // @required -(id _Nonnull)mutableCopyWithZone:(NSZone * _Nullable)zone;
        [Abstract]
        [Export("mutableCopyWithZone:")]
        unsafe NSObject MutableCopyWithZone([NullAllowed] NSZone* zone);
    }

    // @protocol NSCoding
    [Protocol, Model]
    interface NSCoding
    {
        // @required -(void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
        [Abstract]
        [Export("encodeWithCoder:")]
        void EncodeWithCoder(NSCoder aCoder);

        // @required -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder;
        [Abstract]
        [Export("initWithCoder:")]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @protocol NSSecureCoding <NSCoding>
    [Protocol, Model]
    interface NSSecureCoding : INSCoding
    {
        // @required @property (readonly, class) BOOL supportsSecureCoding;
        [Static, Abstract]
        [Export("supportsSecureCoding")]
        bool SupportsSecureCoding { get; }
    }

    // @interface NSCoderMethods (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSCoderMethods
    {
        // +(NSInteger)version;
        // +(void)setVersion:(NSInteger)aVersion;
        [Static]
        [Export("version")]
        [Verify(MethodToProperty)]
        nint Version { get; set; }

        // @property (readonly) Class _Nonnull classForCoder;
        [Export("classForCoder")]
        Class ClassForCoder { get; }

        // -(id _Nullable)replacementObjectForCoder:(NSCoder * _Nonnull)aCoder;
        [Export("replacementObjectForCoder:")]
        [return: NullAllowed]
        NSObject ReplacementObjectForCoder(NSCoder aCoder);

        // -(id _Nullable)awakeAfterUsingCoder:(NSCoder * _Nonnull)aDecoder __attribute__((ns_returns_retained)) __attribute__((ns_consumes_self));
        [Export("awakeAfterUsingCoder:")]
        [return: NullAllowed]
        NSObject AwakeAfterUsingCoder(NSCoder aDecoder);
    }

    // @protocol NSDiscardableContent
    [Protocol, Model]
    interface NSDiscardableContent
    {
        // @required -(BOOL)beginContentAccess;
        [Abstract]
        [Export("beginContentAccess")]
        [Verify(MethodToProperty)]
        bool BeginContentAccess { get; }

        // @required -(void)endContentAccess;
        [Abstract]
        [Export("endContentAccess")]
        void EndContentAccess();

        // @required -(void)discardContentIfPossible;
        [Abstract]
        [Export("discardContentIfPossible")]
        void DiscardContentIfPossible();

        // @required -(BOOL)isContentDiscarded;
        [Abstract]
        [Export("isContentDiscarded")]
        [Verify(MethodToProperty)]
        bool IsContentDiscarded { get; }
    }

    // @interface NSDiscardableContentProxy (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSDiscardableContentProxy
    {
        // @property (readonly, retain) id _Nonnull autoContentAccessingProxy __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("autoContentAccessingProxy", ArgumentSemantic.Retain)]
        NSObject AutoContentAccessingProxy { get; }
    }

    // @protocol NSFastEnumeration
    [Protocol, Model]
    interface NSFastEnumeration
    {
        // @required -(NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState * _Nonnull)state objects:(id  _Nullable * _Nonnull)buffer count:(NSUInteger)len;
        [Abstract]
        [Export("countByEnumeratingWithState:objects:count:")]
        unsafe nuint Objects(NSFastEnumerationState* state, NSObject[] buffer, nuint len);
    }

    // audit-objc-generics: @interface NSEnumerator<ObjectType> : NSObject <NSFastEnumeration>
    [BaseType(typeof(NSObject))]
    interface NSEnumerator : INSFastEnumeration
    {
        // -(ObjectType _Nullable)nextObject;
        [NullAllowed, Export("nextObject")]
        [Verify(MethodToProperty)]
        NSObject NextObject { get; }
    }

    // @interface NSExtendedEnumerator (NSEnumerator)
    [Category]
    [BaseType(typeof(NSEnumerator))]
    interface NSEnumerator_NSExtendedEnumerator
    {
        // @property (readonly, copy) NSArray<ObjectType> * _Nonnull allObjects;
        [Export("allObjects", ArgumentSemantic.Copy)]
        NSObject[] AllObjects { get; }
    }

    // @interface NSValue : NSObject <NSCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSValue : INSCopying, INSSecureCoding
    {
        // -(void)getValue:(void * _Nonnull)value size:(NSUInteger)size __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("getValue:size:")]
        unsafe void GetValue(void* value, nuint size);

        // @property (readonly) const char * _Nonnull objCType __attribute__((objc_returns_inner_pointer));
        [Export("objCType")]
        unsafe sbyte* ObjCType { get; }

        // -(instancetype _Nonnull)initWithBytes:(const void * _Nonnull)value objCType:(const char * _Nonnull)type __attribute__((objc_designated_initializer));
        [Export("initWithBytes:objCType:")]
        [DesignatedInitializer]
        unsafe IntPtr Constructor(void* value, sbyte* type);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @interface NSValueCreation (NSValue)
    [Category]
    [BaseType(typeof(NSValue))]
    interface NSValue_NSValueCreation
    {
        // +(NSValue * _Nonnull)valueWithBytes:(const void * _Nonnull)value objCType:(const char * _Nonnull)type;
        [Static]
        [Export("valueWithBytes:objCType:")]
        unsafe NSValue ValueWithBytes(void* value, sbyte* type);

        // +(NSValue * _Nonnull)value:(const void * _Nonnull)value withObjCType:(const char * _Nonnull)type;
        [Static]
        [Export("value:withObjCType:")]
        unsafe NSValue Value(void* value, sbyte* type);
    }

    // @interface NSValueExtensionMethods (NSValue)
    [Category]
    [BaseType(typeof(NSValue))]
    interface NSValue_NSValueExtensionMethods
    {
        // +(NSValue * _Nonnull)valueWithNonretainedObject:(id _Nullable)anObject;
        [Static]
        [Export("valueWithNonretainedObject:")]
        NSValue ValueWithNonretainedObject([NullAllowed] NSObject anObject);

        // @property (readonly) id _Nullable nonretainedObjectValue;
        [NullAllowed, Export("nonretainedObjectValue")]
        NSObject NonretainedObjectValue { get; }

        // +(NSValue * _Nonnull)valueWithPointer:(const void * _Nullable)pointer;
        [Static]
        [Export("valueWithPointer:")]
        unsafe NSValue ValueWithPointer([NullAllowed] void* pointer);

        // @property (readonly) void * _Nullable pointerValue;
        [NullAllowed, Export("pointerValue")]
        unsafe void* PointerValue { get; }

        // -(BOOL)isEqualToValue:(NSValue * _Nonnull)value;
        [Export("isEqualToValue:")]
        bool IsEqualToValue(NSValue value);
    }

    // @interface NSNumber : NSValue
    [BaseType(typeof(NSValue))]
    interface NSNumber
    {
        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);

        // -(NSNumber * _Nonnull)initWithChar:(char)value __attribute__((objc_designated_initializer));
        [Export("initWithChar:")]
        [DesignatedInitializer]
        IntPtr Constructor(sbyte value);

        // -(NSNumber * _Nonnull)initWithUnsignedChar:(unsigned char)value __attribute__((objc_designated_initializer));
        [Export("initWithUnsignedChar:")]
        [DesignatedInitializer]
        IntPtr Constructor(byte value);

        // -(NSNumber * _Nonnull)initWithShort:(short)value __attribute__((objc_designated_initializer));
        [Export("initWithShort:")]
        [DesignatedInitializer]
        IntPtr Constructor(short value);

        // -(NSNumber * _Nonnull)initWithUnsignedShort:(unsigned short)value __attribute__((objc_designated_initializer));
        [Export("initWithUnsignedShort:")]
        [DesignatedInitializer]
        IntPtr Constructor(ushort value);

        // -(NSNumber * _Nonnull)initWithInt:(int)value __attribute__((objc_designated_initializer));
        [Export("initWithInt:")]
        [DesignatedInitializer]
        IntPtr Constructor(int value);

        // -(NSNumber * _Nonnull)initWithUnsignedInt:(unsigned int)value __attribute__((objc_designated_initializer));
        [Export("initWithUnsignedInt:")]
        [DesignatedInitializer]
        IntPtr Constructor(uint value);

        // -(NSNumber * _Nonnull)initWithLong:(long)value __attribute__((objc_designated_initializer));
        [Export("initWithLong:")]
        [DesignatedInitializer]
        IntPtr Constructor(nint value);

        // -(NSNumber * _Nonnull)initWithUnsignedLong:(unsigned long)value __attribute__((objc_designated_initializer));
        [Export("initWithUnsignedLong:")]
        [DesignatedInitializer]
        IntPtr Constructor(nuint value);

        // -(NSNumber * _Nonnull)initWithLongLong:(long long)value __attribute__((objc_designated_initializer));
        [Export("initWithLongLong:")]
        [DesignatedInitializer]
        IntPtr Constructor(long value);

        // -(NSNumber * _Nonnull)initWithUnsignedLongLong:(unsigned long long)value __attribute__((objc_designated_initializer));
        [Export("initWithUnsignedLongLong:")]
        [DesignatedInitializer]
        IntPtr Constructor(ulong value);

        // -(NSNumber * _Nonnull)initWithFloat:(float)value __attribute__((objc_designated_initializer));
        [Export("initWithFloat:")]
        [DesignatedInitializer]
        IntPtr Constructor(float value);

        // -(NSNumber * _Nonnull)initWithDouble:(double)value __attribute__((objc_designated_initializer));
        [Export("initWithDouble:")]
        [DesignatedInitializer]
        IntPtr Constructor(double value);

        // -(NSNumber * _Nonnull)initWithBool:(BOOL)value __attribute__((objc_designated_initializer));
        [Export("initWithBool:")]
        [DesignatedInitializer]
        IntPtr Constructor(bool value);

        // -(NSNumber * _Nonnull)initWithInteger:(NSInteger)value __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("initWithInteger:")]
        [DesignatedInitializer]
        IntPtr Constructor(nint value);

        // -(NSNumber * _Nonnull)initWithUnsignedInteger:(NSUInteger)value __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("initWithUnsignedInteger:")]
        [DesignatedInitializer]
        IntPtr Constructor(nuint value);

        // @property (readonly) char charValue;
        [Export("charValue")]
        sbyte CharValue { get; }

        // @property (readonly) unsigned char unsignedCharValue;
        [Export("unsignedCharValue")]
        byte UnsignedCharValue { get; }

        // @property (readonly) short shortValue;
        [Export("shortValue")]
        short ShortValue { get; }

        // @property (readonly) unsigned short unsignedShortValue;
        [Export("unsignedShortValue")]
        ushort UnsignedShortValue { get; }

        // @property (readonly) int intValue;
        [Export("intValue")]
        int IntValue { get; }

        // @property (readonly) unsigned int unsignedIntValue;
        [Export("unsignedIntValue")]
        uint UnsignedIntValue { get; }

        // @property (readonly) long longValue;
        [Export("longValue")]
        nint LongValue { get; }

        // @property (readonly) unsigned long unsignedLongValue;
        [Export("unsignedLongValue")]
        nuint UnsignedLongValue { get; }

        // @property (readonly) long long longLongValue;
        [Export("longLongValue")]
        long LongLongValue { get; }

        // @property (readonly) unsigned long long unsignedLongLongValue;
        [Export("unsignedLongLongValue")]
        ulong UnsignedLongLongValue { get; }

        // @property (readonly) float floatValue;
        [Export("floatValue")]
        float FloatValue { get; }

        // @property (readonly) double doubleValue;
        [Export("doubleValue")]
        double DoubleValue { get; }

        // @property (readonly) BOOL boolValue;
        [Export("boolValue")]
        bool BoolValue { get; }

        // @property (readonly) NSInteger integerValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("integerValue")]
        nint IntegerValue { get; }

        // @property (readonly) NSUInteger unsignedIntegerValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("unsignedIntegerValue")]
        nuint UnsignedIntegerValue { get; }

        // @property (readonly, copy) NSString * _Nonnull stringValue;
        [Export("stringValue")]
        string StringValue { get; }

        // -(NSComparisonResult)compare:(NSNumber * _Nonnull)otherNumber;
        [Export("compare:")]
        NSComparisonResult Compare(NSNumber otherNumber);

        // -(BOOL)isEqualToNumber:(NSNumber * _Nonnull)number;
        [Export("isEqualToNumber:")]
        bool IsEqualToNumber(NSNumber number);

        // -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
        [Export("descriptionWithLocale:")]
        string DescriptionWithLocale([NullAllowed] NSObject locale);
    }

    // @interface NSNumberCreation (NSNumber)
    [Category]
    [BaseType(typeof(NSNumber))]
    interface NSNumber_NSNumberCreation
    {
        // +(NSNumber * _Nonnull)numberWithChar:(char)value;
        [Static]
        [Export("numberWithChar:")]
        NSNumber NumberWithChar(sbyte value);

        // +(NSNumber * _Nonnull)numberWithUnsignedChar:(unsigned char)value;
        [Static]
        [Export("numberWithUnsignedChar:")]
        NSNumber NumberWithUnsignedChar(byte value);

        // +(NSNumber * _Nonnull)numberWithShort:(short)value;
        [Static]
        [Export("numberWithShort:")]
        NSNumber NumberWithShort(short value);

        // +(NSNumber * _Nonnull)numberWithUnsignedShort:(unsigned short)value;
        [Static]
        [Export("numberWithUnsignedShort:")]
        NSNumber NumberWithUnsignedShort(ushort value);

        // +(NSNumber * _Nonnull)numberWithInt:(int)value;
        [Static]
        [Export("numberWithInt:")]
        NSNumber NumberWithInt(int value);

        // +(NSNumber * _Nonnull)numberWithUnsignedInt:(unsigned int)value;
        [Static]
        [Export("numberWithUnsignedInt:")]
        NSNumber NumberWithUnsignedInt(uint value);

        // +(NSNumber * _Nonnull)numberWithLong:(long)value;
        [Static]
        [Export("numberWithLong:")]
        NSNumber NumberWithLong(nint value);

        // +(NSNumber * _Nonnull)numberWithUnsignedLong:(unsigned long)value;
        [Static]
        [Export("numberWithUnsignedLong:")]
        NSNumber NumberWithUnsignedLong(nuint value);

        // +(NSNumber * _Nonnull)numberWithLongLong:(long long)value;
        [Static]
        [Export("numberWithLongLong:")]
        NSNumber NumberWithLongLong(long value);

        // +(NSNumber * _Nonnull)numberWithUnsignedLongLong:(unsigned long long)value;
        [Static]
        [Export("numberWithUnsignedLongLong:")]
        NSNumber NumberWithUnsignedLongLong(ulong value);

        // +(NSNumber * _Nonnull)numberWithFloat:(float)value;
        [Static]
        [Export("numberWithFloat:")]
        NSNumber NumberWithFloat(float value);

        // +(NSNumber * _Nonnull)numberWithDouble:(double)value;
        [Static]
        [Export("numberWithDouble:")]
        NSNumber NumberWithDouble(double value);

        // +(NSNumber * _Nonnull)numberWithBool:(BOOL)value;
        [Static]
        [Export("numberWithBool:")]
        NSNumber NumberWithBool(bool value);

        // +(NSNumber * _Nonnull)numberWithInteger:(NSInteger)value __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("numberWithInteger:")]
        NSNumber NumberWithInteger(nint value);

        // +(NSNumber * _Nonnull)numberWithUnsignedInteger:(NSUInteger)value __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("numberWithUnsignedInteger:")]
        NSNumber NumberWithUnsignedInteger(nuint value);
    }

    // @interface NSDeprecated (NSValue)
    [Category]
    [BaseType(typeof(NSValue))]
    interface NSValue_NSDeprecated
    {
        // -(void)getValue:(void * _Nonnull)value;
        [Export("getValue:")]
        unsafe void GetValue(void* value);
    }

    // @interface NSValueRangeExtensions (NSValue)
    [Category]
    [BaseType(typeof(NSValue))]
    interface NSValue_NSValueRangeExtensions
    {
        // +(NSValue * _Nonnull)valueWithRange:(NSRange)range;
        [Static]
        [Export("valueWithRange:")]
        NSValue ValueWithRange(NSRange range);

        // @property (readonly) NSRange rangeValue;
        [Export("rangeValue")]
        NSRange RangeValue { get; }
    }

    // audit-objc-generics: @interface NSArray<__covariant ObjectType> : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
    [BaseType(typeof(NSObject))]
    interface NSArray : INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration
    {
        // @property (readonly) NSUInteger count;
        [Export("count")]
        nuint Count { get; }

        // -(ObjectType _Nonnull)objectAtIndex:(NSUInteger)index;
        [Export("objectAtIndex:")]
        NSObject ObjectAtIndex(nuint index);

        // -(instancetype _Nonnull)initWithObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)cnt __attribute__((objc_designated_initializer));
        [Export("initWithObjects:count:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] NSObject[] objects, nuint cnt);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @interface NSExtendedArray (NSArray)
    [Category]
    [BaseType(typeof(NSArray))]
    interface NSArray_NSExtendedArray
    {
        // -(NSArray<ObjectType> * _Nonnull)arrayByAddingObject:(ObjectType _Nonnull)anObject;
        [Export("arrayByAddingObject:")]
        NSObject[] ArrayByAddingObject(NSObject anObject);

        // -(NSArray<ObjectType> * _Nonnull)arrayByAddingObjectsFromArray:(NSArray<ObjectType> * _Nonnull)otherArray;
        [Export("arrayByAddingObjectsFromArray:")]
        NSObject[] ArrayByAddingObjectsFromArray(NSObject[] otherArray);

        // -(NSString * _Nonnull)componentsJoinedByString:(NSString * _Nonnull)separator;
        [Export("componentsJoinedByString:")]
        string ComponentsJoinedByString(string separator);

        // -(BOOL)containsObject:(ObjectType _Nonnull)anObject;
        [Export("containsObject:")]
        bool ContainsObject(NSObject anObject);

        // @property (readonly, copy) NSString * _Nonnull description;
        [Export("description")]
        string Description { get; }

        // -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
        [Export("descriptionWithLocale:")]
        string DescriptionWithLocale([NullAllowed] NSObject locale);

        // -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale indent:(NSUInteger)level;
        [Export("descriptionWithLocale:indent:")]
        string DescriptionWithLocale([NullAllowed] NSObject locale, nuint level);

        // -(ObjectType _Nullable)firstObjectCommonWithArray:(NSArray<ObjectType> * _Nonnull)otherArray;
        [Export("firstObjectCommonWithArray:")]
        [return: NullAllowed]
        NSObject FirstObjectCommonWithArray(NSObject[] otherArray);

        // -(void)getObjects:(ObjectType  _Nonnull * _Nonnull)objects range:(NSRange)range;
        [Export("getObjects:range:")]
        void GetObjects(NSObject[] objects, NSRange range);

        // -(NSUInteger)indexOfObject:(ObjectType _Nonnull)anObject;
        [Export("indexOfObject:")]
        nuint IndexOfObject(NSObject anObject);

        // -(NSUInteger)indexOfObject:(ObjectType _Nonnull)anObject inRange:(NSRange)range;
        [Export("indexOfObject:inRange:")]
        nuint IndexOfObject(NSObject anObject, NSRange range);

        // -(NSUInteger)indexOfObjectIdenticalTo:(ObjectType _Nonnull)anObject;
        [Export("indexOfObjectIdenticalTo:")]
        nuint IndexOfObjectIdenticalTo(NSObject anObject);

        // -(NSUInteger)indexOfObjectIdenticalTo:(ObjectType _Nonnull)anObject inRange:(NSRange)range;
        [Export("indexOfObjectIdenticalTo:inRange:")]
        nuint IndexOfObjectIdenticalTo(NSObject anObject, NSRange range);

        // -(BOOL)isEqualToArray:(NSArray<ObjectType> * _Nonnull)otherArray;
        [Export("isEqualToArray:")]
        bool IsEqualToArray(NSObject[] otherArray);

        // @property (readonly, nonatomic) ObjectType _Nullable firstObject __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("firstObject")]
        NSObject FirstObject { get; }

        // @property (readonly, nonatomic) ObjectType _Nullable lastObject;
        [NullAllowed, Export("lastObject")]
        NSObject LastObject { get; }

        // -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
        [Export("objectEnumerator")]
        [Verify(MethodToProperty)]
        NSEnumerator<NSObject> ObjectEnumerator { get; }

        // -(NSEnumerator<ObjectType> * _Nonnull)reverseObjectEnumerator;
        [Export("reverseObjectEnumerator")]
        [Verify(MethodToProperty)]
        NSEnumerator<NSObject> ReverseObjectEnumerator { get; }

        // @property (readonly, copy) NSData * _Nonnull sortedArrayHint;
        [Export("sortedArrayHint", ArgumentSemantic.Copy)]
        NSData SortedArrayHint { get; }

        // -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingFunction:(NSInteger (* _Nonnull)(ObjectType _Nonnull, ObjectType _Nonnull, void * _Nullable))comparator context:(void * _Nullable)context;
        [Export("sortedArrayUsingFunction:context:")]
        unsafe NSObject[] SortedArrayUsingFunction(Func<NSObject, NSObject, void*, nint>* comparator, [NullAllowed] void* context);

        // -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingFunction:(NSInteger (* _Nonnull)(ObjectType _Nonnull, ObjectType _Nonnull, void * _Nullable))comparator context:(void * _Nullable)context hint:(NSData * _Nullable)hint;
        [Export("sortedArrayUsingFunction:context:hint:")]
        unsafe NSObject[] SortedArrayUsingFunction(Func<NSObject, NSObject, void*, nint>* comparator, [NullAllowed] void* context, [NullAllowed] NSData hint);

        // -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingSelector:(SEL _Nonnull)comparator;
        [Export("sortedArrayUsingSelector:")]
        NSObject[] SortedArrayUsingSelector(Selector comparator);

        // -(NSArray<ObjectType> * _Nonnull)subarrayWithRange:(NSRange)range;
        [Export("subarrayWithRange:")]
        NSObject[] SubarrayWithRange(NSRange range);

        // -(BOOL)writeToURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("writeToURL:error:")]
        bool WriteToURL(NSUrl url, [NullAllowed] out NSError error);

        // -(void)makeObjectsPerformSelector:(SEL _Nonnull)aSelector;
        [Export("makeObjectsPerformSelector:")]
        void MakeObjectsPerformSelector(Selector aSelector);

        // -(void)makeObjectsPerformSelector:(SEL _Nonnull)aSelector withObject:(id _Nullable)argument;
        [Export("makeObjectsPerformSelector:withObject:")]
        void MakeObjectsPerformSelector(Selector aSelector, [NullAllowed] NSObject argument);

        // -(NSArray<ObjectType> * _Nonnull)objectsAtIndexes:(NSIndexSet * _Nonnull)indexes;
        [Export("objectsAtIndexes:")]
        NSObject[] ObjectsAtIndexes(NSIndexSet indexes);

        // -(ObjectType _Nonnull)objectAtIndexedSubscript:(NSUInteger)idx __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("objectAtIndexedSubscript:")]
        NSObject ObjectAtIndexedSubscript(nuint idx);

        // -(void)enumerateObjectsUsingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateObjectsUsingBlock:")]
        unsafe void EnumerateObjectsUsingBlock(Action<NSObject, nuint, bool*> block);

        // -(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateObjectsWithOptions:usingBlock:")]
        unsafe void EnumerateObjectsWithOptions(NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

        // -(void)enumerateObjectsAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateObjectsAtIndexes:options:usingBlock:")]
        unsafe void EnumerateObjectsAtIndexes(NSIndexSet s, NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

        // -(NSUInteger)indexOfObjectPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexOfObjectPassingTest:")]
        unsafe nuint IndexOfObjectPassingTest(Func<NSObject, nuint, bool*, bool> predicate);

        // -(NSUInteger)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexOfObjectWithOptions:passingTest:")]
        unsafe nuint IndexOfObjectWithOptions(NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

        // -(NSUInteger)indexOfObjectAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexOfObjectAtIndexes:options:passingTest:")]
        unsafe nuint IndexOfObjectAtIndexes(NSIndexSet s, NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

        // -(NSIndexSet * _Nonnull)indexesOfObjectsPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexesOfObjectsPassingTest:")]
        unsafe NSIndexSet IndexesOfObjectsPassingTest(Func<NSObject, nuint, bool*, bool> predicate);

        // -(NSIndexSet * _Nonnull)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexesOfObjectsWithOptions:passingTest:")]
        unsafe NSIndexSet IndexesOfObjectsWithOptions(NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

        // -(NSIndexSet * _Nonnull)indexesOfObjectsAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexesOfObjectsAtIndexes:options:passingTest:")]
        unsafe NSIndexSet IndexesOfObjectsAtIndexes(NSIndexSet s, NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

        // -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("sortedArrayUsingComparator:")]
        NSObject[] SortedArrayUsingComparator(NSComparator cmptr);

        // -(NSArray<ObjectType> * _Nonnull)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("sortedArrayWithOptions:usingComparator:")]
        NSObject[] SortedArrayWithOptions(NSSortOptions opts, NSComparator cmptr);

        // -(NSUInteger)indexOfObject:(ObjectType _Nonnull)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator _Nonnull)cmp __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexOfObject:inSortedRange:options:usingComparator:")]
        nuint IndexOfObject(NSObject obj, NSRange r, NSBinarySearchingOptions opts, NSComparator cmp);
    }

    // @interface NSArrayCreation (NSArray)
    [Category]
    [BaseType(typeof(NSArray))]
    interface NSArray_NSArrayCreation
    {
        // +(instancetype _Nonnull)array;
        [Static]
        [Export("array")]
        NSArray Array();

        // +(instancetype _Nonnull)arrayWithObject:(ObjectType _Nonnull)anObject;
        [Static]
        [Export("arrayWithObject:")]
        NSArray ArrayWithObject(NSObject anObject);

        // +(instancetype _Nonnull)arrayWithObjects:(ObjectType  _Nonnull const * _Nonnull)objects count:(NSUInteger)cnt;
        [Static]
        [Export("arrayWithObjects:count:")]
        NSArray ArrayWithObjects(NSObject[] objects, nuint cnt);

        // +(instancetype _Nonnull)arrayWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
        [Static, Internal]
        [Export("arrayWithObjects:", IsVariadic = true)]
        NSArray ArrayWithObjects(NSObject firstObj, IntPtr varArgs);

        // +(instancetype _Nonnull)arrayWithArray:(NSArray<ObjectType> * _Nonnull)array;
        [Static]
        [Export("arrayWithArray:")]
        NSArray ArrayWithArray(NSObject[] array);

        // -(instancetype _Nonnull)initWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
        [Internal]
        [Export("initWithObjects:", IsVariadic = true)]
        IntPtr Constructor(NSObject firstObj, IntPtr varArgs);

        // -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array;
        [Export("initWithArray:")]
        IntPtr Constructor(NSObject[] array);

        // -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array copyItems:(BOOL)flag;
        [Export("initWithArray:copyItems:")]
        IntPtr Constructor(NSObject[] array, bool flag);

        // -(NSArray<ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("initWithContentsOfURL:error:")]
        IntPtr Constructor(NSUrl url, [NullAllowed] out NSError error);

        // +(NSArray<ObjectType> * _Nullable)arrayWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Static]
        [Export("arrayWithContentsOfURL:error:")]
        [return: NullAllowed]
        NSObject[] ArrayWithContentsOfURL(NSUrl url, [NullAllowed] out NSError error);
    }

    // @interface NSDeprecated (NSArray)
    [Category]
    [BaseType(typeof(NSArray))]
    interface NSArray_NSDeprecated
    {
        // -(void)getObjects:(ObjectType  _Nonnull * _Nonnull)objects __attribute__((availability(tvos, introduced=9.0, deprecated=11.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=4.0))) __attribute__((availability(ios, introduced=2.0, deprecated=11.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.13)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -getObjects:range: instead")]
        [Deprecated(PlatformName.TvOS, 11, 0, message: "Use -getObjects:range: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -getObjects:range: instead")]
        [Deprecated(PlatformName.WatchOS, 4, 0, message: "Use -getObjects:range: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -getObjects:range: instead")]
        [Deprecated(PlatformName.iOS, 11, 0, message: "Use -getObjects:range: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -getObjects:range: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 13, message: "Use -getObjects:range: instead")]
        [Export("getObjects:")]
        void GetObjects(NSObject[] objects);

        // +(NSArray<ObjectType> * _Nullable)arrayWithContentsOfFile:(NSString * _Nonnull)path;
        [Static]
        [Export("arrayWithContentsOfFile:")]
        [return: NullAllowed]
        NSObject[] ArrayWithContentsOfFile(string path);

        // +(NSArray<ObjectType> * _Nullable)arrayWithContentsOfURL:(NSURL * _Nonnull)url;
        [Static]
        [Export("arrayWithContentsOfURL:")]
        [return: NullAllowed]
        NSObject[] ArrayWithContentsOfURL(NSUrl url);

        // -(NSArray<ObjectType> * _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
        [Export("initWithContentsOfFile:")]
        IntPtr Constructor(string path);

        // -(NSArray<ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
        [Export("initWithContentsOfURL:")]
        IntPtr Constructor(NSUrl url);

        // -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile;
        [Export("writeToFile:atomically:")]
        bool WriteToFile(string path, bool useAuxiliaryFile);

        // -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)atomically;
        [Export("writeToURL:atomically:")]
        bool WriteToURL(NSUrl url, bool atomically);
    }

    // audit-objc-generics: @interface NSMutableArray<ObjectType> : NSArray
    [BaseType(typeof(NSArray))]
    interface NSMutableArray
    {
        // -(void)addObject:(ObjectType _Nonnull)anObject;
        [Export("addObject:")]
        void AddObject(NSObject anObject);

        // -(void)insertObject:(ObjectType _Nonnull)anObject atIndex:(NSUInteger)index;
        [Export("insertObject:atIndex:")]
        void InsertObject(NSObject anObject, nuint index);

        // -(void)removeLastObject;
        [Export("removeLastObject")]
        void RemoveLastObject();

        // -(void)removeObjectAtIndex:(NSUInteger)index;
        [Export("removeObjectAtIndex:")]
        void RemoveObjectAtIndex(nuint index);

        // -(void)replaceObjectAtIndex:(NSUInteger)index withObject:(ObjectType _Nonnull)anObject;
        [Export("replaceObjectAtIndex:withObject:")]
        void ReplaceObjectAtIndex(nuint index, NSObject anObject);

        // -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
        [Export("initWithCapacity:")]
        [DesignatedInitializer]
        IntPtr Constructor(nuint numItems);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @interface NSExtendedMutableArray (NSMutableArray)
    [Category]
    [BaseType(typeof(NSMutableArray))]
    interface NSMutableArray_NSExtendedMutableArray
    {
        // -(void)addObjectsFromArray:(NSArray<ObjectType> * _Nonnull)otherArray;
        [Export("addObjectsFromArray:")]
        void AddObjectsFromArray(NSObject[] otherArray);

        // -(void)exchangeObjectAtIndex:(NSUInteger)idx1 withObjectAtIndex:(NSUInteger)idx2;
        [Export("exchangeObjectAtIndex:withObjectAtIndex:")]
        void ExchangeObjectAtIndex(nuint idx1, nuint idx2);

        // -(void)removeAllObjects;
        [Export("removeAllObjects")]
        void RemoveAllObjects();

        // -(void)removeObject:(ObjectType _Nonnull)anObject inRange:(NSRange)range;
        [Export("removeObject:inRange:")]
        void RemoveObject(NSObject anObject, NSRange range);

        // -(void)removeObject:(ObjectType _Nonnull)anObject;
        [Export("removeObject:")]
        void RemoveObject(NSObject anObject);

        // -(void)removeObjectIdenticalTo:(ObjectType _Nonnull)anObject inRange:(NSRange)range;
        [Export("removeObjectIdenticalTo:inRange:")]
        void RemoveObjectIdenticalTo(NSObject anObject, NSRange range);

        // -(void)removeObjectIdenticalTo:(ObjectType _Nonnull)anObject;
        [Export("removeObjectIdenticalTo:")]
        void RemoveObjectIdenticalTo(NSObject anObject);

        // -(void)removeObjectsFromIndices:(NSUInteger * _Nonnull)indices numIndices:(NSUInteger)cnt __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.6)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Not supported")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Not supported")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Not supported")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Not supported")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Not supported")]
        [Deprecated(PlatformName.iOS, 4, 0, message: "Not supported")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Not supported")]
        [Deprecated(PlatformName.MacOSX, 10, 6, message: "Not supported")]
        [Export("removeObjectsFromIndices:numIndices:")]
        unsafe void RemoveObjectsFromIndices(nuint* indices, nuint cnt);

        // -(void)removeObjectsInArray:(NSArray<ObjectType> * _Nonnull)otherArray;
        [Export("removeObjectsInArray:")]
        void RemoveObjectsInArray(NSObject[] otherArray);

        // -(void)removeObjectsInRange:(NSRange)range;
        [Export("removeObjectsInRange:")]
        void RemoveObjectsInRange(NSRange range);

        // -(void)replaceObjectsInRange:(NSRange)range withObjectsFromArray:(NSArray<ObjectType> * _Nonnull)otherArray range:(NSRange)otherRange;
        [Export("replaceObjectsInRange:withObjectsFromArray:range:")]
        void ReplaceObjectsInRange(NSRange range, NSObject[] otherArray, NSRange otherRange);

        // -(void)replaceObjectsInRange:(NSRange)range withObjectsFromArray:(NSArray<ObjectType> * _Nonnull)otherArray;
        [Export("replaceObjectsInRange:withObjectsFromArray:")]
        void ReplaceObjectsInRange(NSRange range, NSObject[] otherArray);

        // -(void)setArray:(NSArray<ObjectType> * _Nonnull)otherArray;
        [Export("setArray:")]
        void SetArray(NSObject[] otherArray);

        // -(void)sortUsingFunction:(NSInteger (* _Nonnull)(ObjectType _Nonnull, ObjectType _Nonnull, void * _Nullable))compare context:(void * _Nullable)context;
        [Export("sortUsingFunction:context:")]
        unsafe void SortUsingFunction(Func<NSObject, NSObject, void*, nint>* compare, [NullAllowed] void* context);

        // -(void)sortUsingSelector:(SEL _Nonnull)comparator;
        [Export("sortUsingSelector:")]
        void SortUsingSelector(Selector comparator);

        // -(void)insertObjects:(NSArray<ObjectType> * _Nonnull)objects atIndexes:(NSIndexSet * _Nonnull)indexes;
        [Export("insertObjects:atIndexes:")]
        void InsertObjects(NSObject[] objects, NSIndexSet indexes);

        // -(void)removeObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes;
        [Export("removeObjectsAtIndexes:")]
        void RemoveObjectsAtIndexes(NSIndexSet indexes);

        // -(void)replaceObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes withObjects:(NSArray<ObjectType> * _Nonnull)objects;
        [Export("replaceObjectsAtIndexes:withObjects:")]
        void ReplaceObjectsAtIndexes(NSIndexSet indexes, NSObject[] objects);

        // -(void)setObject:(ObjectType _Nonnull)obj atIndexedSubscript:(NSUInteger)idx __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("setObject:atIndexedSubscript:")]
        void SetObject(NSObject obj, nuint idx);

        // -(void)sortUsingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("sortUsingComparator:")]
        void SortUsingComparator(NSComparator cmptr);

        // -(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("sortWithOptions:usingComparator:")]
        void SortWithOptions(NSSortOptions opts, NSComparator cmptr);
    }

    // @interface NSMutableArrayCreation (NSMutableArray)
    [Category]
    [BaseType(typeof(NSMutableArray))]
    interface NSMutableArray_NSMutableArrayCreation
    {
        // +(instancetype _Nonnull)arrayWithCapacity:(NSUInteger)numItems;
        [Static]
        [Export("arrayWithCapacity:")]
        NSMutableArray ArrayWithCapacity(nuint numItems);

        // +(NSMutableArray<ObjectType> * _Nullable)arrayWithContentsOfFile:(NSString * _Nonnull)path;
        [Static]
        [Export("arrayWithContentsOfFile:")]
        [return: NullAllowed]
        NSMutableArray<NSObject> ArrayWithContentsOfFile(string path);

        // +(NSMutableArray<ObjectType> * _Nullable)arrayWithContentsOfURL:(NSURL * _Nonnull)url;
        [Static]
        [Export("arrayWithContentsOfURL:")]
        [return: NullAllowed]
        NSMutableArray<NSObject> ArrayWithContentsOfURL(NSUrl url);

        // -(NSMutableArray<ObjectType> * _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
        [Export("initWithContentsOfFile:")]
        IntPtr Constructor(string path);

        // -(NSMutableArray<ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
        [Export("initWithContentsOfURL:")]
        IntPtr Constructor(NSUrl url);
    }

    // @interface NSAutoreleasePool : NSObject
    [BaseType(typeof(NSObject))]
    interface NSAutoreleasePool
    {
        // +(void)addObject:(id _Nonnull)anObject;
        [Static]
        [Export("addObject:")]
        void AddObject(NSObject anObject);

        // -(void)addObject:(id _Nonnull)anObject;
        [Export("addObject:")]
        void AddObject(NSObject anObject);

        // -(void)drain;
        [Export("drain")]
        void Drain();
    }

    // @protocol NSItemProviderWriting <NSObject>
    [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSItemProviderWriting
    {
        // @required @property (readonly, copy, nonatomic, class) NSArray<NSString *> * _Nonnull writableTypeIdentifiersForItemProvider;
        [Static, Abstract]
        [Export("writableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
        string[] WritableTypeIdentifiersForItemProvider { get; }

        // @optional @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull writableTypeIdentifiersForItemProvider;
        [Export("writableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
        string[] WritableTypeIdentifiersForItemProvider { get; }

        // @optional +(NSItemProviderRepresentationVisibility)itemProviderVisibilityForRepresentationWithTypeIdentifier:(NSString * _Nonnull)typeIdentifier;
        [Static]
        [Export("itemProviderVisibilityForRepresentationWithTypeIdentifier:")]
        NSItemProviderRepresentationVisibility ItemProviderVisibilityForRepresentationWithTypeIdentifier(string typeIdentifier);

        // @optional -(NSItemProviderRepresentationVisibility)itemProviderVisibilityForRepresentationWithTypeIdentifier:(NSString * _Nonnull)typeIdentifier;
        [Export("itemProviderVisibilityForRepresentationWithTypeIdentifier:")]
        NSItemProviderRepresentationVisibility ItemProviderVisibilityForRepresentationWithTypeIdentifier(string typeIdentifier);

        // @required -(NSProgress * _Nullable)loadDataWithTypeIdentifier:(NSString * _Nonnull)typeIdentifier forItemProviderCompletionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completionHandler;
        [Abstract]
        [Export("loadDataWithTypeIdentifier:forItemProviderCompletionHandler:")]
        [return: NullAllowed]
        NSProgress LoadDataWithTypeIdentifier(string typeIdentifier, Action<NSData, NSError> completionHandler);
    }

    // @protocol NSItemProviderReading <NSObject>
    [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSItemProviderReading
    {
        // @required @property (readonly, copy, nonatomic, class) NSArray<NSString *> * _Nonnull readableTypeIdentifiersForItemProvider;
        [Static, Abstract]
        [Export("readableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
        string[] ReadableTypeIdentifiersForItemProvider { get; }

        // @required +(instancetype _Nullable)objectWithItemProviderData:(NSData * _Nonnull)data typeIdentifier:(NSString * _Nonnull)typeIdentifier error:(NSError * _Nullable * _Nullable)outError;
        [Static, Abstract]
        [Export("objectWithItemProviderData:typeIdentifier:error:")]
        [return: NullAllowed]
        NSItemProviderReading TypeIdentifier(NSData data, string typeIdentifier, [NullAllowed] out NSError outError);
    }

    // typedef void (^NSItemProviderCompletionHandler)(id<NSSecureCoding> _Nullable, NSError * _Null_unspecified);
    delegate void NSItemProviderCompletionHandler([NullAllowed] NSSecureCoding arg0, NSError arg1);

    // typedef void (^NSItemProviderLoadHandler)(NSItemProviderCompletionHandler _Null_unspecified, Class _Null_unspecified, NSDictionary * _Null_unspecified);
    delegate void NSItemProviderLoadHandler(NSItemProviderCompletionHandler arg0, Class arg1, NSDictionary arg2);

    // @interface NSItemProvider : NSObject <NSCopying>
    [iOS(8, 0)]
    [BaseType(typeof(NSObject))]
    interface NSItemProvider : INSCopying
    {
        // -(void)registerDataRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier visibility:(NSItemProviderRepresentationVisibility)visibility loadHandler:(NSProgress * _Nullable (^ _Nonnull)(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable)))loadHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("registerDataRepresentationForTypeIdentifier:visibility:loadHandler:")]
        void RegisterDataRepresentationForTypeIdentifier(string typeIdentifier, NSItemProviderRepresentationVisibility visibility, Func<Action<NSData, NSError>, NSProgress> loadHandler);

        // -(void)registerFileRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier fileOptions:(NSItemProviderFileOptions)fileOptions visibility:(NSItemProviderRepresentationVisibility)visibility loadHandler:(NSProgress * _Nullable (^ _Nonnull)(void (^ _Nonnull)(NSURL * _Nullable, BOOL, NSError * _Nullable)))loadHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:")]
        void RegisterFileRepresentationForTypeIdentifier(string typeIdentifier, NSItemProviderFileOptions fileOptions, NSItemProviderRepresentationVisibility visibility, Func<Action<NSURL, bool, NSError>, NSProgress> loadHandler);

        // @property (readonly, copy, atomic) NSArray<NSString *> * _Nonnull registeredTypeIdentifiers;
        [Export("registeredTypeIdentifiers", ArgumentSemantic.Copy)]
        string[] RegisteredTypeIdentifiers { get; }

        // -(NSArray<NSString *> * _Nonnull)registeredTypeIdentifiersWithFileOptions:(NSItemProviderFileOptions)fileOptions __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("registeredTypeIdentifiersWithFileOptions:")]
        string[] RegisteredTypeIdentifiersWithFileOptions(NSItemProviderFileOptions fileOptions);

        // -(BOOL)hasItemConformingToTypeIdentifier:(NSString * _Nonnull)typeIdentifier;
        [Export("hasItemConformingToTypeIdentifier:")]
        bool HasItemConformingToTypeIdentifier(string typeIdentifier);

        // -(BOOL)hasRepresentationConformingToTypeIdentifier:(NSString * _Nonnull)typeIdentifier fileOptions:(NSItemProviderFileOptions)fileOptions __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("hasRepresentationConformingToTypeIdentifier:fileOptions:")]
        bool HasRepresentationConformingToTypeIdentifier(string typeIdentifier, NSItemProviderFileOptions fileOptions);

        // -(NSProgress * _Nonnull)loadDataRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("loadDataRepresentationForTypeIdentifier:completionHandler:")]
        NSProgress LoadDataRepresentationForTypeIdentifier(string typeIdentifier, Action<NSData, NSError> completionHandler);

        // -(NSProgress * _Nonnull)loadFileRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("loadFileRepresentationForTypeIdentifier:completionHandler:")]
        NSProgress LoadFileRepresentationForTypeIdentifier(string typeIdentifier, Action<NSURL, NSError> completionHandler);

        // -(NSProgress * _Nonnull)loadInPlaceFileRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, BOOL, NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:")]
        NSProgress LoadInPlaceFileRepresentationForTypeIdentifier(string typeIdentifier, Action<NSURL, bool, NSError> completionHandler);

        // @property (copy, atomic) NSString * _Nullable suggestedName __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.14)));
        [NoWatch, NoTV, Mac(10, 14), iOS(11, 0)]
        [NullAllowed, Export("suggestedName")]
        string SuggestedName { get; set; }

        // -(instancetype _Nonnull)initWithObject:(id<NSItemProviderWriting> _Nonnull)object __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("initWithObject:")]
        IntPtr Constructor(NSItemProviderWriting @object);

        // -(void)registerObject:(id<NSItemProviderWriting> _Nonnull)object visibility:(NSItemProviderRepresentationVisibility)visibility __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("registerObject:visibility:")]
        void RegisterObject(NSItemProviderWriting @object, NSItemProviderRepresentationVisibility visibility);

        // -(void)registerObjectOfClass:(Class<NSItemProviderWriting> _Nonnull)aClass visibility:(NSItemProviderRepresentationVisibility)visibility loadHandler:(NSProgress * _Nullable (^ _Nonnull)(void (^ _Nonnull)(id<NSItemProviderWriting> _Nullable, NSError * _Nullable)))loadHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("registerObjectOfClass:visibility:loadHandler:")]
        void RegisterObjectOfClass(NSItemProviderWriting aClass, NSItemProviderRepresentationVisibility visibility, Func<Action<NSItemProviderWriting, NSError>, NSProgress> loadHandler);

        // -(BOOL)canLoadObjectOfClass:(Class<NSItemProviderReading> _Nonnull)aClass __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("canLoadObjectOfClass:")]
        bool CanLoadObjectOfClass(NSItemProviderReading aClass);

        // -(NSProgress * _Nonnull)loadObjectOfClass:(Class<NSItemProviderReading> _Nonnull)aClass completionHandler:(void (^ _Nonnull)(id<NSItemProviderReading> _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("loadObjectOfClass:completionHandler:")]
        NSProgress LoadObjectOfClass(NSItemProviderReading aClass, Action<NSItemProviderReading, NSError> completionHandler);

        // -(instancetype _Nonnull)initWithItem:(id<NSSecureCoding> _Nullable)item typeIdentifier:(NSString * _Nullable)typeIdentifier __attribute__((objc_designated_initializer));
        [Export("initWithItem:typeIdentifier:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] NSSecureCoding item, [NullAllowed] string typeIdentifier);

        // -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Null_unspecified)fileURL;
        [Export("initWithContentsOfURL:")]
        IntPtr Constructor(NSUrl fileURL);

        // -(void)registerItemForTypeIdentifier:(NSString * _Nonnull)typeIdentifier loadHandler:(NSItemProviderLoadHandler _Nonnull)loadHandler;
        [Export("registerItemForTypeIdentifier:loadHandler:")]
        void RegisterItemForTypeIdentifier(string typeIdentifier, NSItemProviderLoadHandler loadHandler);

        // -(void)loadItemForTypeIdentifier:(NSString * _Nonnull)typeIdentifier options:(NSDictionary * _Nullable)options completionHandler:(NSItemProviderCompletionHandler _Nullable)completionHandler;
        [Export("loadItemForTypeIdentifier:options:completionHandler:")]
        void LoadItemForTypeIdentifier(string typeIdentifier, [NullAllowed] NSDictionary options, [NullAllowed] NSItemProviderCompletionHandler completionHandler);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull NSItemProviderPreferredImageSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSItemProviderPreferredImageSizeKey", "__Internal")]
        NSString NSItemProviderPreferredImageSizeKey { get; }
    }

    // @interface NSPreviewSupport (NSItemProvider)
    [Category]
    [BaseType(typeof(NSItemProvider))]
    interface NSItemProvider_NSPreviewSupport
    {
        // @property (copy, atomic) NSItemProviderLoadHandler _Nullable previewImageHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [NullAllowed, Export("previewImageHandler", ArgumentSemantic.Copy)]
        NSItemProviderLoadHandler PreviewImageHandler { get; set; }

        // -(void)loadPreviewImageWithOptions:(NSDictionary * _Null_unspecified)options completionHandler:(NSItemProviderCompletionHandler _Null_unspecified)completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("loadPreviewImageWithOptions:completionHandler:")]
        void LoadPreviewImageWithOptions(NSDictionary options, NSItemProviderCompletionHandler completionHandler);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Null_unspecified NSExtensionJavaScriptPreprocessingResultsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSExtensionJavaScriptPreprocessingResultsKey", "__Internal")]
        NSString NSExtensionJavaScriptPreprocessingResultsKey { get; }

        // extern NSString *const _Null_unspecified NSExtensionJavaScriptFinalizeArgumentKey __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(8, 0)]
        [Field("NSExtensionJavaScriptFinalizeArgumentKey", "__Internal")]
        NSString NSExtensionJavaScriptFinalizeArgumentKey { get; }

        // extern NSString *const _Nonnull NSItemProviderErrorDomain __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSItemProviderErrorDomain", "__Internal")]
        NSString NSItemProviderErrorDomain { get; }
    }

    // @interface NSString : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSString : INSCopying, INSMutableCopying, INSSecureCoding
    {
        // @property (readonly) NSUInteger length;
        [Export("length")]
        nuint Length { get; }

        // -(unichar)characterAtIndex:(NSUInteger)index;
        [Export("characterAtIndex:")]
        ushort CharacterAtIndex(nuint index);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @interface NSStringExtensionMethods (NSString)
    [Category]
    [BaseType(typeof(NSString))]
    interface NSString_NSStringExtensionMethods
    {
        // -(NSString * _Nonnull)substringFromIndex:(NSUInteger)from;
        [Export("substringFromIndex:")]
        string SubstringFromIndex(nuint from);

        // -(NSString * _Nonnull)substringToIndex:(NSUInteger)to;
        [Export("substringToIndex:")]
        string SubstringToIndex(nuint to);

        // -(NSString * _Nonnull)substringWithRange:(NSRange)range;
        [Export("substringWithRange:")]
        string SubstringWithRange(NSRange range);

        // -(void)getCharacters:(unichar * _Nonnull)buffer range:(NSRange)range;
        [Export("getCharacters:range:")]
        unsafe void GetCharacters(ushort* buffer, NSRange range);

        // -(NSComparisonResult)compare:(NSString * _Nonnull)string;
        [Export("compare:")]
        NSComparisonResult Compare(string @string);

        // -(NSComparisonResult)compare:(NSString * _Nonnull)string options:(NSStringCompareOptions)mask;
        [Export("compare:options:")]
        NSComparisonResult Compare(string @string, NSStringCompareOptions mask);

        // -(NSComparisonResult)compare:(NSString * _Nonnull)string options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToCompare;
        [Export("compare:options:range:")]
        NSComparisonResult Compare(string @string, NSStringCompareOptions mask, NSRange rangeOfReceiverToCompare);

        // -(NSComparisonResult)compare:(NSString * _Nonnull)string options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToCompare locale:(id _Nullable)locale;
        [Export("compare:options:range:locale:")]
        NSComparisonResult Compare(string @string, NSStringCompareOptions mask, NSRange rangeOfReceiverToCompare, [NullAllowed] NSObject locale);

        // -(NSComparisonResult)caseInsensitiveCompare:(NSString * _Nonnull)string;
        [Export("caseInsensitiveCompare:")]
        NSComparisonResult CaseInsensitiveCompare(string @string);

        // -(NSComparisonResult)localizedCompare:(NSString * _Nonnull)string;
        [Export("localizedCompare:")]
        NSComparisonResult LocalizedCompare(string @string);

        // -(NSComparisonResult)localizedCaseInsensitiveCompare:(NSString * _Nonnull)string;
        [Export("localizedCaseInsensitiveCompare:")]
        NSComparisonResult LocalizedCaseInsensitiveCompare(string @string);

        // -(NSComparisonResult)localizedStandardCompare:(NSString * _Nonnull)string __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("localizedStandardCompare:")]
        NSComparisonResult LocalizedStandardCompare(string @string);

        // -(BOOL)isEqualToString:(NSString * _Nonnull)aString;
        [Export("isEqualToString:")]
        bool IsEqualToString(string aString);

        // -(BOOL)hasPrefix:(NSString * _Nonnull)str;
        [Export("hasPrefix:")]
        bool HasPrefix(string str);

        // -(BOOL)hasSuffix:(NSString * _Nonnull)str;
        [Export("hasSuffix:")]
        bool HasSuffix(string str);

        // -(NSString * _Nonnull)commonPrefixWithString:(NSString * _Nonnull)str options:(NSStringCompareOptions)mask;
        [Export("commonPrefixWithString:options:")]
        string CommonPrefixWithString(string str, NSStringCompareOptions mask);

        // -(BOOL)containsString:(NSString * _Nonnull)str __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("containsString:")]
        bool ContainsString(string str);

        // -(BOOL)localizedCaseInsensitiveContainsString:(NSString * _Nonnull)str __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("localizedCaseInsensitiveContainsString:")]
        bool LocalizedCaseInsensitiveContainsString(string str);

        // -(BOOL)localizedStandardContainsString:(NSString * _Nonnull)str __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("localizedStandardContainsString:")]
        bool LocalizedStandardContainsString(string str);

        // -(NSRange)localizedStandardRangeOfString:(NSString * _Nonnull)str __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("localizedStandardRangeOfString:")]
        NSRange LocalizedStandardRangeOfString(string str);

        // -(NSRange)rangeOfString:(NSString * _Nonnull)searchString;
        [Export("rangeOfString:")]
        NSRange RangeOfString(string searchString);

        // -(NSRange)rangeOfString:(NSString * _Nonnull)searchString options:(NSStringCompareOptions)mask;
        [Export("rangeOfString:options:")]
        NSRange RangeOfString(string searchString, NSStringCompareOptions mask);

        // -(NSRange)rangeOfString:(NSString * _Nonnull)searchString options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToSearch;
        [Export("rangeOfString:options:range:")]
        NSRange RangeOfString(string searchString, NSStringCompareOptions mask, NSRange rangeOfReceiverToSearch);

        // -(NSRange)rangeOfString:(NSString * _Nonnull)searchString options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToSearch locale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("rangeOfString:options:range:locale:")]
        NSRange RangeOfString(string searchString, NSStringCompareOptions mask, NSRange rangeOfReceiverToSearch, [NullAllowed] NSLocale locale);

        // -(NSRange)rangeOfCharacterFromSet:(NSCharacterSet * _Nonnull)searchSet;
        [Export("rangeOfCharacterFromSet:")]
        NSRange RangeOfCharacterFromSet(NSCharacterSet searchSet);

        // -(NSRange)rangeOfCharacterFromSet:(NSCharacterSet * _Nonnull)searchSet options:(NSStringCompareOptions)mask;
        [Export("rangeOfCharacterFromSet:options:")]
        NSRange RangeOfCharacterFromSet(NSCharacterSet searchSet, NSStringCompareOptions mask);

        // -(NSRange)rangeOfCharacterFromSet:(NSCharacterSet * _Nonnull)searchSet options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToSearch;
        [Export("rangeOfCharacterFromSet:options:range:")]
        NSRange RangeOfCharacterFromSet(NSCharacterSet searchSet, NSStringCompareOptions mask, NSRange rangeOfReceiverToSearch);

        // -(NSRange)rangeOfComposedCharacterSequenceAtIndex:(NSUInteger)index;
        [Export("rangeOfComposedCharacterSequenceAtIndex:")]
        NSRange RangeOfComposedCharacterSequenceAtIndex(nuint index);

        // -(NSRange)rangeOfComposedCharacterSequencesForRange:(NSRange)range __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("rangeOfComposedCharacterSequencesForRange:")]
        NSRange RangeOfComposedCharacterSequencesForRange(NSRange range);

        // -(NSString * _Nonnull)stringByAppendingString:(NSString * _Nonnull)aString;
        [Export("stringByAppendingString:")]
        string StringByAppendingString(string aString);

        // -(NSString * _Nonnull)stringByAppendingFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
        [Internal]
        [Export("stringByAppendingFormat:", IsVariadic = true)]
        string StringByAppendingFormat(string format, IntPtr varArgs);

        // @property (readonly) double doubleValue;
        [Export("doubleValue")]
        double DoubleValue { get; }

        // @property (readonly) float floatValue;
        [Export("floatValue")]
        float FloatValue { get; }

        // @property (readonly) int intValue;
        [Export("intValue")]
        int IntValue { get; }

        // @property (readonly) NSInteger integerValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("integerValue")]
        nint IntegerValue { get; }

        // @property (readonly) long long longLongValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("longLongValue")]
        long LongLongValue { get; }

        // @property (readonly) BOOL boolValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("boolValue")]
        bool BoolValue { get; }

        // @property (readonly, copy) NSString * _Nonnull uppercaseString;
        [Export("uppercaseString")]
        string UppercaseString { get; }

        // @property (readonly, copy) NSString * _Nonnull lowercaseString;
        [Export("lowercaseString")]
        string LowercaseString { get; }

        // @property (readonly, copy) NSString * _Nonnull capitalizedString;
        [Export("capitalizedString")]
        string CapitalizedString { get; }

        // @property (readonly, copy) NSString * _Nonnull localizedUppercaseString __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("localizedUppercaseString")]
        string LocalizedUppercaseString { get; }

        // @property (readonly, copy) NSString * _Nonnull localizedLowercaseString __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("localizedLowercaseString")]
        string LocalizedLowercaseString { get; }

        // @property (readonly, copy) NSString * _Nonnull localizedCapitalizedString __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("localizedCapitalizedString")]
        string LocalizedCapitalizedString { get; }

        // -(NSString * _Nonnull)uppercaseStringWithLocale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("uppercaseStringWithLocale:")]
        string UppercaseStringWithLocale([NullAllowed] NSLocale locale);

        // -(NSString * _Nonnull)lowercaseStringWithLocale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("lowercaseStringWithLocale:")]
        string LowercaseStringWithLocale([NullAllowed] NSLocale locale);

        // -(NSString * _Nonnull)capitalizedStringWithLocale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("capitalizedStringWithLocale:")]
        string CapitalizedStringWithLocale([NullAllowed] NSLocale locale);

        // -(void)getLineStart:(NSUInteger * _Nullable)startPtr end:(NSUInteger * _Nullable)lineEndPtr contentsEnd:(NSUInteger * _Nullable)contentsEndPtr forRange:(NSRange)range;
        [Export("getLineStart:end:contentsEnd:forRange:")]
        unsafe void GetLineStart([NullAllowed] nuint* startPtr, [NullAllowed] nuint* lineEndPtr, [NullAllowed] nuint* contentsEndPtr, NSRange range);

        // -(NSRange)lineRangeForRange:(NSRange)range;
        [Export("lineRangeForRange:")]
        NSRange LineRangeForRange(NSRange range);

        // -(void)getParagraphStart:(NSUInteger * _Nullable)startPtr end:(NSUInteger * _Nullable)parEndPtr contentsEnd:(NSUInteger * _Nullable)contentsEndPtr forRange:(NSRange)range;
        [Export("getParagraphStart:end:contentsEnd:forRange:")]
        unsafe void GetParagraphStart([NullAllowed] nuint* startPtr, [NullAllowed] nuint* parEndPtr, [NullAllowed] nuint* contentsEndPtr, NSRange range);

        // -(NSRange)paragraphRangeForRange:(NSRange)range;
        [Export("paragraphRangeForRange:")]
        NSRange ParagraphRangeForRange(NSRange range);

        // -(void)enumerateSubstringsInRange:(NSRange)range options:(NSStringEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSString * _Nullable, NSRange, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateSubstringsInRange:options:usingBlock:")]
        unsafe void EnumerateSubstringsInRange(NSRange range, NSStringEnumerationOptions opts, Action<NSString, NSRange, NSRange, bool*> block);

        // -(void)enumerateLinesUsingBlock:(void (^ _Nonnull)(NSString * _Nonnull, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateLinesUsingBlock:")]
        unsafe void EnumerateLinesUsingBlock(Action<NSString, bool*> block);

        // @property (readonly) const char * _Nullable UTF8String __attribute__((objc_returns_inner_pointer));
        [NullAllowed, Export("UTF8String")]
        unsafe sbyte* UTF8String { get; }

        // @property (readonly) NSStringEncoding fastestEncoding;
        [Export("fastestEncoding")]
        nuint FastestEncoding { get; }

        // @property (readonly) NSStringEncoding smallestEncoding;
        [Export("smallestEncoding")]
        nuint SmallestEncoding { get; }

        // -(NSData * _Nullable)dataUsingEncoding:(NSStringEncoding)encoding allowLossyConversion:(BOOL)lossy;
        [Export("dataUsingEncoding:allowLossyConversion:")]
        [return: NullAllowed]
        NSData DataUsingEncoding(nuint encoding, bool lossy);

        // -(NSData * _Nullable)dataUsingEncoding:(NSStringEncoding)encoding;
        [Export("dataUsingEncoding:")]
        [return: NullAllowed]
        NSData DataUsingEncoding(nuint encoding);

        // -(BOOL)canBeConvertedToEncoding:(NSStringEncoding)encoding;
        [Export("canBeConvertedToEncoding:")]
        bool CanBeConvertedToEncoding(nuint encoding);

        // -(const char * _Nullable)cStringUsingEncoding:(NSStringEncoding)encoding __attribute__((objc_returns_inner_pointer));
        [Export("cStringUsingEncoding:")]
        [return: NullAllowed]
        unsafe sbyte* CStringUsingEncoding(nuint encoding);

        // -(BOOL)getCString:(char * _Nonnull)buffer maxLength:(NSUInteger)maxBufferCount encoding:(NSStringEncoding)encoding;
        [Export("getCString:maxLength:encoding:")]
        unsafe bool GetCString(sbyte* buffer, nuint maxBufferCount, nuint encoding);

        // -(BOOL)getBytes:(void * _Nullable)buffer maxLength:(NSUInteger)maxBufferCount usedLength:(NSUInteger * _Nullable)usedBufferCount encoding:(NSStringEncoding)encoding options:(NSStringEncodingConversionOptions)options range:(NSRange)range remainingRange:(NSRangePointer _Nullable)leftover;
        [Export("getBytes:maxLength:usedLength:encoding:options:range:remainingRange:")]
        unsafe bool GetBytes([NullAllowed] void* buffer, nuint maxBufferCount, [NullAllowed] nuint* usedBufferCount, nuint encoding, NSStringEncodingConversionOptions options, NSRange range, [NullAllowed] NSRangePointer* leftover);

        // -(NSUInteger)maximumLengthOfBytesUsingEncoding:(NSStringEncoding)enc;
        [Export("maximumLengthOfBytesUsingEncoding:")]
        nuint MaximumLengthOfBytesUsingEncoding(nuint enc);

        // -(NSUInteger)lengthOfBytesUsingEncoding:(NSStringEncoding)enc;
        [Export("lengthOfBytesUsingEncoding:")]
        nuint LengthOfBytesUsingEncoding(nuint enc);

        // @property (readonly, class) const NSStringEncoding * _Nonnull availableStringEncodings;
        [Static]
        [Export("availableStringEncodings")]
        unsafe nuint* AvailableStringEncodings { get; }

        // +(NSString * _Nonnull)localizedNameOfStringEncoding:(NSStringEncoding)encoding;
        [Static]
        [Export("localizedNameOfStringEncoding:")]
        string LocalizedNameOfStringEncoding(nuint encoding);

        // @property (readonly, class) NSStringEncoding defaultCStringEncoding;
        [Static]
        [Export("defaultCStringEncoding")]
        nuint DefaultCStringEncoding { get; }

        // @property (readonly, copy) NSString * _Nonnull decomposedStringWithCanonicalMapping;
        [Export("decomposedStringWithCanonicalMapping")]
        string DecomposedStringWithCanonicalMapping { get; }

        // @property (readonly, copy) NSString * _Nonnull precomposedStringWithCanonicalMapping;
        [Export("precomposedStringWithCanonicalMapping")]
        string PrecomposedStringWithCanonicalMapping { get; }

        // @property (readonly, copy) NSString * _Nonnull decomposedStringWithCompatibilityMapping;
        [Export("decomposedStringWithCompatibilityMapping")]
        string DecomposedStringWithCompatibilityMapping { get; }

        // @property (readonly, copy) NSString * _Nonnull precomposedStringWithCompatibilityMapping;
        [Export("precomposedStringWithCompatibilityMapping")]
        string PrecomposedStringWithCompatibilityMapping { get; }

        // -(NSArray<NSString *> * _Nonnull)componentsSeparatedByString:(NSString * _Nonnull)separator;
        [Export("componentsSeparatedByString:")]
        string[] ComponentsSeparatedByString(string separator);

        // -(NSArray<NSString *> * _Nonnull)componentsSeparatedByCharactersInSet:(NSCharacterSet * _Nonnull)separator __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("componentsSeparatedByCharactersInSet:")]
        string[] ComponentsSeparatedByCharactersInSet(NSCharacterSet separator);

        // -(NSString * _Nonnull)stringByTrimmingCharactersInSet:(NSCharacterSet * _Nonnull)set;
        [Export("stringByTrimmingCharactersInSet:")]
        string StringByTrimmingCharactersInSet(NSCharacterSet set);

        // -(NSString * _Nonnull)stringByPaddingToLength:(NSUInteger)newLength withString:(NSString * _Nonnull)padString startingAtIndex:(NSUInteger)padIndex;
        [Export("stringByPaddingToLength:withString:startingAtIndex:")]
        string StringByPaddingToLength(nuint newLength, string padString, nuint padIndex);

        // -(NSString * _Nonnull)stringByFoldingWithOptions:(NSStringCompareOptions)options locale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("stringByFoldingWithOptions:locale:")]
        string StringByFoldingWithOptions(NSStringCompareOptions options, [NullAllowed] NSLocale locale);

        // -(NSString * _Nonnull)stringByReplacingOccurrencesOfString:(NSString * _Nonnull)target withString:(NSString * _Nonnull)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("stringByReplacingOccurrencesOfString:withString:options:range:")]
        string StringByReplacingOccurrencesOfString(string target, string replacement, NSStringCompareOptions options, NSRange searchRange);

        // -(NSString * _Nonnull)stringByReplacingOccurrencesOfString:(NSString * _Nonnull)target withString:(NSString * _Nonnull)replacement __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("stringByReplacingOccurrencesOfString:withString:")]
        string StringByReplacingOccurrencesOfString(string target, string replacement);

        // -(NSString * _Nonnull)stringByReplacingCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)replacement __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("stringByReplacingCharactersInRange:withString:")]
        string StringByReplacingCharactersInRange(NSRange range, string replacement);

        // -(NSString * _Nullable)stringByApplyingTransform:(NSStringTransform _Nonnull)transform reverse:(BOOL)reverse __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("stringByApplyingTransform:reverse:")]
        [return: NullAllowed]
        string StringByApplyingTransform(string transform, bool reverse);

        // -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
        [Export("writeToURL:atomically:encoding:error:")]
        bool WriteToURL(NSUrl url, bool useAuxiliaryFile, nuint enc, [NullAllowed] out NSError error);

        // -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
        [Export("writeToFile:atomically:encoding:error:")]
        bool WriteToFile(string path, bool useAuxiliaryFile, nuint enc, [NullAllowed] out NSError error);

        // @property (readonly, copy) NSString * _Nonnull description;
        [Export("description")]
        string Description { get; }

        // @property (readonly) NSUInteger hash;
        [Export("hash")]
        nuint Hash { get; }

        // -(instancetype _Nonnull)initWithCharactersNoCopy:(unichar * _Nonnull)characters length:(NSUInteger)length freeWhenDone:(BOOL)freeBuffer;
        [Export("initWithCharactersNoCopy:length:freeWhenDone:")]
        unsafe IntPtr Constructor(ushort* characters, nuint length, bool freeBuffer);

        // -(instancetype _Nonnull)initWithCharacters:(const unichar * _Nonnull)characters length:(NSUInteger)length;
        [Export("initWithCharacters:length:")]
        unsafe IntPtr Constructor(ushort* characters, nuint length);

        // -(instancetype _Nullable)initWithUTF8String:(const char * _Nonnull)nullTerminatedCString;
        [Export("initWithUTF8String:")]
        unsafe IntPtr Constructor(sbyte* nullTerminatedCString);

        // -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)aString;
        [Export("initWithString:")]
        IntPtr Constructor(string aString);

        // -(instancetype _Nonnull)initWithFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
        [Internal]
        [Export("initWithFormat:", IsVariadic = true)]
        IntPtr Constructor(string format, IntPtr varArgs);

        // -(instancetype _Nonnull)initWithFormat:(NSString * _Nonnull)format arguments:(va_list)argList __attribute__((format(NSString, 1, 0)));
        [Export("initWithFormat:arguments:")]
        unsafe IntPtr Constructor(string format, sbyte* argList);

        // -(instancetype _Nonnull)initWithFormat:(NSString * _Nonnull)format locale:(id _Nullable)locale, ... __attribute__((format(NSString, 1, 3)));
        [Internal]
        [Export("initWithFormat:locale:", IsVariadic = true)]
        IntPtr Constructor(string format, [NullAllowed] NSObject locale, IntPtr varArgs);

        // -(instancetype _Nonnull)initWithFormat:(NSString * _Nonnull)format locale:(id _Nullable)locale arguments:(va_list)argList __attribute__((format(NSString, 1, 0)));
        [Export("initWithFormat:locale:arguments:")]
        unsafe IntPtr Constructor(string format, [NullAllowed] NSObject locale, sbyte* argList);

        // -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data encoding:(NSStringEncoding)encoding;
        [Export("initWithData:encoding:")]
        IntPtr Constructor(NSData data, nuint encoding);

        // -(instancetype _Nullable)initWithBytes:(const void * _Nonnull)bytes length:(NSUInteger)len encoding:(NSStringEncoding)encoding;
        [Export("initWithBytes:length:encoding:")]
        unsafe IntPtr Constructor(void* bytes, nuint len, nuint encoding);

        // -(instancetype _Nullable)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)len encoding:(NSStringEncoding)encoding freeWhenDone:(BOOL)freeBuffer;
        [Export("initWithBytesNoCopy:length:encoding:freeWhenDone:")]
        unsafe IntPtr Constructor(void* bytes, nuint len, nuint encoding, bool freeBuffer);

        // +(instancetype _Nonnull)string;
        [Static]
        [Export("string")]
        NSString String();

        // +(instancetype _Nonnull)stringWithString:(NSString * _Nonnull)string;
        [Static]
        [Export("stringWithString:")]
        NSString StringWithString(string @string);

        // +(instancetype _Nonnull)stringWithCharacters:(const unichar * _Nonnull)characters length:(NSUInteger)length;
        [Static]
        [Export("stringWithCharacters:length:")]
        unsafe NSString StringWithCharacters(ushort* characters, nuint length);

        // +(instancetype _Nullable)stringWithUTF8String:(const char * _Nonnull)nullTerminatedCString;
        [Static]
        [Export("stringWithUTF8String:")]
        [return: NullAllowed]
        unsafe NSString StringWithUTF8String(sbyte* nullTerminatedCString);

        // +(instancetype _Nonnull)stringWithFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
        [Static, Internal]
        [Export("stringWithFormat:", IsVariadic = true)]
        NSString StringWithFormat(string format, IntPtr varArgs);

        // +(instancetype _Nonnull)localizedStringWithFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
        [Static, Internal]
        [Export("localizedStringWithFormat:", IsVariadic = true)]
        NSString LocalizedStringWithFormat(string format, IntPtr varArgs);

        // -(instancetype _Nullable)initWithCString:(const char * _Nonnull)nullTerminatedCString encoding:(NSStringEncoding)encoding;
        [Export("initWithCString:encoding:")]
        unsafe IntPtr Constructor(sbyte* nullTerminatedCString, nuint encoding);

        // +(instancetype _Nullable)stringWithCString:(const char * _Nonnull)cString encoding:(NSStringEncoding)enc;
        [Static]
        [Export("stringWithCString:encoding:")]
        [return: NullAllowed]
        unsafe NSString StringWithCString(sbyte* cString, nuint enc);

        // -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
        [Export("initWithContentsOfURL:encoding:error:")]
        IntPtr Constructor(NSUrl url, nuint enc, [NullAllowed] out NSError error);

        // -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
        [Export("initWithContentsOfFile:encoding:error:")]
        IntPtr Constructor(string path, nuint enc, [NullAllowed] out NSError error);

        // +(instancetype _Nullable)stringWithContentsOfURL:(NSURL * _Nonnull)url encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
        [Static]
        [Export("stringWithContentsOfURL:encoding:error:")]
        [return: NullAllowed]
        NSString StringWithContentsOfURL(NSUrl url, nuint enc, [NullAllowed] out NSError error);

        // +(instancetype _Nullable)stringWithContentsOfFile:(NSString * _Nonnull)path encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
        [Static]
        [Export("stringWithContentsOfFile:encoding:error:")]
        [return: NullAllowed]
        NSString StringWithContentsOfFile(string path, nuint enc, [NullAllowed] out NSError error);

        // -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url usedEncoding:(NSStringEncoding * _Nullable)enc error:(NSError * _Nullable * _Nullable)error;
        [Export("initWithContentsOfURL:usedEncoding:error:")]
        unsafe IntPtr Constructor(NSUrl url, [NullAllowed] nuint* enc, [NullAllowed] out NSError error);

        // -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path usedEncoding:(NSStringEncoding * _Nullable)enc error:(NSError * _Nullable * _Nullable)error;
        [Export("initWithContentsOfFile:usedEncoding:error:")]
        unsafe IntPtr Constructor(string path, [NullAllowed] nuint* enc, [NullAllowed] out NSError error);

        // +(instancetype _Nullable)stringWithContentsOfURL:(NSURL * _Nonnull)url usedEncoding:(NSStringEncoding * _Nullable)enc error:(NSError * _Nullable * _Nullable)error;
        [Static]
        [Export("stringWithContentsOfURL:usedEncoding:error:")]
        [return: NullAllowed]
        unsafe NSString StringWithContentsOfURL(NSUrl url, [NullAllowed] nuint* enc, [NullAllowed] out NSError error);

        // +(instancetype _Nullable)stringWithContentsOfFile:(NSString * _Nonnull)path usedEncoding:(NSStringEncoding * _Nullable)enc error:(NSError * _Nullable * _Nullable)error;
        [Static]
        [Export("stringWithContentsOfFile:usedEncoding:error:")]
        [return: NullAllowed]
        unsafe NSString StringWithContentsOfFile(string path, [NullAllowed] nuint* enc, [NullAllowed] out NSError error);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSStringTransform _Nonnull NSStringTransformLatinToKatakana __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformLatinToKatakana", "__Internal")]
        NSString NSStringTransformLatinToKatakana { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformLatinToHiragana __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformLatinToHiragana", "__Internal")]
        NSString NSStringTransformLatinToHiragana { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformLatinToHangul __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformLatinToHangul", "__Internal")]
        NSString NSStringTransformLatinToHangul { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformLatinToArabic __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformLatinToArabic", "__Internal")]
        NSString NSStringTransformLatinToArabic { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformLatinToHebrew __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformLatinToHebrew", "__Internal")]
        NSString NSStringTransformLatinToHebrew { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformLatinToThai __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformLatinToThai", "__Internal")]
        NSString NSStringTransformLatinToThai { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformLatinToCyrillic __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformLatinToCyrillic", "__Internal")]
        NSString NSStringTransformLatinToCyrillic { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformLatinToGreek __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformLatinToGreek", "__Internal")]
        NSString NSStringTransformLatinToGreek { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformToLatin __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformToLatin", "__Internal")]
        NSString NSStringTransformToLatin { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformMandarinToLatin __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformMandarinToLatin", "__Internal")]
        NSString NSStringTransformMandarinToLatin { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformHiraganaToKatakana __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformHiraganaToKatakana", "__Internal")]
        NSString NSStringTransformHiraganaToKatakana { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformFullwidthToHalfwidth __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformFullwidthToHalfwidth", "__Internal")]
        NSString NSStringTransformFullwidthToHalfwidth { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformToXMLHex __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformToXMLHex", "__Internal")]
        NSString NSStringTransformToXMLHex { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformToUnicodeName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformToUnicodeName", "__Internal")]
        NSString NSStringTransformToUnicodeName { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformStripCombiningMarks __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformStripCombiningMarks", "__Internal")]
        NSString NSStringTransformStripCombiningMarks { get; }

        // extern const NSStringTransform _Nonnull NSStringTransformStripDiacritics __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSStringTransformStripDiacritics", "__Internal")]
        NSString NSStringTransformStripDiacritics { get; }
    }

    // @interface NSStringEncodingDetection (NSString)
    [Category]
    [BaseType(typeof(NSString))]
    interface NSString_NSStringEncodingDetection
    {
        // +(NSStringEncoding)stringEncodingForData:(NSData * _Nonnull)data encodingOptions:(NSDictionary<NSStringEncodingDetectionOptionsKey,id> * _Nullable)opts convertedString:(NSString * _Nullable * _Nullable)string usedLossyConversion:(BOOL * _Nullable)usedLossyConversion __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Static]
        [Export("stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:")]
        unsafe nuint StringEncodingForData(NSData data, [NullAllowed] NSDictionary<NSString, NSObject> opts, [NullAllowed] out string @string, [NullAllowed] bool* usedLossyConversion);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionSuggestedEncodingsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSStringEncodingDetectionSuggestedEncodingsKey", "__Internal")]
        NSString NSStringEncodingDetectionSuggestedEncodingsKey { get; }

        // extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionDisallowedEncodingsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSStringEncodingDetectionDisallowedEncodingsKey", "__Internal")]
        NSString NSStringEncodingDetectionDisallowedEncodingsKey { get; }

        // extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionUseOnlySuggestedEncodingsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSStringEncodingDetectionUseOnlySuggestedEncodingsKey", "__Internal")]
        NSString NSStringEncodingDetectionUseOnlySuggestedEncodingsKey { get; }

        // extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionAllowLossyKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSStringEncodingDetectionAllowLossyKey", "__Internal")]
        NSString NSStringEncodingDetectionAllowLossyKey { get; }

        // extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionFromWindowsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSStringEncodingDetectionFromWindowsKey", "__Internal")]
        NSString NSStringEncodingDetectionFromWindowsKey { get; }

        // extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionLossySubstitutionKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSStringEncodingDetectionLossySubstitutionKey", "__Internal")]
        NSString NSStringEncodingDetectionLossySubstitutionKey { get; }

        // extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionLikelyLanguageKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSStringEncodingDetectionLikelyLanguageKey", "__Internal")]
        NSString NSStringEncodingDetectionLikelyLanguageKey { get; }
    }

    // @interface NSItemProvider (NSString) <NSItemProviderReading, NSItemProviderWriting>
    [Category]
    [BaseType(typeof(NSString))]
    interface NSString_NSItemProvider : INSItemProviderReading, INSItemProviderWriting
    {
    }

    // @interface NSMutableString : NSString
    [BaseType(typeof(NSString))]
    interface NSMutableString
    {
        // -(void)replaceCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)aString;
        [Export("replaceCharactersInRange:withString:")]
        void ReplaceCharactersInRange(NSRange range, string aString);
    }

    // @interface NSMutableStringExtensionMethods (NSMutableString)
    [Category]
    [BaseType(typeof(NSMutableString))]
    interface NSMutableString_NSMutableStringExtensionMethods
    {
        // -(void)insertString:(NSString * _Nonnull)aString atIndex:(NSUInteger)loc;
        [Export("insertString:atIndex:")]
        void InsertString(string aString, nuint loc);

        // -(void)deleteCharactersInRange:(NSRange)range;
        [Export("deleteCharactersInRange:")]
        void DeleteCharactersInRange(NSRange range);

        // -(void)appendString:(NSString * _Nonnull)aString;
        [Export("appendString:")]
        void AppendString(string aString);

        // -(void)appendFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
        [Internal]
        [Export("appendFormat:", IsVariadic = true)]
        void AppendFormat(string format, IntPtr varArgs);

        // -(void)setString:(NSString * _Nonnull)aString;
        [Export("setString:")]
        void SetString(string aString);

        // -(NSUInteger)replaceOccurrencesOfString:(NSString * _Nonnull)target withString:(NSString * _Nonnull)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange;
        [Export("replaceOccurrencesOfString:withString:options:range:")]
        nuint ReplaceOccurrencesOfString(string target, string replacement, NSStringCompareOptions options, NSRange searchRange);

        // -(BOOL)applyTransform:(NSStringTransform _Nonnull)transform reverse:(BOOL)reverse range:(NSRange)range updatedRange:(NSRangePointer _Nullable)resultingRange __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("applyTransform:reverse:range:updatedRange:")]
        unsafe bool ApplyTransform(string transform, bool reverse, NSRange range, [NullAllowed] NSRangePointer* resultingRange);

        // -(NSMutableString * _Nonnull)initWithCapacity:(NSUInteger)capacity;
        [Export("initWithCapacity:")]
        IntPtr Constructor(nuint capacity);

        // +(NSMutableString * _Nonnull)stringWithCapacity:(NSUInteger)capacity;
        [Static]
        [Export("stringWithCapacity:")]
        NSMutableString StringWithCapacity(nuint capacity);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSExceptionName _Nonnull NSCharacterConversionException;
        [Field("NSCharacterConversionException", "__Internal")]
        NSString NSCharacterConversionException { get; }

        // extern const NSExceptionName _Nonnull NSParseErrorException;
        [Field("NSParseErrorException", "__Internal")]
        NSString NSParseErrorException { get; }
    }

    // @interface NSExtendedStringPropertyListParsing (NSString)
    [Category]
    [BaseType(typeof(NSString))]
    interface NSString_NSExtendedStringPropertyListParsing
    {
        // -(id _Nonnull)propertyList;
        [Export("propertyList")]
        [Verify(MethodToProperty)]
        NSObject PropertyList { get; }

        // -(NSDictionary * _Nullable)propertyListFromStringsFileFormat;
        [NullAllowed, Export("propertyListFromStringsFileFormat")]
        [Verify(MethodToProperty)]
        NSDictionary PropertyListFromStringsFileFormat { get; }
    }

    // @interface NSStringDeprecated (NSString)
    [Category]
    [BaseType(typeof(NSString))]
    interface NSString_NSStringDeprecated
    {
        // -(const char * _Nullable)cString __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((objc_returns_inner_pointer));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -cStringUsingEncoding: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -cStringUsingEncoding: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -cStringUsingEncoding: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -cStringUsingEncoding: instead")]
        [NullAllowed, Export("cString")]
        [Verify(MethodToProperty)]
        unsafe sbyte* CString { get; }

        // -(const char * _Nullable)lossyCString __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((objc_returns_inner_pointer));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -cStringUsingEncoding: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -cStringUsingEncoding: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -cStringUsingEncoding: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -cStringUsingEncoding: instead")]
        [NullAllowed, Export("lossyCString")]
        [Verify(MethodToProperty)]
        unsafe sbyte* LossyCString { get; }

        // -(NSUInteger)cStringLength __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -lengthOfBytesUsingEncoding: instead")]
        [Export("cStringLength")]
        [Verify(MethodToProperty)]
        nuint CStringLength { get; }

        // -(void)getCString:(char * _Nonnull)bytes __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -getCString:maxLength:encoding: instead")]
        [Export("getCString:")]
        unsafe void GetCString(sbyte* bytes);

        // -(void)getCString:(char * _Nonnull)bytes maxLength:(NSUInteger)maxLength __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -getCString:maxLength:encoding: instead")]
        [Export("getCString:maxLength:")]
        unsafe void GetCString(sbyte* bytes, nuint maxLength);

        // -(void)getCString:(char * _Nonnull)bytes maxLength:(NSUInteger)maxLength range:(NSRange)aRange remainingRange:(NSRangePointer _Nullable)leftoverRange __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -getCString:maxLength:encoding: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -getCString:maxLength:encoding: instead")]
        [Export("getCString:maxLength:range:remainingRange:")]
        unsafe void GetCString(sbyte* bytes, nuint maxLength, NSRange aRange, [NullAllowed] NSRangePointer* leftoverRange);

        // -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -writeToFile:atomically:error: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -writeToFile:atomically:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -writeToFile:atomically:error: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -writeToFile:atomically:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -writeToFile:atomically:error: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -writeToFile:atomically:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -writeToFile:atomically:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -writeToFile:atomically:error: instead")]
        [Export("writeToFile:atomically:")]
        bool WriteToFile(string path, bool useAuxiliaryFile);

        // -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)atomically __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -writeToURL:atomically:error: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -writeToURL:atomically:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -writeToURL:atomically:error: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -writeToURL:atomically:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -writeToURL:atomically:error: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -writeToURL:atomically:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -writeToURL:atomically:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -writeToURL:atomically:error: instead")]
        [Export("writeToURL:atomically:")]
        bool WriteToURL(NSUrl url, bool atomically);

        // -(id _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -initWithContentsOfFile:encoding:error: instead")]
        [Export("initWithContentsOfFile:")]
        IntPtr Constructor(string path);

        // -(id _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -initWithContentsOfURL:encoding:error: instead")]
        [Export("initWithContentsOfURL:")]
        IntPtr Constructor(NSUrl url);

        // +(id _Nullable)stringWithContentsOfFile:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
        [Static]
        [Export("stringWithContentsOfFile:")]
        [return: NullAllowed]
        NSObject StringWithContentsOfFile(string path);

        // +(id _Nullable)stringWithContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
        [Static]
        [Export("stringWithContentsOfURL:")]
        [return: NullAllowed]
        NSObject StringWithContentsOfURL(NSUrl url);

        // -(id _Nullable)initWithCStringNoCopy:(char * _Nonnull)bytes length:(NSUInteger)length freeWhenDone:(BOOL)freeBuffer __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -initWithCString:encoding: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -initWithCString:encoding: instead")]
        [Export("initWithCStringNoCopy:length:freeWhenDone:")]
        unsafe IntPtr Constructor(sbyte* bytes, nuint length, bool freeBuffer);

        // -(id _Nullable)initWithCString:(const char * _Nonnull)bytes length:(NSUInteger)length __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -initWithCString:encoding: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -initWithCString:encoding: instead")]
        [Export("initWithCString:length:")]
        unsafe IntPtr Constructor(sbyte* bytes, nuint length);

        // -(id _Nullable)initWithCString:(const char * _Nonnull)bytes __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -initWithCString:encoding: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use -initWithCString:encoding: instead")]
        [Export("initWithCString:")]
        unsafe IntPtr Constructor(sbyte* bytes);

        // +(id _Nullable)stringWithCString:(const char * _Nonnull)bytes length:(NSUInteger)length __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use +stringWithCString:encoding:")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use +stringWithCString:encoding:")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use +stringWithCString:encoding:")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use +stringWithCString:encoding:")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use +stringWithCString:encoding:")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use +stringWithCString:encoding:")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use +stringWithCString:encoding:")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use +stringWithCString:encoding:")]
        [Static]
        [Export("stringWithCString:length:")]
        [return: NullAllowed]
        unsafe NSObject StringWithCString(sbyte* bytes, nuint length);

        // +(id _Nullable)stringWithCString:(const char * _Nonnull)bytes __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use +stringWithCString:encoding: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use +stringWithCString:encoding: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use +stringWithCString:encoding: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use +stringWithCString:encoding: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use +stringWithCString:encoding: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use +stringWithCString:encoding: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use +stringWithCString:encoding: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Use +stringWithCString:encoding: instead")]
        [Static]
        [Export("stringWithCString:")]
        [return: NullAllowed]
        unsafe NSObject StringWithCString(sbyte* bytes);

        // -(void)getCharacters:(unichar * _Nonnull)buffer;
        [Export("getCharacters:")]
        unsafe void GetCharacters(ushort* buffer);
    }

    // @interface NSSimpleCString : NSString
    [BaseType(typeof(NSString))]
    interface NSSimpleCString
    {
    }

    // @interface NSConstantString : NSSimpleCString
    [BaseType(typeof(NSSimpleCString))]
    interface NSConstantString
    {
    }

    // audit-objc-generics: @interface NSDictionary<__covariant KeyType, __covariant ObjectType> : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
    [BaseType(typeof(NSObject))]
    interface NSDictionary : INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration
    {
        // @property (readonly) NSUInteger count;
        [Export("count")]
        nuint Count { get; }

        // -(ObjectType _Nullable)objectForKey:(KeyType _Nonnull)aKey;
        [Export("objectForKey:")]
        [return: NullAllowed]
        NSObject ObjectForKey(NSObject aKey);

        // -(NSEnumerator<KeyType> * _Nonnull)keyEnumerator;
        [Export("keyEnumerator")]
        [Verify(MethodToProperty)]
        NSEnumerator<NSObject> KeyEnumerator { get; }

        // -(instancetype _Nonnull)initWithObjects:(ObjectType  _Nonnull const * _Nullable)objects forKeys:(KeyType<NSCopying>  _Nonnull const * _Nullable)keys count:(NSUInteger)cnt __attribute__((objc_designated_initializer));
        [Export("initWithObjects:forKeys:count:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] NSObject[] objects, [NullAllowed] NSObject[] keys, nuint cnt);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @interface NSExtendedDictionary (NSDictionary)
    [Category]
    [BaseType(typeof(NSDictionary))]
    interface NSDictionary_NSExtendedDictionary
    {
        // @property (readonly, copy) NSArray<KeyType> * _Nonnull allKeys;
        [Export("allKeys", ArgumentSemantic.Copy)]
        NSObject[] AllKeys { get; }

        // -(NSArray<KeyType> * _Nonnull)allKeysForObject:(ObjectType _Nonnull)anObject;
        [Export("allKeysForObject:")]
        NSObject[] AllKeysForObject(NSObject anObject);

        // @property (readonly, copy) NSArray<ObjectType> * _Nonnull allValues;
        [Export("allValues", ArgumentSemantic.Copy)]
        NSObject[] AllValues { get; }

        // @property (readonly, copy) NSString * _Nonnull description;
        [Export("description")]
        string Description { get; }

        // @property (readonly, copy) NSString * _Nonnull descriptionInStringsFileFormat;
        [Export("descriptionInStringsFileFormat")]
        string DescriptionInStringsFileFormat { get; }

        // -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
        [Export("descriptionWithLocale:")]
        string DescriptionWithLocale([NullAllowed] NSObject locale);

        // -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale indent:(NSUInteger)level;
        [Export("descriptionWithLocale:indent:")]
        string DescriptionWithLocale([NullAllowed] NSObject locale, nuint level);

        // -(BOOL)isEqualToDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary;
        [Export("isEqualToDictionary:")]
        bool IsEqualToDictionary(NSDictionary<NSObject, NSObject> otherDictionary);

        // -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
        [Export("objectEnumerator")]
        [Verify(MethodToProperty)]
        NSEnumerator<NSObject> ObjectEnumerator { get; }

        // -(NSArray<ObjectType> * _Nonnull)objectsForKeys:(NSArray<KeyType> * _Nonnull)keys notFoundMarker:(ObjectType _Nonnull)marker;
        [Export("objectsForKeys:notFoundMarker:")]
        NSObject[] ObjectsForKeys(NSObject[] keys, NSObject marker);

        // -(BOOL)writeToURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("writeToURL:error:")]
        bool WriteToURL(NSUrl url, [NullAllowed] out NSError error);

        // -(NSArray<KeyType> * _Nonnull)keysSortedByValueUsingSelector:(SEL _Nonnull)comparator;
        [Export("keysSortedByValueUsingSelector:")]
        NSObject[] KeysSortedByValueUsingSelector(Selector comparator);

        // -(void)getObjects:(ObjectType  _Nonnull * _Nullable)objects andKeys:(KeyType  _Nonnull * _Nullable)keys count:(NSUInteger)count __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("getObjects:andKeys:count:")]
        void GetObjects([NullAllowed] NSObject[] objects, [NullAllowed] NSObject[] keys, nuint count);

        // -(ObjectType _Nullable)objectForKeyedSubscript:(KeyType _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("objectForKeyedSubscript:")]
        [return: NullAllowed]
        NSObject ObjectForKeyedSubscript(NSObject key);

        // -(void)enumerateKeysAndObjectsUsingBlock:(void (^ _Nonnull)(KeyType _Nonnull, ObjectType _Nonnull, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateKeysAndObjectsUsingBlock:")]
        unsafe void EnumerateKeysAndObjectsUsingBlock(Action<NSObject, NSObject, bool*> block);

        // -(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(KeyType _Nonnull, ObjectType _Nonnull, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateKeysAndObjectsWithOptions:usingBlock:")]
        unsafe void EnumerateKeysAndObjectsWithOptions(NSEnumerationOptions opts, Action<NSObject, NSObject, bool*> block);

        // -(NSArray<KeyType> * _Nonnull)keysSortedByValueUsingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("keysSortedByValueUsingComparator:")]
        NSObject[] KeysSortedByValueUsingComparator(NSComparator cmptr);

        // -(NSArray<KeyType> * _Nonnull)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("keysSortedByValueWithOptions:usingComparator:")]
        NSObject[] KeysSortedByValueWithOptions(NSSortOptions opts, NSComparator cmptr);

        // -(NSSet<KeyType> * _Nonnull)keysOfEntriesPassingTest:(BOOL (^ _Nonnull)(KeyType _Nonnull, ObjectType _Nonnull, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("keysOfEntriesPassingTest:")]
        unsafe NSSet<NSObject> KeysOfEntriesPassingTest(Func<NSObject, NSObject, bool*, bool> predicate);

        // -(NSSet<KeyType> * _Nonnull)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(KeyType _Nonnull, ObjectType _Nonnull, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("keysOfEntriesWithOptions:passingTest:")]
        unsafe NSSet<NSObject> KeysOfEntriesWithOptions(NSEnumerationOptions opts, Func<NSObject, NSObject, bool*, bool> predicate);
    }

    // @interface NSDeprecated (NSDictionary)
    [Category]
    [BaseType(typeof(NSDictionary))]
    interface NSDictionary_NSDeprecated
    {
        // -(void)getObjects:(ObjectType  _Nonnull * _Nullable)objects andKeys:(KeyType  _Nonnull * _Nullable)keys __attribute__((availability(tvos, introduced=9.0, deprecated=11.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=4.0))) __attribute__((availability(ios, introduced=2.0, deprecated=11.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.13)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -getObjects:andKeys:count: instead")]
        [Deprecated(PlatformName.TvOS, 11, 0, message: "Use -getObjects:andKeys:count: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -getObjects:andKeys:count: instead")]
        [Deprecated(PlatformName.WatchOS, 4, 0, message: "Use -getObjects:andKeys:count: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -getObjects:andKeys:count: instead")]
        [Deprecated(PlatformName.iOS, 11, 0, message: "Use -getObjects:andKeys:count: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -getObjects:andKeys:count: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 13, message: "Use -getObjects:andKeys:count: instead")]
        [Export("getObjects:andKeys:")]
        void GetObjects([NullAllowed] NSObject[] objects, [NullAllowed] NSObject[] keys);

        // +(NSDictionary<KeyType,ObjectType> * _Nullable)dictionaryWithContentsOfFile:(NSString * _Nonnull)path;
        [Static]
        [Export("dictionaryWithContentsOfFile:")]
        [return: NullAllowed]
        NSDictionary<NSObject, NSObject> DictionaryWithContentsOfFile(string path);

        // +(NSDictionary<KeyType,ObjectType> * _Nullable)dictionaryWithContentsOfURL:(NSURL * _Nonnull)url;
        [Static]
        [Export("dictionaryWithContentsOfURL:")]
        [return: NullAllowed]
        NSDictionary<NSObject, NSObject> DictionaryWithContentsOfURL(NSUrl url);

        // -(NSDictionary<KeyType,ObjectType> * _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
        [Export("initWithContentsOfFile:")]
        IntPtr Constructor(string path);

        // -(NSDictionary<KeyType,ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
        [Export("initWithContentsOfURL:")]
        IntPtr Constructor(NSUrl url);

        // -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile;
        [Export("writeToFile:atomically:")]
        bool WriteToFile(string path, bool useAuxiliaryFile);

        // -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)atomically;
        [Export("writeToURL:atomically:")]
        bool WriteToURL(NSUrl url, bool atomically);
    }

    // @interface NSDictionaryCreation (NSDictionary)
    [Category]
    [BaseType(typeof(NSDictionary))]
    interface NSDictionary_NSDictionaryCreation
    {
        // +(instancetype _Nonnull)dictionary;
        [Static]
        [Export("dictionary")]
        NSDictionary Dictionary();

        // +(instancetype _Nonnull)dictionaryWithObject:(ObjectType _Nonnull)object forKey:(KeyType<NSCopying> _Nonnull)key;
        [Static]
        [Export("dictionaryWithObject:forKey:")]
        NSDictionary DictionaryWithObject(NSObject @object, NSObject key);

        // +(instancetype _Nonnull)dictionaryWithObjects:(ObjectType  _Nonnull const * _Nullable)objects forKeys:(KeyType<NSCopying>  _Nonnull const * _Nullable)keys count:(NSUInteger)cnt;
        [Static]
        [Export("dictionaryWithObjects:forKeys:count:")]
        NSDictionary DictionaryWithObjects([NullAllowed] NSObject[] objects, [NullAllowed] NSObject[] keys, nuint cnt);

        // +(instancetype _Nonnull)dictionaryWithObjectsAndKeys:(id _Nonnull)firstObject, ... __attribute__((sentinel(0, 1)));
        [Static, Internal]
        [Export("dictionaryWithObjectsAndKeys:", IsVariadic = true)]
        NSDictionary DictionaryWithObjectsAndKeys(NSObject firstObject, IntPtr varArgs);

        // +(instancetype _Nonnull)dictionaryWithDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)dict;
        [Static]
        [Export("dictionaryWithDictionary:")]
        NSDictionary DictionaryWithDictionary(NSDictionary<NSObject, NSObject> dict);

        // +(instancetype _Nonnull)dictionaryWithObjects:(NSArray<ObjectType> * _Nonnull)objects forKeys:(NSArray<KeyType<NSCopying>> * _Nonnull)keys;
        [Static]
        [Export("dictionaryWithObjects:forKeys:")]
        NSDictionary DictionaryWithObjects(NSObject[] objects, NSObject[] keys);

        // -(instancetype _Nonnull)initWithObjectsAndKeys:(id _Nonnull)firstObject, ... __attribute__((sentinel(0, 1)));
        [Internal]
        [Export("initWithObjectsAndKeys:", IsVariadic = true)]
        IntPtr Constructor(NSObject firstObject, IntPtr varArgs);

        // -(instancetype _Nonnull)initWithDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary;
        [Export("initWithDictionary:")]
        IntPtr Constructor(NSDictionary<NSObject, NSObject> otherDictionary);

        // -(instancetype _Nonnull)initWithDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary copyItems:(BOOL)flag;
        [Export("initWithDictionary:copyItems:")]
        IntPtr Constructor(NSDictionary<NSObject, NSObject> otherDictionary, bool flag);

        // -(instancetype _Nonnull)initWithObjects:(NSArray<ObjectType> * _Nonnull)objects forKeys:(NSArray<KeyType<NSCopying>> * _Nonnull)keys;
        [Export("initWithObjects:forKeys:")]
        IntPtr Constructor(NSObject[] objects, NSObject[] keys);

        // -(NSDictionary<NSString *,ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("initWithContentsOfURL:error:")]
        IntPtr Constructor(NSUrl url, [NullAllowed] out NSError error);

        // +(NSDictionary<NSString *,ObjectType> * _Nullable)dictionaryWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Static]
        [Export("dictionaryWithContentsOfURL:error:")]
        [return: NullAllowed]
        NSDictionary<NSString, NSObject> DictionaryWithContentsOfURL(NSUrl url, [NullAllowed] out NSError error);
    }

    // audit-objc-generics: @interface NSMutableDictionary<KeyType, ObjectType> : NSDictionary
    [BaseType(typeof(NSDictionary))]
    interface NSMutableDictionary
    {
        // -(void)removeObjectForKey:(KeyType _Nonnull)aKey;
        [Export("removeObjectForKey:")]
        void RemoveObjectForKey(NSObject aKey);

        // -(void)setObject:(ObjectType _Nonnull)anObject forKey:(KeyType<NSCopying> _Nonnull)aKey;
        [Export("setObject:forKey:")]
        void SetObject(NSObject anObject, NSObject aKey);

        // -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
        [Export("initWithCapacity:")]
        [DesignatedInitializer]
        IntPtr Constructor(nuint numItems);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @interface NSExtendedMutableDictionary (NSMutableDictionary)
    [Category]
    [BaseType(typeof(NSMutableDictionary))]
    interface NSMutableDictionary_NSExtendedMutableDictionary
    {
        // -(void)addEntriesFromDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary;
        [Export("addEntriesFromDictionary:")]
        void AddEntriesFromDictionary(NSDictionary<NSObject, NSObject> otherDictionary);

        // -(void)removeAllObjects;
        [Export("removeAllObjects")]
        void RemoveAllObjects();

        // -(void)removeObjectsForKeys:(NSArray<KeyType> * _Nonnull)keyArray;
        [Export("removeObjectsForKeys:")]
        void RemoveObjectsForKeys(NSObject[] keyArray);

        // -(void)setDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary;
        [Export("setDictionary:")]
        void SetDictionary(NSDictionary<NSObject, NSObject> otherDictionary);

        // -(void)setObject:(ObjectType _Nullable)obj forKeyedSubscript:(KeyType<NSCopying> _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("setObject:forKeyedSubscript:")]
        void SetObject([NullAllowed] NSObject obj, NSObject key);
    }

    // @interface NSMutableDictionaryCreation (NSMutableDictionary)
    [Category]
    [BaseType(typeof(NSMutableDictionary))]
    interface NSMutableDictionary_NSMutableDictionaryCreation
    {
        // +(instancetype _Nonnull)dictionaryWithCapacity:(NSUInteger)numItems;
        [Static]
        [Export("dictionaryWithCapacity:")]
        NSMutableDictionary DictionaryWithCapacity(nuint numItems);

        // +(NSMutableDictionary<KeyType,ObjectType> * _Nullable)dictionaryWithContentsOfFile:(NSString * _Nonnull)path;
        [Static]
        [Export("dictionaryWithContentsOfFile:")]
        [return: NullAllowed]
        NSMutableDictionary<NSObject, NSObject> DictionaryWithContentsOfFile(string path);

        // +(NSMutableDictionary<KeyType,ObjectType> * _Nullable)dictionaryWithContentsOfURL:(NSURL * _Nonnull)url;
        [Static]
        [Export("dictionaryWithContentsOfURL:")]
        [return: NullAllowed]
        NSMutableDictionary<NSObject, NSObject> DictionaryWithContentsOfURL(NSUrl url);

        // -(NSMutableDictionary<KeyType,ObjectType> * _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
        [Export("initWithContentsOfFile:")]
        IntPtr Constructor(string path);

        // -(NSMutableDictionary<KeyType,ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
        [Export("initWithContentsOfURL:")]
        IntPtr Constructor(NSUrl url);
    }

    // @interface NSSharedKeySetDictionary (NSDictionary)
    [Category]
    [BaseType(typeof(NSDictionary))]
    interface NSDictionary_NSSharedKeySetDictionary
    {
        // +(id _Nonnull)sharedKeySetForKeys:(NSArray<KeyType<NSCopying>> * _Nonnull)keys __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Static]
        [Export("sharedKeySetForKeys:")]
        NSObject SharedKeySetForKeys(NSObject[] keys);
    }

    // @interface NSSharedKeySetDictionary (NSMutableDictionary)
    [Category]
    [BaseType(typeof(NSMutableDictionary))]
    interface NSMutableDictionary_NSSharedKeySetDictionary
    {
        // +(NSMutableDictionary<KeyType,ObjectType> * _Nonnull)dictionaryWithSharedKeySet:(id _Nonnull)keyset __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Static]
        [Export("dictionaryWithSharedKeySet:")]
        NSMutableDictionary<NSObject, NSObject> DictionaryWithSharedKeySet(NSObject keyset);
    }

    // @interface NSGenericFastEnumeraiton (NSDictionary) <NSFastEnumeration>
    [Category]
    [BaseType(typeof(NSDictionary))]
    interface NSDictionary_NSGenericFastEnumeraiton : INSFastEnumeration
    {
        // -(NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState * _Nonnull)state objects:(K  _Nullable * _Nonnull)buffer count:(NSUInteger)len;
        [Export("countByEnumeratingWithState:objects:count:")]
        unsafe nuint CountByEnumeratingWithState(NSFastEnumerationState* state, NSObject[] buffer, nuint len);
    }

    // audit-objc-generics: @interface NSSet<__covariant ObjectType> : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
    [BaseType(typeof(NSObject))]
    interface NSSet : INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration
    {
        // @property (readonly) NSUInteger count;
        [Export("count")]
        nuint Count { get; }

        // -(ObjectType _Nullable)member:(ObjectType _Nonnull)object;
        [Export("member:")]
        [return: NullAllowed]
        NSObject Member(NSObject @object);

        // -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
        [Export("objectEnumerator")]
        [Verify(MethodToProperty)]
        NSEnumerator<NSObject> ObjectEnumerator { get; }

        // -(instancetype _Nonnull)initWithObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)cnt __attribute__((objc_designated_initializer));
        [Export("initWithObjects:count:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] NSObject[] objects, nuint cnt);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @interface NSExtendedSet (NSSet)
    [Category]
    [BaseType(typeof(NSSet))]
    interface NSSet_NSExtendedSet
    {
        // @property (readonly, copy) NSArray<ObjectType> * _Nonnull allObjects;
        [Export("allObjects", ArgumentSemantic.Copy)]
        NSObject[] AllObjects { get; }

        // -(ObjectType _Nullable)anyObject;
        [NullAllowed, Export("anyObject")]
        [Verify(MethodToProperty)]
        NSObject AnyObject { get; }

        // -(BOOL)containsObject:(ObjectType _Nonnull)anObject;
        [Export("containsObject:")]
        bool ContainsObject(NSObject anObject);

        // @property (readonly, copy) NSString * _Nonnull description;
        [Export("description")]
        string Description { get; }

        // -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
        [Export("descriptionWithLocale:")]
        string DescriptionWithLocale([NullAllowed] NSObject locale);

        // -(BOOL)intersectsSet:(NSSet<ObjectType> * _Nonnull)otherSet;
        [Export("intersectsSet:")]
        bool IntersectsSet(NSSet<NSObject> otherSet);

        // -(BOOL)isEqualToSet:(NSSet<ObjectType> * _Nonnull)otherSet;
        [Export("isEqualToSet:")]
        bool IsEqualToSet(NSSet<NSObject> otherSet);

        // -(BOOL)isSubsetOfSet:(NSSet<ObjectType> * _Nonnull)otherSet;
        [Export("isSubsetOfSet:")]
        bool IsSubsetOfSet(NSSet<NSObject> otherSet);

        // -(void)makeObjectsPerformSelector:(SEL _Nonnull)aSelector;
        [Export("makeObjectsPerformSelector:")]
        void MakeObjectsPerformSelector(Selector aSelector);

        // -(void)makeObjectsPerformSelector:(SEL _Nonnull)aSelector withObject:(id _Nullable)argument;
        [Export("makeObjectsPerformSelector:withObject:")]
        void MakeObjectsPerformSelector(Selector aSelector, [NullAllowed] NSObject argument);

        // -(NSSet<ObjectType> * _Nonnull)setByAddingObject:(ObjectType _Nonnull)anObject __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("setByAddingObject:")]
        NSSet<NSObject> SetByAddingObject(NSObject anObject);

        // -(NSSet<ObjectType> * _Nonnull)setByAddingObjectsFromSet:(NSSet<ObjectType> * _Nonnull)other __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("setByAddingObjectsFromSet:")]
        NSSet<NSObject> SetByAddingObjectsFromSet(NSSet<NSObject> other);

        // -(NSSet<ObjectType> * _Nonnull)setByAddingObjectsFromArray:(NSArray<ObjectType> * _Nonnull)other __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("setByAddingObjectsFromArray:")]
        NSSet<NSObject> SetByAddingObjectsFromArray(NSObject[] other);

        // -(void)enumerateObjectsUsingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateObjectsUsingBlock:")]
        unsafe void EnumerateObjectsUsingBlock(Action<NSObject, bool*> block);

        // -(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateObjectsWithOptions:usingBlock:")]
        unsafe void EnumerateObjectsWithOptions(NSEnumerationOptions opts, Action<NSObject, bool*> block);

        // -(NSSet<ObjectType> * _Nonnull)objectsPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("objectsPassingTest:")]
        unsafe NSSet<NSObject> ObjectsPassingTest(Func<NSObject, bool*, bool> predicate);

        // -(NSSet<ObjectType> * _Nonnull)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("objectsWithOptions:passingTest:")]
        unsafe NSSet<NSObject> ObjectsWithOptions(NSEnumerationOptions opts, Func<NSObject, bool*, bool> predicate);
    }

    // @interface NSSetCreation (NSSet)
    [Category]
    [BaseType(typeof(NSSet))]
    interface NSSet_NSSetCreation
    {
        // +(instancetype _Nonnull)set;
        [Static]
        [Export("set")]
        NSSet Set();

        // +(instancetype _Nonnull)setWithObject:(ObjectType _Nonnull)object;
        [Static]
        [Export("setWithObject:")]
        NSSet SetWithObject(NSObject @object);

        // +(instancetype _Nonnull)setWithObjects:(ObjectType  _Nonnull const * _Nonnull)objects count:(NSUInteger)cnt;
        [Static]
        [Export("setWithObjects:count:")]
        NSSet SetWithObjects(NSObject[] objects, nuint cnt);

        // +(instancetype _Nonnull)setWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
        [Static, Internal]
        [Export("setWithObjects:", IsVariadic = true)]
        NSSet SetWithObjects(NSObject firstObj, IntPtr varArgs);

        // +(instancetype _Nonnull)setWithSet:(NSSet<ObjectType> * _Nonnull)set;
        [Static]
        [Export("setWithSet:")]
        NSSet SetWithSet(NSSet<NSObject> set);

        // +(instancetype _Nonnull)setWithArray:(NSArray<ObjectType> * _Nonnull)array;
        [Static]
        [Export("setWithArray:")]
        NSSet SetWithArray(NSObject[] array);

        // -(instancetype _Nonnull)initWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
        [Internal]
        [Export("initWithObjects:", IsVariadic = true)]
        IntPtr Constructor(NSObject firstObj, IntPtr varArgs);

        // -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set;
        [Export("initWithSet:")]
        IntPtr Constructor(NSSet<NSObject> set);

        // -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
        [Export("initWithSet:copyItems:")]
        IntPtr Constructor(NSSet<NSObject> set, bool flag);

        // -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array;
        [Export("initWithArray:")]
        IntPtr Constructor(NSObject[] array);
    }

    // audit-objc-generics: @interface NSMutableSet<ObjectType> : NSSet
    [BaseType(typeof(NSSet))]
    interface NSMutableSet
    {
        // -(void)addObject:(ObjectType _Nonnull)object;
        [Export("addObject:")]
        void AddObject(NSObject @object);

        // -(void)removeObject:(ObjectType _Nonnull)object;
        [Export("removeObject:")]
        void RemoveObject(NSObject @object);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);

        // -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
        [Export("initWithCapacity:")]
        [DesignatedInitializer]
        IntPtr Constructor(nuint numItems);
    }

    // @interface NSExtendedMutableSet (NSMutableSet)
    [Category]
    [BaseType(typeof(NSMutableSet))]
    interface NSMutableSet_NSExtendedMutableSet
    {
        // -(void)addObjectsFromArray:(NSArray<ObjectType> * _Nonnull)array;
        [Export("addObjectsFromArray:")]
        void AddObjectsFromArray(NSObject[] array);

        // -(void)intersectSet:(NSSet<ObjectType> * _Nonnull)otherSet;
        [Export("intersectSet:")]
        void IntersectSet(NSSet<NSObject> otherSet);

        // -(void)minusSet:(NSSet<ObjectType> * _Nonnull)otherSet;
        [Export("minusSet:")]
        void MinusSet(NSSet<NSObject> otherSet);

        // -(void)removeAllObjects;
        [Export("removeAllObjects")]
        void RemoveAllObjects();

        // -(void)unionSet:(NSSet<ObjectType> * _Nonnull)otherSet;
        [Export("unionSet:")]
        void UnionSet(NSSet<NSObject> otherSet);

        // -(void)setSet:(NSSet<ObjectType> * _Nonnull)otherSet;
        [Export("setSet:")]
        void SetSet(NSSet<NSObject> otherSet);
    }

    // @interface NSMutableSetCreation (NSMutableSet)
    [Category]
    [BaseType(typeof(NSMutableSet))]
    interface NSMutableSet_NSMutableSetCreation
    {
        // +(instancetype _Nonnull)setWithCapacity:(NSUInteger)numItems;
        [Static]
        [Export("setWithCapacity:")]
        NSMutableSet SetWithCapacity(nuint numItems);
    }

    // audit-objc-generics: @interface NSCountedSet<ObjectType> : NSMutableSet
    [BaseType(typeof(NSMutableSet))]
    interface NSCountedSet
    {
        // -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
        [Export("initWithCapacity:")]
        [DesignatedInitializer]
        IntPtr Constructor(nuint numItems);

        // -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array;
        [Export("initWithArray:")]
        IntPtr Constructor(NSObject[] array);

        // -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set;
        [Export("initWithSet:")]
        IntPtr Constructor(NSSet<NSObject> set);

        // -(NSUInteger)countForObject:(ObjectType _Nonnull)object;
        [Export("countForObject:")]
        nuint CountForObject(NSObject @object);

        // -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
        [Export("objectEnumerator")]
        [Verify(MethodToProperty)]
        NSEnumerator<NSObject> ObjectEnumerator { get; }

        // -(void)addObject:(ObjectType _Nonnull)object;
        [Export("addObject:")]
        void AddObject(NSObject @object);

        // -(void)removeObject:(ObjectType _Nonnull)object;
        [Export("removeObject:")]
        void RemoveObject(NSObject @object);
    }

    // @interface NSProgress : NSObject
    [iOS(7, 0)]
    [BaseType(typeof(NSObject))]
    interface NSProgress
    {
        // +(NSProgress * _Nullable)currentProgress;
        [Static]
        [NullAllowed, Export("currentProgress")]
        [Verify(MethodToProperty)]
        NSProgress CurrentProgress { get; }

        // +(NSProgress * _Nonnull)progressWithTotalUnitCount:(int64_t)unitCount;
        [Static]
        [Export("progressWithTotalUnitCount:")]
        NSProgress ProgressWithTotalUnitCount(long unitCount);

        // +(NSProgress * _Nonnull)discreteProgressWithTotalUnitCount:(int64_t)unitCount __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("discreteProgressWithTotalUnitCount:")]
        NSProgress DiscreteProgressWithTotalUnitCount(long unitCount);

        // +(NSProgress * _Nonnull)progressWithTotalUnitCount:(int64_t)unitCount parent:(NSProgress * _Nonnull)parent pendingUnitCount:(int64_t)portionOfParentTotalUnitCount __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("progressWithTotalUnitCount:parent:pendingUnitCount:")]
        NSProgress ProgressWithTotalUnitCount(long unitCount, NSProgress parent, long portionOfParentTotalUnitCount);

        // -(instancetype _Nonnull)initWithParent:(NSProgress * _Nullable)parentProgressOrNil userInfo:(NSDictionary<NSProgressUserInfoKey,id> * _Nullable)userInfoOrNil __attribute__((objc_designated_initializer));
        [Export("initWithParent:userInfo:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] NSProgress parentProgressOrNil, [NullAllowed] NSDictionary<NSString, NSObject> userInfoOrNil);

        // -(void)becomeCurrentWithPendingUnitCount:(int64_t)unitCount;
        [Export("becomeCurrentWithPendingUnitCount:")]
        void BecomeCurrentWithPendingUnitCount(long unitCount);

        // -(void)performAsCurrentWithPendingUnitCount:(int64_t)unitCount usingBlock:(void (^ _Nonnull)(void))work __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("performAsCurrentWithPendingUnitCount:usingBlock:")]
        void PerformAsCurrentWithPendingUnitCount(long unitCount, Action work);

        // -(void)resignCurrent;
        [Export("resignCurrent")]
        void ResignCurrent();

        // -(void)addChild:(NSProgress * _Nonnull)child withPendingUnitCount:(int64_t)inUnitCount __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("addChild:withPendingUnitCount:")]
        void AddChild(NSProgress child, long inUnitCount);

        // @property int64_t totalUnitCount;
        [Export("totalUnitCount")]
        long TotalUnitCount { get; set; }

        // @property int64_t completedUnitCount;
        [Export("completedUnitCount")]
        long CompletedUnitCount { get; set; }

        // @property (copy) NSString * _Null_unspecified localizedDescription;
        [Export("localizedDescription")]
        string LocalizedDescription { get; set; }

        // @property (copy) NSString * _Null_unspecified localizedAdditionalDescription;
        [Export("localizedAdditionalDescription")]
        string LocalizedAdditionalDescription { get; set; }

        // @property (getter = isCancellable) BOOL cancellable;
        [Export("cancellable")]
        bool Cancellable { [Bind("isCancellable")] get; set; }

        // @property (getter = isPausable) BOOL pausable;
        [Export("pausable")]
        bool Pausable { [Bind("isPausable")] get; set; }

        // @property (readonly, getter = isCancelled) BOOL cancelled;
        [Export("cancelled")]
        bool Cancelled { [Bind("isCancelled")] get; }

        // @property (readonly, getter = isPaused) BOOL paused;
        [Export("paused")]
        bool Paused { [Bind("isPaused")] get; }

        // @property (copy) void (^ _Nullable)(void) cancellationHandler;
        [NullAllowed, Export("cancellationHandler", ArgumentSemantic.Copy)]
        Action CancellationHandler { get; set; }

        // @property (copy) void (^ _Nullable)(void) pausingHandler;
        [NullAllowed, Export("pausingHandler", ArgumentSemantic.Copy)]
        Action PausingHandler { get; set; }

        // @property (copy) void (^ _Nullable)(void) resumingHandler __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [NullAllowed, Export("resumingHandler", ArgumentSemantic.Copy)]
        Action ResumingHandler { get; set; }

        // -(void)setUserInfoObject:(id _Nullable)objectOrNil forKey:(NSProgressUserInfoKey _Nonnull)key;
        [Export("setUserInfoObject:forKey:")]
        void SetUserInfoObject([NullAllowed] NSObject objectOrNil, string key);

        // @property (readonly, getter = isIndeterminate) BOOL indeterminate;
        [Export("indeterminate")]
        bool Indeterminate { [Bind("isIndeterminate")] get; }

        // @property (readonly) double fractionCompleted;
        [Export("fractionCompleted")]
        double FractionCompleted { get; }

        // @property (readonly, getter = isFinished) BOOL finished;
        [Export("finished")]
        bool Finished { [Bind("isFinished")] get; }

        // -(void)cancel;
        [Export("cancel")]
        void Cancel();

        // -(void)pause;
        [Export("pause")]
        void Pause();

        // -(void)resume __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("resume")]
        void Resume();

        // @property (readonly, copy) NSDictionary<NSProgressUserInfoKey,id> * _Nonnull userInfo;
        [Export("userInfo", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> UserInfo { get; }

        // @property (copy) NSProgressKind _Nullable kind;
        [NullAllowed, Export("kind")]
        string Kind { get; set; }

        // @property (copy) NSNumber * _Nullable estimatedTimeRemaining __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [NullAllowed, Export("estimatedTimeRemaining", ArgumentSemantic.Copy)]
        NSNumber EstimatedTimeRemaining { get; set; }

        // @property (copy) NSNumber * _Nullable throughput __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [NullAllowed, Export("throughput", ArgumentSemantic.Copy)]
        NSNumber Throughput { get; set; }

        // @property (copy) NSProgressFileOperationKind _Nullable fileOperationKind __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [NullAllowed, Export("fileOperationKind")]
        string FileOperationKind { get; set; }

        // @property (copy) NSURL * _Nullable fileURL __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [NullAllowed, Export("fileURL", ArgumentSemantic.Copy)]
        NSUrl FileURL { get; set; }

        // @property (copy) NSNumber * _Nullable fileTotalCount __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [NullAllowed, Export("fileTotalCount", ArgumentSemantic.Copy)]
        NSNumber FileTotalCount { get; set; }

        // @property (copy) NSNumber * _Nullable fileCompletedCount __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [NullAllowed, Export("fileCompletedCount", ArgumentSemantic.Copy)]
        NSNumber FileCompletedCount { get; set; }

        // -(void)publish __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Export("publish")]
        void Publish();

        // -(void)unpublish __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Export("unpublish")]
        void Unpublish();

        // +(id _Nonnull)addSubscriberForFileURL:(NSURL * _Nonnull)url withPublishingHandler:(NSProgressPublishingHandler _Nonnull)publishingHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Static]
        [Export("addSubscriberForFileURL:withPublishingHandler:")]
        NSObject AddSubscriberForFileURL(NSUrl url, NSProgressPublishingHandler publishingHandler);

        // +(void)removeSubscriber:(id _Nonnull)subscriber __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Static]
        [Export("removeSubscriber:")]
        void RemoveSubscriber(NSObject subscriber);

        // @property (readonly, getter = isOld) BOOL old __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Export("old")]
        bool Old { [Bind("isOld")] get; }
    }

    // typedef void (^NSProgressUnpublishingHandler)();
    delegate void NSProgressUnpublishingHandler();

    // typedef NSProgressUnpublishingHandler _Nullable (^NSProgressPublishingHandler)(NSProgress * _Nonnull);
    delegate NSProgressUnpublishingHandler NSProgressPublishingHandler(NSProgress arg0);

    // @protocol NSProgressReporting <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSProgressReporting
    {
        // @required @property (readonly) NSProgress * _Nonnull progress;
        [Abstract]
        [Export("progress")]
        NSProgress Progress { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSProgressUserInfoKey _Nonnull NSProgressEstimatedTimeRemainingKey __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSProgressEstimatedTimeRemainingKey", "__Internal")]
        NSString NSProgressEstimatedTimeRemainingKey { get; }

        // extern const NSProgressUserInfoKey _Nonnull NSProgressThroughputKey __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSProgressThroughputKey", "__Internal")]
        NSString NSProgressThroughputKey { get; }

        // extern const NSProgressKind _Nonnull NSProgressKindFile __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSProgressKindFile", "__Internal")]
        NSString NSProgressKindFile { get; }

        // extern const NSProgressUserInfoKey _Nonnull NSProgressFileOperationKindKey __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSProgressFileOperationKindKey", "__Internal")]
        NSString NSProgressFileOperationKindKey { get; }

        // extern const NSProgressFileOperationKind _Nonnull NSProgressFileOperationKindDownloading __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSProgressFileOperationKindDownloading", "__Internal")]
        NSString NSProgressFileOperationKindDownloading { get; }

        // extern const NSProgressFileOperationKind _Nonnull NSProgressFileOperationKindDecompressingAfterDownloading __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSProgressFileOperationKindDecompressingAfterDownloading", "__Internal")]
        NSString NSProgressFileOperationKindDecompressingAfterDownloading { get; }

        // extern const NSProgressFileOperationKind _Nonnull NSProgressFileOperationKindReceiving __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSProgressFileOperationKindReceiving", "__Internal")]
        NSString NSProgressFileOperationKindReceiving { get; }

        // extern const NSProgressFileOperationKind _Nonnull NSProgressFileOperationKindCopying __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSProgressFileOperationKindCopying", "__Internal")]
        NSString NSProgressFileOperationKindCopying { get; }

        // extern const NSProgressUserInfoKey _Nonnull NSProgressFileURLKey __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSProgressFileURLKey", "__Internal")]
        NSString NSProgressFileURLKey { get; }

        // extern const NSProgressUserInfoKey _Nonnull NSProgressFileTotalCountKey __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSProgressFileTotalCountKey", "__Internal")]
        NSString NSProgressFileTotalCountKey { get; }

        // extern const NSProgressUserInfoKey _Nonnull NSProgressFileCompletedCountKey __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSProgressFileCompletedCountKey", "__Internal")]
        NSString NSProgressFileCompletedCountKey { get; }

        // extern const NSProgressUserInfoKey _Nonnull NSProgressFileAnimationImageKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSProgressFileAnimationImageKey", "__Internal")]
        NSString NSProgressFileAnimationImageKey { get; }

        // extern const NSProgressUserInfoKey _Nonnull NSProgressFileAnimationImageOriginalRectKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSProgressFileAnimationImageOriginalRectKey", "__Internal")]
        NSString NSProgressFileAnimationImageOriginalRectKey { get; }

        // extern const NSProgressUserInfoKey _Nonnull NSProgressFileIconKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSProgressFileIconKey", "__Internal")]
        NSString NSProgressFileIconKey { get; }
    }

    // @interface NSNotification : NSObject <NSCopying, NSCoding>
    [BaseType(typeof(NSObject))]
    interface NSNotification : INSCopying, INSCoding
    {
        // @property (readonly, copy) NSNotificationName _Nonnull name;
        [Export("name")]
        string Name { get; }

        // @property (readonly, retain) id _Nullable object;
        [NullAllowed, Export("object", ArgumentSemantic.Retain)]
        NSObject Object { get; }

        // @property (readonly, copy) NSDictionary * _Nullable userInfo;
        [NullAllowed, Export("userInfo", ArgumentSemantic.Copy)]
        NSDictionary UserInfo { get; }

        // -(instancetype _Nonnull)initWithName:(NSNotificationName _Nonnull)name object:(id _Nullable)object userInfo:(NSDictionary * _Nullable)userInfo __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("initWithName:object:userInfo:")]
        [DesignatedInitializer]
        IntPtr Constructor(string name, [NullAllowed] NSObject @object, [NullAllowed] NSDictionary userInfo);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @interface NSNotificationCreation (NSNotification)
    [Category]
    [BaseType(typeof(NSNotification))]
    interface NSNotification_NSNotificationCreation
    {
        // +(instancetype _Nonnull)notificationWithName:(NSNotificationName _Nonnull)aName object:(id _Nullable)anObject;
        [Static]
        [Export("notificationWithName:object:")]
        NSNotification NotificationWithName(string aName, [NullAllowed] NSObject anObject);

        // +(instancetype _Nonnull)notificationWithName:(NSNotificationName _Nonnull)aName object:(id _Nullable)anObject userInfo:(NSDictionary * _Nullable)aUserInfo;
        [Static]
        [Export("notificationWithName:object:userInfo:")]
        NSNotification NotificationWithName(string aName, [NullAllowed] NSObject anObject, [NullAllowed] NSDictionary aUserInfo);
    }

    // @interface NSNotificationCenter : NSObject
    [BaseType(typeof(NSObject))]
    interface NSNotificationCenter
    {
        // @property (readonly, strong, class) NSNotificationCenter * _Nonnull defaultCenter;
        [Static]
        [Export("defaultCenter", ArgumentSemantic.Strong)]
        NSNotificationCenter DefaultCenter { get; }

        // -(void)addObserver:(id _Nonnull)observer selector:(SEL _Nonnull)aSelector name:(NSNotificationName _Nullable)aName object:(id _Nullable)anObject;
        [Export("addObserver:selector:name:object:")]
        void AddObserver(NSObject observer, Selector aSelector, [NullAllowed] string aName, [NullAllowed] NSObject anObject);

        // -(void)postNotification:(NSNotification * _Nonnull)notification;
        [Export("postNotification:")]
        void PostNotification(NSNotification notification);

        // -(void)postNotificationName:(NSNotificationName _Nonnull)aName object:(id _Nullable)anObject;
        [Export("postNotificationName:object:")]
        void PostNotificationName(string aName, [NullAllowed] NSObject anObject);

        // -(void)postNotificationName:(NSNotificationName _Nonnull)aName object:(id _Nullable)anObject userInfo:(NSDictionary * _Nullable)aUserInfo;
        [Export("postNotificationName:object:userInfo:")]
        void PostNotificationName(string aName, [NullAllowed] NSObject anObject, [NullAllowed] NSDictionary aUserInfo);

        // -(void)removeObserver:(id _Nonnull)observer;
        [Export("removeObserver:")]
        void RemoveObserver(NSObject observer);

        // -(void)removeObserver:(id _Nonnull)observer name:(NSNotificationName _Nullable)aName object:(id _Nullable)anObject;
        [Export("removeObserver:name:object:")]
        void RemoveObserver(NSObject observer, [NullAllowed] string aName, [NullAllowed] NSObject anObject);

        // -(id<NSObject> _Nonnull)addObserverForName:(NSNotificationName _Nullable)name object:(id _Nullable)obj queue:(NSOperationQueue * _Nullable)queue usingBlock:(void (^ _Nonnull)(NSNotification * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("addObserverForName:object:queue:usingBlock:")]
        NSObject AddObserverForName([NullAllowed] string name, [NullAllowed] NSObject obj, [NullAllowed] NSOperationQueue queue, Action<NSNotification> block);
    }

    // @interface NSBundle : NSObject
    [BaseType(typeof(NSObject))]
    interface NSBundle
    {
        // @property (readonly, strong, class) NSBundle * _Nonnull mainBundle;
        [Static]
        [Export("mainBundle", ArgumentSemantic.Strong)]
        NSBundle MainBundle { get; }

        // +(instancetype _Nullable)bundleWithPath:(NSString * _Nonnull)path;
        [Static]
        [Export("bundleWithPath:")]
        [return: NullAllowed]
        NSBundle BundleWithPath(string path);

        // -(instancetype _Nullable)initWithPath:(NSString * _Nonnull)path __attribute__((objc_designated_initializer));
        [Export("initWithPath:")]
        [DesignatedInitializer]
        IntPtr Constructor(string path);

        // +(instancetype _Nullable)bundleWithURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("bundleWithURL:")]
        [return: NullAllowed]
        NSBundle BundleWithURL(NSUrl url);

        // -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("initWithURL:")]
        IntPtr Constructor(NSUrl url);

        // +(NSBundle * _Nonnull)bundleForClass:(Class _Nonnull)aClass;
        [Static]
        [Export("bundleForClass:")]
        NSBundle BundleForClass(Class aClass);

        // +(NSBundle * _Nullable)bundleWithIdentifier:(NSString * _Nonnull)identifier;
        [Static]
        [Export("bundleWithIdentifier:")]
        [return: NullAllowed]
        NSBundle BundleWithIdentifier(string identifier);

        // @property (readonly, copy, class) NSArray<NSBundle *> * _Nonnull allBundles;
        [Static]
        [Export("allBundles", ArgumentSemantic.Copy)]
        NSBundle[] AllBundles { get; }

        // @property (readonly, copy, class) NSArray<NSBundle *> * _Nonnull allFrameworks;
        [Static]
        [Export("allFrameworks", ArgumentSemantic.Copy)]
        NSBundle[] AllFrameworks { get; }

        // -(BOOL)load;
        [Export("load")]
        [Verify(MethodToProperty)]
        bool Load { get; }

        // @property (readonly, getter = isLoaded) BOOL loaded;
        [Export("loaded")]
        bool Loaded { [Bind("isLoaded")] get; }

        // -(BOOL)unload;
        [Export("unload")]
        [Verify(MethodToProperty)]
        bool Unload { get; }

        // -(BOOL)preflightAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("preflightAndReturnError:")]
        bool PreflightAndReturnError([NullAllowed] out NSError error);

        // -(BOOL)loadAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("loadAndReturnError:")]
        bool LoadAndReturnError([NullAllowed] out NSError error);

        // @property (readonly, copy) NSURL * _Nonnull bundleURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("bundleURL", ArgumentSemantic.Copy)]
        NSUrl BundleURL { get; }

        // @property (readonly, copy) NSURL * _Nullable resourceURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("resourceURL", ArgumentSemantic.Copy)]
        NSUrl ResourceURL { get; }

        // @property (readonly, copy) NSURL * _Nullable executableURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("executableURL", ArgumentSemantic.Copy)]
        NSUrl ExecutableURL { get; }

        // -(NSURL * _Nullable)URLForAuxiliaryExecutable:(NSString * _Nonnull)executableName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("URLForAuxiliaryExecutable:")]
        [return: NullAllowed]
        NSUrl URLForAuxiliaryExecutable(string executableName);

        // @property (readonly, copy) NSURL * _Nullable privateFrameworksURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("privateFrameworksURL", ArgumentSemantic.Copy)]
        NSUrl PrivateFrameworksURL { get; }

        // @property (readonly, copy) NSURL * _Nullable sharedFrameworksURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("sharedFrameworksURL", ArgumentSemantic.Copy)]
        NSUrl SharedFrameworksURL { get; }

        // @property (readonly, copy) NSURL * _Nullable sharedSupportURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("sharedSupportURL", ArgumentSemantic.Copy)]
        NSUrl SharedSupportURL { get; }

        // @property (readonly, copy) NSURL * _Nullable builtInPlugInsURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("builtInPlugInsURL", ArgumentSemantic.Copy)]
        NSUrl BuiltInPlugInsURL { get; }

        // @property (readonly, copy) NSURL * _Nullable appStoreReceiptURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(7, 0)]
        [NullAllowed, Export("appStoreReceiptURL", ArgumentSemantic.Copy)]
        NSUrl AppStoreReceiptURL { get; }

        // @property (readonly, copy) NSString * _Nonnull bundlePath;
        [Export("bundlePath")]
        string BundlePath { get; }

        // @property (readonly, copy) NSString * _Nullable resourcePath;
        [NullAllowed, Export("resourcePath")]
        string ResourcePath { get; }

        // @property (readonly, copy) NSString * _Nullable executablePath;
        [NullAllowed, Export("executablePath")]
        string ExecutablePath { get; }

        // -(NSString * _Nullable)pathForAuxiliaryExecutable:(NSString * _Nonnull)executableName;
        [Export("pathForAuxiliaryExecutable:")]
        [return: NullAllowed]
        string PathForAuxiliaryExecutable(string executableName);

        // @property (readonly, copy) NSString * _Nullable privateFrameworksPath;
        [NullAllowed, Export("privateFrameworksPath")]
        string PrivateFrameworksPath { get; }

        // @property (readonly, copy) NSString * _Nullable sharedFrameworksPath;
        [NullAllowed, Export("sharedFrameworksPath")]
        string SharedFrameworksPath { get; }

        // @property (readonly, copy) NSString * _Nullable sharedSupportPath;
        [NullAllowed, Export("sharedSupportPath")]
        string SharedSupportPath { get; }

        // @property (readonly, copy) NSString * _Nullable builtInPlugInsPath;
        [NullAllowed, Export("builtInPlugInsPath")]
        string BuiltInPlugInsPath { get; }

        // +(NSURL * _Nullable)URLForResource:(NSString * _Nullable)name withExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath inBundleWithURL:(NSURL * _Nonnull)bundleURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("URLForResource:withExtension:subdirectory:inBundleWithURL:")]
        [return: NullAllowed]
        NSUrl URLForResource([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath, NSUrl bundleURL);

        // +(NSArray<NSURL *> * _Nullable)URLsForResourcesWithExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath inBundleWithURL:(NSURL * _Nonnull)bundleURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("URLsForResourcesWithExtension:subdirectory:inBundleWithURL:")]
        [return: NullAllowed]
        NSUrl[] URLsForResourcesWithExtension([NullAllowed] string ext, [NullAllowed] string subpath, NSUrl bundleURL);

        // -(NSURL * _Nullable)URLForResource:(NSString * _Nullable)name withExtension:(NSString * _Nullable)ext __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("URLForResource:withExtension:")]
        [return: NullAllowed]
        NSUrl URLForResource([NullAllowed] string name, [NullAllowed] string ext);

        // -(NSURL * _Nullable)URLForResource:(NSString * _Nullable)name withExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("URLForResource:withExtension:subdirectory:")]
        [return: NullAllowed]
        NSUrl URLForResource([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath);

        // -(NSURL * _Nullable)URLForResource:(NSString * _Nullable)name withExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath localization:(NSString * _Nullable)localizationName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("URLForResource:withExtension:subdirectory:localization:")]
        [return: NullAllowed]
        NSUrl URLForResource([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath, [NullAllowed] string localizationName);

        // -(NSArray<NSURL *> * _Nullable)URLsForResourcesWithExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("URLsForResourcesWithExtension:subdirectory:")]
        [return: NullAllowed]
        NSUrl[] URLsForResourcesWithExtension([NullAllowed] string ext, [NullAllowed] string subpath);

        // -(NSArray<NSURL *> * _Nullable)URLsForResourcesWithExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath localization:(NSString * _Nullable)localizationName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("URLsForResourcesWithExtension:subdirectory:localization:")]
        [return: NullAllowed]
        NSUrl[] URLsForResourcesWithExtension([NullAllowed] string ext, [NullAllowed] string subpath, [NullAllowed] string localizationName);

        // +(NSString * _Nullable)pathForResource:(NSString * _Nullable)name ofType:(NSString * _Nullable)ext inDirectory:(NSString * _Nonnull)bundlePath;
        [Static]
        [Export("pathForResource:ofType:inDirectory:")]
        [return: NullAllowed]
        string PathForResource([NullAllowed] string name, [NullAllowed] string ext, string bundlePath);

        // +(NSArray<NSString *> * _Nonnull)pathsForResourcesOfType:(NSString * _Nullable)ext inDirectory:(NSString * _Nonnull)bundlePath;
        [Static]
        [Export("pathsForResourcesOfType:inDirectory:")]
        string[] PathsForResourcesOfType([NullAllowed] string ext, string bundlePath);

        // -(NSString * _Nullable)pathForResource:(NSString * _Nullable)name ofType:(NSString * _Nullable)ext;
        [Export("pathForResource:ofType:")]
        [return: NullAllowed]
        string PathForResource([NullAllowed] string name, [NullAllowed] string ext);

        // -(NSString * _Nullable)pathForResource:(NSString * _Nullable)name ofType:(NSString * _Nullable)ext inDirectory:(NSString * _Nullable)subpath;
        [Export("pathForResource:ofType:inDirectory:")]
        [return: NullAllowed]
        string PathForResource([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath);

        // -(NSString * _Nullable)pathForResource:(NSString * _Nullable)name ofType:(NSString * _Nullable)ext inDirectory:(NSString * _Nullable)subpath forLocalization:(NSString * _Nullable)localizationName;
        [Export("pathForResource:ofType:inDirectory:forLocalization:")]
        [return: NullAllowed]
        string PathForResource([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath, [NullAllowed] string localizationName);

        // -(NSArray<NSString *> * _Nonnull)pathsForResourcesOfType:(NSString * _Nullable)ext inDirectory:(NSString * _Nullable)subpath;
        [Export("pathsForResourcesOfType:inDirectory:")]
        string[] PathsForResourcesOfType([NullAllowed] string ext, [NullAllowed] string subpath);

        // -(NSArray<NSString *> * _Nonnull)pathsForResourcesOfType:(NSString * _Nullable)ext inDirectory:(NSString * _Nullable)subpath forLocalization:(NSString * _Nullable)localizationName;
        [Export("pathsForResourcesOfType:inDirectory:forLocalization:")]
        string[] PathsForResourcesOfType([NullAllowed] string ext, [NullAllowed] string subpath, [NullAllowed] string localizationName);

        // -(NSString * _Nonnull)localizedStringForKey:(NSString * _Nonnull)key value:(NSString * _Nullable)value table:(NSString * _Nullable)tableName __attribute__((format_arg(1)));
        [Export("localizedStringForKey:value:table:")]
        string LocalizedStringForKey(string key, [NullAllowed] string value, [NullAllowed] string tableName);

        // @property (readonly, copy) NSString * _Nullable bundleIdentifier;
        [NullAllowed, Export("bundleIdentifier")]
        string BundleIdentifier { get; }

        // @property (readonly, copy) NSDictionary<NSString *,id> * _Nullable infoDictionary;
        [NullAllowed, Export("infoDictionary", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> InfoDictionary { get; }

        // @property (readonly, copy) NSDictionary<NSString *,id> * _Nullable localizedInfoDictionary;
        [NullAllowed, Export("localizedInfoDictionary", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> LocalizedInfoDictionary { get; }

        // -(id _Nullable)objectForInfoDictionaryKey:(NSString * _Nonnull)key;
        [Export("objectForInfoDictionaryKey:")]
        [return: NullAllowed]
        NSObject ObjectForInfoDictionaryKey(string key);

        // -(Class _Nullable)classNamed:(NSString * _Nonnull)className;
        [Export("classNamed:")]
        [return: NullAllowed]
        Class ClassNamed(string className);

        // @property (readonly) Class _Nullable principalClass;
        [NullAllowed, Export("principalClass")]
        Class PrincipalClass { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull preferredLocalizations;
        [Export("preferredLocalizations", ArgumentSemantic.Copy)]
        string[] PreferredLocalizations { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull localizations;
        [Export("localizations", ArgumentSemantic.Copy)]
        string[] Localizations { get; }

        // @property (readonly, copy) NSString * _Nullable developmentLocalization;
        [NullAllowed, Export("developmentLocalization")]
        string DevelopmentLocalization { get; }

        // +(NSArray<NSString *> * _Nonnull)preferredLocalizationsFromArray:(NSArray<NSString *> * _Nonnull)localizationsArray;
        [Static]
        [Export("preferredLocalizationsFromArray:")]
        string[] PreferredLocalizationsFromArray(string[] localizationsArray);

        // +(NSArray<NSString *> * _Nonnull)preferredLocalizationsFromArray:(NSArray<NSString *> * _Nonnull)localizationsArray forPreferences:(NSArray<NSString *> * _Nullable)preferencesArray;
        [Static]
        [Export("preferredLocalizationsFromArray:forPreferences:")]
        string[] PreferredLocalizationsFromArray(string[] localizationsArray, [NullAllowed] string[] preferencesArray);

        // @property (readonly, copy) NSArray<NSNumber *> * _Nullable executableArchitectures __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [NullAllowed, Export("executableArchitectures", ArgumentSemantic.Copy)]
        NSNumber[] ExecutableArchitectures { get; }
    }

    // @interface NSBundleExtensionMethods (NSString)
    [Category]
    [BaseType(typeof(NSString))]
    interface NSString_NSBundleExtensionMethods
    {
        // -(NSString * _Nonnull)variantFittingPresentationWidth:(NSInteger)width __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("variantFittingPresentationWidth:")]
        string VariantFittingPresentationWidth(nint width);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSBundleDidLoadNotification;
        [Field("NSBundleDidLoadNotification", "__Internal")]
        NSString NSBundleDidLoadNotification { get; }

        // extern NSString *const _Nonnull NSLoadedClasses;
        [Field("NSLoadedClasses", "__Internal")]
        NSString NSLoadedClasses { get; }
    }

    // @interface NSBundleResourceRequest : NSObject <NSProgressReporting>
    [iOS(9, 0)]
    [BaseType(typeof(NSObject))]
    [DisableDefaultCtor]
    interface NSBundleResourceRequest : INSProgressReporting
    {
        // -(instancetype _Nonnull)initWithTags:(NSSet<NSString *> * _Nonnull)tags;
        [Export("initWithTags:")]
        IntPtr Constructor(NSSet<NSString> tags);

        // -(instancetype _Nonnull)initWithTags:(NSSet<NSString *> * _Nonnull)tags bundle:(NSBundle * _Nonnull)bundle __attribute__((objc_designated_initializer));
        [Export("initWithTags:bundle:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSSet<NSString> tags, NSBundle bundle);

        // @property double loadingPriority;
        [Export("loadingPriority")]
        double LoadingPriority { get; set; }

        // @property (readonly, copy) NSSet<NSString *> * _Nonnull tags;
        [Export("tags", ArgumentSemantic.Copy)]
        NSSet<NSString> Tags { get; }

        // @property (readonly, strong) NSBundle * _Nonnull bundle;
        [Export("bundle", ArgumentSemantic.Strong)]
        NSBundle Bundle { get; }

        // -(void)beginAccessingResourcesWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
        [Export("beginAccessingResourcesWithCompletionHandler:")]
        void BeginAccessingResourcesWithCompletionHandler(Action<NSError> completionHandler);

        // -(void)conditionallyBeginAccessingResourcesWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
        [Export("conditionallyBeginAccessingResourcesWithCompletionHandler:")]
        void ConditionallyBeginAccessingResourcesWithCompletionHandler(Action<bool> completionHandler);

        // -(void)endAccessingResources;
        [Export("endAccessingResources")]
        void EndAccessingResources();

        // @property (readonly, strong) NSProgress * _Nonnull progress;
        [Export("progress", ArgumentSemantic.Strong)]
        NSProgress Progress { get; }
    }

    // @interface NSBundleResourceRequestAdditions (NSBundle)
    [Category]
    [BaseType(typeof(NSBundle))]
    interface NSBundle_NSBundleResourceRequestAdditions
    {
        // -(void)setPreservationPriority:(double)priority forTags:(NSSet<NSString *> * _Nonnull)tags __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Export("setPreservationPriority:forTags:")]
        void SetPreservationPriority(double priority, NSSet<NSString> tags);

        // -(double)preservationPriorityForTag:(NSString * _Nonnull)tag __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Export("preservationPriorityForTag:")]
        double PreservationPriorityForTag(string tag);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSBundleResourceRequestLowDiskSpaceNotification __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("NSBundleResourceRequestLowDiskSpaceNotification", "__Internal")]
        NSString NSBundleResourceRequestLowDiskSpaceNotification { get; }

        // extern const double NSBundleResourceRequestLoadingPriorityUrgent __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("NSBundleResourceRequestLoadingPriorityUrgent", "__Internal")]
        double NSBundleResourceRequestLoadingPriorityUrgent { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSSystemClockDidChangeNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSSystemClockDidChangeNotification", "__Internal")]
        NSString NSSystemClockDidChangeNotification { get; }
    }

    // @interface NSDate : NSObject <NSCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSDate : INSCopying, INSSecureCoding
    {
        // @property (readonly) NSTimeInterval timeIntervalSinceReferenceDate;
        [Export("timeIntervalSinceReferenceDate")]
        double TimeIntervalSinceReferenceDate { get; }

        // -(instancetype _Nonnull)initWithTimeIntervalSinceReferenceDate:(NSTimeInterval)ti __attribute__((objc_designated_initializer));
        [Export("initWithTimeIntervalSinceReferenceDate:")]
        [DesignatedInitializer]
        IntPtr Constructor(double ti);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @interface NSExtendedDate (NSDate)
    [Category]
    [BaseType(typeof(NSDate))]
    interface NSDate_NSExtendedDate
    {
        // -(NSTimeInterval)timeIntervalSinceDate:(NSDate * _Nonnull)anotherDate;
        [Export("timeIntervalSinceDate:")]
        double TimeIntervalSinceDate(NSDate anotherDate);

        // @property (readonly) NSTimeInterval timeIntervalSinceNow;
        [Export("timeIntervalSinceNow")]
        double TimeIntervalSinceNow { get; }

        // @property (readonly) NSTimeInterval timeIntervalSince1970;
        [Export("timeIntervalSince1970")]
        double TimeIntervalSince1970 { get; }

        // -(id _Nonnull)addTimeInterval:(NSTimeInterval)seconds __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.6)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use dateByAddingTimeInterval instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use dateByAddingTimeInterval instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use dateByAddingTimeInterval instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use dateByAddingTimeInterval instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use dateByAddingTimeInterval instead")]
        [Deprecated(PlatformName.iOS, 4, 0, message: "Use dateByAddingTimeInterval instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use dateByAddingTimeInterval instead")]
        [Deprecated(PlatformName.MacOSX, 10, 6, message: "Use dateByAddingTimeInterval instead")]
        [Export("addTimeInterval:")]
        NSObject AddTimeInterval(double seconds);

        // -(instancetype _Nonnull)dateByAddingTimeInterval:(NSTimeInterval)ti __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(2, 0)]
        [Export("dateByAddingTimeInterval:")]
        NSDate DateByAddingTimeInterval(double ti);

        // -(NSDate * _Nonnull)earlierDate:(NSDate * _Nonnull)anotherDate;
        [Export("earlierDate:")]
        NSDate EarlierDate(NSDate anotherDate);

        // -(NSDate * _Nonnull)laterDate:(NSDate * _Nonnull)anotherDate;
        [Export("laterDate:")]
        NSDate LaterDate(NSDate anotherDate);

        // -(NSComparisonResult)compare:(NSDate * _Nonnull)other;
        [Export("compare:")]
        NSComparisonResult Compare(NSDate other);

        // -(BOOL)isEqualToDate:(NSDate * _Nonnull)otherDate;
        [Export("isEqualToDate:")]
        bool IsEqualToDate(NSDate otherDate);

        // @property (readonly, copy) NSString * _Nonnull description;
        [Export("description")]
        string Description { get; }

        // -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
        [Export("descriptionWithLocale:")]
        string DescriptionWithLocale([NullAllowed] NSObject locale);

        // @property (readonly, class) NSTimeInterval timeIntervalSinceReferenceDate;
        [Static]
        [Export("timeIntervalSinceReferenceDate")]
        double TimeIntervalSinceReferenceDate { get; }
    }

    // @interface NSDateCreation (NSDate)
    [Category]
    [BaseType(typeof(NSDate))]
    interface NSDate_NSDateCreation
    {
        // +(instancetype _Nonnull)date;
        [Static]
        [Export("date")]
        NSDate Date();

        // +(instancetype _Nonnull)dateWithTimeIntervalSinceNow:(NSTimeInterval)secs;
        [Static]
        [Export("dateWithTimeIntervalSinceNow:")]
        NSDate DateWithTimeIntervalSinceNow(double secs);

        // +(instancetype _Nonnull)dateWithTimeIntervalSinceReferenceDate:(NSTimeInterval)ti;
        [Static]
        [Export("dateWithTimeIntervalSinceReferenceDate:")]
        NSDate DateWithTimeIntervalSinceReferenceDate(double ti);

        // +(instancetype _Nonnull)dateWithTimeIntervalSince1970:(NSTimeInterval)secs;
        [Static]
        [Export("dateWithTimeIntervalSince1970:")]
        NSDate DateWithTimeIntervalSince1970(double secs);

        // +(instancetype _Nonnull)dateWithTimeInterval:(NSTimeInterval)secsToBeAdded sinceDate:(NSDate * _Nonnull)date;
        [Static]
        [Export("dateWithTimeInterval:sinceDate:")]
        NSDate DateWithTimeInterval(double secsToBeAdded, NSDate date);

        // @property (readonly, copy, class) NSDate * _Nonnull distantFuture;
        [Static]
        [Export("distantFuture", ArgumentSemantic.Copy)]
        NSDate DistantFuture { get; }

        // @property (readonly, copy, class) NSDate * _Nonnull distantPast;
        [Static]
        [Export("distantPast", ArgumentSemantic.Copy)]
        NSDate DistantPast { get; }

        // -(instancetype _Nonnull)initWithTimeIntervalSinceNow:(NSTimeInterval)secs;
        [Export("initWithTimeIntervalSinceNow:")]
        IntPtr Constructor(double secs);

        // -(instancetype _Nonnull)initWithTimeIntervalSince1970:(NSTimeInterval)secs;
        [Export("initWithTimeIntervalSince1970:")]
        IntPtr Constructor(double secs);

        // -(instancetype _Nonnull)initWithTimeInterval:(NSTimeInterval)secsToBeAdded sinceDate:(NSDate * _Nonnull)date;
        [Export("initWithTimeInterval:sinceDate:")]
        IntPtr Constructor(double secsToBeAdded, NSDate date);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierGregorian __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierGregorian", "__Internal")]
        NSString NSCalendarIdentifierGregorian { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierBuddhist __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierBuddhist", "__Internal")]
        NSString NSCalendarIdentifierBuddhist { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierChinese __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierChinese", "__Internal")]
        NSString NSCalendarIdentifierChinese { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierCoptic __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierCoptic", "__Internal")]
        NSString NSCalendarIdentifierCoptic { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierEthiopicAmeteMihret __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierEthiopicAmeteMihret", "__Internal")]
        NSString NSCalendarIdentifierEthiopicAmeteMihret { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierEthiopicAmeteAlem __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierEthiopicAmeteAlem", "__Internal")]
        NSString NSCalendarIdentifierEthiopicAmeteAlem { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierHebrew __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierHebrew", "__Internal")]
        NSString NSCalendarIdentifierHebrew { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierISO8601 __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierISO8601", "__Internal")]
        NSString NSCalendarIdentifierISO8601 { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierIndian __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierIndian", "__Internal")]
        NSString NSCalendarIdentifierIndian { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierIslamic __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierIslamic", "__Internal")]
        NSString NSCalendarIdentifierIslamic { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierIslamicCivil __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierIslamicCivil", "__Internal")]
        NSString NSCalendarIdentifierIslamicCivil { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierJapanese __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierJapanese", "__Internal")]
        NSString NSCalendarIdentifierJapanese { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierPersian __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierPersian", "__Internal")]
        NSString NSCalendarIdentifierPersian { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierRepublicOfChina __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSCalendarIdentifierRepublicOfChina", "__Internal")]
        NSString NSCalendarIdentifierRepublicOfChina { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierIslamicTabular __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSCalendarIdentifierIslamicTabular", "__Internal")]
        NSString NSCalendarIdentifierIslamicTabular { get; }

        // extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierIslamicUmmAlQura __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSCalendarIdentifierIslamicUmmAlQura", "__Internal")]
        NSString NSCalendarIdentifierIslamicUmmAlQura { get; }
    }

    // @interface NSCalendar : NSObject <NSCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    [DisableDefaultCtor]
    interface NSCalendar : INSCopying, INSSecureCoding
    {
        // @property (readonly, copy, class) NSCalendar * _Nonnull currentCalendar;
        [Static]
        [Export("currentCalendar", ArgumentSemantic.Copy)]
        NSCalendar CurrentCalendar { get; }

        // @property (readonly, strong, class) NSCalendar * _Nonnull autoupdatingCurrentCalendar __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("autoupdatingCurrentCalendar", ArgumentSemantic.Strong)]
        NSCalendar AutoupdatingCurrentCalendar { get; }

        // +(NSCalendar * _Nullable)calendarWithIdentifier:(NSCalendarIdentifier _Nonnull)calendarIdentifierConstant __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Static]
        [Export("calendarWithIdentifier:")]
        [return: NullAllowed]
        NSCalendar CalendarWithIdentifier(string calendarIdentifierConstant);

        // -(id _Nullable)initWithCalendarIdentifier:(NSCalendarIdentifier _Nonnull)ident __attribute__((objc_designated_initializer));
        [Export("initWithCalendarIdentifier:")]
        [DesignatedInitializer]
        IntPtr Constructor(string ident);

        // @property (readonly, copy) NSCalendarIdentifier _Nonnull calendarIdentifier;
        [Export("calendarIdentifier")]
        string CalendarIdentifier { get; }

        // @property (copy) NSLocale * _Nullable locale;
        [NullAllowed, Export("locale", ArgumentSemantic.Copy)]
        NSLocale Locale { get; set; }

        // @property (copy) NSTimeZone * _Nonnull timeZone;
        [Export("timeZone", ArgumentSemantic.Copy)]
        NSTimeZone TimeZone { get; set; }

        // @property NSUInteger firstWeekday;
        [Export("firstWeekday")]
        nuint FirstWeekday { get; set; }

        // @property NSUInteger minimumDaysInFirstWeek;
        [Export("minimumDaysInFirstWeek")]
        nuint MinimumDaysInFirstWeek { get; set; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull eraSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("eraSymbols", ArgumentSemantic.Copy)]
        string[] EraSymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull longEraSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("longEraSymbols", ArgumentSemantic.Copy)]
        string[] LongEraSymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull monthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("monthSymbols", ArgumentSemantic.Copy)]
        string[] MonthSymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull shortMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("shortMonthSymbols", ArgumentSemantic.Copy)]
        string[] ShortMonthSymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull veryShortMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("veryShortMonthSymbols", ArgumentSemantic.Copy)]
        string[] VeryShortMonthSymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull standaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("standaloneMonthSymbols", ArgumentSemantic.Copy)]
        string[] StandaloneMonthSymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull shortStandaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("shortStandaloneMonthSymbols", ArgumentSemantic.Copy)]
        string[] ShortStandaloneMonthSymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull veryShortStandaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("veryShortStandaloneMonthSymbols", ArgumentSemantic.Copy)]
        string[] VeryShortStandaloneMonthSymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull weekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("weekdaySymbols", ArgumentSemantic.Copy)]
        string[] WeekdaySymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull shortWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("shortWeekdaySymbols", ArgumentSemantic.Copy)]
        string[] ShortWeekdaySymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull veryShortWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("veryShortWeekdaySymbols", ArgumentSemantic.Copy)]
        string[] VeryShortWeekdaySymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull standaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("standaloneWeekdaySymbols", ArgumentSemantic.Copy)]
        string[] StandaloneWeekdaySymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull shortStandaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("shortStandaloneWeekdaySymbols", ArgumentSemantic.Copy)]
        string[] ShortStandaloneWeekdaySymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull veryShortStandaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("veryShortStandaloneWeekdaySymbols", ArgumentSemantic.Copy)]
        string[] VeryShortStandaloneWeekdaySymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull quarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("quarterSymbols", ArgumentSemantic.Copy)]
        string[] QuarterSymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull shortQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("shortQuarterSymbols", ArgumentSemantic.Copy)]
        string[] ShortQuarterSymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull standaloneQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("standaloneQuarterSymbols", ArgumentSemantic.Copy)]
        string[] StandaloneQuarterSymbols { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull shortStandaloneQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("shortStandaloneQuarterSymbols", ArgumentSemantic.Copy)]
        string[] ShortStandaloneQuarterSymbols { get; }

        // @property (readonly, copy) NSString * _Nonnull AMSymbol __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("AMSymbol")]
        string AMSymbol { get; }

        // @property (readonly, copy) NSString * _Nonnull PMSymbol __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("PMSymbol")]
        string PMSymbol { get; }

        // -(NSRange)minimumRangeOfUnit:(NSCalendarUnit)unit;
        [Export("minimumRangeOfUnit:")]
        NSRange MinimumRangeOfUnit(NSCalendarUnit unit);

        // -(NSRange)maximumRangeOfUnit:(NSCalendarUnit)unit;
        [Export("maximumRangeOfUnit:")]
        NSRange MaximumRangeOfUnit(NSCalendarUnit unit);

        // -(NSRange)rangeOfUnit:(NSCalendarUnit)smaller inUnit:(NSCalendarUnit)larger forDate:(NSDate * _Nonnull)date;
        [Export("rangeOfUnit:inUnit:forDate:")]
        NSRange RangeOfUnit(NSCalendarUnit smaller, NSCalendarUnit larger, NSDate date);

        // -(NSUInteger)ordinalityOfUnit:(NSCalendarUnit)smaller inUnit:(NSCalendarUnit)larger forDate:(NSDate * _Nonnull)date;
        [Export("ordinalityOfUnit:inUnit:forDate:")]
        nuint OrdinalityOfUnit(NSCalendarUnit smaller, NSCalendarUnit larger, NSDate date);

        // -(BOOL)rangeOfUnit:(NSCalendarUnit)unit startDate:(NSDate * _Nullable * _Nullable)datep interval:(NSTimeInterval * _Nullable)tip forDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("rangeOfUnit:startDate:interval:forDate:")]
        unsafe bool RangeOfUnit(NSCalendarUnit unit, [NullAllowed] out NSDate datep, [NullAllowed] double* tip, NSDate date);

        // -(NSDate * _Nullable)dateFromComponents:(NSDateComponents * _Nonnull)comps;
        [Export("dateFromComponents:")]
        [return: NullAllowed]
        NSDate DateFromComponents(NSDateComponents comps);

        // -(NSDateComponents * _Nonnull)components:(NSCalendarUnit)unitFlags fromDate:(NSDate * _Nonnull)date;
        [Export("components:fromDate:")]
        NSDateComponents Components(NSCalendarUnit unitFlags, NSDate date);

        // -(NSDate * _Nullable)dateByAddingComponents:(NSDateComponents * _Nonnull)comps toDate:(NSDate * _Nonnull)date options:(NSCalendarOptions)opts;
        [Export("dateByAddingComponents:toDate:options:")]
        [return: NullAllowed]
        NSDate DateByAddingComponents(NSDateComponents comps, NSDate date, NSCalendarOptions opts);

        // -(NSDateComponents * _Nonnull)components:(NSCalendarUnit)unitFlags fromDate:(NSDate * _Nonnull)startingDate toDate:(NSDate * _Nonnull)resultDate options:(NSCalendarOptions)opts;
        [Export("components:fromDate:toDate:options:")]
        NSDateComponents Components(NSCalendarUnit unitFlags, NSDate startingDate, NSDate resultDate, NSCalendarOptions opts);

        // -(void)getEra:(NSInteger * _Nullable)eraValuePointer year:(NSInteger * _Nullable)yearValuePointer month:(NSInteger * _Nullable)monthValuePointer day:(NSInteger * _Nullable)dayValuePointer fromDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("getEra:year:month:day:fromDate:")]
        unsafe void GetEra([NullAllowed] nint* eraValuePointer, [NullAllowed] nint* yearValuePointer, [NullAllowed] nint* monthValuePointer, [NullAllowed] nint* dayValuePointer, NSDate date);

        // -(void)getEra:(NSInteger * _Nullable)eraValuePointer yearForWeekOfYear:(NSInteger * _Nullable)yearValuePointer weekOfYear:(NSInteger * _Nullable)weekValuePointer weekday:(NSInteger * _Nullable)weekdayValuePointer fromDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:")]
        unsafe void GetEra([NullAllowed] nint* eraValuePointer, [NullAllowed] nint* yearValuePointer, [NullAllowed] nint* weekValuePointer, [NullAllowed] nint* weekdayValuePointer, NSDate date);

        // -(void)getHour:(NSInteger * _Nullable)hourValuePointer minute:(NSInteger * _Nullable)minuteValuePointer second:(NSInteger * _Nullable)secondValuePointer nanosecond:(NSInteger * _Nullable)nanosecondValuePointer fromDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("getHour:minute:second:nanosecond:fromDate:")]
        unsafe void GetHour([NullAllowed] nint* hourValuePointer, [NullAllowed] nint* minuteValuePointer, [NullAllowed] nint* secondValuePointer, [NullAllowed] nint* nanosecondValuePointer, NSDate date);

        // -(NSInteger)component:(NSCalendarUnit)unit fromDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("component:fromDate:")]
        nint Component(NSCalendarUnit unit, NSDate date);

        // -(NSDate * _Nullable)dateWithEra:(NSInteger)eraValue year:(NSInteger)yearValue month:(NSInteger)monthValue day:(NSInteger)dayValue hour:(NSInteger)hourValue minute:(NSInteger)minuteValue second:(NSInteger)secondValue nanosecond:(NSInteger)nanosecondValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("dateWithEra:year:month:day:hour:minute:second:nanosecond:")]
        [return: NullAllowed]
        NSDate DateWithEra(nint eraValue, nint yearValue, nint monthValue, nint dayValue, nint hourValue, nint minuteValue, nint secondValue, nint nanosecondValue);

        // -(NSDate * _Nullable)dateWithEra:(NSInteger)eraValue yearForWeekOfYear:(NSInteger)yearValue weekOfYear:(NSInteger)weekValue weekday:(NSInteger)weekdayValue hour:(NSInteger)hourValue minute:(NSInteger)minuteValue second:(NSInteger)secondValue nanosecond:(NSInteger)nanosecondValue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:")]
        [return: NullAllowed]
        NSDate DateWithEra(nint eraValue, nint yearValue, nint weekValue, nint weekdayValue, nint hourValue, nint minuteValue, nint secondValue, nint nanosecondValue);

        // -(NSDate * _Nonnull)startOfDayForDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("startOfDayForDate:")]
        NSDate StartOfDayForDate(NSDate date);

        // -(NSDateComponents * _Nonnull)componentsInTimeZone:(NSTimeZone * _Nonnull)timezone fromDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("componentsInTimeZone:fromDate:")]
        NSDateComponents ComponentsInTimeZone(NSTimeZone timezone, NSDate date);

        // -(NSComparisonResult)compareDate:(NSDate * _Nonnull)date1 toDate:(NSDate * _Nonnull)date2 toUnitGranularity:(NSCalendarUnit)unit __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("compareDate:toDate:toUnitGranularity:")]
        NSComparisonResult CompareDate(NSDate date1, NSDate date2, NSCalendarUnit unit);

        // -(BOOL)isDate:(NSDate * _Nonnull)date1 equalToDate:(NSDate * _Nonnull)date2 toUnitGranularity:(NSCalendarUnit)unit __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("isDate:equalToDate:toUnitGranularity:")]
        bool IsDate(NSDate date1, NSDate date2, NSCalendarUnit unit);

        // -(BOOL)isDate:(NSDate * _Nonnull)date1 inSameDayAsDate:(NSDate * _Nonnull)date2 __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("isDate:inSameDayAsDate:")]
        bool IsDate(NSDate date1, NSDate date2);

        // -(BOOL)isDateInToday:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("isDateInToday:")]
        bool IsDateInToday(NSDate date);

        // -(BOOL)isDateInYesterday:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("isDateInYesterday:")]
        bool IsDateInYesterday(NSDate date);

        // -(BOOL)isDateInTomorrow:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("isDateInTomorrow:")]
        bool IsDateInTomorrow(NSDate date);

        // -(BOOL)isDateInWeekend:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("isDateInWeekend:")]
        bool IsDateInWeekend(NSDate date);

        // -(BOOL)rangeOfWeekendStartDate:(NSDate * _Nullable * _Nullable)datep interval:(NSTimeInterval * _Nullable)tip containingDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("rangeOfWeekendStartDate:interval:containingDate:")]
        unsafe bool RangeOfWeekendStartDate([NullAllowed] out NSDate datep, [NullAllowed] double* tip, NSDate date);

        // -(BOOL)nextWeekendStartDate:(NSDate * _Nullable * _Nullable)datep interval:(NSTimeInterval * _Nullable)tip options:(NSCalendarOptions)options afterDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("nextWeekendStartDate:interval:options:afterDate:")]
        unsafe bool NextWeekendStartDate([NullAllowed] out NSDate datep, [NullAllowed] double* tip, NSCalendarOptions options, NSDate date);

        // -(NSDateComponents * _Nonnull)components:(NSCalendarUnit)unitFlags fromDateComponents:(NSDateComponents * _Nonnull)startingDateComp toDateComponents:(NSDateComponents * _Nonnull)resultDateComp options:(NSCalendarOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("components:fromDateComponents:toDateComponents:options:")]
        NSDateComponents Components(NSCalendarUnit unitFlags, NSDateComponents startingDateComp, NSDateComponents resultDateComp, NSCalendarOptions options);

        // -(NSDate * _Nullable)dateByAddingUnit:(NSCalendarUnit)unit value:(NSInteger)value toDate:(NSDate * _Nonnull)date options:(NSCalendarOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("dateByAddingUnit:value:toDate:options:")]
        [return: NullAllowed]
        NSDate DateByAddingUnit(NSCalendarUnit unit, nint value, NSDate date, NSCalendarOptions options);

        // -(void)enumerateDatesStartingAfterDate:(NSDate * _Nonnull)start matchingComponents:(NSDateComponents * _Nonnull)comps options:(NSCalendarOptions)opts usingBlock:(void (^ _Nonnull)(NSDate * _Nullable, BOOL, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:")]
        unsafe void EnumerateDatesStartingAfterDate(NSDate start, NSDateComponents comps, NSCalendarOptions opts, Action<NSDate, bool, bool*> block);

        // -(NSDate * _Nullable)nextDateAfterDate:(NSDate * _Nonnull)date matchingComponents:(NSDateComponents * _Nonnull)comps options:(NSCalendarOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("nextDateAfterDate:matchingComponents:options:")]
        [return: NullAllowed]
        NSDate NextDateAfterDate(NSDate date, NSDateComponents comps, NSCalendarOptions options);

        // -(NSDate * _Nullable)nextDateAfterDate:(NSDate * _Nonnull)date matchingUnit:(NSCalendarUnit)unit value:(NSInteger)value options:(NSCalendarOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("nextDateAfterDate:matchingUnit:value:options:")]
        [return: NullAllowed]
        NSDate NextDateAfterDate(NSDate date, NSCalendarUnit unit, nint value, NSCalendarOptions options);

        // -(NSDate * _Nullable)nextDateAfterDate:(NSDate * _Nonnull)date matchingHour:(NSInteger)hourValue minute:(NSInteger)minuteValue second:(NSInteger)secondValue options:(NSCalendarOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("nextDateAfterDate:matchingHour:minute:second:options:")]
        [return: NullAllowed]
        NSDate NextDateAfterDate(NSDate date, nint hourValue, nint minuteValue, nint secondValue, NSCalendarOptions options);

        // -(NSDate * _Nullable)dateBySettingUnit:(NSCalendarUnit)unit value:(NSInteger)v ofDate:(NSDate * _Nonnull)date options:(NSCalendarOptions)opts __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("dateBySettingUnit:value:ofDate:options:")]
        [return: NullAllowed]
        NSDate DateBySettingUnit(NSCalendarUnit unit, nint v, NSDate date, NSCalendarOptions opts);

        // -(NSDate * _Nullable)dateBySettingHour:(NSInteger)h minute:(NSInteger)m second:(NSInteger)s ofDate:(NSDate * _Nonnull)date options:(NSCalendarOptions)opts __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("dateBySettingHour:minute:second:ofDate:options:")]
        [return: NullAllowed]
        NSDate DateBySettingHour(nint h, nint m, nint s, NSDate date, NSCalendarOptions opts);

        // -(BOOL)date:(NSDate * _Nonnull)date matchesComponents:(NSDateComponents * _Nonnull)components __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("date:matchesComponents:")]
        bool Date(NSDate date, NSDateComponents components);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSCalendarDayChangedNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Field("NSCalendarDayChangedNotification", "__Internal")]
        NSString NSCalendarDayChangedNotification { get; }
    }

    // @interface NSDateComponents : NSObject <NSCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSDateComponents : INSCopying, INSSecureCoding
    {
        // @property (copy) NSCalendar * _Nullable calendar __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [NullAllowed, Export("calendar", ArgumentSemantic.Copy)]
        NSCalendar Calendar { get; set; }

        // @property (copy) NSTimeZone * _Nullable timeZone __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [NullAllowed, Export("timeZone", ArgumentSemantic.Copy)]
        NSTimeZone TimeZone { get; set; }

        // @property NSInteger era;
        [Export("era")]
        nint Era { get; set; }

        // @property NSInteger year;
        [Export("year")]
        nint Year { get; set; }

        // @property NSInteger month;
        [Export("month")]
        nint Month { get; set; }

        // @property NSInteger day;
        [Export("day")]
        nint Day { get; set; }

        // @property NSInteger hour;
        [Export("hour")]
        nint Hour { get; set; }

        // @property NSInteger minute;
        [Export("minute")]
        nint Minute { get; set; }

        // @property NSInteger second;
        [Export("second")]
        nint Second { get; set; }

        // @property NSInteger nanosecond __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("nanosecond")]
        nint Nanosecond { get; set; }

        // @property NSInteger weekday;
        [Export("weekday")]
        nint Weekday { get; set; }

        // @property NSInteger weekdayOrdinal;
        [Export("weekdayOrdinal")]
        nint WeekdayOrdinal { get; set; }

        // @property NSInteger quarter __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("quarter")]
        nint Quarter { get; set; }

        // @property NSInteger weekOfMonth __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("weekOfMonth")]
        nint WeekOfMonth { get; set; }

        // @property NSInteger weekOfYear __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("weekOfYear")]
        nint WeekOfYear { get; set; }

        // @property NSInteger yearForWeekOfYear __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("yearForWeekOfYear")]
        nint YearForWeekOfYear { get; set; }

        // @property (getter = isLeapMonth) BOOL leapMonth __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("leapMonth")]
        bool LeapMonth { [Bind("isLeapMonth")] get; set; }

        // @property (readonly, copy) NSDate * _Nullable date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [NullAllowed, Export("date", ArgumentSemantic.Copy)]
        NSDate Date { get; }

        // -(NSInteger)week __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
        // -(void)setWeek:(NSInteger)v __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use weekOfMonth or weekOfYear, depending on which you mean")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use weekOfMonth or weekOfYear, depending on which you mean")]
        [Export("week")]
        [Verify(MethodToProperty)]
        nint Week { get; set; }

        // -(void)setValue:(NSInteger)value forComponent:(NSCalendarUnit)unit __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("setValue:forComponent:")]
        void SetValue(nint value, NSCalendarUnit unit);

        // -(NSInteger)valueForComponent:(NSCalendarUnit)unit __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("valueForComponent:")]
        nint ValueForComponent(NSCalendarUnit unit);

        // @property (readonly, getter = isValidDate) BOOL validDate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("validDate")]
        bool ValidDate { [Bind("isValidDate")] get; }

        // -(BOOL)isValidDateInCalendar:(NSCalendar * _Nonnull)calendar __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("isValidDateInCalendar:")]
        bool IsValidDateInCalendar(NSCalendar calendar);
    }

    // @interface NSCharacterSet : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSCharacterSet : INSCopying, INSMutableCopying, INSSecureCoding
    {
        // @property (readonly, copy, class) NSCharacterSet * _Nonnull controlCharacterSet;
        [Static]
        [Export("controlCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet ControlCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull whitespaceCharacterSet;
        [Static]
        [Export("whitespaceCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet WhitespaceCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull whitespaceAndNewlineCharacterSet;
        [Static]
        [Export("whitespaceAndNewlineCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet WhitespaceAndNewlineCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull decimalDigitCharacterSet;
        [Static]
        [Export("decimalDigitCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet DecimalDigitCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull letterCharacterSet;
        [Static]
        [Export("letterCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet LetterCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull lowercaseLetterCharacterSet;
        [Static]
        [Export("lowercaseLetterCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet LowercaseLetterCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull uppercaseLetterCharacterSet;
        [Static]
        [Export("uppercaseLetterCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet UppercaseLetterCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull nonBaseCharacterSet;
        [Static]
        [Export("nonBaseCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet NonBaseCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull alphanumericCharacterSet;
        [Static]
        [Export("alphanumericCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet AlphanumericCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull decomposableCharacterSet;
        [Static]
        [Export("decomposableCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet DecomposableCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull illegalCharacterSet;
        [Static]
        [Export("illegalCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet IllegalCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull punctuationCharacterSet;
        [Static]
        [Export("punctuationCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet PunctuationCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull capitalizedLetterCharacterSet;
        [Static]
        [Export("capitalizedLetterCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet CapitalizedLetterCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull symbolCharacterSet;
        [Static]
        [Export("symbolCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet SymbolCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull newlineCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("newlineCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet NewlineCharacterSet { get; }

        // +(NSCharacterSet * _Nonnull)characterSetWithRange:(NSRange)aRange;
        [Static]
        [Export("characterSetWithRange:")]
        NSCharacterSet CharacterSetWithRange(NSRange aRange);

        // +(NSCharacterSet * _Nonnull)characterSetWithCharactersInString:(NSString * _Nonnull)aString;
        [Static]
        [Export("characterSetWithCharactersInString:")]
        NSCharacterSet CharacterSetWithCharactersInString(string aString);

        // +(NSCharacterSet * _Nonnull)characterSetWithBitmapRepresentation:(NSData * _Nonnull)data;
        [Static]
        [Export("characterSetWithBitmapRepresentation:")]
        NSCharacterSet CharacterSetWithBitmapRepresentation(NSData data);

        // +(NSCharacterSet * _Nullable)characterSetWithContentsOfFile:(NSString * _Nonnull)fName;
        [Static]
        [Export("characterSetWithContentsOfFile:")]
        [return: NullAllowed]
        NSCharacterSet CharacterSetWithContentsOfFile(string fName);

        // -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);

        // -(BOOL)characterIsMember:(unichar)aCharacter;
        [Export("characterIsMember:")]
        bool CharacterIsMember(ushort aCharacter);

        // @property (readonly, copy) NSData * _Nonnull bitmapRepresentation;
        [Export("bitmapRepresentation", ArgumentSemantic.Copy)]
        NSData BitmapRepresentation { get; }

        // @property (readonly, copy) NSCharacterSet * _Nonnull invertedSet;
        [Export("invertedSet", ArgumentSemantic.Copy)]
        NSCharacterSet InvertedSet { get; }

        // -(BOOL)longCharacterIsMember:(UTF32Char)theLongChar;
        [Export("longCharacterIsMember:")]
        bool LongCharacterIsMember(uint theLongChar);

        // -(BOOL)isSupersetOfSet:(NSCharacterSet * _Nonnull)theOtherSet;
        [Export("isSupersetOfSet:")]
        bool IsSupersetOfSet(NSCharacterSet theOtherSet);

        // -(BOOL)hasMemberInPlane:(uint8_t)thePlane;
        [Export("hasMemberInPlane:")]
        bool HasMemberInPlane(byte thePlane);
    }

    // @interface NSMutableCharacterSet : NSCharacterSet <NSCopying, NSMutableCopying, NSSecureCoding>
    [BaseType(typeof(NSCharacterSet))]
    interface NSMutableCharacterSet : INSCopying, INSMutableCopying, INSSecureCoding
    {
        // -(void)addCharactersInRange:(NSRange)aRange;
        [Export("addCharactersInRange:")]
        void AddCharactersInRange(NSRange aRange);

        // -(void)removeCharactersInRange:(NSRange)aRange;
        [Export("removeCharactersInRange:")]
        void RemoveCharactersInRange(NSRange aRange);

        // -(void)addCharactersInString:(NSString * _Nonnull)aString;
        [Export("addCharactersInString:")]
        void AddCharactersInString(string aString);

        // -(void)removeCharactersInString:(NSString * _Nonnull)aString;
        [Export("removeCharactersInString:")]
        void RemoveCharactersInString(string aString);

        // -(void)formUnionWithCharacterSet:(NSCharacterSet * _Nonnull)otherSet;
        [Export("formUnionWithCharacterSet:")]
        void FormUnionWithCharacterSet(NSCharacterSet otherSet);

        // -(void)formIntersectionWithCharacterSet:(NSCharacterSet * _Nonnull)otherSet;
        [Export("formIntersectionWithCharacterSet:")]
        void FormIntersectionWithCharacterSet(NSCharacterSet otherSet);

        // -(void)invert;
        [Export("invert")]
        void Invert();

        // +(NSMutableCharacterSet * _Nonnull)controlCharacterSet;
        [Static]
        [Export("controlCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet ControlCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)whitespaceCharacterSet;
        [Static]
        [Export("whitespaceCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet WhitespaceCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)whitespaceAndNewlineCharacterSet;
        [Static]
        [Export("whitespaceAndNewlineCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet WhitespaceAndNewlineCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)decimalDigitCharacterSet;
        [Static]
        [Export("decimalDigitCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet DecimalDigitCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)letterCharacterSet;
        [Static]
        [Export("letterCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet LetterCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)lowercaseLetterCharacterSet;
        [Static]
        [Export("lowercaseLetterCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet LowercaseLetterCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)uppercaseLetterCharacterSet;
        [Static]
        [Export("uppercaseLetterCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet UppercaseLetterCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)nonBaseCharacterSet;
        [Static]
        [Export("nonBaseCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet NonBaseCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)alphanumericCharacterSet;
        [Static]
        [Export("alphanumericCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet AlphanumericCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)decomposableCharacterSet;
        [Static]
        [Export("decomposableCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet DecomposableCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)illegalCharacterSet;
        [Static]
        [Export("illegalCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet IllegalCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)punctuationCharacterSet;
        [Static]
        [Export("punctuationCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet PunctuationCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)capitalizedLetterCharacterSet;
        [Static]
        [Export("capitalizedLetterCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet CapitalizedLetterCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)symbolCharacterSet;
        [Static]
        [Export("symbolCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet SymbolCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)newlineCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("newlineCharacterSet")]
        [Verify(MethodToProperty)]
        NSMutableCharacterSet NewlineCharacterSet { get; }

        // +(NSMutableCharacterSet * _Nonnull)characterSetWithRange:(NSRange)aRange;
        [Static]
        [Export("characterSetWithRange:")]
        NSMutableCharacterSet CharacterSetWithRange(NSRange aRange);

        // +(NSMutableCharacterSet * _Nonnull)characterSetWithCharactersInString:(NSString * _Nonnull)aString;
        [Static]
        [Export("characterSetWithCharactersInString:")]
        NSMutableCharacterSet CharacterSetWithCharactersInString(string aString);

        // +(NSMutableCharacterSet * _Nonnull)characterSetWithBitmapRepresentation:(NSData * _Nonnull)data;
        [Static]
        [Export("characterSetWithBitmapRepresentation:")]
        NSMutableCharacterSet CharacterSetWithBitmapRepresentation(NSData data);

        // +(NSMutableCharacterSet * _Nullable)characterSetWithContentsOfFile:(NSString * _Nonnull)fName;
        [Static]
        [Export("characterSetWithContentsOfFile:")]
        [return: NullAllowed]
        NSMutableCharacterSet CharacterSetWithContentsOfFile(string fName);
    }

    // @interface NSCoder : NSObject
    [BaseType(typeof(NSObject))]
    interface NSCoder
    {
        // -(void)encodeValueOfObjCType:(const char * _Nonnull)type at:(const void * _Nonnull)addr;
        [Export("encodeValueOfObjCType:at:")]
        unsafe void EncodeValueOfObjCType(sbyte* type, void* addr);

        // -(void)encodeDataObject:(NSData * _Nonnull)data;
        [Export("encodeDataObject:")]
        void EncodeDataObject(NSData data);

        // -(NSData * _Nullable)decodeDataObject;
        [NullAllowed, Export("decodeDataObject")]
        [Verify(MethodToProperty)]
        NSData DecodeDataObject { get; }

        // -(void)decodeValueOfObjCType:(const char * _Nonnull)type at:(void * _Nonnull)data size:(NSUInteger)size __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("decodeValueOfObjCType:at:size:")]
        unsafe void DecodeValueOfObjCType(sbyte* type, void* data, nuint size);

        // -(NSInteger)versionForClassName:(NSString * _Nonnull)className;
        [Export("versionForClassName:")]
        nint VersionForClassName(string className);
    }

    // @interface NSExtendedCoder (NSCoder)
    [Category]
    [BaseType(typeof(NSCoder))]
    interface NSCoder_NSExtendedCoder
    {
        // -(void)encodeObject:(id _Nullable)object;
        [Export("encodeObject:")]
        void EncodeObject([NullAllowed] NSObject @object);

        // -(void)encodeRootObject:(id _Nonnull)rootObject;
        [Export("encodeRootObject:")]
        void EncodeRootObject(NSObject rootObject);

        // -(void)encodeBycopyObject:(id _Nullable)anObject;
        [Export("encodeBycopyObject:")]
        void EncodeBycopyObject([NullAllowed] NSObject anObject);

        // -(void)encodeByrefObject:(id _Nullable)anObject;
        [Export("encodeByrefObject:")]
        void EncodeByrefObject([NullAllowed] NSObject anObject);

        // -(void)encodeConditionalObject:(id _Nullable)object;
        [Export("encodeConditionalObject:")]
        void EncodeConditionalObject([NullAllowed] NSObject @object);

        // -(void)encodeValuesOfObjCTypes:(const char * _Nonnull)types, ...;
        [Internal]
        [Export("encodeValuesOfObjCTypes:", IsVariadic = true)]
        unsafe void EncodeValuesOfObjCTypes(sbyte* types, IntPtr varArgs);

        // -(void)encodeArrayOfObjCType:(const char * _Nonnull)type count:(NSUInteger)count at:(const void * _Nonnull)array;
        [Export("encodeArrayOfObjCType:count:at:")]
        unsafe void EncodeArrayOfObjCType(sbyte* type, nuint count, void* array);

        // -(void)encodeBytes:(const void * _Nullable)byteaddr length:(NSUInteger)length;
        [Export("encodeBytes:length:")]
        unsafe void EncodeBytes([NullAllowed] void* byteaddr, nuint length);

        // -(id _Nullable)decodeObject;
        [NullAllowed, Export("decodeObject")]
        [Verify(MethodToProperty)]
        NSObject DecodeObject { get; }

        // -(id _Nullable)decodeTopLevelObjectAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("decodeTopLevelObjectAndReturnError:")]
        [return: NullAllowed]
        NSObject DecodeTopLevelObjectAndReturnError([NullAllowed] out NSError error);

        // -(void)decodeValuesOfObjCTypes:(const char * _Nonnull)types, ...;
        [Internal]
        [Export("decodeValuesOfObjCTypes:", IsVariadic = true)]
        unsafe void DecodeValuesOfObjCTypes(sbyte* types, IntPtr varArgs);

        // -(void)decodeArrayOfObjCType:(const char * _Nonnull)itemType count:(NSUInteger)count at:(void * _Nonnull)array;
        [Export("decodeArrayOfObjCType:count:at:")]
        unsafe void DecodeArrayOfObjCType(sbyte* itemType, nuint count, void* array);

        // -(void * _Nullable)decodeBytesWithReturnedLength:(NSUInteger * _Nonnull)lengthp __attribute__((objc_returns_inner_pointer));
        [Export("decodeBytesWithReturnedLength:")]
        [return: NullAllowed]
        unsafe void* DecodeBytesWithReturnedLength(nuint* lengthp);

        // -(NSZone * _Nullable)objectZone;
        // -(void)setObjectZone:(NSZone * _Nullable)zone;
        [NullAllowed, Export("objectZone")]
        [Verify(MethodToProperty)]
        unsafe NSZone* ObjectZone { get; set; }

        // @property (readonly) unsigned int systemVersion;
        [Export("systemVersion")]
        uint SystemVersion { get; }

        // @property (readonly) BOOL allowsKeyedCoding;
        [Export("allowsKeyedCoding")]
        bool AllowsKeyedCoding { get; }

        // -(void)encodeObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
        [Export("encodeObject:forKey:")]
        void EncodeObject([NullAllowed] NSObject @object, string key);

        // -(void)encodeConditionalObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
        [Export("encodeConditionalObject:forKey:")]
        void EncodeConditionalObject([NullAllowed] NSObject @object, string key);

        // -(void)encodeBool:(BOOL)value forKey:(NSString * _Nonnull)key;
        [Export("encodeBool:forKey:")]
        void EncodeBool(bool value, string key);

        // -(void)encodeInt:(int)value forKey:(NSString * _Nonnull)key;
        [Export("encodeInt:forKey:")]
        void EncodeInt(int value, string key);

        // -(void)encodeInt32:(int32_t)value forKey:(NSString * _Nonnull)key;
        [Export("encodeInt32:forKey:")]
        void EncodeInt32(int value, string key);

        // -(void)encodeInt64:(int64_t)value forKey:(NSString * _Nonnull)key;
        [Export("encodeInt64:forKey:")]
        void EncodeInt64(long value, string key);

        // -(void)encodeFloat:(float)value forKey:(NSString * _Nonnull)key;
        [Export("encodeFloat:forKey:")]
        void EncodeFloat(float value, string key);

        // -(void)encodeDouble:(double)value forKey:(NSString * _Nonnull)key;
        [Export("encodeDouble:forKey:")]
        void EncodeDouble(double value, string key);

        // -(void)encodeBytes:(const uint8_t * _Nullable)bytes length:(NSUInteger)length forKey:(NSString * _Nonnull)key;
        [Export("encodeBytes:length:forKey:")]
        unsafe void EncodeBytes([NullAllowed] byte* bytes, nuint length, string key);

        // -(BOOL)containsValueForKey:(NSString * _Nonnull)key;
        [Export("containsValueForKey:")]
        bool ContainsValueForKey(string key);

        // -(id _Nullable)decodeObjectForKey:(NSString * _Nonnull)key;
        [Export("decodeObjectForKey:")]
        [return: NullAllowed]
        NSObject DecodeObjectForKey(string key);

        // -(id _Nullable)decodeTopLevelObjectForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("decodeTopLevelObjectForKey:error:")]
        [return: NullAllowed]
        NSObject DecodeTopLevelObjectForKey(string key, [NullAllowed] out NSError error);

        // -(BOOL)decodeBoolForKey:(NSString * _Nonnull)key;
        [Export("decodeBoolForKey:")]
        bool DecodeBoolForKey(string key);

        // -(int)decodeIntForKey:(NSString * _Nonnull)key;
        [Export("decodeIntForKey:")]
        int DecodeIntForKey(string key);

        // -(int32_t)decodeInt32ForKey:(NSString * _Nonnull)key;
        [Export("decodeInt32ForKey:")]
        int DecodeInt32ForKey(string key);

        // -(int64_t)decodeInt64ForKey:(NSString * _Nonnull)key;
        [Export("decodeInt64ForKey:")]
        long DecodeInt64ForKey(string key);

        // -(float)decodeFloatForKey:(NSString * _Nonnull)key;
        [Export("decodeFloatForKey:")]
        float DecodeFloatForKey(string key);

        // -(double)decodeDoubleForKey:(NSString * _Nonnull)key;
        [Export("decodeDoubleForKey:")]
        double DecodeDoubleForKey(string key);

        // -(const uint8_t * _Nullable)decodeBytesForKey:(NSString * _Nonnull)key returnedLength:(NSUInteger * _Nullable)lengthp __attribute__((objc_returns_inner_pointer));
        [Export("decodeBytesForKey:returnedLength:")]
        [return: NullAllowed]
        unsafe byte* DecodeBytesForKey(string key, [NullAllowed] nuint* lengthp);

        // -(void)encodeInteger:(NSInteger)value forKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("encodeInteger:forKey:")]
        void EncodeInteger(nint value, string key);

        // -(NSInteger)decodeIntegerForKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("decodeIntegerForKey:")]
        nint DecodeIntegerForKey(string key);

        // @property (readonly) BOOL requiresSecureCoding __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("requiresSecureCoding")]
        bool RequiresSecureCoding { get; }

        // -(id _Nullable)decodeObjectOfClass:(Class _Nonnull)aClass forKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("decodeObjectOfClass:forKey:")]
        [return: NullAllowed]
        NSObject DecodeObjectOfClass(Class aClass, string key);

        // -(id _Nullable)decodeTopLevelObjectOfClass:(Class _Nonnull)aClass forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("decodeTopLevelObjectOfClass:forKey:error:")]
        [return: NullAllowed]
        NSObject DecodeTopLevelObjectOfClass(Class aClass, string key, [NullAllowed] out NSError error);

        // -(id _Nullable)decodeObjectOfClasses:(NSSet<Class> * _Nullable)classes forKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("decodeObjectOfClasses:forKey:")]
        [return: NullAllowed]
        NSObject DecodeObjectOfClasses([NullAllowed] NSSet<Class> classes, string key);

        // -(id _Nullable)decodeTopLevelObjectOfClasses:(NSSet<Class> * _Nullable)classes forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("decodeTopLevelObjectOfClasses:forKey:error:")]
        [return: NullAllowed]
        NSObject DecodeTopLevelObjectOfClasses([NullAllowed] NSSet<Class> classes, string key, [NullAllowed] out NSError error);

        // -(id _Nullable)decodePropertyListForKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("decodePropertyListForKey:")]
        [return: NullAllowed]
        NSObject DecodePropertyListForKey(string key);

        // @property (readonly, copy) NSSet<Class> * _Nullable allowedClasses __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [NullAllowed, Export("allowedClasses", ArgumentSemantic.Copy)]
        NSSet<Class> AllowedClasses { get; }

        // -(void)failWithError:(NSError * _Nonnull)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("failWithError:")]
        void FailWithError(NSError error);

        // @property (readonly) NSDecodingFailurePolicy decodingFailurePolicy __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("decodingFailurePolicy")]
        NSDecodingFailurePolicy DecodingFailurePolicy { get; }

        // @property (readonly, copy) NSError * _Nullable error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [NullAllowed, Export("error", ArgumentSemantic.Copy)]
        NSError Error { get; }
    }

    // @interface NSDeprecated (NSCoder)
    [Category]
    [BaseType(typeof(NSCoder))]
    interface NSCoder_NSDeprecated
    {
        // -(void)decodeValueOfObjCType:(const char * _Nonnull)type at:(void * _Nonnull)data;
        [Export("decodeValueOfObjCType:at:")]
        unsafe void DecodeValueOfObjCType(sbyte* type, void* data);
    }

    // @interface NSData : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSData : INSCopying, INSMutableCopying, INSSecureCoding
    {
        // @property (readonly) NSUInteger length;
        [Export("length")]
        nuint Length { get; }

        // @property (readonly) const void * _Nonnull bytes __attribute__((objc_returns_inner_pointer));
        [Export("bytes")]
        unsafe void* Bytes { get; }
    }

    // @interface NSExtendedData (NSData)
    [Category]
    [BaseType(typeof(NSData))]
    interface NSData_NSExtendedData
    {
        // @property (readonly, copy) NSString * _Nonnull description;
        [Export("description")]
        string Description { get; }

        // -(void)getBytes:(void * _Nonnull)buffer length:(NSUInteger)length;
        [Export("getBytes:length:")]
        unsafe void GetBytes(void* buffer, nuint length);

        // -(void)getBytes:(void * _Nonnull)buffer range:(NSRange)range;
        [Export("getBytes:range:")]
        unsafe void GetBytes(void* buffer, NSRange range);

        // -(BOOL)isEqualToData:(NSData * _Nonnull)other;
        [Export("isEqualToData:")]
        bool IsEqualToData(NSData other);

        // -(NSData * _Nonnull)subdataWithRange:(NSRange)range;
        [Export("subdataWithRange:")]
        NSData SubdataWithRange(NSRange range);

        // -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile;
        [Export("writeToFile:atomically:")]
        bool WriteToFile(string path, bool useAuxiliaryFile);

        // -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)atomically;
        [Export("writeToURL:atomically:")]
        bool WriteToURL(NSUrl url, bool atomically);

        // -(BOOL)writeToFile:(NSString * _Nonnull)path options:(NSDataWritingOptions)writeOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
        [Export("writeToFile:options:error:")]
        bool WriteToFile(string path, NSDataWritingOptions writeOptionsMask, [NullAllowed] out NSError errorPtr);

        // -(BOOL)writeToURL:(NSURL * _Nonnull)url options:(NSDataWritingOptions)writeOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
        [Export("writeToURL:options:error:")]
        bool WriteToURL(NSUrl url, NSDataWritingOptions writeOptionsMask, [NullAllowed] out NSError errorPtr);

        // -(NSRange)rangeOfData:(NSData * _Nonnull)dataToFind options:(NSDataSearchOptions)mask range:(NSRange)searchRange __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("rangeOfData:options:range:")]
        NSRange RangeOfData(NSData dataToFind, NSDataSearchOptions mask, NSRange searchRange);

        // -(void)enumerateByteRangesUsingBlock:(void (^ _Nonnull)(const void * _Nonnull, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("enumerateByteRangesUsingBlock:")]
        unsafe void EnumerateByteRangesUsingBlock(Action<void*, NSRange, bool*> block);
    }

    // @interface NSDataCreation (NSData)
    [Category]
    [BaseType(typeof(NSData))]
    interface NSData_NSDataCreation
    {
        // +(instancetype _Nonnull)data;
        [Static]
        [Export("data")]
        NSData Data();

        // +(instancetype _Nonnull)dataWithBytes:(const void * _Nullable)bytes length:(NSUInteger)length;
        [Static]
        [Export("dataWithBytes:length:")]
        unsafe NSData DataWithBytes([NullAllowed] void* bytes, nuint length);

        // +(instancetype _Nonnull)dataWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length;
        [Static]
        [Export("dataWithBytesNoCopy:length:")]
        unsafe NSData DataWithBytesNoCopy(void* bytes, nuint length);

        // +(instancetype _Nonnull)dataWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length freeWhenDone:(BOOL)b;
        [Static]
        [Export("dataWithBytesNoCopy:length:freeWhenDone:")]
        unsafe NSData DataWithBytesNoCopy(void* bytes, nuint length, bool b);

        // +(instancetype _Nullable)dataWithContentsOfFile:(NSString * _Nonnull)path options:(NSDataReadingOptions)readOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
        [Static]
        [Export("dataWithContentsOfFile:options:error:")]
        [return: NullAllowed]
        NSData DataWithContentsOfFile(string path, NSDataReadingOptions readOptionsMask, [NullAllowed] out NSError errorPtr);

        // +(instancetype _Nullable)dataWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDataReadingOptions)readOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
        [Static]
        [Export("dataWithContentsOfURL:options:error:")]
        [return: NullAllowed]
        NSData DataWithContentsOfURL(NSUrl url, NSDataReadingOptions readOptionsMask, [NullAllowed] out NSError errorPtr);

        // +(instancetype _Nullable)dataWithContentsOfFile:(NSString * _Nonnull)path;
        [Static]
        [Export("dataWithContentsOfFile:")]
        [return: NullAllowed]
        NSData DataWithContentsOfFile(string path);

        // +(instancetype _Nullable)dataWithContentsOfURL:(NSURL * _Nonnull)url;
        [Static]
        [Export("dataWithContentsOfURL:")]
        [return: NullAllowed]
        NSData DataWithContentsOfURL(NSUrl url);

        // -(instancetype _Nonnull)initWithBytes:(const void * _Nullable)bytes length:(NSUInteger)length;
        [Export("initWithBytes:length:")]
        unsafe IntPtr Constructor([NullAllowed] void* bytes, nuint length);

        // -(instancetype _Nonnull)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length;
        [Export("initWithBytesNoCopy:length:")]
        unsafe IntPtr Constructor(void* bytes, nuint length);

        // -(instancetype _Nonnull)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length freeWhenDone:(BOOL)b;
        [Export("initWithBytesNoCopy:length:freeWhenDone:")]
        unsafe IntPtr Constructor(void* bytes, nuint length, bool b);

        // -(instancetype _Nonnull)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length deallocator:(void (^ _Nullable)(void * _Nonnull, NSUInteger))deallocator __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("initWithBytesNoCopy:length:deallocator:")]
        unsafe IntPtr Constructor(void* bytes, nuint length, [NullAllowed] Action<void*, nuint> deallocator);

        // -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path options:(NSDataReadingOptions)readOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
        [Export("initWithContentsOfFile:options:error:")]
        IntPtr Constructor(string path, NSDataReadingOptions readOptionsMask, [NullAllowed] out NSError errorPtr);

        // -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDataReadingOptions)readOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
        [Export("initWithContentsOfURL:options:error:")]
        IntPtr Constructor(NSUrl url, NSDataReadingOptions readOptionsMask, [NullAllowed] out NSError errorPtr);

        // -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
        [Export("initWithContentsOfFile:")]
        IntPtr Constructor(string path);

        // -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
        [Export("initWithContentsOfURL:")]
        IntPtr Constructor(NSUrl url);

        // -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data;
        [Export("initWithData:")]
        IntPtr Constructor(NSData data);

        // +(instancetype _Nonnull)dataWithData:(NSData * _Nonnull)data;
        [Static]
        [Export("dataWithData:")]
        NSData DataWithData(NSData data);
    }

    // @interface NSDataBase64Encoding (NSData)
    [Category]
    [BaseType(typeof(NSData))]
    interface NSData_NSDataBase64Encoding
    {
        // -(instancetype _Nullable)initWithBase64EncodedString:(NSString * _Nonnull)base64String options:(NSDataBase64DecodingOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("initWithBase64EncodedString:options:")]
        IntPtr Constructor(string base64String, NSDataBase64DecodingOptions options);

        // -(NSString * _Nonnull)base64EncodedStringWithOptions:(NSDataBase64EncodingOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("base64EncodedStringWithOptions:")]
        string Base64EncodedStringWithOptions(NSDataBase64EncodingOptions options);

        // -(instancetype _Nullable)initWithBase64EncodedData:(NSData * _Nonnull)base64Data options:(NSDataBase64DecodingOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("initWithBase64EncodedData:options:")]
        IntPtr Constructor(NSData base64Data, NSDataBase64DecodingOptions options);

        // -(NSData * _Nonnull)base64EncodedDataWithOptions:(NSDataBase64EncodingOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("base64EncodedDataWithOptions:")]
        NSData Base64EncodedDataWithOptions(NSDataBase64EncodingOptions options);
    }

    // @interface NSDeprecated (NSData)
    [Category]
    [BaseType(typeof(NSData))]
    interface NSData_NSDeprecated
    {
        // -(void)getBytes:(void * _Nonnull)buffer __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 10, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
        [Export("getBytes:")]
        unsafe void GetBytes(void* buffer);

        // +(id _Nullable)dataWithContentsOfMappedFile:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 10, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Static]
        [Export("dataWithContentsOfMappedFile:")]
        [return: NullAllowed]
        NSObject DataWithContentsOfMappedFile(string path);

        // -(id _Nullable)initWithContentsOfMappedFile:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 10, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
        [Export("initWithContentsOfMappedFile:")]
        IntPtr Constructor(string path);

        // -(id _Nullable)initWithBase64Encoding:(NSString * _Nonnull)base64String __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=4.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.6, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use initWithBase64EncodedString instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use initWithBase64EncodedString instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use initWithBase64EncodedString instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use initWithBase64EncodedString instead")]
        [Introduced(PlatformName.iOS, 4, 0, message: "Use initWithBase64EncodedString instead")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use initWithBase64EncodedString instead")]
        [Introduced(PlatformName.MacOSX, 10, 6, message: "Use initWithBase64EncodedString instead")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use initWithBase64EncodedString instead")]
        [Export("initWithBase64Encoding:")]
        IntPtr Constructor(string base64String);

        // -(NSString * _Nonnull)base64Encoding __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=4.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.6, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use base64EncodedStringWithOptions instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use base64EncodedStringWithOptions instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use base64EncodedStringWithOptions instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use base64EncodedStringWithOptions instead")]
        [Introduced(PlatformName.iOS, 4, 0, message: "Use base64EncodedStringWithOptions instead")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use base64EncodedStringWithOptions instead")]
        [Introduced(PlatformName.MacOSX, 10, 6, message: "Use base64EncodedStringWithOptions instead")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use base64EncodedStringWithOptions instead")]
        [Export("base64Encoding")]
        [Verify(MethodToProperty)]
        string Base64Encoding { get; }
    }

    // @interface NSMutableData : NSData
    [BaseType(typeof(NSData))]
    interface NSMutableData
    {
        // @property (readonly) void * _Nonnull mutableBytes __attribute__((objc_returns_inner_pointer));
        [Export("mutableBytes")]
        unsafe void* MutableBytes { get; }

        // @property NSUInteger length;
        [Export("length")]
        nuint Length { get; set; }
    }

    // @interface NSExtendedMutableData (NSMutableData)
    [Category]
    [BaseType(typeof(NSMutableData))]
    interface NSMutableData_NSExtendedMutableData
    {
        // -(void)appendBytes:(const void * _Nonnull)bytes length:(NSUInteger)length;
        [Export("appendBytes:length:")]
        unsafe void AppendBytes(void* bytes, nuint length);

        // -(void)appendData:(NSData * _Nonnull)other;
        [Export("appendData:")]
        void AppendData(NSData other);

        // -(void)increaseLengthBy:(NSUInteger)extraLength;
        [Export("increaseLengthBy:")]
        void IncreaseLengthBy(nuint extraLength);

        // -(void)replaceBytesInRange:(NSRange)range withBytes:(const void * _Nonnull)bytes;
        [Export("replaceBytesInRange:withBytes:")]
        unsafe void ReplaceBytesInRange(NSRange range, void* bytes);

        // -(void)resetBytesInRange:(NSRange)range;
        [Export("resetBytesInRange:")]
        void ResetBytesInRange(NSRange range);

        // -(void)setData:(NSData * _Nonnull)data;
        [Export("setData:")]
        void SetData(NSData data);

        // -(void)replaceBytesInRange:(NSRange)range withBytes:(const void * _Nullable)replacementBytes length:(NSUInteger)replacementLength;
        [Export("replaceBytesInRange:withBytes:length:")]
        unsafe void ReplaceBytesInRange(NSRange range, [NullAllowed] void* replacementBytes, nuint replacementLength);
    }

    // @interface NSMutableDataCreation (NSMutableData)
    [Category]
    [BaseType(typeof(NSMutableData))]
    interface NSMutableData_NSMutableDataCreation
    {
        // +(instancetype _Nullable)dataWithCapacity:(NSUInteger)aNumItems;
        [Static]
        [Export("dataWithCapacity:")]
        [return: NullAllowed]
        NSMutableData DataWithCapacity(nuint aNumItems);

        // +(instancetype _Nullable)dataWithLength:(NSUInteger)length;
        [Static]
        [Export("dataWithLength:")]
        [return: NullAllowed]
        NSMutableData DataWithLength(nuint length);

        // -(instancetype _Nullable)initWithCapacity:(NSUInteger)capacity;
        [Export("initWithCapacity:")]
        IntPtr Constructor(nuint capacity);

        // -(instancetype _Nullable)initWithLength:(NSUInteger)length;
        [Export("initWithLength:")]
        IntPtr Constructor(nuint length);
    }

    // @interface NSPurgeableData : NSMutableData <NSDiscardableContent>
    [iOS(4, 0)]
    [BaseType(typeof(NSMutableData))]
    interface NSPurgeableData : INSDiscardableContent
    {
    }

    // @interface NSDateInterval : NSObject <NSCopying, NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSObject))]
    interface NSDateInterval : INSCopying, INSSecureCoding
    {
        // @property (readonly, copy) NSDate * _Nonnull startDate;
        [Export("startDate", ArgumentSemantic.Copy)]
        NSDate StartDate { get; }

        // @property (readonly, copy) NSDate * _Nonnull endDate;
        [Export("endDate", ArgumentSemantic.Copy)]
        NSDate EndDate { get; }

        // @property (readonly) NSTimeInterval duration;
        [Export("duration")]
        double Duration { get; }

        // -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder coder);

        // -(instancetype _Nonnull)initWithStartDate:(NSDate * _Nonnull)startDate duration:(NSTimeInterval)duration __attribute__((objc_designated_initializer));
        [Export("initWithStartDate:duration:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSDate startDate, double duration);

        // -(instancetype _Nonnull)initWithStartDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate;
        [Export("initWithStartDate:endDate:")]
        IntPtr Constructor(NSDate startDate, NSDate endDate);

        // -(NSComparisonResult)compare:(NSDateInterval * _Nonnull)dateInterval;
        [Export("compare:")]
        NSComparisonResult Compare(NSDateInterval dateInterval);

        // -(BOOL)isEqualToDateInterval:(NSDateInterval * _Nonnull)dateInterval;
        [Export("isEqualToDateInterval:")]
        bool IsEqualToDateInterval(NSDateInterval dateInterval);

        // -(BOOL)intersectsDateInterval:(NSDateInterval * _Nonnull)dateInterval;
        [Export("intersectsDateInterval:")]
        bool IntersectsDateInterval(NSDateInterval dateInterval);

        // -(NSDateInterval * _Nullable)intersectionWithDateInterval:(NSDateInterval * _Nonnull)dateInterval;
        [Export("intersectionWithDateInterval:")]
        [return: NullAllowed]
        NSDateInterval IntersectionWithDateInterval(NSDateInterval dateInterval);

        // -(BOOL)containsDate:(NSDate * _Nonnull)date;
        [Export("containsDate:")]
        bool ContainsDate(NSDate date);
    }

    // @interface NSAttributedString : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
    [iOS(3, 2)]
    [BaseType(typeof(NSObject))]
    interface NSAttributedString : INSCopying, INSMutableCopying, INSSecureCoding
    {
        // @property (readonly, copy) NSString * _Nonnull string;
        [Export("string")]
        string String { get; }

        // -(NSDictionary<NSAttributedStringKey,id> * _Nonnull)attributesAtIndex:(NSUInteger)location effectiveRange:(NSRangePointer _Nullable)range;
        [Export("attributesAtIndex:effectiveRange:")]
        unsafe NSDictionary<NSString, NSObject> AttributesAtIndex(nuint location, [NullAllowed] NSRangePointer* range);
    }

    // @interface NSExtendedAttributedString (NSAttributedString)
    [Category]
    [BaseType(typeof(NSAttributedString))]
    interface NSAttributedString_NSExtendedAttributedString
    {
        // @property (readonly) NSUInteger length;
        [Export("length")]
        nuint Length { get; }

        // -(id _Nullable)attribute:(NSAttributedStringKey _Nonnull)attrName atIndex:(NSUInteger)location effectiveRange:(NSRangePointer _Nullable)range;
        [Export("attribute:atIndex:effectiveRange:")]
        [return: NullAllowed]
        unsafe NSObject Attribute(string attrName, nuint location, [NullAllowed] NSRangePointer* range);

        // -(NSAttributedString * _Nonnull)attributedSubstringFromRange:(NSRange)range;
        [Export("attributedSubstringFromRange:")]
        NSAttributedString AttributedSubstringFromRange(NSRange range);

        // -(NSDictionary<NSAttributedStringKey,id> * _Nonnull)attributesAtIndex:(NSUInteger)location longestEffectiveRange:(NSRangePointer _Nullable)range inRange:(NSRange)rangeLimit;
        [Export("attributesAtIndex:longestEffectiveRange:inRange:")]
        unsafe NSDictionary<NSString, NSObject> AttributesAtIndex(nuint location, [NullAllowed] NSRangePointer* range, NSRange rangeLimit);

        // -(id _Nullable)attribute:(NSAttributedStringKey _Nonnull)attrName atIndex:(NSUInteger)location longestEffectiveRange:(NSRangePointer _Nullable)range inRange:(NSRange)rangeLimit;
        [Export("attribute:atIndex:longestEffectiveRange:inRange:")]
        [return: NullAllowed]
        unsafe NSObject Attribute(string attrName, nuint location, [NullAllowed] NSRangePointer* range, NSRange rangeLimit);

        // -(BOOL)isEqualToAttributedString:(NSAttributedString * _Nonnull)other;
        [Export("isEqualToAttributedString:")]
        bool IsEqualToAttributedString(NSAttributedString other);

        // -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)str;
        [Export("initWithString:")]
        IntPtr Constructor(string str);

        // -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)str attributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs;
        [Export("initWithString:attributes:")]
        IntPtr Constructor(string str, [NullAllowed] NSDictionary<NSString, NSObject> attrs);

        // -(instancetype _Nonnull)initWithAttributedString:(NSAttributedString * _Nonnull)attrStr;
        [Export("initWithAttributedString:")]
        IntPtr Constructor(NSAttributedString attrStr);

        // -(void)enumerateAttributesInRange:(NSRange)enumerationRange options:(NSAttributedStringEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSDictionary<NSAttributedStringKey,id> * _Nonnull, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateAttributesInRange:options:usingBlock:")]
        unsafe void EnumerateAttributesInRange(NSRange enumerationRange, NSAttributedStringEnumerationOptions opts, Action<NSDictionary<NSString, NSObject>, NSRange, bool*> block);

        // -(void)enumerateAttribute:(NSAttributedStringKey _Nonnull)attrName inRange:(NSRange)enumerationRange options:(NSAttributedStringEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(id _Nullable, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateAttribute:inRange:options:usingBlock:")]
        unsafe void EnumerateAttribute(string attrName, NSRange enumerationRange, NSAttributedStringEnumerationOptions opts, Action<NSObject, NSRange, bool*> block);
    }

    // @interface NSMutableAttributedString : NSAttributedString
    [iOS(3, 2)]
    [BaseType(typeof(NSAttributedString))]
    interface NSMutableAttributedString
    {
        // -(void)replaceCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)str;
        [Export("replaceCharactersInRange:withString:")]
        void ReplaceCharactersInRange(NSRange range, string str);

        // -(void)setAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs range:(NSRange)range;
        [Export("setAttributes:range:")]
        void SetAttributes([NullAllowed] NSDictionary<NSString, NSObject> attrs, NSRange range);
    }

    // @interface NSExtendedMutableAttributedString (NSMutableAttributedString)
    [Category]
    [BaseType(typeof(NSMutableAttributedString))]
    interface NSMutableAttributedString_NSExtendedMutableAttributedString
    {
        // @property (readonly, retain) NSMutableString * _Nonnull mutableString;
        [Export("mutableString", ArgumentSemantic.Retain)]
        NSMutableString MutableString { get; }

        // -(void)addAttribute:(NSAttributedStringKey _Nonnull)name value:(id _Nonnull)value range:(NSRange)range;
        [Export("addAttribute:value:range:")]
        void AddAttribute(string name, NSObject value, NSRange range);

        // -(void)addAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nonnull)attrs range:(NSRange)range;
        [Export("addAttributes:range:")]
        void AddAttributes(NSDictionary<NSString, NSObject> attrs, NSRange range);

        // -(void)removeAttribute:(NSAttributedStringKey _Nonnull)name range:(NSRange)range;
        [Export("removeAttribute:range:")]
        void RemoveAttribute(string name, NSRange range);

        // -(void)replaceCharactersInRange:(NSRange)range withAttributedString:(NSAttributedString * _Nonnull)attrString;
        [Export("replaceCharactersInRange:withAttributedString:")]
        void ReplaceCharactersInRange(NSRange range, NSAttributedString attrString);

        // -(void)insertAttributedString:(NSAttributedString * _Nonnull)attrString atIndex:(NSUInteger)loc;
        [Export("insertAttributedString:atIndex:")]
        void InsertAttributedString(NSAttributedString attrString, nuint loc);

        // -(void)appendAttributedString:(NSAttributedString * _Nonnull)attrString;
        [Export("appendAttributedString:")]
        void AppendAttributedString(NSAttributedString attrString);

        // -(void)deleteCharactersInRange:(NSRange)range;
        [Export("deleteCharactersInRange:")]
        void DeleteCharactersInRange(NSRange range);

        // -(void)setAttributedString:(NSAttributedString * _Nonnull)attrString;
        [Export("setAttributedString:")]
        void SetAttributedString(NSAttributedString attrString);

        // -(void)beginEditing;
        [Export("beginEditing")]
        void BeginEditing();

        // -(void)endEditing;
        [Export("endEditing")]
        void EndEditing();
    }

    // @interface NSFormatter : NSObject <NSCopying, NSCoding>
    [BaseType(typeof(NSObject))]
    interface NSFormatter : INSCopying, INSCoding
    {
        // -(NSString * _Nullable)stringForObjectValue:(id _Nullable)obj;
        [Export("stringForObjectValue:")]
        [return: NullAllowed]
        string StringForObjectValue([NullAllowed] NSObject obj);

        // -(NSAttributedString * _Nullable)attributedStringForObjectValue:(id _Nonnull)obj withDefaultAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs;
        [Export("attributedStringForObjectValue:withDefaultAttributes:")]
        [return: NullAllowed]
        NSAttributedString AttributedStringForObjectValue(NSObject obj, [NullAllowed] NSDictionary<NSString, NSObject> attrs);

        // -(NSString * _Nullable)editingStringForObjectValue:(id _Nonnull)obj;
        [Export("editingStringForObjectValue:")]
        [return: NullAllowed]
        string EditingStringForObjectValue(NSObject obj);

        // -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
        [Export("getObjectValue:forString:errorDescription:")]
        bool GetObjectValue([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);

        // -(BOOL)isPartialStringValid:(NSString * _Nonnull)partialString newEditingString:(NSString * _Nullable * _Nullable)newString errorDescription:(NSString * _Nullable * _Nullable)error;
        [Export("isPartialStringValid:newEditingString:errorDescription:")]
        bool IsPartialStringValid(string partialString, [NullAllowed] out string newString, [NullAllowed] out string error);

        // -(BOOL)isPartialStringValid:(NSString * _Nonnull * _Nonnull)partialStringPtr proposedSelectedRange:(NSRangePointer _Nullable)proposedSelRangePtr originalString:(NSString * _Nonnull)origString originalSelectedRange:(NSRange)origSelRange errorDescription:(NSString * _Nullable * _Nullable)error;
        [Export("isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:")]
        unsafe bool IsPartialStringValid(out string partialStringPtr, [NullAllowed] NSRangePointer* proposedSelRangePtr, string origString, NSRange origSelRange, [NullAllowed] out string error);
    }

    // @interface NSDateFormatter : NSFormatter
    [BaseType(typeof(NSFormatter))]
    interface NSDateFormatter
    {
        // @property NSFormattingContext formattingContext __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("formattingContext", ArgumentSemantic.Assign)]
        NSFormattingContext FormattingContext { get; set; }

        // -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string range:(NSRange * _Nullable)rangep error:(NSError * _Nullable * _Nullable)error;
        [Export("getObjectValue:forString:range:error:")]
        unsafe bool GetObjectValue([NullAllowed] out NSObject obj, string @string, [NullAllowed] NSRange* rangep, [NullAllowed] out NSError error);

        // -(NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)date;
        [Export("stringFromDate:")]
        string StringFromDate(NSDate date);

        // -(NSDate * _Nullable)dateFromString:(NSString * _Nonnull)string;
        [Export("dateFromString:")]
        [return: NullAllowed]
        NSDate DateFromString(string @string);

        // +(NSString * _Nonnull)localizedStringFromDate:(NSDate * _Nonnull)date dateStyle:(NSDateFormatterStyle)dstyle timeStyle:(NSDateFormatterStyle)tstyle __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("localizedStringFromDate:dateStyle:timeStyle:")]
        string LocalizedStringFromDate(NSDate date, NSDateFormatterStyle dstyle, NSDateFormatterStyle tstyle);

        // +(NSString * _Nullable)dateFormatFromTemplate:(NSString * _Nonnull)tmplate options:(NSUInteger)opts locale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("dateFormatFromTemplate:options:locale:")]
        [return: NullAllowed]
        string DateFormatFromTemplate(string tmplate, nuint opts, [NullAllowed] NSLocale locale);

        // @property (class) NSDateFormatterBehavior defaultFormatterBehavior;
        [Static]
        [Export("defaultFormatterBehavior", ArgumentSemantic.Assign)]
        NSDateFormatterBehavior DefaultFormatterBehavior { get; set; }

        // -(void)setLocalizedDateFormatFromTemplate:(NSString * _Nonnull)dateFormatTemplate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("setLocalizedDateFormatFromTemplate:")]
        void SetLocalizedDateFormatFromTemplate(string dateFormatTemplate);

        // @property (copy) NSString * _Null_unspecified dateFormat;
        [Export("dateFormat")]
        string DateFormat { get; set; }

        // @property NSDateFormatterStyle dateStyle;
        [Export("dateStyle", ArgumentSemantic.Assign)]
        NSDateFormatterStyle DateStyle { get; set; }

        // @property NSDateFormatterStyle timeStyle;
        [Export("timeStyle", ArgumentSemantic.Assign)]
        NSDateFormatterStyle TimeStyle { get; set; }

        // @property (copy) NSLocale * _Null_unspecified locale;
        [Export("locale", ArgumentSemantic.Copy)]
        NSLocale Locale { get; set; }

        // @property BOOL generatesCalendarDates;
        [Export("generatesCalendarDates")]
        bool GeneratesCalendarDates { get; set; }

        // @property NSDateFormatterBehavior formatterBehavior;
        [Export("formatterBehavior", ArgumentSemantic.Assign)]
        NSDateFormatterBehavior FormatterBehavior { get; set; }

        // @property (copy) NSTimeZone * _Null_unspecified timeZone;
        [Export("timeZone", ArgumentSemantic.Copy)]
        NSTimeZone TimeZone { get; set; }

        // @property (copy) NSCalendar * _Null_unspecified calendar;
        [Export("calendar", ArgumentSemantic.Copy)]
        NSCalendar Calendar { get; set; }

        // @property (getter = isLenient) BOOL lenient;
        [Export("lenient")]
        bool Lenient { [Bind("isLenient")] get; set; }

        // @property (copy) NSDate * _Nullable twoDigitStartDate;
        [NullAllowed, Export("twoDigitStartDate", ArgumentSemantic.Copy)]
        NSDate TwoDigitStartDate { get; set; }

        // @property (copy) NSDate * _Nullable defaultDate;
        [NullAllowed, Export("defaultDate", ArgumentSemantic.Copy)]
        NSDate DefaultDate { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified eraSymbols;
        [Export("eraSymbols", ArgumentSemantic.Copy)]
        string[] EraSymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified monthSymbols;
        [Export("monthSymbols", ArgumentSemantic.Copy)]
        string[] MonthSymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified shortMonthSymbols;
        [Export("shortMonthSymbols", ArgumentSemantic.Copy)]
        string[] ShortMonthSymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified weekdaySymbols;
        [Export("weekdaySymbols", ArgumentSemantic.Copy)]
        string[] WeekdaySymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified shortWeekdaySymbols;
        [Export("shortWeekdaySymbols", ArgumentSemantic.Copy)]
        string[] ShortWeekdaySymbols { get; set; }

        // @property (copy) NSString * _Null_unspecified AMSymbol;
        [Export("AMSymbol")]
        string AMSymbol { get; set; }

        // @property (copy) NSString * _Null_unspecified PMSymbol;
        [Export("PMSymbol")]
        string PMSymbol { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified longEraSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("longEraSymbols", ArgumentSemantic.Copy)]
        string[] LongEraSymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified veryShortMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("veryShortMonthSymbols", ArgumentSemantic.Copy)]
        string[] VeryShortMonthSymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified standaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("standaloneMonthSymbols", ArgumentSemantic.Copy)]
        string[] StandaloneMonthSymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified shortStandaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("shortStandaloneMonthSymbols", ArgumentSemantic.Copy)]
        string[] ShortStandaloneMonthSymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified veryShortStandaloneMonthSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("veryShortStandaloneMonthSymbols", ArgumentSemantic.Copy)]
        string[] VeryShortStandaloneMonthSymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified veryShortWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("veryShortWeekdaySymbols", ArgumentSemantic.Copy)]
        string[] VeryShortWeekdaySymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified standaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("standaloneWeekdaySymbols", ArgumentSemantic.Copy)]
        string[] StandaloneWeekdaySymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified shortStandaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("shortStandaloneWeekdaySymbols", ArgumentSemantic.Copy)]
        string[] ShortStandaloneWeekdaySymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified veryShortStandaloneWeekdaySymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("veryShortStandaloneWeekdaySymbols", ArgumentSemantic.Copy)]
        string[] VeryShortStandaloneWeekdaySymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified quarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("quarterSymbols", ArgumentSemantic.Copy)]
        string[] QuarterSymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified shortQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("shortQuarterSymbols", ArgumentSemantic.Copy)]
        string[] ShortQuarterSymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified standaloneQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("standaloneQuarterSymbols", ArgumentSemantic.Copy)]
        string[] StandaloneQuarterSymbols { get; set; }

        // @property (copy) NSArray<NSString *> * _Null_unspecified shortStandaloneQuarterSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("shortStandaloneQuarterSymbols", ArgumentSemantic.Copy)]
        string[] ShortStandaloneQuarterSymbols { get; set; }

        // @property (copy) NSDate * _Nullable gregorianStartDate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [NullAllowed, Export("gregorianStartDate", ArgumentSemantic.Copy)]
        NSDate GregorianStartDate { get; set; }

        // @property BOOL doesRelativeDateFormatting __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("doesRelativeDateFormatting")]
        bool DoesRelativeDateFormatting { get; set; }
    }

    // @interface NSDateIntervalFormatter : NSFormatter
    [iOS(8, 0)]
    [BaseType(typeof(NSFormatter))]
    interface NSDateIntervalFormatter
    {
        // @property (copy) NSLocale * _Null_unspecified locale;
        [Export("locale", ArgumentSemantic.Copy)]
        NSLocale Locale { get; set; }

        // @property (copy) NSCalendar * _Null_unspecified calendar;
        [Export("calendar", ArgumentSemantic.Copy)]
        NSCalendar Calendar { get; set; }

        // @property (copy) NSTimeZone * _Null_unspecified timeZone;
        [Export("timeZone", ArgumentSemantic.Copy)]
        NSTimeZone TimeZone { get; set; }

        // @property (copy) NSString * _Null_unspecified dateTemplate;
        [Export("dateTemplate")]
        string DateTemplate { get; set; }

        // @property NSDateIntervalFormatterStyle dateStyle;
        [Export("dateStyle", ArgumentSemantic.Assign)]
        NSDateIntervalFormatterStyle DateStyle { get; set; }

        // @property NSDateIntervalFormatterStyle timeStyle;
        [Export("timeStyle", ArgumentSemantic.Assign)]
        NSDateIntervalFormatterStyle TimeStyle { get; set; }

        // -(NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)fromDate toDate:(NSDate * _Nonnull)toDate;
        [Export("stringFromDate:toDate:")]
        string StringFromDate(NSDate fromDate, NSDate toDate);

        // -(NSString * _Nullable)stringFromDateInterval:(NSDateInterval * _Nonnull)dateInterval __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("stringFromDateInterval:")]
        [return: NullAllowed]
        string StringFromDateInterval(NSDateInterval dateInterval);
    }

    // @interface NSISO8601DateFormatter : NSFormatter <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSFormatter))]
    interface NSISO8601DateFormatter : INSSecureCoding
    {
        // @property (copy) NSTimeZone * _Null_unspecified timeZone;
        [Export("timeZone", ArgumentSemantic.Copy)]
        NSTimeZone TimeZone { get; set; }

        // @property NSISO8601DateFormatOptions formatOptions;
        [Export("formatOptions", ArgumentSemantic.Assign)]
        NSISO8601DateFormatOptions FormatOptions { get; set; }

        // -(NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)date;
        [Export("stringFromDate:")]
        string StringFromDate(NSDate date);

        // -(NSDate * _Nullable)dateFromString:(NSString * _Nonnull)string;
        [Export("dateFromString:")]
        [return: NullAllowed]
        NSDate DateFromString(string @string);

        // +(NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)date timeZone:(NSTimeZone * _Nonnull)timeZone formatOptions:(NSISO8601DateFormatOptions)formatOptions;
        [Static]
        [Export("stringFromDate:timeZone:formatOptions:")]
        string StringFromDate(NSDate date, NSTimeZone timeZone, NSISO8601DateFormatOptions formatOptions);
    }

    // @interface NSMassFormatter : NSFormatter
    [iOS(8, 0)]
    [BaseType(typeof(NSFormatter))]
    interface NSMassFormatter
    {
        // @property (copy) NSNumberFormatter * _Null_unspecified numberFormatter;
        [Export("numberFormatter", ArgumentSemantic.Copy)]
        NSNumberFormatter NumberFormatter { get; set; }

        // @property NSFormattingUnitStyle unitStyle;
        [Export("unitStyle", ArgumentSemantic.Assign)]
        NSFormattingUnitStyle UnitStyle { get; set; }

        // @property (getter = isForPersonMassUse) BOOL forPersonMassUse;
        [Export("forPersonMassUse")]
        bool ForPersonMassUse { [Bind("isForPersonMassUse")] get; set; }

        // -(NSString * _Nonnull)stringFromValue:(double)value unit:(NSMassFormatterUnit)unit;
        [Export("stringFromValue:unit:")]
        string StringFromValue(double value, NSMassFormatterUnit unit);

        // -(NSString * _Nonnull)stringFromKilograms:(double)numberInKilograms;
        [Export("stringFromKilograms:")]
        string StringFromKilograms(double numberInKilograms);

        // -(NSString * _Nonnull)unitStringFromValue:(double)value unit:(NSMassFormatterUnit)unit;
        [Export("unitStringFromValue:unit:")]
        string UnitStringFromValue(double value, NSMassFormatterUnit unit);

        // -(NSString * _Nonnull)unitStringFromKilograms:(double)numberInKilograms usedUnit:(NSMassFormatterUnit * _Nullable)unitp;
        [Export("unitStringFromKilograms:usedUnit:")]
        unsafe string UnitStringFromKilograms(double numberInKilograms, [NullAllowed] NSMassFormatterUnit* unitp);

        // -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
        [Export("getObjectValue:forString:errorDescription:")]
        bool GetObjectValue([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
    }

    // @interface NSLengthFormatter : NSFormatter
    [iOS(8, 0)]
    [BaseType(typeof(NSFormatter))]
    interface NSLengthFormatter
    {
        // @property (copy) NSNumberFormatter * _Null_unspecified numberFormatter;
        [Export("numberFormatter", ArgumentSemantic.Copy)]
        NSNumberFormatter NumberFormatter { get; set; }

        // @property NSFormattingUnitStyle unitStyle;
        [Export("unitStyle", ArgumentSemantic.Assign)]
        NSFormattingUnitStyle UnitStyle { get; set; }

        // @property (getter = isForPersonHeightUse) BOOL forPersonHeightUse;
        [Export("forPersonHeightUse")]
        bool ForPersonHeightUse { [Bind("isForPersonHeightUse")] get; set; }

        // -(NSString * _Nonnull)stringFromValue:(double)value unit:(NSLengthFormatterUnit)unit;
        [Export("stringFromValue:unit:")]
        string StringFromValue(double value, NSLengthFormatterUnit unit);

        // -(NSString * _Nonnull)stringFromMeters:(double)numberInMeters;
        [Export("stringFromMeters:")]
        string StringFromMeters(double numberInMeters);

        // -(NSString * _Nonnull)unitStringFromValue:(double)value unit:(NSLengthFormatterUnit)unit;
        [Export("unitStringFromValue:unit:")]
        string UnitStringFromValue(double value, NSLengthFormatterUnit unit);

        // -(NSString * _Nonnull)unitStringFromMeters:(double)numberInMeters usedUnit:(NSLengthFormatterUnit * _Nullable)unitp;
        [Export("unitStringFromMeters:usedUnit:")]
        unsafe string UnitStringFromMeters(double numberInMeters, [NullAllowed] NSLengthFormatterUnit* unitp);

        // -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
        [Export("getObjectValue:forString:errorDescription:")]
        bool GetObjectValue([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
    }

    // @interface NSEnergyFormatter : NSFormatter
    [iOS(8, 0)]
    [BaseType(typeof(NSFormatter))]
    interface NSEnergyFormatter
    {
        // @property (copy) NSNumberFormatter * _Null_unspecified numberFormatter;
        [Export("numberFormatter", ArgumentSemantic.Copy)]
        NSNumberFormatter NumberFormatter { get; set; }

        // @property NSFormattingUnitStyle unitStyle;
        [Export("unitStyle", ArgumentSemantic.Assign)]
        NSFormattingUnitStyle UnitStyle { get; set; }

        // @property (getter = isForFoodEnergyUse) BOOL forFoodEnergyUse;
        [Export("forFoodEnergyUse")]
        bool ForFoodEnergyUse { [Bind("isForFoodEnergyUse")] get; set; }

        // -(NSString * _Nonnull)stringFromValue:(double)value unit:(NSEnergyFormatterUnit)unit;
        [Export("stringFromValue:unit:")]
        string StringFromValue(double value, NSEnergyFormatterUnit unit);

        // -(NSString * _Nonnull)stringFromJoules:(double)numberInJoules;
        [Export("stringFromJoules:")]
        string StringFromJoules(double numberInJoules);

        // -(NSString * _Nonnull)unitStringFromValue:(double)value unit:(NSEnergyFormatterUnit)unit;
        [Export("unitStringFromValue:unit:")]
        string UnitStringFromValue(double value, NSEnergyFormatterUnit unit);

        // -(NSString * _Nonnull)unitStringFromJoules:(double)numberInJoules usedUnit:(NSEnergyFormatterUnit * _Nullable)unitp;
        [Export("unitStringFromJoules:usedUnit:")]
        unsafe string UnitStringFromJoules(double numberInJoules, [NullAllowed] NSEnergyFormatterUnit* unitp);

        // -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
        [Export("getObjectValue:forString:errorDescription:")]
        bool GetObjectValue([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
    }

    // @interface NSUnitConverter : NSObject
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSObject))]
    interface NSUnitConverter
    {
        // -(double)baseUnitValueFromValue:(double)value;
        [Export("baseUnitValueFromValue:")]
        double BaseUnitValueFromValue(double value);

        // -(double)valueFromBaseUnitValue:(double)baseUnitValue;
        [Export("valueFromBaseUnitValue:")]
        double ValueFromBaseUnitValue(double baseUnitValue);
    }

    // @interface NSUnitConverterLinear : NSUnitConverter <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSUnitConverter))]
    interface NSUnitConverterLinear : INSSecureCoding
    {
        // @property (readonly) double coefficient;
        [Export("coefficient")]
        double Coefficient { get; }

        // @property (readonly) double constant;
        [Export("constant")]
        double Constant { get; }

        // -(instancetype _Nonnull)initWithCoefficient:(double)coefficient;
        [Export("initWithCoefficient:")]
        IntPtr Constructor(double coefficient);

        // -(instancetype _Nonnull)initWithCoefficient:(double)coefficient constant:(double)constant __attribute__((objc_designated_initializer));
        [Export("initWithCoefficient:constant:")]
        [DesignatedInitializer]
        IntPtr Constructor(double coefficient, double constant);
    }

    // @interface NSUnit : NSObject <NSCopying, NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSObject))]
    [DisableDefaultCtor]
    interface NSUnit : INSCopying, INSSecureCoding
    {
        // @property (readonly, copy) NSString * _Nonnull symbol;
        [Export("symbol")]
        string Symbol { get; }

        // -(instancetype _Nonnull)initWithSymbol:(NSString * _Nonnull)symbol __attribute__((objc_designated_initializer));
        [Export("initWithSymbol:")]
        [DesignatedInitializer]
        IntPtr Constructor(string symbol);
    }

    // @interface NSDimension : NSUnit <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSUnit))]
    interface NSDimension : INSSecureCoding
    {
        // @property (readonly, copy) NSUnitConverter * _Nonnull converter;
        [Export("converter", ArgumentSemantic.Copy)]
        NSUnitConverter Converter { get; }

        // -(instancetype _Nonnull)initWithSymbol:(NSString * _Nonnull)symbol converter:(NSUnitConverter * _Nonnull)converter __attribute__((objc_designated_initializer));
        [Export("initWithSymbol:converter:")]
        [DesignatedInitializer]
        IntPtr Constructor(string symbol, NSUnitConverter converter);

        // +(instancetype _Nonnull)baseUnit;
        [Static]
        [Export("baseUnit")]
        NSDimension BaseUnit();
    }

    // @interface NSUnitAcceleration : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitAcceleration : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitAcceleration * _Nonnull metersPerSecondSquared;
        [Static]
        [Export("metersPerSecondSquared", ArgumentSemantic.Copy)]
        NSUnitAcceleration MetersPerSecondSquared { get; }

        // @property (readonly, copy, class) NSUnitAcceleration * _Nonnull gravity;
        [Static]
        [Export("gravity", ArgumentSemantic.Copy)]
        NSUnitAcceleration Gravity { get; }
    }

    // @interface NSUnitAngle : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitAngle : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitAngle * _Nonnull degrees;
        [Static]
        [Export("degrees", ArgumentSemantic.Copy)]
        NSUnitAngle Degrees { get; }

        // @property (readonly, copy, class) NSUnitAngle * _Nonnull arcMinutes;
        [Static]
        [Export("arcMinutes", ArgumentSemantic.Copy)]
        NSUnitAngle ArcMinutes { get; }

        // @property (readonly, copy, class) NSUnitAngle * _Nonnull arcSeconds;
        [Static]
        [Export("arcSeconds", ArgumentSemantic.Copy)]
        NSUnitAngle ArcSeconds { get; }

        // @property (readonly, copy, class) NSUnitAngle * _Nonnull radians;
        [Static]
        [Export("radians", ArgumentSemantic.Copy)]
        NSUnitAngle Radians { get; }

        // @property (readonly, copy, class) NSUnitAngle * _Nonnull gradians;
        [Static]
        [Export("gradians", ArgumentSemantic.Copy)]
        NSUnitAngle Gradians { get; }

        // @property (readonly, copy, class) NSUnitAngle * _Nonnull revolutions;
        [Static]
        [Export("revolutions", ArgumentSemantic.Copy)]
        NSUnitAngle Revolutions { get; }
    }

    // @interface NSUnitArea : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitArea : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitArea * _Nonnull squareMegameters;
        [Static]
        [Export("squareMegameters", ArgumentSemantic.Copy)]
        NSUnitArea SquareMegameters { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull squareKilometers;
        [Static]
        [Export("squareKilometers", ArgumentSemantic.Copy)]
        NSUnitArea SquareKilometers { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull squareMeters;
        [Static]
        [Export("squareMeters", ArgumentSemantic.Copy)]
        NSUnitArea SquareMeters { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull squareCentimeters;
        [Static]
        [Export("squareCentimeters", ArgumentSemantic.Copy)]
        NSUnitArea SquareCentimeters { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull squareMillimeters;
        [Static]
        [Export("squareMillimeters", ArgumentSemantic.Copy)]
        NSUnitArea SquareMillimeters { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull squareMicrometers;
        [Static]
        [Export("squareMicrometers", ArgumentSemantic.Copy)]
        NSUnitArea SquareMicrometers { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull squareNanometers;
        [Static]
        [Export("squareNanometers", ArgumentSemantic.Copy)]
        NSUnitArea SquareNanometers { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull squareInches;
        [Static]
        [Export("squareInches", ArgumentSemantic.Copy)]
        NSUnitArea SquareInches { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull squareFeet;
        [Static]
        [Export("squareFeet", ArgumentSemantic.Copy)]
        NSUnitArea SquareFeet { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull squareYards;
        [Static]
        [Export("squareYards", ArgumentSemantic.Copy)]
        NSUnitArea SquareYards { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull squareMiles;
        [Static]
        [Export("squareMiles", ArgumentSemantic.Copy)]
        NSUnitArea SquareMiles { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull acres;
        [Static]
        [Export("acres", ArgumentSemantic.Copy)]
        NSUnitArea Acres { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull ares;
        [Static]
        [Export("ares", ArgumentSemantic.Copy)]
        NSUnitArea Ares { get; }

        // @property (readonly, copy, class) NSUnitArea * _Nonnull hectares;
        [Static]
        [Export("hectares", ArgumentSemantic.Copy)]
        NSUnitArea Hectares { get; }
    }

    // @interface NSUnitConcentrationMass : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitConcentrationMass : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitConcentrationMass * _Nonnull gramsPerLiter;
        [Static]
        [Export("gramsPerLiter", ArgumentSemantic.Copy)]
        NSUnitConcentrationMass GramsPerLiter { get; }

        // @property (readonly, copy, class) NSUnitConcentrationMass * _Nonnull milligramsPerDeciliter;
        [Static]
        [Export("milligramsPerDeciliter", ArgumentSemantic.Copy)]
        NSUnitConcentrationMass MilligramsPerDeciliter { get; }

        // +(NSUnitConcentrationMass * _Nonnull)millimolesPerLiterWithGramsPerMole:(double)gramsPerMole;
        [Static]
        [Export("millimolesPerLiterWithGramsPerMole:")]
        NSUnitConcentrationMass MillimolesPerLiterWithGramsPerMole(double gramsPerMole);
    }

    // @interface NSUnitDispersion : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitDispersion : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitDispersion * _Nonnull partsPerMillion;
        [Static]
        [Export("partsPerMillion", ArgumentSemantic.Copy)]
        NSUnitDispersion PartsPerMillion { get; }
    }

    // @interface NSUnitDuration : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitDuration : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitDuration * _Nonnull seconds;
        [Static]
        [Export("seconds", ArgumentSemantic.Copy)]
        NSUnitDuration Seconds { get; }

        // @property (readonly, copy, class) NSUnitDuration * _Nonnull minutes;
        [Static]
        [Export("minutes", ArgumentSemantic.Copy)]
        NSUnitDuration Minutes { get; }

        // @property (readonly, copy, class) NSUnitDuration * _Nonnull hours;
        [Static]
        [Export("hours", ArgumentSemantic.Copy)]
        NSUnitDuration Hours { get; }
    }

    // @interface NSUnitElectricCharge : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitElectricCharge : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull coulombs;
        [Static]
        [Export("coulombs", ArgumentSemantic.Copy)]
        NSUnitElectricCharge Coulombs { get; }

        // @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull megaampereHours;
        [Static]
        [Export("megaampereHours", ArgumentSemantic.Copy)]
        NSUnitElectricCharge MegaampereHours { get; }

        // @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull kiloampereHours;
        [Static]
        [Export("kiloampereHours", ArgumentSemantic.Copy)]
        NSUnitElectricCharge KiloampereHours { get; }

        // @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull ampereHours;
        [Static]
        [Export("ampereHours", ArgumentSemantic.Copy)]
        NSUnitElectricCharge AmpereHours { get; }

        // @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull milliampereHours;
        [Static]
        [Export("milliampereHours", ArgumentSemantic.Copy)]
        NSUnitElectricCharge MilliampereHours { get; }

        // @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull microampereHours;
        [Static]
        [Export("microampereHours", ArgumentSemantic.Copy)]
        NSUnitElectricCharge MicroampereHours { get; }
    }

    // @interface NSUnitElectricCurrent : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitElectricCurrent : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull megaamperes;
        [Static]
        [Export("megaamperes", ArgumentSemantic.Copy)]
        NSUnitElectricCurrent Megaamperes { get; }

        // @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull kiloamperes;
        [Static]
        [Export("kiloamperes", ArgumentSemantic.Copy)]
        NSUnitElectricCurrent Kiloamperes { get; }

        // @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull amperes;
        [Static]
        [Export("amperes", ArgumentSemantic.Copy)]
        NSUnitElectricCurrent Amperes { get; }

        // @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull milliamperes;
        [Static]
        [Export("milliamperes", ArgumentSemantic.Copy)]
        NSUnitElectricCurrent Milliamperes { get; }

        // @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull microamperes;
        [Static]
        [Export("microamperes", ArgumentSemantic.Copy)]
        NSUnitElectricCurrent Microamperes { get; }
    }

    // @interface NSUnitElectricPotentialDifference : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitElectricPotentialDifference : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull megavolts;
        [Static]
        [Export("megavolts", ArgumentSemantic.Copy)]
        NSUnitElectricPotentialDifference Megavolts { get; }

        // @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull kilovolts;
        [Static]
        [Export("kilovolts", ArgumentSemantic.Copy)]
        NSUnitElectricPotentialDifference Kilovolts { get; }

        // @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull volts;
        [Static]
        [Export("volts", ArgumentSemantic.Copy)]
        NSUnitElectricPotentialDifference Volts { get; }

        // @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull millivolts;
        [Static]
        [Export("millivolts", ArgumentSemantic.Copy)]
        NSUnitElectricPotentialDifference Millivolts { get; }

        // @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull microvolts;
        [Static]
        [Export("microvolts", ArgumentSemantic.Copy)]
        NSUnitElectricPotentialDifference Microvolts { get; }
    }

    // @interface NSUnitElectricResistance : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitElectricResistance : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull megaohms;
        [Static]
        [Export("megaohms", ArgumentSemantic.Copy)]
        NSUnitElectricResistance Megaohms { get; }

        // @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull kiloohms;
        [Static]
        [Export("kiloohms", ArgumentSemantic.Copy)]
        NSUnitElectricResistance Kiloohms { get; }

        // @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull ohms;
        [Static]
        [Export("ohms", ArgumentSemantic.Copy)]
        NSUnitElectricResistance Ohms { get; }

        // @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull milliohms;
        [Static]
        [Export("milliohms", ArgumentSemantic.Copy)]
        NSUnitElectricResistance Milliohms { get; }

        // @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull microohms;
        [Static]
        [Export("microohms", ArgumentSemantic.Copy)]
        NSUnitElectricResistance Microohms { get; }
    }

    // @interface NSUnitEnergy : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitEnergy : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitEnergy * _Nonnull kilojoules;
        [Static]
        [Export("kilojoules", ArgumentSemantic.Copy)]
        NSUnitEnergy Kilojoules { get; }

        // @property (readonly, copy, class) NSUnitEnergy * _Nonnull joules;
        [Static]
        [Export("joules", ArgumentSemantic.Copy)]
        NSUnitEnergy Joules { get; }

        // @property (readonly, copy, class) NSUnitEnergy * _Nonnull kilocalories;
        [Static]
        [Export("kilocalories", ArgumentSemantic.Copy)]
        NSUnitEnergy Kilocalories { get; }

        // @property (readonly, copy, class) NSUnitEnergy * _Nonnull calories;
        [Static]
        [Export("calories", ArgumentSemantic.Copy)]
        NSUnitEnergy Calories { get; }

        // @property (readonly, copy, class) NSUnitEnergy * _Nonnull kilowattHours;
        [Static]
        [Export("kilowattHours", ArgumentSemantic.Copy)]
        NSUnitEnergy KilowattHours { get; }
    }

    // @interface NSUnitFrequency : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitFrequency : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitFrequency * _Nonnull terahertz;
        [Static]
        [Export("terahertz", ArgumentSemantic.Copy)]
        NSUnitFrequency Terahertz { get; }

        // @property (readonly, copy, class) NSUnitFrequency * _Nonnull gigahertz;
        [Static]
        [Export("gigahertz", ArgumentSemantic.Copy)]
        NSUnitFrequency Gigahertz { get; }

        // @property (readonly, copy, class) NSUnitFrequency * _Nonnull megahertz;
        [Static]
        [Export("megahertz", ArgumentSemantic.Copy)]
        NSUnitFrequency Megahertz { get; }

        // @property (readonly, copy, class) NSUnitFrequency * _Nonnull kilohertz;
        [Static]
        [Export("kilohertz", ArgumentSemantic.Copy)]
        NSUnitFrequency Kilohertz { get; }

        // @property (readonly, copy, class) NSUnitFrequency * _Nonnull hertz;
        [Static]
        [Export("hertz", ArgumentSemantic.Copy)]
        NSUnitFrequency Hertz { get; }

        // @property (readonly, copy, class) NSUnitFrequency * _Nonnull millihertz;
        [Static]
        [Export("millihertz", ArgumentSemantic.Copy)]
        NSUnitFrequency Millihertz { get; }

        // @property (readonly, copy, class) NSUnitFrequency * _Nonnull microhertz;
        [Static]
        [Export("microhertz", ArgumentSemantic.Copy)]
        NSUnitFrequency Microhertz { get; }

        // @property (readonly, copy, class) NSUnitFrequency * _Nonnull nanohertz;
        [Static]
        [Export("nanohertz", ArgumentSemantic.Copy)]
        NSUnitFrequency Nanohertz { get; }
    }

    // @interface NSUnitFuelEfficiency : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitFuelEfficiency : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitFuelEfficiency * _Nonnull litersPer100Kilometers;
        [Static]
        [Export("litersPer100Kilometers", ArgumentSemantic.Copy)]
        NSUnitFuelEfficiency LitersPer100Kilometers { get; }

        // @property (readonly, copy, class) NSUnitFuelEfficiency * _Nonnull milesPerImperialGallon;
        [Static]
        [Export("milesPerImperialGallon", ArgumentSemantic.Copy)]
        NSUnitFuelEfficiency MilesPerImperialGallon { get; }

        // @property (readonly, copy, class) NSUnitFuelEfficiency * _Nonnull milesPerGallon;
        [Static]
        [Export("milesPerGallon", ArgumentSemantic.Copy)]
        NSUnitFuelEfficiency MilesPerGallon { get; }
    }

    // @interface NSUnitLength : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitLength : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitLength * _Nonnull megameters;
        [Static]
        [Export("megameters", ArgumentSemantic.Copy)]
        NSUnitLength Megameters { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull kilometers;
        [Static]
        [Export("kilometers", ArgumentSemantic.Copy)]
        NSUnitLength Kilometers { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull hectometers;
        [Static]
        [Export("hectometers", ArgumentSemantic.Copy)]
        NSUnitLength Hectometers { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull decameters;
        [Static]
        [Export("decameters", ArgumentSemantic.Copy)]
        NSUnitLength Decameters { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull meters;
        [Static]
        [Export("meters", ArgumentSemantic.Copy)]
        NSUnitLength Meters { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull decimeters;
        [Static]
        [Export("decimeters", ArgumentSemantic.Copy)]
        NSUnitLength Decimeters { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull centimeters;
        [Static]
        [Export("centimeters", ArgumentSemantic.Copy)]
        NSUnitLength Centimeters { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull millimeters;
        [Static]
        [Export("millimeters", ArgumentSemantic.Copy)]
        NSUnitLength Millimeters { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull micrometers;
        [Static]
        [Export("micrometers", ArgumentSemantic.Copy)]
        NSUnitLength Micrometers { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull nanometers;
        [Static]
        [Export("nanometers", ArgumentSemantic.Copy)]
        NSUnitLength Nanometers { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull picometers;
        [Static]
        [Export("picometers", ArgumentSemantic.Copy)]
        NSUnitLength Picometers { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull inches;
        [Static]
        [Export("inches", ArgumentSemantic.Copy)]
        NSUnitLength Inches { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull feet;
        [Static]
        [Export("feet", ArgumentSemantic.Copy)]
        NSUnitLength Feet { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull yards;
        [Static]
        [Export("yards", ArgumentSemantic.Copy)]
        NSUnitLength Yards { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull miles;
        [Static]
        [Export("miles", ArgumentSemantic.Copy)]
        NSUnitLength Miles { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull scandinavianMiles;
        [Static]
        [Export("scandinavianMiles", ArgumentSemantic.Copy)]
        NSUnitLength ScandinavianMiles { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull lightyears;
        [Static]
        [Export("lightyears", ArgumentSemantic.Copy)]
        NSUnitLength Lightyears { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull nauticalMiles;
        [Static]
        [Export("nauticalMiles", ArgumentSemantic.Copy)]
        NSUnitLength NauticalMiles { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull fathoms;
        [Static]
        [Export("fathoms", ArgumentSemantic.Copy)]
        NSUnitLength Fathoms { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull furlongs;
        [Static]
        [Export("furlongs", ArgumentSemantic.Copy)]
        NSUnitLength Furlongs { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull astronomicalUnits;
        [Static]
        [Export("astronomicalUnits", ArgumentSemantic.Copy)]
        NSUnitLength AstronomicalUnits { get; }

        // @property (readonly, copy, class) NSUnitLength * _Nonnull parsecs;
        [Static]
        [Export("parsecs", ArgumentSemantic.Copy)]
        NSUnitLength Parsecs { get; }
    }

    // @interface NSUnitIlluminance : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitIlluminance : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitIlluminance * _Nonnull lux;
        [Static]
        [Export("lux", ArgumentSemantic.Copy)]
        NSUnitIlluminance Lux { get; }
    }

    // @interface NSUnitMass : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitMass : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitMass * _Nonnull kilograms;
        [Static]
        [Export("kilograms", ArgumentSemantic.Copy)]
        NSUnitMass Kilograms { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull grams;
        [Static]
        [Export("grams", ArgumentSemantic.Copy)]
        NSUnitMass Grams { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull decigrams;
        [Static]
        [Export("decigrams", ArgumentSemantic.Copy)]
        NSUnitMass Decigrams { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull centigrams;
        [Static]
        [Export("centigrams", ArgumentSemantic.Copy)]
        NSUnitMass Centigrams { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull milligrams;
        [Static]
        [Export("milligrams", ArgumentSemantic.Copy)]
        NSUnitMass Milligrams { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull micrograms;
        [Static]
        [Export("micrograms", ArgumentSemantic.Copy)]
        NSUnitMass Micrograms { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull nanograms;
        [Static]
        [Export("nanograms", ArgumentSemantic.Copy)]
        NSUnitMass Nanograms { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull picograms;
        [Static]
        [Export("picograms", ArgumentSemantic.Copy)]
        NSUnitMass Picograms { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull ounces;
        [Static]
        [Export("ounces", ArgumentSemantic.Copy)]
        NSUnitMass Ounces { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull poundsMass;
        [Static]
        [Export("poundsMass", ArgumentSemantic.Copy)]
        NSUnitMass PoundsMass { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull stones;
        [Static]
        [Export("stones", ArgumentSemantic.Copy)]
        NSUnitMass Stones { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull metricTons;
        [Static]
        [Export("metricTons", ArgumentSemantic.Copy)]
        NSUnitMass MetricTons { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull shortTons;
        [Static]
        [Export("shortTons", ArgumentSemantic.Copy)]
        NSUnitMass ShortTons { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull carats;
        [Static]
        [Export("carats", ArgumentSemantic.Copy)]
        NSUnitMass Carats { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull ouncesTroy;
        [Static]
        [Export("ouncesTroy", ArgumentSemantic.Copy)]
        NSUnitMass OuncesTroy { get; }

        // @property (readonly, copy, class) NSUnitMass * _Nonnull slugs;
        [Static]
        [Export("slugs", ArgumentSemantic.Copy)]
        NSUnitMass Slugs { get; }
    }

    // @interface NSUnitPower : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitPower : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitPower * _Nonnull terawatts;
        [Static]
        [Export("terawatts", ArgumentSemantic.Copy)]
        NSUnitPower Terawatts { get; }

        // @property (readonly, copy, class) NSUnitPower * _Nonnull gigawatts;
        [Static]
        [Export("gigawatts", ArgumentSemantic.Copy)]
        NSUnitPower Gigawatts { get; }

        // @property (readonly, copy, class) NSUnitPower * _Nonnull megawatts;
        [Static]
        [Export("megawatts", ArgumentSemantic.Copy)]
        NSUnitPower Megawatts { get; }

        // @property (readonly, copy, class) NSUnitPower * _Nonnull kilowatts;
        [Static]
        [Export("kilowatts", ArgumentSemantic.Copy)]
        NSUnitPower Kilowatts { get; }

        // @property (readonly, copy, class) NSUnitPower * _Nonnull watts;
        [Static]
        [Export("watts", ArgumentSemantic.Copy)]
        NSUnitPower Watts { get; }

        // @property (readonly, copy, class) NSUnitPower * _Nonnull milliwatts;
        [Static]
        [Export("milliwatts", ArgumentSemantic.Copy)]
        NSUnitPower Milliwatts { get; }

        // @property (readonly, copy, class) NSUnitPower * _Nonnull microwatts;
        [Static]
        [Export("microwatts", ArgumentSemantic.Copy)]
        NSUnitPower Microwatts { get; }

        // @property (readonly, copy, class) NSUnitPower * _Nonnull nanowatts;
        [Static]
        [Export("nanowatts", ArgumentSemantic.Copy)]
        NSUnitPower Nanowatts { get; }

        // @property (readonly, copy, class) NSUnitPower * _Nonnull picowatts;
        [Static]
        [Export("picowatts", ArgumentSemantic.Copy)]
        NSUnitPower Picowatts { get; }

        // @property (readonly, copy, class) NSUnitPower * _Nonnull femtowatts;
        [Static]
        [Export("femtowatts", ArgumentSemantic.Copy)]
        NSUnitPower Femtowatts { get; }

        // @property (readonly, copy, class) NSUnitPower * _Nonnull horsepower;
        [Static]
        [Export("horsepower", ArgumentSemantic.Copy)]
        NSUnitPower Horsepower { get; }
    }

    // @interface NSUnitPressure : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitPressure : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitPressure * _Nonnull newtonsPerMetersSquared;
        [Static]
        [Export("newtonsPerMetersSquared", ArgumentSemantic.Copy)]
        NSUnitPressure NewtonsPerMetersSquared { get; }

        // @property (readonly, copy, class) NSUnitPressure * _Nonnull gigapascals;
        [Static]
        [Export("gigapascals", ArgumentSemantic.Copy)]
        NSUnitPressure Gigapascals { get; }

        // @property (readonly, copy, class) NSUnitPressure * _Nonnull megapascals;
        [Static]
        [Export("megapascals", ArgumentSemantic.Copy)]
        NSUnitPressure Megapascals { get; }

        // @property (readonly, copy, class) NSUnitPressure * _Nonnull kilopascals;
        [Static]
        [Export("kilopascals", ArgumentSemantic.Copy)]
        NSUnitPressure Kilopascals { get; }

        // @property (readonly, copy, class) NSUnitPressure * _Nonnull hectopascals;
        [Static]
        [Export("hectopascals", ArgumentSemantic.Copy)]
        NSUnitPressure Hectopascals { get; }

        // @property (readonly, copy, class) NSUnitPressure * _Nonnull inchesOfMercury;
        [Static]
        [Export("inchesOfMercury", ArgumentSemantic.Copy)]
        NSUnitPressure InchesOfMercury { get; }

        // @property (readonly, copy, class) NSUnitPressure * _Nonnull bars;
        [Static]
        [Export("bars", ArgumentSemantic.Copy)]
        NSUnitPressure Bars { get; }

        // @property (readonly, copy, class) NSUnitPressure * _Nonnull millibars;
        [Static]
        [Export("millibars", ArgumentSemantic.Copy)]
        NSUnitPressure Millibars { get; }

        // @property (readonly, copy, class) NSUnitPressure * _Nonnull millimetersOfMercury;
        [Static]
        [Export("millimetersOfMercury", ArgumentSemantic.Copy)]
        NSUnitPressure MillimetersOfMercury { get; }

        // @property (readonly, copy, class) NSUnitPressure * _Nonnull poundsForcePerSquareInch;
        [Static]
        [Export("poundsForcePerSquareInch", ArgumentSemantic.Copy)]
        NSUnitPressure PoundsForcePerSquareInch { get; }
    }

    // @interface NSUnitSpeed : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitSpeed : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitSpeed * _Nonnull metersPerSecond;
        [Static]
        [Export("metersPerSecond", ArgumentSemantic.Copy)]
        NSUnitSpeed MetersPerSecond { get; }

        // @property (readonly, copy, class) NSUnitSpeed * _Nonnull kilometersPerHour;
        [Static]
        [Export("kilometersPerHour", ArgumentSemantic.Copy)]
        NSUnitSpeed KilometersPerHour { get; }

        // @property (readonly, copy, class) NSUnitSpeed * _Nonnull milesPerHour;
        [Static]
        [Export("milesPerHour", ArgumentSemantic.Copy)]
        NSUnitSpeed MilesPerHour { get; }

        // @property (readonly, copy, class) NSUnitSpeed * _Nonnull knots;
        [Static]
        [Export("knots", ArgumentSemantic.Copy)]
        NSUnitSpeed Knots { get; }
    }

    // @interface NSUnitTemperature : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitTemperature : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitTemperature * _Nonnull kelvin;
        [Static]
        [Export("kelvin", ArgumentSemantic.Copy)]
        NSUnitTemperature Kelvin { get; }

        // @property (readonly, copy, class) NSUnitTemperature * _Nonnull celsius;
        [Static]
        [Export("celsius", ArgumentSemantic.Copy)]
        NSUnitTemperature Celsius { get; }

        // @property (readonly, copy, class) NSUnitTemperature * _Nonnull fahrenheit;
        [Static]
        [Export("fahrenheit", ArgumentSemantic.Copy)]
        NSUnitTemperature Fahrenheit { get; }
    }

    // @interface NSUnitVolume : NSDimension <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSDimension))]
    interface NSUnitVolume : INSSecureCoding
    {
        // @property (readonly, copy, class) NSUnitVolume * _Nonnull megaliters;
        [Static]
        [Export("megaliters", ArgumentSemantic.Copy)]
        NSUnitVolume Megaliters { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull kiloliters;
        [Static]
        [Export("kiloliters", ArgumentSemantic.Copy)]
        NSUnitVolume Kiloliters { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull liters;
        [Static]
        [Export("liters", ArgumentSemantic.Copy)]
        NSUnitVolume Liters { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull deciliters;
        [Static]
        [Export("deciliters", ArgumentSemantic.Copy)]
        NSUnitVolume Deciliters { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull centiliters;
        [Static]
        [Export("centiliters", ArgumentSemantic.Copy)]
        NSUnitVolume Centiliters { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull milliliters;
        [Static]
        [Export("milliliters", ArgumentSemantic.Copy)]
        NSUnitVolume Milliliters { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicKilometers;
        [Static]
        [Export("cubicKilometers", ArgumentSemantic.Copy)]
        NSUnitVolume CubicKilometers { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicMeters;
        [Static]
        [Export("cubicMeters", ArgumentSemantic.Copy)]
        NSUnitVolume CubicMeters { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicDecimeters;
        [Static]
        [Export("cubicDecimeters", ArgumentSemantic.Copy)]
        NSUnitVolume CubicDecimeters { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicCentimeters;
        [Static]
        [Export("cubicCentimeters", ArgumentSemantic.Copy)]
        NSUnitVolume CubicCentimeters { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicMillimeters;
        [Static]
        [Export("cubicMillimeters", ArgumentSemantic.Copy)]
        NSUnitVolume CubicMillimeters { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicInches;
        [Static]
        [Export("cubicInches", ArgumentSemantic.Copy)]
        NSUnitVolume CubicInches { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicFeet;
        [Static]
        [Export("cubicFeet", ArgumentSemantic.Copy)]
        NSUnitVolume CubicFeet { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicYards;
        [Static]
        [Export("cubicYards", ArgumentSemantic.Copy)]
        NSUnitVolume CubicYards { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicMiles;
        [Static]
        [Export("cubicMiles", ArgumentSemantic.Copy)]
        NSUnitVolume CubicMiles { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull acreFeet;
        [Static]
        [Export("acreFeet", ArgumentSemantic.Copy)]
        NSUnitVolume AcreFeet { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull bushels;
        [Static]
        [Export("bushels", ArgumentSemantic.Copy)]
        NSUnitVolume Bushels { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull teaspoons;
        [Static]
        [Export("teaspoons", ArgumentSemantic.Copy)]
        NSUnitVolume Teaspoons { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull tablespoons;
        [Static]
        [Export("tablespoons", ArgumentSemantic.Copy)]
        NSUnitVolume Tablespoons { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull fluidOunces;
        [Static]
        [Export("fluidOunces", ArgumentSemantic.Copy)]
        NSUnitVolume FluidOunces { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull cups;
        [Static]
        [Export("cups", ArgumentSemantic.Copy)]
        NSUnitVolume Cups { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull pints;
        [Static]
        [Export("pints", ArgumentSemantic.Copy)]
        NSUnitVolume Pints { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull quarts;
        [Static]
        [Export("quarts", ArgumentSemantic.Copy)]
        NSUnitVolume Quarts { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull gallons;
        [Static]
        [Export("gallons", ArgumentSemantic.Copy)]
        NSUnitVolume Gallons { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialTeaspoons;
        [Static]
        [Export("imperialTeaspoons", ArgumentSemantic.Copy)]
        NSUnitVolume ImperialTeaspoons { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialTablespoons;
        [Static]
        [Export("imperialTablespoons", ArgumentSemantic.Copy)]
        NSUnitVolume ImperialTablespoons { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialFluidOunces;
        [Static]
        [Export("imperialFluidOunces", ArgumentSemantic.Copy)]
        NSUnitVolume ImperialFluidOunces { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialPints;
        [Static]
        [Export("imperialPints", ArgumentSemantic.Copy)]
        NSUnitVolume ImperialPints { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialQuarts;
        [Static]
        [Export("imperialQuarts", ArgumentSemantic.Copy)]
        NSUnitVolume ImperialQuarts { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialGallons;
        [Static]
        [Export("imperialGallons", ArgumentSemantic.Copy)]
        NSUnitVolume ImperialGallons { get; }

        // @property (readonly, copy, class) NSUnitVolume * _Nonnull metricCups;
        [Static]
        [Export("metricCups", ArgumentSemantic.Copy)]
        NSUnitVolume MetricCups { get; }
    }

    // audit-objc-generics: @interface NSMeasurement<UnitType : NSUnit *> : NSObject <NSCopying, NSSecureCoding>
    [iOS(10, 0)]
    [BaseType(typeof(NSObject))]
    [DisableDefaultCtor]
    interface NSMeasurement : INSCopying, INSSecureCoding
    {
        // @property (readonly, copy) UnitType _Nonnull unit;
        [Export("unit", ArgumentSemantic.Copy)]
        NSUnit Unit { get; }

        // @property (readonly) double doubleValue;
        [Export("doubleValue")]
        double DoubleValue { get; }

        // -(instancetype _Nonnull)initWithDoubleValue:(double)doubleValue unit:(UnitType _Nonnull)unit __attribute__((objc_designated_initializer));
        [Export("initWithDoubleValue:unit:")]
        [DesignatedInitializer]
        IntPtr Constructor(double doubleValue, NSUnit unit);

        // -(BOOL)canBeConvertedToUnit:(NSUnit * _Nonnull)unit;
        [Export("canBeConvertedToUnit:")]
        bool CanBeConvertedToUnit(NSUnit unit);

        // -(NSMeasurement * _Nonnull)measurementByConvertingToUnit:(NSUnit * _Nonnull)unit;
        [Export("measurementByConvertingToUnit:")]
        NSMeasurement`1 MeasurementByConvertingToUnit(NSUnit unit);

        // -(NSMeasurement<UnitType> * _Nonnull)measurementByAddingMeasurement:(NSMeasurement<UnitType> * _Nonnull)measurement;
        [Export("measurementByAddingMeasurement:")]
        NSMeasurement`1<NSUnit> MeasurementByAddingMeasurement(NSMeasurement`1<NSUnit> measurement);

        // -(NSMeasurement<UnitType> * _Nonnull)measurementBySubtractingMeasurement:(NSMeasurement<UnitType> * _Nonnull)measurement;
        [Export("measurementBySubtractingMeasurement:")]
        NSMeasurement`1<NSUnit> MeasurementBySubtractingMeasurement(NSMeasurement`1<NSUnit> measurement);
    }

    // @interface NSNumberFormatter : NSFormatter
    [BaseType(typeof(NSFormatter))]
    interface NSNumberFormatter
    {
        // @property NSFormattingContext formattingContext __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("formattingContext", ArgumentSemantic.Assign)]
        NSFormattingContext FormattingContext { get; set; }

        // -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string range:(NSRange * _Nullable)rangep error:(NSError * _Nullable * _Nullable)error;
        [Export("getObjectValue:forString:range:error:")]
        unsafe bool GetObjectValue([NullAllowed] out NSObject obj, string @string, [NullAllowed] NSRange* rangep, [NullAllowed] out NSError error);

        // -(NSString * _Nullable)stringFromNumber:(NSNumber * _Nonnull)number;
        [Export("stringFromNumber:")]
        [return: NullAllowed]
        string StringFromNumber(NSNumber number);

        // -(NSNumber * _Nullable)numberFromString:(NSString * _Nonnull)string;
        [Export("numberFromString:")]
        [return: NullAllowed]
        NSNumber NumberFromString(string @string);

        // +(NSString * _Nonnull)localizedStringFromNumber:(NSNumber * _Nonnull)num numberStyle:(NSNumberFormatterStyle)nstyle __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("localizedStringFromNumber:numberStyle:")]
        string LocalizedStringFromNumber(NSNumber num, NSNumberFormatterStyle nstyle);

        // +(NSNumberFormatterBehavior)defaultFormatterBehavior;
        // +(void)setDefaultFormatterBehavior:(NSNumberFormatterBehavior)behavior;
        [Static]
        [Export("defaultFormatterBehavior")]
        [Verify(MethodToProperty)]
        NSNumberFormatterBehavior DefaultFormatterBehavior { get; set; }

        // @property NSNumberFormatterStyle numberStyle;
        [Export("numberStyle", ArgumentSemantic.Assign)]
        NSNumberFormatterStyle NumberStyle { get; set; }

        // @property (copy) NSLocale * _Null_unspecified locale;
        [Export("locale", ArgumentSemantic.Copy)]
        NSLocale Locale { get; set; }

        // @property BOOL generatesDecimalNumbers;
        [Export("generatesDecimalNumbers")]
        bool GeneratesDecimalNumbers { get; set; }

        // @property NSNumberFormatterBehavior formatterBehavior;
        [Export("formatterBehavior", ArgumentSemantic.Assign)]
        NSNumberFormatterBehavior FormatterBehavior { get; set; }

        // @property (copy) NSString * _Null_unspecified negativeFormat;
        [Export("negativeFormat")]
        string NegativeFormat { get; set; }

        // @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForNegativeValues;
        [NullAllowed, Export("textAttributesForNegativeValues", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> TextAttributesForNegativeValues { get; set; }

        // @property (copy) NSString * _Null_unspecified positiveFormat;
        [Export("positiveFormat")]
        string PositiveFormat { get; set; }

        // @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForPositiveValues;
        [NullAllowed, Export("textAttributesForPositiveValues", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> TextAttributesForPositiveValues { get; set; }

        // @property BOOL allowsFloats;
        [Export("allowsFloats")]
        bool AllowsFloats { get; set; }

        // @property (copy) NSString * _Null_unspecified decimalSeparator;
        [Export("decimalSeparator")]
        string DecimalSeparator { get; set; }

        // @property BOOL alwaysShowsDecimalSeparator;
        [Export("alwaysShowsDecimalSeparator")]
        bool AlwaysShowsDecimalSeparator { get; set; }

        // @property (copy) NSString * _Null_unspecified currencyDecimalSeparator;
        [Export("currencyDecimalSeparator")]
        string CurrencyDecimalSeparator { get; set; }

        // @property BOOL usesGroupingSeparator;
        [Export("usesGroupingSeparator")]
        bool UsesGroupingSeparator { get; set; }

        // @property (copy) NSString * _Null_unspecified groupingSeparator;
        [Export("groupingSeparator")]
        string GroupingSeparator { get; set; }

        // @property (copy) NSString * _Nullable zeroSymbol;
        [NullAllowed, Export("zeroSymbol")]
        string ZeroSymbol { get; set; }

        // @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForZero;
        [NullAllowed, Export("textAttributesForZero", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> TextAttributesForZero { get; set; }

        // @property (copy) NSString * _Nonnull nilSymbol;
        [Export("nilSymbol")]
        string NilSymbol { get; set; }

        // @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForNil;
        [NullAllowed, Export("textAttributesForNil", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> TextAttributesForNil { get; set; }

        // @property (copy) NSString * _Null_unspecified notANumberSymbol;
        [Export("notANumberSymbol")]
        string NotANumberSymbol { get; set; }

        // @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForNotANumber;
        [NullAllowed, Export("textAttributesForNotANumber", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> TextAttributesForNotANumber { get; set; }

        // @property (copy) NSString * _Nonnull positiveInfinitySymbol;
        [Export("positiveInfinitySymbol")]
        string PositiveInfinitySymbol { get; set; }

        // @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForPositiveInfinity;
        [NullAllowed, Export("textAttributesForPositiveInfinity", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> TextAttributesForPositiveInfinity { get; set; }

        // @property (copy) NSString * _Nonnull negativeInfinitySymbol;
        [Export("negativeInfinitySymbol")]
        string NegativeInfinitySymbol { get; set; }

        // @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForNegativeInfinity;
        [NullAllowed, Export("textAttributesForNegativeInfinity", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> TextAttributesForNegativeInfinity { get; set; }

        // @property (copy) NSString * _Null_unspecified positivePrefix;
        [Export("positivePrefix")]
        string PositivePrefix { get; set; }

        // @property (copy) NSString * _Null_unspecified positiveSuffix;
        [Export("positiveSuffix")]
        string PositiveSuffix { get; set; }

        // @property (copy) NSString * _Null_unspecified negativePrefix;
        [Export("negativePrefix")]
        string NegativePrefix { get; set; }

        // @property (copy) NSString * _Null_unspecified negativeSuffix;
        [Export("negativeSuffix")]
        string NegativeSuffix { get; set; }

        // @property (copy) NSString * _Null_unspecified currencyCode;
        [Export("currencyCode")]
        string CurrencyCode { get; set; }

        // @property (copy) NSString * _Null_unspecified currencySymbol;
        [Export("currencySymbol")]
        string CurrencySymbol { get; set; }

        // @property (copy) NSString * _Null_unspecified internationalCurrencySymbol;
        [Export("internationalCurrencySymbol")]
        string InternationalCurrencySymbol { get; set; }

        // @property (copy) NSString * _Null_unspecified percentSymbol;
        [Export("percentSymbol")]
        string PercentSymbol { get; set; }

        // @property (copy) NSString * _Null_unspecified perMillSymbol;
        [Export("perMillSymbol")]
        string PerMillSymbol { get; set; }

        // @property (copy) NSString * _Null_unspecified minusSign;
        [Export("minusSign")]
        string MinusSign { get; set; }

        // @property (copy) NSString * _Null_unspecified plusSign;
        [Export("plusSign")]
        string PlusSign { get; set; }

        // @property (copy) NSString * _Null_unspecified exponentSymbol;
        [Export("exponentSymbol")]
        string ExponentSymbol { get; set; }

        // @property NSUInteger groupingSize;
        [Export("groupingSize")]
        nuint GroupingSize { get; set; }

        // @property NSUInteger secondaryGroupingSize;
        [Export("secondaryGroupingSize")]
        nuint SecondaryGroupingSize { get; set; }

        // @property (copy) NSNumber * _Nullable multiplier;
        [NullAllowed, Export("multiplier", ArgumentSemantic.Copy)]
        NSNumber Multiplier { get; set; }

        // @property NSUInteger formatWidth;
        [Export("formatWidth")]
        nuint FormatWidth { get; set; }

        // @property (copy) NSString * _Null_unspecified paddingCharacter;
        [Export("paddingCharacter")]
        string PaddingCharacter { get; set; }

        // @property NSNumberFormatterPadPosition paddingPosition;
        [Export("paddingPosition", ArgumentSemantic.Assign)]
        NSNumberFormatterPadPosition PaddingPosition { get; set; }

        // @property NSNumberFormatterRoundingMode roundingMode;
        [Export("roundingMode", ArgumentSemantic.Assign)]
        NSNumberFormatterRoundingMode RoundingMode { get; set; }

        // @property (copy) NSNumber * _Null_unspecified roundingIncrement;
        [Export("roundingIncrement", ArgumentSemantic.Copy)]
        NSNumber RoundingIncrement { get; set; }

        // @property NSUInteger minimumIntegerDigits;
        [Export("minimumIntegerDigits")]
        nuint MinimumIntegerDigits { get; set; }

        // @property NSUInteger maximumIntegerDigits;
        [Export("maximumIntegerDigits")]
        nuint MaximumIntegerDigits { get; set; }

        // @property NSUInteger minimumFractionDigits;
        [Export("minimumFractionDigits")]
        nuint MinimumFractionDigits { get; set; }

        // @property NSUInteger maximumFractionDigits;
        [Export("maximumFractionDigits")]
        nuint MaximumFractionDigits { get; set; }

        // @property (copy) NSNumber * _Nullable minimum;
        [NullAllowed, Export("minimum", ArgumentSemantic.Copy)]
        NSNumber Minimum { get; set; }

        // @property (copy) NSNumber * _Nullable maximum;
        [NullAllowed, Export("maximum", ArgumentSemantic.Copy)]
        NSNumber Maximum { get; set; }

        // @property (copy) NSString * _Null_unspecified currencyGroupingSeparator __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("currencyGroupingSeparator")]
        string CurrencyGroupingSeparator { get; set; }

        // @property (getter = isLenient) BOOL lenient __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("lenient")]
        bool Lenient { [Bind("isLenient")] get; set; }

        // @property BOOL usesSignificantDigits __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("usesSignificantDigits")]
        bool UsesSignificantDigits { get; set; }

        // @property NSUInteger minimumSignificantDigits __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("minimumSignificantDigits")]
        nuint MinimumSignificantDigits { get; set; }

        // @property NSUInteger maximumSignificantDigits __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("maximumSignificantDigits")]
        nuint MaximumSignificantDigits { get; set; }

        // @property (getter = isPartialStringValidationEnabled) BOOL partialStringValidationEnabled __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("partialStringValidationEnabled")]
        bool PartialStringValidationEnabled { [Bind("isPartialStringValidationEnabled")] get; set; }
    }

    // @interface NSLocale : NSObject <NSCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSLocale : INSCopying, INSSecureCoding
    {
        // -(id _Nullable)objectForKey:(NSLocaleKey _Nonnull)key;
        [Export("objectForKey:")]
        [return: NullAllowed]
        NSObject ObjectForKey(string key);

        // -(NSString * _Nullable)displayNameForKey:(NSLocaleKey _Nonnull)key value:(id _Nonnull)value;
        [Export("displayNameForKey:value:")]
        [return: NullAllowed]
        string DisplayNameForKey(string key, NSObject value);

        // -(instancetype _Nonnull)initWithLocaleIdentifier:(NSString * _Nonnull)string __attribute__((objc_designated_initializer));
        [Export("initWithLocaleIdentifier:")]
        [DesignatedInitializer]
        IntPtr Constructor(string @string);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @interface NSExtendedLocale (NSLocale)
    [Category]
    [BaseType(typeof(NSLocale))]
    interface NSLocale_NSExtendedLocale
    {
        // @property (readonly, copy) NSString * _Nonnull localeIdentifier;
        [Export("localeIdentifier")]
        string LocaleIdentifier { get; }

        // -(NSString * _Nonnull)localizedStringForLocaleIdentifier:(NSString * _Nonnull)localeIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("localizedStringForLocaleIdentifier:")]
        string LocalizedStringForLocaleIdentifier(string localeIdentifier);

        // @property (readonly, copy) NSString * _Nonnull languageCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("languageCode")]
        string LanguageCode { get; }

        // -(NSString * _Nullable)localizedStringForLanguageCode:(NSString * _Nonnull)languageCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("localizedStringForLanguageCode:")]
        [return: NullAllowed]
        string LocalizedStringForLanguageCode(string languageCode);

        // @property (readonly, copy) NSString * _Nullable countryCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [NullAllowed, Export("countryCode")]
        string CountryCode { get; }

        // -(NSString * _Nullable)localizedStringForCountryCode:(NSString * _Nonnull)countryCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("localizedStringForCountryCode:")]
        [return: NullAllowed]
        string LocalizedStringForCountryCode(string countryCode);

        // @property (readonly, copy) NSString * _Nullable scriptCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [NullAllowed, Export("scriptCode")]
        string ScriptCode { get; }

        // -(NSString * _Nullable)localizedStringForScriptCode:(NSString * _Nonnull)scriptCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("localizedStringForScriptCode:")]
        [return: NullAllowed]
        string LocalizedStringForScriptCode(string scriptCode);

        // @property (readonly, copy) NSString * _Nullable variantCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [NullAllowed, Export("variantCode")]
        string VariantCode { get; }

        // -(NSString * _Nullable)localizedStringForVariantCode:(NSString * _Nonnull)variantCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("localizedStringForVariantCode:")]
        [return: NullAllowed]
        string LocalizedStringForVariantCode(string variantCode);

        // @property (readonly, copy) NSCharacterSet * _Nonnull exemplarCharacterSet __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("exemplarCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet ExemplarCharacterSet { get; }

        // @property (readonly, copy) NSString * _Nonnull calendarIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("calendarIdentifier")]
        string CalendarIdentifier { get; }

        // -(NSString * _Nullable)localizedStringForCalendarIdentifier:(NSString * _Nonnull)calendarIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("localizedStringForCalendarIdentifier:")]
        [return: NullAllowed]
        string LocalizedStringForCalendarIdentifier(string calendarIdentifier);

        // @property (readonly, copy) NSString * _Nullable collationIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [NullAllowed, Export("collationIdentifier")]
        string CollationIdentifier { get; }

        // -(NSString * _Nullable)localizedStringForCollationIdentifier:(NSString * _Nonnull)collationIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("localizedStringForCollationIdentifier:")]
        [return: NullAllowed]
        string LocalizedStringForCollationIdentifier(string collationIdentifier);

        // @property (readonly) BOOL usesMetricSystem __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("usesMetricSystem")]
        bool UsesMetricSystem { get; }

        // @property (readonly, copy) NSString * _Nonnull decimalSeparator __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("decimalSeparator")]
        string DecimalSeparator { get; }

        // @property (readonly, copy) NSString * _Nonnull groupingSeparator __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("groupingSeparator")]
        string GroupingSeparator { get; }

        // @property (readonly, copy) NSString * _Nonnull currencySymbol __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("currencySymbol")]
        string CurrencySymbol { get; }

        // @property (readonly, copy) NSString * _Nullable currencyCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [NullAllowed, Export("currencyCode")]
        string CurrencyCode { get; }

        // -(NSString * _Nullable)localizedStringForCurrencyCode:(NSString * _Nonnull)currencyCode __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("localizedStringForCurrencyCode:")]
        [return: NullAllowed]
        string LocalizedStringForCurrencyCode(string currencyCode);

        // @property (readonly, copy) NSString * _Nonnull collatorIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("collatorIdentifier")]
        string CollatorIdentifier { get; }

        // -(NSString * _Nullable)localizedStringForCollatorIdentifier:(NSString * _Nonnull)collatorIdentifier __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("localizedStringForCollatorIdentifier:")]
        [return: NullAllowed]
        string LocalizedStringForCollatorIdentifier(string collatorIdentifier);

        // @property (readonly, copy) NSString * _Nonnull quotationBeginDelimiter __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("quotationBeginDelimiter")]
        string QuotationBeginDelimiter { get; }

        // @property (readonly, copy) NSString * _Nonnull quotationEndDelimiter __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("quotationEndDelimiter")]
        string QuotationEndDelimiter { get; }

        // @property (readonly, copy) NSString * _Nonnull alternateQuotationBeginDelimiter __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("alternateQuotationBeginDelimiter")]
        string AlternateQuotationBeginDelimiter { get; }

        // @property (readonly, copy) NSString * _Nonnull alternateQuotationEndDelimiter __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("alternateQuotationEndDelimiter")]
        string AlternateQuotationEndDelimiter { get; }
    }

    // @interface NSLocaleCreation (NSLocale)
    [Category]
    [BaseType(typeof(NSLocale))]
    [DisableDefaultCtor]
    interface NSLocale_NSLocaleCreation
    {
        // @property (readonly, strong, class) NSLocale * _Nonnull autoupdatingCurrentLocale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("autoupdatingCurrentLocale", ArgumentSemantic.Strong)]
        NSLocale AutoupdatingCurrentLocale { get; }

        // @property (readonly, copy, class) NSLocale * _Nonnull currentLocale;
        [Static]
        [Export("currentLocale", ArgumentSemantic.Copy)]
        NSLocale CurrentLocale { get; }

        // @property (readonly, copy, class) NSLocale * _Nonnull systemLocale;
        [Static]
        [Export("systemLocale", ArgumentSemantic.Copy)]
        NSLocale SystemLocale { get; }

        // +(instancetype _Nonnull)localeWithLocaleIdentifier:(NSString * _Nonnull)ident __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("localeWithLocaleIdentifier:")]
        NSLocale LocaleWithLocaleIdentifier(string ident);
    }

    // @interface NSLocaleGeneralInfo (NSLocale)
    [Category]
    [BaseType(typeof(NSLocale))]
    interface NSLocale_NSLocaleGeneralInfo
    {
        // @property (readonly, copy, class) NSArray<NSString *> * _Nonnull availableLocaleIdentifiers;
        [Static]
        [Export("availableLocaleIdentifiers", ArgumentSemantic.Copy)]
        string[] AvailableLocaleIdentifiers { get; }

        // @property (readonly, copy, class) NSArray<NSString *> * _Nonnull ISOLanguageCodes;
        [Static]
        [Export("ISOLanguageCodes", ArgumentSemantic.Copy)]
        string[] ISOLanguageCodes { get; }

        // @property (readonly, copy, class) NSArray<NSString *> * _Nonnull ISOCountryCodes;
        [Static]
        [Export("ISOCountryCodes", ArgumentSemantic.Copy)]
        string[] ISOCountryCodes { get; }

        // @property (readonly, copy, class) NSArray<NSString *> * _Nonnull ISOCurrencyCodes;
        [Static]
        [Export("ISOCurrencyCodes", ArgumentSemantic.Copy)]
        string[] ISOCurrencyCodes { get; }

        // @property (readonly, copy, class) NSArray<NSString *> * _Nonnull commonISOCurrencyCodes __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("commonISOCurrencyCodes", ArgumentSemantic.Copy)]
        string[] CommonISOCurrencyCodes { get; }

        // @property (readonly, copy, class) NSArray<NSString *> * _Nonnull preferredLanguages __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("preferredLanguages", ArgumentSemantic.Copy)]
        string[] PreferredLanguages { get; }

        // +(NSDictionary<NSString *,NSString *> * _Nonnull)componentsFromLocaleIdentifier:(NSString * _Nonnull)string;
        [Static]
        [Export("componentsFromLocaleIdentifier:")]
        NSDictionary<NSString, NSString> ComponentsFromLocaleIdentifier(string @string);

        // +(NSString * _Nonnull)localeIdentifierFromComponents:(NSDictionary<NSString *,NSString *> * _Nonnull)dict;
        [Static]
        [Export("localeIdentifierFromComponents:")]
        string LocaleIdentifierFromComponents(NSDictionary<NSString, NSString> dict);

        // +(NSString * _Nonnull)canonicalLocaleIdentifierFromString:(NSString * _Nonnull)string;
        [Static]
        [Export("canonicalLocaleIdentifierFromString:")]
        string CanonicalLocaleIdentifierFromString(string @string);

        // +(NSString * _Nonnull)canonicalLanguageIdentifierFromString:(NSString * _Nonnull)string;
        [Static]
        [Export("canonicalLanguageIdentifierFromString:")]
        string CanonicalLanguageIdentifierFromString(string @string);

        // +(NSString * _Nullable)localeIdentifierFromWindowsLocaleCode:(uint32_t)lcid __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("localeIdentifierFromWindowsLocaleCode:")]
        [return: NullAllowed]
        string LocaleIdentifierFromWindowsLocaleCode(uint lcid);

        // +(uint32_t)windowsLocaleCodeFromLocaleIdentifier:(NSString * _Nonnull)localeIdentifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("windowsLocaleCodeFromLocaleIdentifier:")]
        uint WindowsLocaleCodeFromLocaleIdentifier(string localeIdentifier);

        // +(NSLocaleLanguageDirection)characterDirectionForLanguage:(NSString * _Nonnull)isoLangCode __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("characterDirectionForLanguage:")]
        NSLocaleLanguageDirection CharacterDirectionForLanguage(string isoLangCode);

        // +(NSLocaleLanguageDirection)lineDirectionForLanguage:(NSString * _Nonnull)isoLangCode __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("lineDirectionForLanguage:")]
        NSLocaleLanguageDirection LineDirectionForLanguage(string isoLangCode);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSCurrentLocaleDidChangeNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("NSCurrentLocaleDidChangeNotification", "__Internal")]
        NSString NSCurrentLocaleDidChangeNotification { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleIdentifier;
        [Field("NSLocaleIdentifier", "__Internal")]
        NSString NSLocaleIdentifier { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleLanguageCode;
        [Field("NSLocaleLanguageCode", "__Internal")]
        NSString NSLocaleLanguageCode { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleCountryCode;
        [Field("NSLocaleCountryCode", "__Internal")]
        NSString NSLocaleCountryCode { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleScriptCode;
        [Field("NSLocaleScriptCode", "__Internal")]
        NSString NSLocaleScriptCode { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleVariantCode;
        [Field("NSLocaleVariantCode", "__Internal")]
        NSString NSLocaleVariantCode { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleExemplarCharacterSet;
        [Field("NSLocaleExemplarCharacterSet", "__Internal")]
        NSString NSLocaleExemplarCharacterSet { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleCalendar;
        [Field("NSLocaleCalendar", "__Internal")]
        NSString NSLocaleCalendar { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleCollationIdentifier;
        [Field("NSLocaleCollationIdentifier", "__Internal")]
        NSString NSLocaleCollationIdentifier { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleUsesMetricSystem;
        [Field("NSLocaleUsesMetricSystem", "__Internal")]
        NSString NSLocaleUsesMetricSystem { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleMeasurementSystem;
        [Field("NSLocaleMeasurementSystem", "__Internal")]
        NSString NSLocaleMeasurementSystem { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleDecimalSeparator;
        [Field("NSLocaleDecimalSeparator", "__Internal")]
        NSString NSLocaleDecimalSeparator { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleGroupingSeparator;
        [Field("NSLocaleGroupingSeparator", "__Internal")]
        NSString NSLocaleGroupingSeparator { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleCurrencySymbol;
        [Field("NSLocaleCurrencySymbol", "__Internal")]
        NSString NSLocaleCurrencySymbol { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleCurrencyCode;
        [Field("NSLocaleCurrencyCode", "__Internal")]
        NSString NSLocaleCurrencyCode { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleCollatorIdentifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSLocaleCollatorIdentifier", "__Internal")]
        NSString NSLocaleCollatorIdentifier { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleQuotationBeginDelimiterKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSLocaleQuotationBeginDelimiterKey", "__Internal")]
        NSString NSLocaleQuotationBeginDelimiterKey { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleQuotationEndDelimiterKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSLocaleQuotationEndDelimiterKey", "__Internal")]
        NSString NSLocaleQuotationEndDelimiterKey { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleAlternateQuotationBeginDelimiterKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSLocaleAlternateQuotationBeginDelimiterKey", "__Internal")]
        NSString NSLocaleAlternateQuotationBeginDelimiterKey { get; }

        // extern const NSLocaleKey _Nonnull NSLocaleAlternateQuotationEndDelimiterKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSLocaleAlternateQuotationEndDelimiterKey", "__Internal")]
        NSString NSLocaleAlternateQuotationEndDelimiterKey { get; }

        // extern NSString *const _Nonnull NSGregorianCalendar __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSCalendarIdentifierGregorian instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSCalendarIdentifierGregorian instead")]
        [Field("NSGregorianCalendar", "__Internal")]
        NSString NSGregorianCalendar { get; }

        // extern NSString *const _Nonnull NSBuddhistCalendar __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSCalendarIdentifierBuddhist instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSCalendarIdentifierBuddhist instead")]
        [Field("NSBuddhistCalendar", "__Internal")]
        NSString NSBuddhistCalendar { get; }

        // extern NSString *const _Nonnull NSChineseCalendar __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSCalendarIdentifierChinese instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSCalendarIdentifierChinese instead")]
        [Field("NSChineseCalendar", "__Internal")]
        NSString NSChineseCalendar { get; }

        // extern NSString *const _Nonnull NSHebrewCalendar __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSCalendarIdentifierHebrew instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSCalendarIdentifierHebrew instead")]
        [Field("NSHebrewCalendar", "__Internal")]
        NSString NSHebrewCalendar { get; }

        // extern NSString *const _Nonnull NSIslamicCalendar __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSCalendarIdentifierIslamic instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSCalendarIdentifierIslamic instead")]
        [Field("NSIslamicCalendar", "__Internal")]
        NSString NSIslamicCalendar { get; }

        // extern NSString *const _Nonnull NSIslamicCivilCalendar __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSCalendarIdentifierIslamicCivil instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSCalendarIdentifierIslamicCivil instead")]
        [Field("NSIslamicCivilCalendar", "__Internal")]
        NSString NSIslamicCivilCalendar { get; }

        // extern NSString *const _Nonnull NSJapaneseCalendar __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSCalendarIdentifierJapanese instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSCalendarIdentifierJapanese instead")]
        [Field("NSJapaneseCalendar", "__Internal")]
        NSString NSJapaneseCalendar { get; }

        // extern NSString *const _Nonnull NSRepublicOfChinaCalendar __attribute__((availability(ios, introduced=4_0, deprecated=8_0)));
        [Introduced(PlatformName.iOS, 4, 0, message: "Use NSCalendarIdentifierRepublicOfChina instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSCalendarIdentifierRepublicOfChina instead")]
        [Field("NSRepublicOfChinaCalendar", "__Internal")]
        NSString NSRepublicOfChinaCalendar { get; }

        // extern NSString *const _Nonnull NSPersianCalendar __attribute__((availability(ios, introduced=4_0, deprecated=8_0)));
        [Introduced(PlatformName.iOS, 4, 0, message: "Use NSCalendarIdentifierPersian instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSCalendarIdentifierPersian instead")]
        [Field("NSPersianCalendar", "__Internal")]
        NSString NSPersianCalendar { get; }

        // extern NSString *const _Nonnull NSIndianCalendar __attribute__((availability(ios, introduced=4_0, deprecated=8_0)));
        [Introduced(PlatformName.iOS, 4, 0, message: "Use NSCalendarIdentifierIndian instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSCalendarIdentifierIndian instead")]
        [Field("NSIndianCalendar", "__Internal")]
        NSString NSIndianCalendar { get; }

        // extern NSString *const _Nonnull NSISO8601Calendar __attribute__((availability(ios, introduced=4_0, deprecated=8_0)));
        [Introduced(PlatformName.iOS, 4, 0, message: "Use NSCalendarIdentifierISO8601 instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSCalendarIdentifierISO8601 instead")]
        [Field("NSISO8601Calendar", "__Internal")]
        NSString NSISO8601Calendar { get; }
    }

    // @interface NSMeasurementFormatter : NSFormatter <NSSecureCoding>
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSFormatter))]
    interface NSMeasurementFormatter : INSSecureCoding
    {
        // @property NSMeasurementFormatterUnitOptions unitOptions;
        [Export("unitOptions", ArgumentSemantic.Assign)]
        NSMeasurementFormatterUnitOptions UnitOptions { get; set; }

        // @property NSFormattingUnitStyle unitStyle;
        [Export("unitStyle", ArgumentSemantic.Assign)]
        NSFormattingUnitStyle UnitStyle { get; set; }

        // @property (copy) NSLocale * _Null_unspecified locale;
        [Export("locale", ArgumentSemantic.Copy)]
        NSLocale Locale { get; set; }

        // @property (copy) NSNumberFormatter * _Null_unspecified numberFormatter;
        [Export("numberFormatter", ArgumentSemantic.Copy)]
        NSNumberFormatter NumberFormatter { get; set; }

        // -(NSString * _Nonnull)stringFromMeasurement:(NSMeasurement * _Nonnull)measurement;
        [Export("stringFromMeasurement:")]
        string StringFromMeasurement(NSMeasurement`1 measurement);

        // -(NSString * _Nonnull)stringFromUnit:(NSUnit * _Nonnull)unit;
        [Export("stringFromUnit:")]
        string StringFromUnit(NSUnit unit);
    }

    // @interface NSPersonNameComponents : NSObject <NSCopying, NSSecureCoding>
    [iOS(9, 0)]
    [BaseType(typeof(NSObject))]
    interface NSPersonNameComponents : INSCopying, INSSecureCoding
    {
        // @property (copy) NSString * _Nullable namePrefix;
        [NullAllowed, Export("namePrefix")]
        string NamePrefix { get; set; }

        // @property (copy) NSString * _Nullable givenName;
        [NullAllowed, Export("givenName")]
        string GivenName { get; set; }

        // @property (copy) NSString * _Nullable middleName;
        [NullAllowed, Export("middleName")]
        string MiddleName { get; set; }

        // @property (copy) NSString * _Nullable familyName;
        [NullAllowed, Export("familyName")]
        string FamilyName { get; set; }

        // @property (copy) NSString * _Nullable nameSuffix;
        [NullAllowed, Export("nameSuffix")]
        string NameSuffix { get; set; }

        // @property (copy) NSString * _Nullable nickname;
        [NullAllowed, Export("nickname")]
        string Nickname { get; set; }

        // @property (copy) NSPersonNameComponents * _Nullable phoneticRepresentation;
        [NullAllowed, Export("phoneticRepresentation", ArgumentSemantic.Copy)]
        NSPersonNameComponents PhoneticRepresentation { get; set; }
    }

    // @interface NSPersonNameComponentsFormatter : NSFormatter
    [iOS(9, 0)]
    [BaseType(typeof(NSFormatter))]
    interface NSPersonNameComponentsFormatter
    {
        // @property NSPersonNameComponentsFormatterStyle style;
        [Export("style", ArgumentSemantic.Assign)]
        NSPersonNameComponentsFormatterStyle Style { get; set; }

        // @property (getter = isPhonetic) BOOL phonetic;
        [Export("phonetic")]
        bool Phonetic { [Bind("isPhonetic")] get; set; }

        // +(NSString * _Nonnull)localizedStringFromPersonNameComponents:(NSPersonNameComponents * _Nonnull)components style:(NSPersonNameComponentsFormatterStyle)nameFormatStyle options:(NSPersonNameComponentsFormatterOptions)nameOptions;
        [Static]
        [Export("localizedStringFromPersonNameComponents:style:options:")]
        string LocalizedStringFromPersonNameComponents(NSPersonNameComponents components, NSPersonNameComponentsFormatterStyle nameFormatStyle, NSPersonNameComponentsFormatterOptions nameOptions);

        // -(NSString * _Nonnull)stringFromPersonNameComponents:(NSPersonNameComponents * _Nonnull)components;
        [Export("stringFromPersonNameComponents:")]
        string StringFromPersonNameComponents(NSPersonNameComponents components);

        // -(NSAttributedString * _Nonnull)annotatedStringFromPersonNameComponents:(NSPersonNameComponents * _Nonnull)components;
        [Export("annotatedStringFromPersonNameComponents:")]
        NSAttributedString AnnotatedStringFromPersonNameComponents(NSPersonNameComponents components);

        // -(NSPersonNameComponents * _Nullable)personNameComponentsFromString:(NSString * _Nonnull)string __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("personNameComponentsFromString:")]
        [return: NullAllowed]
        NSPersonNameComponents PersonNameComponentsFromString(string @string);

        // -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
        [Export("getObjectValue:forString:errorDescription:")]
        bool GetObjectValue([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull NSPersonNameComponentKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSPersonNameComponentKey", "__Internal")]
        NSString NSPersonNameComponentKey { get; }

        // extern NSString *const _Nonnull NSPersonNameComponentGivenName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSPersonNameComponentGivenName", "__Internal")]
        NSString NSPersonNameComponentGivenName { get; }

        // extern NSString *const _Nonnull NSPersonNameComponentFamilyName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSPersonNameComponentFamilyName", "__Internal")]
        NSString NSPersonNameComponentFamilyName { get; }

        // extern NSString *const _Nonnull NSPersonNameComponentMiddleName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSPersonNameComponentMiddleName", "__Internal")]
        NSString NSPersonNameComponentMiddleName { get; }

        // extern NSString *const _Nonnull NSPersonNameComponentPrefix __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSPersonNameComponentPrefix", "__Internal")]
        NSString NSPersonNameComponentPrefix { get; }

        // extern NSString *const _Nonnull NSPersonNameComponentSuffix __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSPersonNameComponentSuffix", "__Internal")]
        NSString NSPersonNameComponentSuffix { get; }

        // extern NSString *const _Nonnull NSPersonNameComponentNickname __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSPersonNameComponentNickname", "__Internal")]
        NSString NSPersonNameComponentNickname { get; }

        // extern NSString *const _Nonnull NSPersonNameComponentDelimiter __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSPersonNameComponentDelimiter", "__Internal")]
        NSString NSPersonNameComponentDelimiter { get; }
    }

    // @interface NSScanner : NSObject <NSCopying>
    [BaseType(typeof(NSObject))]
    interface NSScanner : INSCopying
    {
        // @property (readonly, copy) NSString * _Nonnull string;
        [Export("string")]
        string String { get; }

        // @property NSUInteger scanLocation;
        [Export("scanLocation")]
        nuint ScanLocation { get; set; }

        // @property (copy) NSCharacterSet * _Nullable charactersToBeSkipped;
        [NullAllowed, Export("charactersToBeSkipped", ArgumentSemantic.Copy)]
        NSCharacterSet CharactersToBeSkipped { get; set; }

        // @property BOOL caseSensitive;
        [Export("caseSensitive")]
        bool CaseSensitive { get; set; }

        // @property (retain) id _Nullable locale;
        [NullAllowed, Export("locale", ArgumentSemantic.Retain)]
        NSObject Locale { get; set; }

        // -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)string __attribute__((objc_designated_initializer));
        [Export("initWithString:")]
        [DesignatedInitializer]
        IntPtr Constructor(string @string);
    }

    // @interface NSExtendedScanner (NSScanner)
    [Category]
    [BaseType(typeof(NSScanner))]
    interface NSScanner_NSExtendedScanner
    {
        // -(BOOL)scanInt:(int * _Nullable)result;
        [Export("scanInt:")]
        unsafe bool ScanInt([NullAllowed] int* result);

        // -(BOOL)scanInteger:(NSInteger * _Nullable)result __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("scanInteger:")]
        unsafe bool ScanInteger([NullAllowed] nint* result);

        // -(BOOL)scanLongLong:(long long * _Nullable)result;
        [Export("scanLongLong:")]
        unsafe bool ScanLongLong([NullAllowed] long* result);

        // -(BOOL)scanUnsignedLongLong:(unsigned long long * _Nullable)result __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("scanUnsignedLongLong:")]
        unsafe bool ScanUnsignedLongLong([NullAllowed] ulong* result);

        // -(BOOL)scanFloat:(float * _Nullable)result;
        [Export("scanFloat:")]
        unsafe bool ScanFloat([NullAllowed] float* result);

        // -(BOOL)scanDouble:(double * _Nullable)result;
        [Export("scanDouble:")]
        unsafe bool ScanDouble([NullAllowed] double* result);

        // -(BOOL)scanHexInt:(unsigned int * _Nullable)result;
        [Export("scanHexInt:")]
        unsafe bool ScanHexInt([NullAllowed] uint* result);

        // -(BOOL)scanHexLongLong:(unsigned long long * _Nullable)result __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("scanHexLongLong:")]
        unsafe bool ScanHexLongLong([NullAllowed] ulong* result);

        // -(BOOL)scanHexFloat:(float * _Nullable)result __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("scanHexFloat:")]
        unsafe bool ScanHexFloat([NullAllowed] float* result);

        // -(BOOL)scanHexDouble:(double * _Nullable)result __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("scanHexDouble:")]
        unsafe bool ScanHexDouble([NullAllowed] double* result);

        // -(BOOL)scanString:(NSString * _Nonnull)string intoString:(NSString * _Nullable * _Nullable)result;
        [Export("scanString:intoString:")]
        bool ScanString(string @string, [NullAllowed] out string result);

        // -(BOOL)scanCharactersFromSet:(NSCharacterSet * _Nonnull)set intoString:(NSString * _Nullable * _Nullable)result;
        [Export("scanCharactersFromSet:intoString:")]
        bool ScanCharactersFromSet(NSCharacterSet set, [NullAllowed] out string result);

        // -(BOOL)scanUpToString:(NSString * _Nonnull)string intoString:(NSString * _Nullable * _Nullable)result;
        [Export("scanUpToString:intoString:")]
        bool ScanUpToString(string @string, [NullAllowed] out string result);

        // -(BOOL)scanUpToCharactersFromSet:(NSCharacterSet * _Nonnull)set intoString:(NSString * _Nullable * _Nullable)result;
        [Export("scanUpToCharactersFromSet:intoString:")]
        bool ScanUpToCharactersFromSet(NSCharacterSet set, [NullAllowed] out string result);

        // @property (readonly, getter = isAtEnd) BOOL atEnd;
        [Export("atEnd")]
        bool AtEnd { [Bind("isAtEnd")] get; }

        // +(instancetype _Nonnull)scannerWithString:(NSString * _Nonnull)string;
        [Static]
        [Export("scannerWithString:")]
        NSScanner ScannerWithString(string @string);

        // +(id _Nonnull)localizedScannerWithString:(NSString * _Nonnull)string;
        [Static]
        [Export("localizedScannerWithString:")]
        NSObject LocalizedScannerWithString(string @string);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSExceptionName _Nonnull NSGenericException;
        [Field("NSGenericException", "__Internal")]
        NSString NSGenericException { get; }

        // extern const NSExceptionName _Nonnull NSRangeException;
        [Field("NSRangeException", "__Internal")]
        NSString NSRangeException { get; }

        // extern const NSExceptionName _Nonnull NSInvalidArgumentException;
        [Field("NSInvalidArgumentException", "__Internal")]
        NSString NSInvalidArgumentException { get; }

        // extern const NSExceptionName _Nonnull NSInternalInconsistencyException;
        [Field("NSInternalInconsistencyException", "__Internal")]
        NSString NSInternalInconsistencyException { get; }

        // extern const NSExceptionName _Nonnull NSMallocException;
        [Field("NSMallocException", "__Internal")]
        NSString NSMallocException { get; }

        // extern const NSExceptionName _Nonnull NSObjectInaccessibleException;
        [Field("NSObjectInaccessibleException", "__Internal")]
        NSString NSObjectInaccessibleException { get; }

        // extern const NSExceptionName _Nonnull NSObjectNotAvailableException;
        [Field("NSObjectNotAvailableException", "__Internal")]
        NSString NSObjectNotAvailableException { get; }

        // extern const NSExceptionName _Nonnull NSDestinationInvalidException;
        [Field("NSDestinationInvalidException", "__Internal")]
        NSString NSDestinationInvalidException { get; }

        // extern const NSExceptionName _Nonnull NSPortTimeoutException;
        [Field("NSPortTimeoutException", "__Internal")]
        NSString NSPortTimeoutException { get; }

        // extern const NSExceptionName _Nonnull NSInvalidSendPortException;
        [Field("NSInvalidSendPortException", "__Internal")]
        NSString NSInvalidSendPortException { get; }

        // extern const NSExceptionName _Nonnull NSInvalidReceivePortException;
        [Field("NSInvalidReceivePortException", "__Internal")]
        NSString NSInvalidReceivePortException { get; }

        // extern const NSExceptionName _Nonnull NSPortSendException;
        [Field("NSPortSendException", "__Internal")]
        NSString NSPortSendException { get; }

        // extern const NSExceptionName _Nonnull NSPortReceiveException;
        [Field("NSPortReceiveException", "__Internal")]
        NSString NSPortReceiveException { get; }

        // extern const NSExceptionName _Nonnull NSOldStyleException;
        [Field("NSOldStyleException", "__Internal")]
        NSString NSOldStyleException { get; }
    }

    // @interface NSException : NSObject <NSCopying, NSCoding>
    [BaseType(typeof(NSObject))]
    interface NSException : INSCopying, INSCoding
    {
        // +(NSException * _Nonnull)exceptionWithName:(NSExceptionName _Nonnull)name reason:(NSString * _Nullable)reason userInfo:(NSDictionary * _Nullable)userInfo;
        [Static]
        [Export("exceptionWithName:reason:userInfo:")]
        NSException ExceptionWithName(string name, [NullAllowed] string reason, [NullAllowed] NSDictionary userInfo);

        // -(instancetype _Nonnull)initWithName:(NSExceptionName _Nonnull)aName reason:(NSString * _Nullable)aReason userInfo:(NSDictionary * _Nullable)aUserInfo __attribute__((objc_designated_initializer));
        [Export("initWithName:reason:userInfo:")]
        [DesignatedInitializer]
        IntPtr Constructor(string aName, [NullAllowed] string aReason, [NullAllowed] NSDictionary aUserInfo);

        // @property (readonly, copy) NSExceptionName _Nonnull name;
        [Export("name")]
        string Name { get; }

        // @property (readonly, copy) NSString * _Nullable reason;
        [NullAllowed, Export("reason")]
        string Reason { get; }

        // @property (readonly, copy) NSDictionary * _Nullable userInfo;
        [NullAllowed, Export("userInfo", ArgumentSemantic.Copy)]
        NSDictionary UserInfo { get; }

        // @property (readonly, copy) NSArray<NSNumber *> * _Nonnull callStackReturnAddresses __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("callStackReturnAddresses", ArgumentSemantic.Copy)]
        NSNumber[] CallStackReturnAddresses { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull callStackSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("callStackSymbols", ArgumentSemantic.Copy)]
        string[] CallStackSymbols { get; }

        // -(void)raise;
        [Export("raise")]
        void Raise();
    }

    // @interface NSExceptionRaisingConveniences (NSException)
    [Category]
    [BaseType(typeof(NSException))]
    interface NSException_NSExceptionRaisingConveniences
    {
        // +(void)raise:(NSExceptionName _Nonnull)name format:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 2, 3)));
        [Static, Internal]
        [Export("raise:format:", IsVariadic = true)]
        void Raise(string name, string format, IntPtr varArgs);

        // +(void)raise:(NSExceptionName _Nonnull)name format:(NSString * _Nonnull)format arguments:(va_list)argList __attribute__((format(NSString, 2, 0)));
        [Static]
        [Export("raise:format:arguments:")]
        unsafe void Raise(string name, string format, sbyte* argList);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull NSAssertionHandlerKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSAssertionHandlerKey", "__Internal")]
        NSString NSAssertionHandlerKey { get; }
    }

    // @interface NSAssertionHandler : NSObject
    [BaseType(typeof(NSObject))]
    interface NSAssertionHandler
    {
        // @property (readonly, strong, class) NSAssertionHandler * _Nonnull currentHandler;
        [Static]
        [Export("currentHandler", ArgumentSemantic.Strong)]
        NSAssertionHandler CurrentHandler { get; }

        // -(void)handleFailureInMethod:(SEL _Nonnull)selector object:(id _Nonnull)object file:(NSString * _Nonnull)fileName lineNumber:(NSInteger)line description:(NSString * _Nullable)format, ... __attribute__((format(NSString, 5, 6)));
        [Internal]
        [Export("handleFailureInMethod:object:file:lineNumber:description:", IsVariadic = true)]
        void HandleFailureInMethod(Selector selector, NSObject @object, string fileName, nint line, [NullAllowed] string format, IntPtr varArgs);

        // -(void)handleFailureInFunction:(NSString * _Nonnull)functionName file:(NSString * _Nonnull)fileName lineNumber:(NSInteger)line description:(NSString * _Nullable)format, ... __attribute__((format(NSString, 4, 5)));
        [Internal]
        [Export("handleFailureInFunction:file:lineNumber:description:", IsVariadic = true)]
        void HandleFailureInFunction(string functionName, string fileName, nint line, [NullAllowed] string format, IntPtr varArgs);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSExceptionName _Nonnull NSDecimalNumberExactnessException;
        [Field("NSDecimalNumberExactnessException", "__Internal")]
        NSString NSDecimalNumberExactnessException { get; }

        // extern const NSExceptionName _Nonnull NSDecimalNumberOverflowException;
        [Field("NSDecimalNumberOverflowException", "__Internal")]
        NSString NSDecimalNumberOverflowException { get; }

        // extern const NSExceptionName _Nonnull NSDecimalNumberUnderflowException;
        [Field("NSDecimalNumberUnderflowException", "__Internal")]
        NSString NSDecimalNumberUnderflowException { get; }

        // extern const NSExceptionName _Nonnull NSDecimalNumberDivideByZeroException;
        [Field("NSDecimalNumberDivideByZeroException", "__Internal")]
        NSString NSDecimalNumberDivideByZeroException { get; }
    }

    // @protocol NSDecimalNumberBehaviors
    [Protocol, Model]
    interface NSDecimalNumberBehaviors
    {
        // @required -(NSRoundingMode)roundingMode;
        [Abstract]
        [Export("roundingMode")]
        [Verify(MethodToProperty)]
        NSRoundingMode RoundingMode { get; }

        // @required -(short)scale;
        [Abstract]
        [Export("scale")]
        [Verify(MethodToProperty)]
        short Scale { get; }

        // @required -(NSDecimalNumber * _Nullable)exceptionDuringOperation:(SEL _Nonnull)operation error:(NSCalculationError)error leftOperand:(NSDecimalNumber * _Nonnull)leftOperand rightOperand:(NSDecimalNumber * _Nullable)rightOperand;
        [Abstract]
        [Export("exceptionDuringOperation:error:leftOperand:rightOperand:")]
        [return: NullAllowed]
        NSDecimalNumber Error(Selector operation, NSCalculationError error, NSDecimalNumber leftOperand, [NullAllowed] NSDecimalNumber rightOperand);
    }

    // @interface NSDecimalNumber : NSNumber
    [BaseType(typeof(NSNumber))]
    interface NSDecimalNumber
    {
        // -(instancetype _Nonnull)initWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)flag;
        [Export("initWithMantissa:exponent:isNegative:")]
        IntPtr Constructor(ulong mantissa, short exponent, bool flag);

        // -(instancetype _Nonnull)initWithDecimal:(NSDecimal)dcm __attribute__((objc_designated_initializer));
        [Export("initWithDecimal:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSDecimal dcm);

        // -(instancetype _Nonnull)initWithString:(NSString * _Nullable)numberValue;
        [Export("initWithString:")]
        IntPtr Constructor([NullAllowed] string numberValue);

        // -(instancetype _Nonnull)initWithString:(NSString * _Nullable)numberValue locale:(id _Nullable)locale;
        [Export("initWithString:locale:")]
        IntPtr Constructor([NullAllowed] string numberValue, [NullAllowed] NSObject locale);

        // -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
        [Export("descriptionWithLocale:")]
        string DescriptionWithLocale([NullAllowed] NSObject locale);

        // @property (readonly) NSDecimal decimalValue;
        [Export("decimalValue")]
        NSDecimal DecimalValue { get; }

        // +(NSDecimalNumber * _Nonnull)decimalNumberWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)flag;
        [Static]
        [Export("decimalNumberWithMantissa:exponent:isNegative:")]
        NSDecimalNumber DecimalNumberWithMantissa(ulong mantissa, short exponent, bool flag);

        // +(NSDecimalNumber * _Nonnull)decimalNumberWithDecimal:(NSDecimal)dcm;
        [Static]
        [Export("decimalNumberWithDecimal:")]
        NSDecimalNumber DecimalNumberWithDecimal(NSDecimal dcm);

        // +(NSDecimalNumber * _Nonnull)decimalNumberWithString:(NSString * _Nullable)numberValue;
        [Static]
        [Export("decimalNumberWithString:")]
        NSDecimalNumber DecimalNumberWithString([NullAllowed] string numberValue);

        // +(NSDecimalNumber * _Nonnull)decimalNumberWithString:(NSString * _Nullable)numberValue locale:(id _Nullable)locale;
        [Static]
        [Export("decimalNumberWithString:locale:")]
        NSDecimalNumber DecimalNumberWithString([NullAllowed] string numberValue, [NullAllowed] NSObject locale);

        // @property (readonly, copy, class) NSDecimalNumber * _Nonnull zero;
        [Static]
        [Export("zero", ArgumentSemantic.Copy)]
        NSDecimalNumber Zero { get; }

        // @property (readonly, copy, class) NSDecimalNumber * _Nonnull one;
        [Static]
        [Export("one", ArgumentSemantic.Copy)]
        NSDecimalNumber One { get; }

        // @property (readonly, copy, class) NSDecimalNumber * _Nonnull minimumDecimalNumber;
        [Static]
        [Export("minimumDecimalNumber", ArgumentSemantic.Copy)]
        NSDecimalNumber MinimumDecimalNumber { get; }

        // @property (readonly, copy, class) NSDecimalNumber * _Nonnull maximumDecimalNumber;
        [Static]
        [Export("maximumDecimalNumber", ArgumentSemantic.Copy)]
        NSDecimalNumber MaximumDecimalNumber { get; }

        // @property (readonly, copy, class) NSDecimalNumber * _Nonnull notANumber;
        [Static]
        [Export("notANumber", ArgumentSemantic.Copy)]
        NSDecimalNumber NotANumber { get; }

        // -(NSDecimalNumber * _Nonnull)decimalNumberByAdding:(NSDecimalNumber * _Nonnull)decimalNumber;
        [Export("decimalNumberByAdding:")]
        NSDecimalNumber DecimalNumberByAdding(NSDecimalNumber decimalNumber);

        // -(NSDecimalNumber * _Nonnull)decimalNumberByAdding:(NSDecimalNumber * _Nonnull)decimalNumber withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
        [Export("decimalNumberByAdding:withBehavior:")]
        NSDecimalNumber DecimalNumberByAdding(NSDecimalNumber decimalNumber, [NullAllowed] NSDecimalNumberBehaviors behavior);

        // -(NSDecimalNumber * _Nonnull)decimalNumberBySubtracting:(NSDecimalNumber * _Nonnull)decimalNumber;
        [Export("decimalNumberBySubtracting:")]
        NSDecimalNumber DecimalNumberBySubtracting(NSDecimalNumber decimalNumber);

        // -(NSDecimalNumber * _Nonnull)decimalNumberBySubtracting:(NSDecimalNumber * _Nonnull)decimalNumber withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
        [Export("decimalNumberBySubtracting:withBehavior:")]
        NSDecimalNumber DecimalNumberBySubtracting(NSDecimalNumber decimalNumber, [NullAllowed] NSDecimalNumberBehaviors behavior);

        // -(NSDecimalNumber * _Nonnull)decimalNumberByMultiplyingBy:(NSDecimalNumber * _Nonnull)decimalNumber;
        [Export("decimalNumberByMultiplyingBy:")]
        NSDecimalNumber DecimalNumberByMultiplyingBy(NSDecimalNumber decimalNumber);

        // -(NSDecimalNumber * _Nonnull)decimalNumberByMultiplyingBy:(NSDecimalNumber * _Nonnull)decimalNumber withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
        [Export("decimalNumberByMultiplyingBy:withBehavior:")]
        NSDecimalNumber DecimalNumberByMultiplyingBy(NSDecimalNumber decimalNumber, [NullAllowed] NSDecimalNumberBehaviors behavior);

        // -(NSDecimalNumber * _Nonnull)decimalNumberByDividingBy:(NSDecimalNumber * _Nonnull)decimalNumber;
        [Export("decimalNumberByDividingBy:")]
        NSDecimalNumber DecimalNumberByDividingBy(NSDecimalNumber decimalNumber);

        // -(NSDecimalNumber * _Nonnull)decimalNumberByDividingBy:(NSDecimalNumber * _Nonnull)decimalNumber withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
        [Export("decimalNumberByDividingBy:withBehavior:")]
        NSDecimalNumber DecimalNumberByDividingBy(NSDecimalNumber decimalNumber, [NullAllowed] NSDecimalNumberBehaviors behavior);

        // -(NSDecimalNumber * _Nonnull)decimalNumberByRaisingToPower:(NSUInteger)power;
        [Export("decimalNumberByRaisingToPower:")]
        NSDecimalNumber DecimalNumberByRaisingToPower(nuint power);

        // -(NSDecimalNumber * _Nonnull)decimalNumberByRaisingToPower:(NSUInteger)power withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
        [Export("decimalNumberByRaisingToPower:withBehavior:")]
        NSDecimalNumber DecimalNumberByRaisingToPower(nuint power, [NullAllowed] NSDecimalNumberBehaviors behavior);

        // -(NSDecimalNumber * _Nonnull)decimalNumberByMultiplyingByPowerOf10:(short)power;
        [Export("decimalNumberByMultiplyingByPowerOf10:")]
        NSDecimalNumber DecimalNumberByMultiplyingByPowerOf10(short power);

        // -(NSDecimalNumber * _Nonnull)decimalNumberByMultiplyingByPowerOf10:(short)power withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
        [Export("decimalNumberByMultiplyingByPowerOf10:withBehavior:")]
        NSDecimalNumber DecimalNumberByMultiplyingByPowerOf10(short power, [NullAllowed] NSDecimalNumberBehaviors behavior);

        // -(NSDecimalNumber * _Nonnull)decimalNumberByRoundingAccordingToBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
        [Export("decimalNumberByRoundingAccordingToBehavior:")]
        NSDecimalNumber DecimalNumberByRoundingAccordingToBehavior([NullAllowed] NSDecimalNumberBehaviors behavior);

        // -(NSComparisonResult)compare:(NSNumber * _Nonnull)decimalNumber;
        [Export("compare:")]
        NSComparisonResult Compare(NSNumber decimalNumber);

        // @property (strong, class) id<NSDecimalNumberBehaviors> _Nonnull defaultBehavior;
        [Static]
        [Export("defaultBehavior", ArgumentSemantic.Strong)]
        NSDecimalNumberBehaviors DefaultBehavior { get; set; }

        // @property (readonly) const char * _Nonnull objCType __attribute__((objc_returns_inner_pointer));
        [Export("objCType")]
        unsafe sbyte* ObjCType { get; }

        // @property (readonly) double doubleValue;
        [Export("doubleValue")]
        double DoubleValue { get; }
    }

    // @interface NSDecimalNumberHandler : NSObject <NSDecimalNumberBehaviors, NSCoding>
    [BaseType(typeof(NSObject))]
    interface NSDecimalNumberHandler : INSDecimalNumberBehaviors, INSCoding
    {
        // @property (readonly, strong, class) NSDecimalNumberHandler * _Nonnull defaultDecimalNumberHandler;
        [Static]
        [Export("defaultDecimalNumberHandler", ArgumentSemantic.Strong)]
        NSDecimalNumberHandler DefaultDecimalNumberHandler { get; }

        // -(instancetype _Nonnull)initWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)exact raiseOnOverflow:(BOOL)overflow raiseOnUnderflow:(BOOL)underflow raiseOnDivideByZero:(BOOL)divideByZero __attribute__((objc_designated_initializer));
        [Export("initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSRoundingMode roundingMode, short scale, bool exact, bool overflow, bool underflow, bool divideByZero);

        // +(instancetype _Nonnull)decimalNumberHandlerWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)exact raiseOnOverflow:(BOOL)overflow raiseOnUnderflow:(BOOL)underflow raiseOnDivideByZero:(BOOL)divideByZero;
        [Static]
        [Export("decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:")]
        NSDecimalNumberHandler DecimalNumberHandlerWithRoundingMode(NSRoundingMode roundingMode, short scale, bool exact, bool overflow, bool underflow, bool divideByZero);
    }

    // @interface NSDecimalNumberExtensions (NSNumber)
    [Category]
    [BaseType(typeof(NSNumber))]
    interface NSNumber_NSDecimalNumberExtensions
    {
        // @property (readonly) NSDecimal decimalValue;
        [Export("decimalValue")]
        NSDecimal DecimalValue { get; }
    }

    // @interface NSDecimalNumberScanning (NSScanner)
    [Category]
    [BaseType(typeof(NSScanner))]
    interface NSScanner_NSDecimalNumberScanning
    {
        // -(BOOL)scanDecimal:(NSDecimal * _Nullable)dcm;
        [Export("scanDecimal:")]
        unsafe bool ScanDecimal([NullAllowed] NSDecimal* dcm);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSErrorDomain _Nonnull NSCocoaErrorDomain;
        [Field("NSCocoaErrorDomain", "__Internal")]
        NSString NSCocoaErrorDomain { get; }

        // extern const NSErrorDomain _Nonnull NSPOSIXErrorDomain;
        [Field("NSPOSIXErrorDomain", "__Internal")]
        NSString NSPOSIXErrorDomain { get; }

        // extern const NSErrorDomain _Nonnull NSOSStatusErrorDomain;
        [Field("NSOSStatusErrorDomain", "__Internal")]
        NSString NSOSStatusErrorDomain { get; }

        // extern const NSErrorDomain _Nonnull NSMachErrorDomain;
        [Field("NSMachErrorDomain", "__Internal")]
        NSString NSMachErrorDomain { get; }

        // extern const NSErrorUserInfoKey _Nonnull NSUnderlyingErrorKey;
        [Field("NSUnderlyingErrorKey", "__Internal")]
        NSString NSUnderlyingErrorKey { get; }

        // extern const NSErrorUserInfoKey _Nonnull NSLocalizedDescriptionKey;
        [Field("NSLocalizedDescriptionKey", "__Internal")]
        NSString NSLocalizedDescriptionKey { get; }

        // extern const NSErrorUserInfoKey _Nonnull NSLocalizedFailureReasonErrorKey;
        [Field("NSLocalizedFailureReasonErrorKey", "__Internal")]
        NSString NSLocalizedFailureReasonErrorKey { get; }

        // extern const NSErrorUserInfoKey _Nonnull NSLocalizedRecoverySuggestionErrorKey;
        [Field("NSLocalizedRecoverySuggestionErrorKey", "__Internal")]
        NSString NSLocalizedRecoverySuggestionErrorKey { get; }

        // extern const NSErrorUserInfoKey _Nonnull NSLocalizedRecoveryOptionsErrorKey;
        [Field("NSLocalizedRecoveryOptionsErrorKey", "__Internal")]
        NSString NSLocalizedRecoveryOptionsErrorKey { get; }

        // extern const NSErrorUserInfoKey _Nonnull NSRecoveryAttempterErrorKey;
        [Field("NSRecoveryAttempterErrorKey", "__Internal")]
        NSString NSRecoveryAttempterErrorKey { get; }

        // extern const NSErrorUserInfoKey _Nonnull NSHelpAnchorErrorKey;
        [Field("NSHelpAnchorErrorKey", "__Internal")]
        NSString NSHelpAnchorErrorKey { get; }

        // extern const NSErrorUserInfoKey _Nonnull NSDebugDescriptionErrorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("NSDebugDescriptionErrorKey", "__Internal")]
        NSString NSDebugDescriptionErrorKey { get; }

        // extern const NSErrorUserInfoKey _Nonnull NSLocalizedFailureErrorKey __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("NSLocalizedFailureErrorKey", "__Internal")]
        NSString NSLocalizedFailureErrorKey { get; }

        // extern const NSErrorUserInfoKey _Nonnull NSStringEncodingErrorKey;
        [Field("NSStringEncodingErrorKey", "__Internal")]
        NSString NSStringEncodingErrorKey { get; }

        // extern const NSErrorUserInfoKey _Nonnull NSURLErrorKey;
        [Field("NSURLErrorKey", "__Internal")]
        NSString NSURLErrorKey { get; }

        // extern const NSErrorUserInfoKey _Nonnull NSFilePathErrorKey;
        [Field("NSFilePathErrorKey", "__Internal")]
        NSString NSFilePathErrorKey { get; }
    }

    // @interface NSError : NSObject <NSCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSError : INSCopying, INSSecureCoding
    {
        // -(instancetype _Nonnull)initWithDomain:(NSErrorDomain _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSErrorUserInfoKey,id> * _Nullable)dict __attribute__((objc_designated_initializer));
        [Export("initWithDomain:code:userInfo:")]
        [DesignatedInitializer]
        IntPtr Constructor(string domain, nint code, [NullAllowed] NSDictionary<NSString, NSObject> dict);

        // +(instancetype _Nonnull)errorWithDomain:(NSErrorDomain _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSErrorUserInfoKey,id> * _Nullable)dict;
        [Static]
        [Export("errorWithDomain:code:userInfo:")]
        NSError ErrorWithDomain(string domain, nint code, [NullAllowed] NSDictionary<NSString, NSObject> dict);

        // @property (readonly, copy) NSErrorDomain _Nonnull domain;
        [Export("domain")]
        string Domain { get; }

        // @property (readonly) NSInteger code;
        [Export("code")]
        nint Code { get; }

        // @property (readonly, copy) NSDictionary<NSErrorUserInfoKey,id> * _Nonnull userInfo;
        [Export("userInfo", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> UserInfo { get; }

        // @property (readonly, copy) NSString * _Nonnull localizedDescription;
        [Export("localizedDescription")]
        string LocalizedDescription { get; }

        // @property (readonly, copy) NSString * _Nullable localizedFailureReason;
        [NullAllowed, Export("localizedFailureReason")]
        string LocalizedFailureReason { get; }

        // @property (readonly, copy) NSString * _Nullable localizedRecoverySuggestion;
        [NullAllowed, Export("localizedRecoverySuggestion")]
        string LocalizedRecoverySuggestion { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nullable localizedRecoveryOptions;
        [NullAllowed, Export("localizedRecoveryOptions", ArgumentSemantic.Copy)]
        string[] LocalizedRecoveryOptions { get; }

        // @property (readonly, strong) id _Nullable recoveryAttempter;
        [NullAllowed, Export("recoveryAttempter", ArgumentSemantic.Strong)]
        NSObject RecoveryAttempter { get; }

        // @property (readonly, copy) NSString * _Nullable helpAnchor;
        [NullAllowed, Export("helpAnchor")]
        string HelpAnchor { get; }

        // +(void)setUserInfoValueProviderForDomain:(NSErrorDomain _Nonnull)errorDomain provider:(id  _Nullable (^ _Nullable)(NSError * _Nonnull, NSErrorUserInfoKey _Nonnull))provider __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Static]
        [Export("setUserInfoValueProviderForDomain:provider:")]
        void SetUserInfoValueProviderForDomain(string errorDomain, [NullAllowed] Func<NSError, NSString, NSObject> provider);

        // +(id  _Nullable (^ _Nullable)(NSError * _Nonnull, NSErrorUserInfoKey _Nonnull))userInfoValueProviderForDomain:(NSErrorDomain _Nonnull)errorDomain __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Static]
        [Export("userInfoValueProviderForDomain:")]
        [return: NullAllowed]
        Func<NSError, NSString, NSObject> UserInfoValueProviderForDomain(string errorDomain);
    }

    // @interface NSErrorRecoveryAttempting (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSErrorRecoveryAttempting
    {
        // -(void)attemptRecoveryFromError:(NSError * _Nonnull)error optionIndex:(NSUInteger)recoveryOptionIndex delegate:(id _Nullable)delegate didRecoverSelector:(SEL _Nullable)didRecoverSelector contextInfo:(void * _Nullable)contextInfo;
        [Export("attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:")]
        unsafe void AttemptRecoveryFromError(NSError error, nuint recoveryOptionIndex, [NullAllowed] NSObject @delegate, [NullAllowed] Selector didRecoverSelector, [NullAllowed] void* contextInfo);

        // -(BOOL)attemptRecoveryFromError:(NSError * _Nonnull)error optionIndex:(NSUInteger)recoveryOptionIndex;
        [Export("attemptRecoveryFromError:optionIndex:")]
        bool AttemptRecoveryFromError(NSError error, nuint recoveryOptionIndex);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSRunLoopMode _Nonnull NSDefaultRunLoopMode;
        [Field("NSDefaultRunLoopMode", "__Internal")]
        NSString NSDefaultRunLoopMode { get; }

        // extern const NSRunLoopMode _Nonnull NSRunLoopCommonModes __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("NSRunLoopCommonModes", "__Internal")]
        NSString NSRunLoopCommonModes { get; }
    }

    // @interface NSRunLoop : NSObject
    [BaseType(typeof(NSObject))]
    interface NSRunLoop
    {
        // @property (readonly, strong, class) NSRunLoop * _Nonnull currentRunLoop;
        [Static]
        [Export("currentRunLoop", ArgumentSemantic.Strong)]
        NSRunLoop CurrentRunLoop { get; }

        // @property (readonly, strong, class) NSRunLoop * _Nonnull mainRunLoop __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("mainRunLoop", ArgumentSemantic.Strong)]
        NSRunLoop MainRunLoop { get; }

        // @property (readonly, copy) NSRunLoopMode _Nullable currentMode;
        [NullAllowed, Export("currentMode")]
        string CurrentMode { get; }

        // -(CFRunLoopRef _Nonnull)getCFRunLoop __attribute__((cf_returns_not_retained));
        [Export("getCFRunLoop")]
        [Verify(MethodToProperty)]
        unsafe CFRunLoopRef* CFRunLoop { get; }

        // -(void)addTimer:(NSTimer * _Nonnull)timer forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("addTimer:forMode:")]
        void AddTimer(NSTimer timer, string mode);

        // -(void)addPort:(NSPort * _Nonnull)aPort forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("addPort:forMode:")]
        void AddPort(NSPort aPort, string mode);

        // -(void)removePort:(NSPort * _Nonnull)aPort forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("removePort:forMode:")]
        void RemovePort(NSPort aPort, string mode);

        // -(NSDate * _Nullable)limitDateForMode:(NSRunLoopMode _Nonnull)mode;
        [Export("limitDateForMode:")]
        [return: NullAllowed]
        NSDate LimitDateForMode(string mode);

        // -(void)acceptInputForMode:(NSRunLoopMode _Nonnull)mode beforeDate:(NSDate * _Nonnull)limitDate;
        [Export("acceptInputForMode:beforeDate:")]
        void AcceptInputForMode(string mode, NSDate limitDate);
    }

    // @interface NSRunLoopConveniences (NSRunLoop)
    [Category]
    [BaseType(typeof(NSRunLoop))]
    interface NSRunLoop_NSRunLoopConveniences
    {
        // -(void)run;
        [Export("run")]
        void Run();

        // -(void)runUntilDate:(NSDate * _Nonnull)limitDate;
        [Export("runUntilDate:")]
        void RunUntilDate(NSDate limitDate);

        // -(BOOL)runMode:(NSRunLoopMode _Nonnull)mode beforeDate:(NSDate * _Nonnull)limitDate;
        [Export("runMode:beforeDate:")]
        bool RunMode(string mode, NSDate limitDate);

        // -(void)performInModes:(NSArray<NSRunLoopMode> * _Nonnull)modes block:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("performInModes:block:")]
        void PerformInModes(string[] modes, Action block);

        // -(void)performBlock:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("performBlock:")]
        void PerformBlock(Action block);
    }

    // @interface NSDelayedPerforming (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSDelayedPerforming
    {
        // -(void)performSelector:(SEL _Nonnull)aSelector withObject:(id _Nullable)anArgument afterDelay:(NSTimeInterval)delay inModes:(NSArray<NSRunLoopMode> * _Nonnull)modes;
        [Export("performSelector:withObject:afterDelay:inModes:")]
        void PerformSelector(Selector aSelector, [NullAllowed] NSObject anArgument, double delay, string[] modes);

        // -(void)performSelector:(SEL _Nonnull)aSelector withObject:(id _Nullable)anArgument afterDelay:(NSTimeInterval)delay;
        [Export("performSelector:withObject:afterDelay:")]
        void PerformSelector(Selector aSelector, [NullAllowed] NSObject anArgument, double delay);

        // +(void)cancelPreviousPerformRequestsWithTarget:(id _Nonnull)aTarget selector:(SEL _Nonnull)aSelector object:(id _Nullable)anArgument;
        [Static]
        [Export("cancelPreviousPerformRequestsWithTarget:selector:object:")]
        void CancelPreviousPerformRequestsWithTarget(NSObject aTarget, Selector aSelector, [NullAllowed] NSObject anArgument);

        // +(void)cancelPreviousPerformRequestsWithTarget:(id _Nonnull)aTarget;
        [Static]
        [Export("cancelPreviousPerformRequestsWithTarget:")]
        void CancelPreviousPerformRequestsWithTarget(NSObject aTarget);
    }

    // @interface NSOrderedPerform (NSRunLoop)
    [Category]
    [BaseType(typeof(NSRunLoop))]
    interface NSRunLoop_NSOrderedPerform
    {
        // -(void)performSelector:(SEL _Nonnull)aSelector target:(id _Nonnull)target argument:(id _Nullable)arg order:(NSUInteger)order modes:(NSArray<NSRunLoopMode> * _Nonnull)modes;
        [Export("performSelector:target:argument:order:modes:")]
        void PerformSelector(Selector aSelector, NSObject target, [NullAllowed] NSObject arg, nuint order, string[] modes);

        // -(void)cancelPerformSelector:(SEL _Nonnull)aSelector target:(id _Nonnull)target argument:(id _Nullable)arg;
        [Export("cancelPerformSelector:target:argument:")]
        void CancelPerformSelector(Selector aSelector, NSObject target, [NullAllowed] NSObject arg);

        // -(void)cancelPerformSelectorsWithTarget:(id _Nonnull)target;
        [Export("cancelPerformSelectorsWithTarget:")]
        void CancelPerformSelectorsWithTarget(NSObject target);
    }

    // @interface NSFileHandle : NSObject <NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSFileHandle : INSSecureCoding
    {
        // @property (readonly, copy) NSData * _Nonnull availableData;
        [Export("availableData", ArgumentSemantic.Copy)]
        NSData AvailableData { get; }

        // -(NSData * _Nonnull)readDataToEndOfFile;
        [Export("readDataToEndOfFile")]
        [Verify(MethodToProperty)]
        NSData ReadDataToEndOfFile { get; }

        // -(NSData * _Nonnull)readDataOfLength:(NSUInteger)length;
        [Export("readDataOfLength:")]
        NSData ReadDataOfLength(nuint length);

        // -(void)writeData:(NSData * _Nonnull)data;
        [Export("writeData:")]
        void WriteData(NSData data);

        // @property (readonly) unsigned long long offsetInFile;
        [Export("offsetInFile")]
        ulong OffsetInFile { get; }

        // -(unsigned long long)seekToEndOfFile;
        [Export("seekToEndOfFile")]
        [Verify(MethodToProperty)]
        ulong SeekToEndOfFile { get; }

        // -(void)seekToFileOffset:(unsigned long long)offset;
        [Export("seekToFileOffset:")]
        void SeekToFileOffset(ulong offset);

        // -(void)truncateFileAtOffset:(unsigned long long)offset;
        [Export("truncateFileAtOffset:")]
        void TruncateFileAtOffset(ulong offset);

        // -(void)synchronizeFile;
        [Export("synchronizeFile")]
        void SynchronizeFile();

        // -(void)closeFile;
        [Export("closeFile")]
        void CloseFile();

        // -(instancetype _Nonnull)initWithFileDescriptor:(int)fd closeOnDealloc:(BOOL)closeopt __attribute__((objc_designated_initializer));
        [Export("initWithFileDescriptor:closeOnDealloc:")]
        [DesignatedInitializer]
        IntPtr Constructor(int fd, bool closeopt);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder coder);
    }

    // @interface NSFileHandleCreation (NSFileHandle)
    [Category]
    [BaseType(typeof(NSFileHandle))]
    interface NSFileHandle_NSFileHandleCreation
    {
        // @property (readonly, strong, class) NSFileHandle * _Nonnull fileHandleWithStandardInput;
        [Static]
        [Export("fileHandleWithStandardInput", ArgumentSemantic.Strong)]
        NSFileHandle FileHandleWithStandardInput { get; }

        // @property (readonly, strong, class) NSFileHandle * _Nonnull fileHandleWithStandardOutput;
        [Static]
        [Export("fileHandleWithStandardOutput", ArgumentSemantic.Strong)]
        NSFileHandle FileHandleWithStandardOutput { get; }

        // @property (readonly, strong, class) NSFileHandle * _Nonnull fileHandleWithStandardError;
        [Static]
        [Export("fileHandleWithStandardError", ArgumentSemantic.Strong)]
        NSFileHandle FileHandleWithStandardError { get; }

        // @property (readonly, strong, class) NSFileHandle * _Nonnull fileHandleWithNullDevice;
        [Static]
        [Export("fileHandleWithNullDevice", ArgumentSemantic.Strong)]
        NSFileHandle FileHandleWithNullDevice { get; }

        // +(instancetype _Nullable)fileHandleForReadingAtPath:(NSString * _Nonnull)path;
        [Static]
        [Export("fileHandleForReadingAtPath:")]
        [return: NullAllowed]
        NSFileHandle FileHandleForReadingAtPath(string path);

        // +(instancetype _Nullable)fileHandleForWritingAtPath:(NSString * _Nonnull)path;
        [Static]
        [Export("fileHandleForWritingAtPath:")]
        [return: NullAllowed]
        NSFileHandle FileHandleForWritingAtPath(string path);

        // +(instancetype _Nullable)fileHandleForUpdatingAtPath:(NSString * _Nonnull)path;
        [Static]
        [Export("fileHandleForUpdatingAtPath:")]
        [return: NullAllowed]
        NSFileHandle FileHandleForUpdatingAtPath(string path);

        // +(instancetype _Nullable)fileHandleForReadingFromURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("fileHandleForReadingFromURL:error:")]
        [return: NullAllowed]
        NSFileHandle FileHandleForReadingFromURL(NSUrl url, [NullAllowed] out NSError error);

        // +(instancetype _Nullable)fileHandleForWritingToURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("fileHandleForWritingToURL:error:")]
        [return: NullAllowed]
        NSFileHandle FileHandleForWritingToURL(NSUrl url, [NullAllowed] out NSError error);

        // +(instancetype _Nullable)fileHandleForUpdatingURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("fileHandleForUpdatingURL:error:")]
        [return: NullAllowed]
        NSFileHandle FileHandleForUpdatingURL(NSUrl url, [NullAllowed] out NSError error);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSExceptionName _Nonnull NSFileHandleOperationException;
        [Field("NSFileHandleOperationException", "__Internal")]
        NSString NSFileHandleOperationException { get; }

        // extern const NSNotificationName _Nonnull NSFileHandleReadCompletionNotification;
        [Field("NSFileHandleReadCompletionNotification", "__Internal")]
        NSString NSFileHandleReadCompletionNotification { get; }

        // extern const NSNotificationName _Nonnull NSFileHandleReadToEndOfFileCompletionNotification;
        [Field("NSFileHandleReadToEndOfFileCompletionNotification", "__Internal")]
        NSString NSFileHandleReadToEndOfFileCompletionNotification { get; }

        // extern const NSNotificationName _Nonnull NSFileHandleConnectionAcceptedNotification;
        [Field("NSFileHandleConnectionAcceptedNotification", "__Internal")]
        NSString NSFileHandleConnectionAcceptedNotification { get; }

        // extern const NSNotificationName _Nonnull NSFileHandleDataAvailableNotification;
        [Field("NSFileHandleDataAvailableNotification", "__Internal")]
        NSString NSFileHandleDataAvailableNotification { get; }

        // extern NSString *const _Nonnull NSFileHandleNotificationDataItem;
        [Field("NSFileHandleNotificationDataItem", "__Internal")]
        NSString NSFileHandleNotificationDataItem { get; }

        // extern NSString *const _Nonnull NSFileHandleNotificationFileHandleItem;
        [Field("NSFileHandleNotificationFileHandleItem", "__Internal")]
        NSString NSFileHandleNotificationFileHandleItem { get; }

        // extern NSString *const _Nonnull NSFileHandleNotificationMonitorModes __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=5.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.7)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Not supported")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Not supported")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Not supported")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Not supported")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Not supported")]
        [Deprecated(PlatformName.iOS, 5, 0, message: "Not supported")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Not supported")]
        [Deprecated(PlatformName.MacOSX, 10, 7, message: "Not supported")]
        [Field("NSFileHandleNotificationMonitorModes", "__Internal")]
        NSString NSFileHandleNotificationMonitorModes { get; }
    }

    // @interface NSFileHandleAsynchronousAccess (NSFileHandle)
    [Category]
    [BaseType(typeof(NSFileHandle))]
    interface NSFileHandle_NSFileHandleAsynchronousAccess
    {
        // -(void)readInBackgroundAndNotifyForModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
        [Export("readInBackgroundAndNotifyForModes:")]
        void ReadInBackgroundAndNotifyForModes([NullAllowed] string[] modes);

        // -(void)readInBackgroundAndNotify;
        [Export("readInBackgroundAndNotify")]
        void ReadInBackgroundAndNotify();

        // -(void)readToEndOfFileInBackgroundAndNotifyForModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
        [Export("readToEndOfFileInBackgroundAndNotifyForModes:")]
        void ReadToEndOfFileInBackgroundAndNotifyForModes([NullAllowed] string[] modes);

        // -(void)readToEndOfFileInBackgroundAndNotify;
        [Export("readToEndOfFileInBackgroundAndNotify")]
        void ReadToEndOfFileInBackgroundAndNotify();

        // -(void)acceptConnectionInBackgroundAndNotifyForModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
        [Export("acceptConnectionInBackgroundAndNotifyForModes:")]
        void AcceptConnectionInBackgroundAndNotifyForModes([NullAllowed] string[] modes);

        // -(void)acceptConnectionInBackgroundAndNotify;
        [Export("acceptConnectionInBackgroundAndNotify")]
        void AcceptConnectionInBackgroundAndNotify();

        // -(void)waitForDataInBackgroundAndNotifyForModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
        [Export("waitForDataInBackgroundAndNotifyForModes:")]
        void WaitForDataInBackgroundAndNotifyForModes([NullAllowed] string[] modes);

        // -(void)waitForDataInBackgroundAndNotify;
        [Export("waitForDataInBackgroundAndNotify")]
        void WaitForDataInBackgroundAndNotify();

        // @property (copy) void (^ _Nullable)(NSFileHandle * _Nonnull) readabilityHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [NullAllowed, Export("readabilityHandler", ArgumentSemantic.Copy)]
        Action<NSFileHandle> ReadabilityHandler { get; set; }

        // @property (copy) void (^ _Nullable)(NSFileHandle * _Nonnull) writeabilityHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [NullAllowed, Export("writeabilityHandler", ArgumentSemantic.Copy)]
        Action<NSFileHandle> WriteabilityHandler { get; set; }
    }

    // @interface NSFileHandlePlatformSpecific (NSFileHandle)
    [Category]
    [BaseType(typeof(NSFileHandle))]
    interface NSFileHandle_NSFileHandlePlatformSpecific
    {
        // -(instancetype _Nonnull)initWithFileDescriptor:(int)fd;
        [Export("initWithFileDescriptor:")]
        IntPtr Constructor(int fd);

        // @property (readonly) int fileDescriptor;
        [Export("fileDescriptor")]
        int FileDescriptor { get; }
    }

    // @interface NSPipe : NSObject
    [BaseType(typeof(NSObject))]
    interface NSPipe
    {
        // @property (readonly, retain) NSFileHandle * _Nonnull fileHandleForReading;
        [Export("fileHandleForReading", ArgumentSemantic.Retain)]
        NSFileHandle FileHandleForReading { get; }

        // @property (readonly, retain) NSFileHandle * _Nonnull fileHandleForWriting;
        [Export("fileHandleForWriting", ArgumentSemantic.Retain)]
        NSFileHandle FileHandleForWriting { get; }

        // +(NSPipe * _Nonnull)pipe;
        [Static]
        [Export("pipe")]
        [Verify(MethodToProperty)]
        NSPipe Pipe { get; }
    }

    // @interface NSStringPathExtensions (NSString)
    [Category]
    [BaseType(typeof(NSString))]
    interface NSString_NSStringPathExtensions
    {
        // +(NSString * _Nonnull)pathWithComponents:(NSArray<NSString *> * _Nonnull)components;
        [Static]
        [Export("pathWithComponents:")]
        string PathWithComponents(string[] components);

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull pathComponents;
        [Export("pathComponents", ArgumentSemantic.Copy)]
        string[] PathComponents { get; }

        // @property (readonly, getter = isAbsolutePath) BOOL absolutePath;
        [Export("absolutePath")]
        bool AbsolutePath { [Bind("isAbsolutePath")] get; }

        // @property (readonly, copy) NSString * _Nonnull lastPathComponent;
        [Export("lastPathComponent")]
        string LastPathComponent { get; }

        // @property (readonly, copy) NSString * _Nonnull stringByDeletingLastPathComponent;
        [Export("stringByDeletingLastPathComponent")]
        string StringByDeletingLastPathComponent { get; }

        // -(NSString * _Nonnull)stringByAppendingPathComponent:(NSString * _Nonnull)str;
        [Export("stringByAppendingPathComponent:")]
        string StringByAppendingPathComponent(string str);

        // @property (readonly, copy) NSString * _Nonnull pathExtension;
        [Export("pathExtension")]
        string PathExtension { get; }

        // @property (readonly, copy) NSString * _Nonnull stringByDeletingPathExtension;
        [Export("stringByDeletingPathExtension")]
        string StringByDeletingPathExtension { get; }

        // -(NSString * _Nullable)stringByAppendingPathExtension:(NSString * _Nonnull)str;
        [Export("stringByAppendingPathExtension:")]
        [return: NullAllowed]
        string StringByAppendingPathExtension(string str);

        // @property (readonly, copy) NSString * _Nonnull stringByAbbreviatingWithTildeInPath;
        [Export("stringByAbbreviatingWithTildeInPath")]
        string StringByAbbreviatingWithTildeInPath { get; }

        // @property (readonly, copy) NSString * _Nonnull stringByExpandingTildeInPath;
        [Export("stringByExpandingTildeInPath")]
        string StringByExpandingTildeInPath { get; }

        // @property (readonly, copy) NSString * _Nonnull stringByStandardizingPath;
        [Export("stringByStandardizingPath")]
        string StringByStandardizingPath { get; }

        // @property (readonly, copy) NSString * _Nonnull stringByResolvingSymlinksInPath;
        [Export("stringByResolvingSymlinksInPath")]
        string StringByResolvingSymlinksInPath { get; }

        // -(NSArray<NSString *> * _Nonnull)stringsByAppendingPaths:(NSArray<NSString *> * _Nonnull)paths;
        [Export("stringsByAppendingPaths:")]
        string[] StringsByAppendingPaths(string[] paths);

        // -(NSUInteger)completePathIntoString:(NSString * _Nullable * _Nullable)outputName caseSensitive:(BOOL)flag matchesIntoArray:(NSArray<NSString *> * _Nullable * _Nullable)outputArray filterTypes:(NSArray<NSString *> * _Nullable)filterTypes;
        [Export("completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:")]
        nuint CompletePathIntoString([NullAllowed] out string outputName, bool flag, [NullAllowed] out string[] outputArray, [NullAllowed] string[] filterTypes);

        // @property (readonly) const char * _Nonnull fileSystemRepresentation __attribute__((objc_returns_inner_pointer));
        [Export("fileSystemRepresentation")]
        unsafe sbyte* FileSystemRepresentation { get; }

        // -(BOOL)getFileSystemRepresentation:(char * _Nonnull)cname maxLength:(NSUInteger)max;
        [Export("getFileSystemRepresentation:maxLength:")]
        unsafe bool GetFileSystemRepresentation(sbyte* cname, nuint max);
    }

    // @interface NSArrayPathExtensions (NSArray)
    [Category]
    [BaseType(typeof(NSArray))]
    interface NSArray_NSArrayPathExtensions
    {
        // -(NSArray<NSString *> * _Nonnull)pathsMatchingExtensions:(NSArray<NSString *> * _Nonnull)filterTypes;
        [Export("pathsMatchingExtensions:")]
        string[] PathsMatchingExtensions(string[] filterTypes);
    }

    // @interface NSURL : NSObject <NSSecureCoding, NSCopying>
    [BaseType(typeof(NSObject))]
    interface NSURL : INSSecureCoding, INSCopying
    {
        // -(instancetype _Nullable)initWithScheme:(NSString * _Nonnull)scheme host:(NSString * _Nullable)host path:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.11)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
        [Deprecated(PlatformName.MacOSX, 10, 11, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
        [Export("initWithScheme:host:path:")]
        IntPtr Constructor(string scheme, [NullAllowed] string host, string path);

        // -(instancetype _Nonnull)initFileURLWithPath:(NSString * _Nonnull)path isDirectory:(BOOL)isDir relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("initFileURLWithPath:isDirectory:relativeToURL:")]
        [DesignatedInitializer]
        IntPtr Constructor(string path, bool isDir, [NullAllowed] NSUrl baseURL);

        // -(instancetype _Nonnull)initFileURLWithPath:(NSString * _Nonnull)path relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("initFileURLWithPath:relativeToURL:")]
        [DesignatedInitializer]
        IntPtr Constructor(string path, [NullAllowed] NSUrl baseURL);

        // -(instancetype _Nonnull)initFileURLWithPath:(NSString * _Nonnull)path isDirectory:(BOOL)isDir __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("initFileURLWithPath:isDirectory:")]
        [DesignatedInitializer]
        IntPtr Constructor(string path, bool isDir);

        // -(instancetype _Nonnull)initFileURLWithPath:(NSString * _Nonnull)path __attribute__((objc_designated_initializer));
        [Export("initFileURLWithPath:")]
        [DesignatedInitializer]
        IntPtr Constructor(string path);

        // +(NSURL * _Nonnull)fileURLWithPath:(NSString * _Nonnull)path isDirectory:(BOOL)isDir relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Static]
        [Export("fileURLWithPath:isDirectory:relativeToURL:")]
        NSUrl FileURLWithPath(string path, bool isDir, [NullAllowed] NSUrl baseURL);

        // +(NSURL * _Nonnull)fileURLWithPath:(NSString * _Nonnull)path relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Static]
        [Export("fileURLWithPath:relativeToURL:")]
        NSUrl FileURLWithPath(string path, [NullAllowed] NSUrl baseURL);

        // +(NSURL * _Nonnull)fileURLWithPath:(NSString * _Nonnull)path isDirectory:(BOOL)isDir __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("fileURLWithPath:isDirectory:")]
        NSUrl FileURLWithPath(string path, bool isDir);

        // +(NSURL * _Nonnull)fileURLWithPath:(NSString * _Nonnull)path;
        [Static]
        [Export("fileURLWithPath:")]
        NSUrl FileURLWithPath(string path);

        // -(instancetype _Nonnull)initFileURLWithFileSystemRepresentation:(const char * _Nonnull)path isDirectory:(BOOL)isDir relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:")]
        [DesignatedInitializer]
        unsafe IntPtr Constructor(sbyte* path, bool isDir, [NullAllowed] NSUrl baseURL);

        // +(NSURL * _Nonnull)fileURLWithFileSystemRepresentation:(const char * _Nonnull)path isDirectory:(BOOL)isDir relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Static]
        [Export("fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:")]
        unsafe NSUrl FileURLWithFileSystemRepresentation(sbyte* path, bool isDir, [NullAllowed] NSUrl baseURL);

        // -(instancetype _Nullable)initWithString:(NSString * _Nonnull)URLString;
        [Export("initWithString:")]
        IntPtr Constructor(string URLString);

        // -(instancetype _Nullable)initWithString:(NSString * _Nonnull)URLString relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer));
        [Export("initWithString:relativeToURL:")]
        [DesignatedInitializer]
        IntPtr Constructor(string URLString, [NullAllowed] NSUrl baseURL);

        // +(instancetype _Nullable)URLWithString:(NSString * _Nonnull)URLString;
        [Static]
        [Export("URLWithString:")]
        [return: NullAllowed]
        NSUrl URLWithString(string URLString);

        // +(instancetype _Nullable)URLWithString:(NSString * _Nonnull)URLString relativeToURL:(NSURL * _Nullable)baseURL;
        [Static]
        [Export("URLWithString:relativeToURL:")]
        [return: NullAllowed]
        NSUrl URLWithString(string URLString, [NullAllowed] NSUrl baseURL);

        // -(instancetype _Nonnull)initWithDataRepresentation:(NSData * _Nonnull)data relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("initWithDataRepresentation:relativeToURL:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSData data, [NullAllowed] NSUrl baseURL);

        // +(NSURL * _Nonnull)URLWithDataRepresentation:(NSData * _Nonnull)data relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Static]
        [Export("URLWithDataRepresentation:relativeToURL:")]
        NSUrl URLWithDataRepresentation(NSData data, [NullAllowed] NSUrl baseURL);

        // -(instancetype _Nonnull)initAbsoluteURLWithDataRepresentation:(NSData * _Nonnull)data relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("initAbsoluteURLWithDataRepresentation:relativeToURL:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSData data, [NullAllowed] NSUrl baseURL);

        // +(NSURL * _Nonnull)absoluteURLWithDataRepresentation:(NSData * _Nonnull)data relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Static]
        [Export("absoluteURLWithDataRepresentation:relativeToURL:")]
        NSUrl AbsoluteURLWithDataRepresentation(NSData data, [NullAllowed] NSUrl baseURL);

        // @property (readonly, copy) NSData * _Nonnull dataRepresentation __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("dataRepresentation", ArgumentSemantic.Copy)]
        NSData DataRepresentation { get; }

        // @property (readonly, copy) NSString * _Nullable absoluteString;
        [NullAllowed, Export("absoluteString")]
        string AbsoluteString { get; }

        // @property (readonly, copy) NSString * _Nonnull relativeString;
        [Export("relativeString")]
        string RelativeString { get; }

        // @property (readonly, copy) NSURL * _Nullable baseURL;
        [NullAllowed, Export("baseURL", ArgumentSemantic.Copy)]
        NSUrl BaseURL { get; }

        // @property (readonly, copy) NSURL * _Nullable absoluteURL;
        [NullAllowed, Export("absoluteURL", ArgumentSemantic.Copy)]
        NSUrl AbsoluteURL { get; }

        // @property (readonly, copy) NSString * _Nullable scheme;
        [NullAllowed, Export("scheme")]
        string Scheme { get; }

        // @property (readonly, copy) NSString * _Nullable resourceSpecifier;
        [NullAllowed, Export("resourceSpecifier")]
        string ResourceSpecifier { get; }

        // @property (readonly, copy) NSString * _Nullable host;
        [NullAllowed, Export("host")]
        string Host { get; }

        // @property (readonly, copy) NSNumber * _Nullable port;
        [NullAllowed, Export("port", ArgumentSemantic.Copy)]
        NSNumber Port { get; }

        // @property (readonly, copy) NSString * _Nullable user;
        [NullAllowed, Export("user")]
        string User { get; }

        // @property (readonly, copy) NSString * _Nullable password;
        [NullAllowed, Export("password")]
        string Password { get; }

        // @property (readonly, copy) NSString * _Nullable path;
        [NullAllowed, Export("path")]
        string Path { get; }

        // @property (readonly, copy) NSString * _Nullable fragment;
        [NullAllowed, Export("fragment")]
        string Fragment { get; }

        // @property (readonly, copy) NSString * _Nullable parameterString;
        [NullAllowed, Export("parameterString")]
        string ParameterString { get; }

        // @property (readonly, copy) NSString * _Nullable query;
        [NullAllowed, Export("query")]
        string Query { get; }

        // @property (readonly, copy) NSString * _Nullable relativePath;
        [NullAllowed, Export("relativePath")]
        string RelativePath { get; }

        // @property (readonly) BOOL hasDirectoryPath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("hasDirectoryPath")]
        bool HasDirectoryPath { get; }

        // -(BOOL)getFileSystemRepresentation:(char * _Nonnull)buffer maxLength:(NSUInteger)maxBufferLength __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("getFileSystemRepresentation:maxLength:")]
        unsafe bool GetFileSystemRepresentation(sbyte* buffer, nuint maxBufferLength);

        // @property (readonly) const char * _Nonnull fileSystemRepresentation __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9))) __attribute__((objc_returns_inner_pointer));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("fileSystemRepresentation")]
        unsafe sbyte* FileSystemRepresentation { get; }

        // @property (readonly, getter = isFileURL) BOOL fileURL;
        [Export("fileURL")]
        bool FileURL { [Bind("isFileURL")] get; }

        // @property (readonly, copy) NSURL * _Nullable standardizedURL;
        [NullAllowed, Export("standardizedURL", ArgumentSemantic.Copy)]
        NSUrl StandardizedURL { get; }

        // -(BOOL)checkResourceIsReachableAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("checkResourceIsReachableAndReturnError:")]
        bool CheckResourceIsReachableAndReturnError([NullAllowed] out NSError error);

        // -(BOOL)isFileReferenceURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("isFileReferenceURL")]
        [Verify(MethodToProperty)]
        bool IsFileReferenceURL { get; }

        // -(NSURL * _Nullable)fileReferenceURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("fileReferenceURL")]
        [Verify(MethodToProperty)]
        NSUrl FileReferenceURL { get; }

        // @property (readonly, copy) NSURL * _Nullable filePathURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("filePathURL", ArgumentSemantic.Copy)]
        NSUrl FilePathURL { get; }

        // -(BOOL)getResourceValue:(id  _Nullable * _Nonnull)value forKey:(NSURLResourceKey _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("getResourceValue:forKey:error:")]
        bool GetResourceValue([NullAllowed] out NSObject value, string key, [NullAllowed] out NSError error);

        // -(NSDictionary<NSURLResourceKey,id> * _Nullable)resourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nonnull)keys error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("resourceValuesForKeys:error:")]
        [return: NullAllowed]
        NSDictionary<NSString, NSObject> ResourceValuesForKeys(string[] keys, [NullAllowed] out NSError error);

        // -(BOOL)setResourceValue:(id _Nullable)value forKey:(NSURLResourceKey _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("setResourceValue:forKey:error:")]
        bool SetResourceValue([NullAllowed] NSObject value, string key, [NullAllowed] out NSError error);

        // -(BOOL)setResourceValues:(NSDictionary<NSURLResourceKey,id> * _Nonnull)keyedValues error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("setResourceValues:error:")]
        bool SetResourceValues(NSDictionary<NSString, NSObject> keyedValues, [NullAllowed] out NSError error);

        // -(void)removeCachedResourceValueForKey:(NSURLResourceKey _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("removeCachedResourceValueForKey:")]
        void RemoveCachedResourceValueForKey(string key);

        // -(void)removeAllCachedResourceValues __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("removeAllCachedResourceValues")]
        void RemoveAllCachedResourceValues();

        // -(void)setTemporaryResourceValue:(id _Nullable)value forKey:(NSURLResourceKey _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("setTemporaryResourceValue:forKey:")]
        void SetTemporaryResourceValue([NullAllowed] NSObject value, string key);

        // -(NSData * _Nullable)bookmarkDataWithOptions:(NSURLBookmarkCreationOptions)options includingResourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nullable)keys relativeToURL:(NSURL * _Nullable)relativeURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:")]
        [return: NullAllowed]
        NSData BookmarkDataWithOptions(NSURLBookmarkCreationOptions options, [NullAllowed] string[] keys, [NullAllowed] NSUrl relativeURL, [NullAllowed] out NSError error);

        // -(instancetype _Nullable)initByResolvingBookmarkData:(NSData * _Nonnull)bookmarkData options:(NSURLBookmarkResolutionOptions)options relativeToURL:(NSURL * _Nullable)relativeURL bookmarkDataIsStale:(BOOL * _Nullable)isStale error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:")]
        unsafe IntPtr Constructor(NSData bookmarkData, NSURLBookmarkResolutionOptions options, [NullAllowed] NSUrl relativeURL, [NullAllowed] bool* isStale, [NullAllowed] out NSError error);

        // +(instancetype _Nullable)URLByResolvingBookmarkData:(NSData * _Nonnull)bookmarkData options:(NSURLBookmarkResolutionOptions)options relativeToURL:(NSURL * _Nullable)relativeURL bookmarkDataIsStale:(BOOL * _Nullable)isStale error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:")]
        [return: NullAllowed]
        unsafe NSUrl URLByResolvingBookmarkData(NSData bookmarkData, NSURLBookmarkResolutionOptions options, [NullAllowed] NSUrl relativeURL, [NullAllowed] bool* isStale, [NullAllowed] out NSError error);

        // +(NSDictionary<NSURLResourceKey,id> * _Nullable)resourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nonnull)keys fromBookmarkData:(NSData * _Nonnull)bookmarkData __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("resourceValuesForKeys:fromBookmarkData:")]
        [return: NullAllowed]
        NSDictionary<NSString, NSObject> ResourceValuesForKeys(string[] keys, NSData bookmarkData);

        // +(BOOL)writeBookmarkData:(NSData * _Nonnull)bookmarkData toURL:(NSURL * _Nonnull)bookmarkFileURL options:(NSURLBookmarkFileCreationOptions)options error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("writeBookmarkData:toURL:options:error:")]
        bool WriteBookmarkData(NSData bookmarkData, NSUrl bookmarkFileURL, nuint options, [NullAllowed] out NSError error);

        // +(NSData * _Nullable)bookmarkDataWithContentsOfURL:(NSURL * _Nonnull)bookmarkFileURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("bookmarkDataWithContentsOfURL:error:")]
        [return: NullAllowed]
        NSData BookmarkDataWithContentsOfURL(NSUrl bookmarkFileURL, [NullAllowed] out NSError error);

        // +(instancetype _Nullable)URLByResolvingAliasFileAtURL:(NSURL * _Nonnull)url options:(NSURLBookmarkResolutionOptions)options error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Static]
        [Export("URLByResolvingAliasFileAtURL:options:error:")]
        [return: NullAllowed]
        NSUrl URLByResolvingAliasFileAtURL(NSUrl url, NSURLBookmarkResolutionOptions options, [NullAllowed] out NSError error);

        // -(BOOL)startAccessingSecurityScopedResource __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(8, 0)]
        [Export("startAccessingSecurityScopedResource")]
        [Verify(MethodToProperty)]
        bool StartAccessingSecurityScopedResource { get; }

        // -(void)stopAccessingSecurityScopedResource __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(8, 0)]
        [Export("stopAccessingSecurityScopedResource")]
        void StopAccessingSecurityScopedResource();
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString * _Nonnull NSURLFileScheme;
        [Field("NSURLFileScheme", "__Internal")]
        NSString NSURLFileScheme { get; }

        // extern const NSURLResourceKey _Nonnull NSURLKeysOfUnsetValuesKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLKeysOfUnsetValuesKey", "__Internal")]
        NSString NSURLKeysOfUnsetValuesKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLNameKey", "__Internal")]
        NSString NSURLNameKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLLocalizedNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLLocalizedNameKey", "__Internal")]
        NSString NSURLLocalizedNameKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsRegularFileKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLIsRegularFileKey", "__Internal")]
        NSString NSURLIsRegularFileKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsDirectoryKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLIsDirectoryKey", "__Internal")]
        NSString NSURLIsDirectoryKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsSymbolicLinkKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLIsSymbolicLinkKey", "__Internal")]
        NSString NSURLIsSymbolicLinkKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsVolumeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLIsVolumeKey", "__Internal")]
        NSString NSURLIsVolumeKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsPackageKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLIsPackageKey", "__Internal")]
        NSString NSURLIsPackageKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsApplicationKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Field("NSURLIsApplicationKey", "__Internal")]
        NSString NSURLIsApplicationKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLApplicationIsScriptableKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11)));
        [NoWatch, NoTV, NoiOS, Mac(10, 11)]
        [Field("NSURLApplicationIsScriptableKey", "__Internal")]
        NSString NSURLApplicationIsScriptableKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsSystemImmutableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLIsSystemImmutableKey", "__Internal")]
        NSString NSURLIsSystemImmutableKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsUserImmutableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLIsUserImmutableKey", "__Internal")]
        NSString NSURLIsUserImmutableKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsHiddenKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLIsHiddenKey", "__Internal")]
        NSString NSURLIsHiddenKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLHasHiddenExtensionKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLHasHiddenExtensionKey", "__Internal")]
        NSString NSURLHasHiddenExtensionKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLCreationDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLCreationDateKey", "__Internal")]
        NSString NSURLCreationDateKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLContentAccessDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLContentAccessDateKey", "__Internal")]
        NSString NSURLContentAccessDateKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLContentModificationDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLContentModificationDateKey", "__Internal")]
        NSString NSURLContentModificationDateKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLAttributeModificationDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLAttributeModificationDateKey", "__Internal")]
        NSString NSURLAttributeModificationDateKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLLinkCountKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLLinkCountKey", "__Internal")]
        NSString NSURLLinkCountKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLParentDirectoryURLKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLParentDirectoryURLKey", "__Internal")]
        NSString NSURLParentDirectoryURLKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeURLKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeURLKey", "__Internal")]
        NSString NSURLVolumeURLKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLTypeIdentifierKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLTypeIdentifierKey", "__Internal")]
        NSString NSURLTypeIdentifierKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLLocalizedTypeDescriptionKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLLocalizedTypeDescriptionKey", "__Internal")]
        NSString NSURLLocalizedTypeDescriptionKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLLabelNumberKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLLabelNumberKey", "__Internal")]
        NSString NSURLLabelNumberKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLLabelColorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLLabelColorKey", "__Internal")]
        NSString NSURLLabelColorKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLLocalizedLabelKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLLocalizedLabelKey", "__Internal")]
        NSString NSURLLocalizedLabelKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLEffectiveIconKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLEffectiveIconKey", "__Internal")]
        NSString NSURLEffectiveIconKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLCustomIconKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLCustomIconKey", "__Internal")]
        NSString NSURLCustomIconKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLFileResourceIdentifierKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLFileResourceIdentifierKey", "__Internal")]
        NSString NSURLFileResourceIdentifierKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeIdentifierKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeIdentifierKey", "__Internal")]
        NSString NSURLVolumeIdentifierKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLPreferredIOBlockSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLPreferredIOBlockSizeKey", "__Internal")]
        NSString NSURLPreferredIOBlockSizeKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsReadableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLIsReadableKey", "__Internal")]
        NSString NSURLIsReadableKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsWritableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLIsWritableKey", "__Internal")]
        NSString NSURLIsWritableKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsExecutableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLIsExecutableKey", "__Internal")]
        NSString NSURLIsExecutableKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLFileSecurityKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLFileSecurityKey", "__Internal")]
        NSString NSURLFileSecurityKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsExcludedFromBackupKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.1))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(5, 1)]
        [Field("NSURLIsExcludedFromBackupKey", "__Internal")]
        NSString NSURLIsExcludedFromBackupKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLTagNamesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSURLTagNamesKey", "__Internal")]
        NSString NSURLTagNamesKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLPathKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Field("NSURLPathKey", "__Internal")]
        NSString NSURLPathKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLCanonicalPathKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("NSURLCanonicalPathKey", "__Internal")]
        NSString NSURLCanonicalPathKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsMountTriggerKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLIsMountTriggerKey", "__Internal")]
        NSString NSURLIsMountTriggerKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLGenerationIdentifierKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSURLGenerationIdentifierKey", "__Internal")]
        NSString NSURLGenerationIdentifierKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLDocumentIdentifierKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSURLDocumentIdentifierKey", "__Internal")]
        NSString NSURLDocumentIdentifierKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLAddedToDirectoryDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSURLAddedToDirectoryDateKey", "__Internal")]
        NSString NSURLAddedToDirectoryDateKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLQuarantinePropertiesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.10)));
        [NoWatch, NoTV, NoiOS, Mac(10, 10)]
        [Field("NSURLQuarantinePropertiesKey", "__Internal")]
        NSString NSURLQuarantinePropertiesKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLFileResourceTypeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLFileResourceTypeKey", "__Internal")]
        NSString NSURLFileResourceTypeKey { get; }

        // extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeNamedPipe __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLFileResourceTypeNamedPipe", "__Internal")]
        NSString NSURLFileResourceTypeNamedPipe { get; }

        // extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeCharacterSpecial __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLFileResourceTypeCharacterSpecial", "__Internal")]
        NSString NSURLFileResourceTypeCharacterSpecial { get; }

        // extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeDirectory __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLFileResourceTypeDirectory", "__Internal")]
        NSString NSURLFileResourceTypeDirectory { get; }

        // extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeBlockSpecial __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLFileResourceTypeBlockSpecial", "__Internal")]
        NSString NSURLFileResourceTypeBlockSpecial { get; }

        // extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeRegular __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLFileResourceTypeRegular", "__Internal")]
        NSString NSURLFileResourceTypeRegular { get; }

        // extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeSymbolicLink __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLFileResourceTypeSymbolicLink", "__Internal")]
        NSString NSURLFileResourceTypeSymbolicLink { get; }

        // extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeSocket __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLFileResourceTypeSocket", "__Internal")]
        NSString NSURLFileResourceTypeSocket { get; }

        // extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeUnknown __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLFileResourceTypeUnknown", "__Internal")]
        NSString NSURLFileResourceTypeUnknown { get; }

        // extern const NSURLResourceKey _Nonnull NSURLThumbnailDictionaryKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSURLThumbnailDictionaryKey", "__Internal")]
        NSString NSURLThumbnailDictionaryKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLThumbnailKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.10)));
        [NoWatch, NoTV, NoiOS, Mac(10, 10)]
        [Field("NSURLThumbnailKey", "__Internal")]
        NSString NSURLThumbnailKey { get; }

        // extern const NSURLThumbnailDictionaryItem _Nonnull NSThumbnail1024x1024SizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSThumbnail1024x1024SizeKey", "__Internal")]
        NSString NSThumbnail1024x1024SizeKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLFileSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLFileSizeKey", "__Internal")]
        NSString NSURLFileSizeKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLFileAllocatedSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLFileAllocatedSizeKey", "__Internal")]
        NSString NSURLFileAllocatedSizeKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLTotalFileSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLTotalFileSizeKey", "__Internal")]
        NSString NSURLTotalFileSizeKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLTotalFileAllocatedSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLTotalFileAllocatedSizeKey", "__Internal")]
        NSString NSURLTotalFileAllocatedSizeKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsAliasFileKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLIsAliasFileKey", "__Internal")]
        NSString NSURLIsAliasFileKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLFileProtectionKey __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("NSURLFileProtectionKey", "__Internal")]
        NSString NSURLFileProtectionKey { get; }

        // extern const NSURLFileProtectionType _Nonnull NSURLFileProtectionNone __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("NSURLFileProtectionNone", "__Internal")]
        NSString NSURLFileProtectionNone { get; }

        // extern const NSURLFileProtectionType _Nonnull NSURLFileProtectionComplete __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("NSURLFileProtectionComplete", "__Internal")]
        NSString NSURLFileProtectionComplete { get; }

        // extern const NSURLFileProtectionType _Nonnull NSURLFileProtectionCompleteUnlessOpen __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("NSURLFileProtectionCompleteUnlessOpen", "__Internal")]
        NSString NSURLFileProtectionCompleteUnlessOpen { get; }

        // extern const NSURLFileProtectionType _Nonnull NSURLFileProtectionCompleteUntilFirstUserAuthentication __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("NSURLFileProtectionCompleteUntilFirstUserAuthentication", "__Internal")]
        NSString NSURLFileProtectionCompleteUntilFirstUserAuthentication { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeLocalizedFormatDescriptionKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeLocalizedFormatDescriptionKey", "__Internal")]
        NSString NSURLVolumeLocalizedFormatDescriptionKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeTotalCapacityKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeTotalCapacityKey", "__Internal")]
        NSString NSURLVolumeTotalCapacityKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeAvailableCapacityKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeAvailableCapacityKey", "__Internal")]
        NSString NSURLVolumeAvailableCapacityKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeResourceCountKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeResourceCountKey", "__Internal")]
        NSString NSURLVolumeResourceCountKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsPersistentIDsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeSupportsPersistentIDsKey", "__Internal")]
        NSString NSURLVolumeSupportsPersistentIDsKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsSymbolicLinksKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeSupportsSymbolicLinksKey", "__Internal")]
        NSString NSURLVolumeSupportsSymbolicLinksKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsHardLinksKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeSupportsHardLinksKey", "__Internal")]
        NSString NSURLVolumeSupportsHardLinksKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsJournalingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeSupportsJournalingKey", "__Internal")]
        NSString NSURLVolumeSupportsJournalingKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeIsJournalingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeIsJournalingKey", "__Internal")]
        NSString NSURLVolumeIsJournalingKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsSparseFilesKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeSupportsSparseFilesKey", "__Internal")]
        NSString NSURLVolumeSupportsSparseFilesKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsZeroRunsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeSupportsZeroRunsKey", "__Internal")]
        NSString NSURLVolumeSupportsZeroRunsKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsCaseSensitiveNamesKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeSupportsCaseSensitiveNamesKey", "__Internal")]
        NSString NSURLVolumeSupportsCaseSensitiveNamesKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsCasePreservedNamesKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLVolumeSupportsCasePreservedNamesKey", "__Internal")]
        NSString NSURLVolumeSupportsCasePreservedNamesKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsRootDirectoryDatesKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeSupportsRootDirectoryDatesKey", "__Internal")]
        NSString NSURLVolumeSupportsRootDirectoryDatesKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsVolumeSizesKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeSupportsVolumeSizesKey", "__Internal")]
        NSString NSURLVolumeSupportsVolumeSizesKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsRenamingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeSupportsRenamingKey", "__Internal")]
        NSString NSURLVolumeSupportsRenamingKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsAdvisoryFileLockingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeSupportsAdvisoryFileLockingKey", "__Internal")]
        NSString NSURLVolumeSupportsAdvisoryFileLockingKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsExtendedSecurityKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeSupportsExtendedSecurityKey", "__Internal")]
        NSString NSURLVolumeSupportsExtendedSecurityKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeIsBrowsableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeIsBrowsableKey", "__Internal")]
        NSString NSURLVolumeIsBrowsableKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeMaximumFileSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeMaximumFileSizeKey", "__Internal")]
        NSString NSURLVolumeMaximumFileSizeKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeIsEjectableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeIsEjectableKey", "__Internal")]
        NSString NSURLVolumeIsEjectableKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeIsRemovableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeIsRemovableKey", "__Internal")]
        NSString NSURLVolumeIsRemovableKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeIsInternalKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeIsInternalKey", "__Internal")]
        NSString NSURLVolumeIsInternalKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeIsAutomountedKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeIsAutomountedKey", "__Internal")]
        NSString NSURLVolumeIsAutomountedKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeIsLocalKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeIsLocalKey", "__Internal")]
        NSString NSURLVolumeIsLocalKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeIsReadOnlyKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeIsReadOnlyKey", "__Internal")]
        NSString NSURLVolumeIsReadOnlyKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeCreationDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeCreationDateKey", "__Internal")]
        NSString NSURLVolumeCreationDateKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeURLForRemountingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeURLForRemountingKey", "__Internal")]
        NSString NSURLVolumeURLForRemountingKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeUUIDStringKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeUUIDStringKey", "__Internal")]
        NSString NSURLVolumeUUIDStringKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeNameKey", "__Internal")]
        NSString NSURLVolumeNameKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeLocalizedNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLVolumeLocalizedNameKey", "__Internal")]
        NSString NSURLVolumeLocalizedNameKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeIsEncryptedKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("NSURLVolumeIsEncryptedKey", "__Internal")]
        NSString NSURLVolumeIsEncryptedKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeIsRootFileSystemKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("NSURLVolumeIsRootFileSystemKey", "__Internal")]
        NSString NSURLVolumeIsRootFileSystemKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsCompressionKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("NSURLVolumeSupportsCompressionKey", "__Internal")]
        NSString NSURLVolumeSupportsCompressionKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsFileCloningKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("NSURLVolumeSupportsFileCloningKey", "__Internal")]
        NSString NSURLVolumeSupportsFileCloningKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsSwapRenamingKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("NSURLVolumeSupportsSwapRenamingKey", "__Internal")]
        NSString NSURLVolumeSupportsSwapRenamingKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsExclusiveRenamingKey __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("NSURLVolumeSupportsExclusiveRenamingKey", "__Internal")]
        NSString NSURLVolumeSupportsExclusiveRenamingKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsImmutableFilesKey __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("NSURLVolumeSupportsImmutableFilesKey", "__Internal")]
        NSString NSURLVolumeSupportsImmutableFilesKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsAccessPermissionsKey __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("NSURLVolumeSupportsAccessPermissionsKey", "__Internal")]
        NSString NSURLVolumeSupportsAccessPermissionsKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeAvailableCapacityForImportantUsageKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [NoWatch, NoTV, Mac(10, 13), iOS(11, 0)]
        [Field("NSURLVolumeAvailableCapacityForImportantUsageKey", "__Internal")]
        NSString NSURLVolumeAvailableCapacityForImportantUsageKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLVolumeAvailableCapacityForOpportunisticUsageKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [NoWatch, NoTV, Mac(10, 13), iOS(11, 0)]
        [Field("NSURLVolumeAvailableCapacityForOpportunisticUsageKey", "__Internal")]
        NSString NSURLVolumeAvailableCapacityForOpportunisticUsageKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLIsUbiquitousItemKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLIsUbiquitousItemKey", "__Internal")]
        NSString NSURLIsUbiquitousItemKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemHasUnresolvedConflictsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLUbiquitousItemHasUnresolvedConflictsKey", "__Internal")]
        NSString NSURLUbiquitousItemHasUnresolvedConflictsKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemIsDownloadedKey __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=5.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.7, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
        [Introduced(PlatformName.iOS, 5, 0, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
        [Introduced(PlatformName.MacOSX, 10, 7, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
        [Field("NSURLUbiquitousItemIsDownloadedKey", "__Internal")]
        NSString NSURLUbiquitousItemIsDownloadedKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemIsDownloadingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLUbiquitousItemIsDownloadingKey", "__Internal")]
        NSString NSURLUbiquitousItemIsDownloadingKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemIsUploadedKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLUbiquitousItemIsUploadedKey", "__Internal")]
        NSString NSURLUbiquitousItemIsUploadedKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemIsUploadingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSURLUbiquitousItemIsUploadingKey", "__Internal")]
        NSString NSURLUbiquitousItemIsUploadingKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemPercentDownloadedKey __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=5.0, deprecated=6.0))) __attribute__((availability(macos, introduced=10.7, deprecated=10.8)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
        [Introduced(PlatformName.iOS, 5, 0, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
        [Deprecated(PlatformName.iOS, 6, 0, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
        [Introduced(PlatformName.MacOSX, 10, 7, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
        [Deprecated(PlatformName.MacOSX, 10, 8, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
        [Field("NSURLUbiquitousItemPercentDownloadedKey", "__Internal")]
        NSString NSURLUbiquitousItemPercentDownloadedKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemPercentUploadedKey __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=5.0, deprecated=6.0))) __attribute__((availability(macos, introduced=10.7, deprecated=10.8)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
        [Introduced(PlatformName.iOS, 5, 0, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
        [Deprecated(PlatformName.iOS, 6, 0, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
        [Introduced(PlatformName.MacOSX, 10, 7, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
        [Deprecated(PlatformName.MacOSX, 10, 8, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
        [Field("NSURLUbiquitousItemPercentUploadedKey", "__Internal")]
        NSString NSURLUbiquitousItemPercentUploadedKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemDownloadingStatusKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSURLUbiquitousItemDownloadingStatusKey", "__Internal")]
        NSString NSURLUbiquitousItemDownloadingStatusKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemDownloadingErrorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSURLUbiquitousItemDownloadingErrorKey", "__Internal")]
        NSString NSURLUbiquitousItemDownloadingErrorKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemUploadingErrorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSURLUbiquitousItemUploadingErrorKey", "__Internal")]
        NSString NSURLUbiquitousItemUploadingErrorKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemDownloadRequestedKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSURLUbiquitousItemDownloadRequestedKey", "__Internal")]
        NSString NSURLUbiquitousItemDownloadRequestedKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemContainerDisplayNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSURLUbiquitousItemContainerDisplayNameKey", "__Internal")]
        NSString NSURLUbiquitousItemContainerDisplayNameKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemIsSharedKey __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSURLUbiquitousItemIsSharedKey", "__Internal")]
        NSString NSURLUbiquitousItemIsSharedKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousSharedItemCurrentUserRoleKey __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSURLUbiquitousSharedItemCurrentUserRoleKey", "__Internal")]
        NSString NSURLUbiquitousSharedItemCurrentUserRoleKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousSharedItemCurrentUserPermissionsKey __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSURLUbiquitousSharedItemCurrentUserPermissionsKey", "__Internal")]
        NSString NSURLUbiquitousSharedItemCurrentUserPermissionsKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousSharedItemOwnerNameComponentsKey __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSURLUbiquitousSharedItemOwnerNameComponentsKey", "__Internal")]
        NSString NSURLUbiquitousSharedItemOwnerNameComponentsKey { get; }

        // extern const NSURLResourceKey _Nonnull NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey", "__Internal")]
        NSString NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey { get; }

        // extern const NSURLUbiquitousItemDownloadingStatus _Nonnull NSURLUbiquitousItemDownloadingStatusNotDownloaded __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSURLUbiquitousItemDownloadingStatusNotDownloaded", "__Internal")]
        NSString NSURLUbiquitousItemDownloadingStatusNotDownloaded { get; }

        // extern const NSURLUbiquitousItemDownloadingStatus _Nonnull NSURLUbiquitousItemDownloadingStatusDownloaded __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSURLUbiquitousItemDownloadingStatusDownloaded", "__Internal")]
        NSString NSURLUbiquitousItemDownloadingStatusDownloaded { get; }

        // extern const NSURLUbiquitousItemDownloadingStatus _Nonnull NSURLUbiquitousItemDownloadingStatusCurrent __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSURLUbiquitousItemDownloadingStatusCurrent", "__Internal")]
        NSString NSURLUbiquitousItemDownloadingStatusCurrent { get; }

        // extern const NSURLUbiquitousSharedItemRole _Nonnull NSURLUbiquitousSharedItemRoleOwner __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSURLUbiquitousSharedItemRoleOwner", "__Internal")]
        NSString NSURLUbiquitousSharedItemRoleOwner { get; }

        // extern const NSURLUbiquitousSharedItemRole _Nonnull NSURLUbiquitousSharedItemRoleParticipant __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSURLUbiquitousSharedItemRoleParticipant", "__Internal")]
        NSString NSURLUbiquitousSharedItemRoleParticipant { get; }

        // extern const NSURLUbiquitousSharedItemPermissions _Nonnull NSURLUbiquitousSharedItemPermissionsReadOnly __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSURLUbiquitousSharedItemPermissionsReadOnly", "__Internal")]
        NSString NSURLUbiquitousSharedItemPermissionsReadOnly { get; }

        // extern const NSURLUbiquitousSharedItemPermissions _Nonnull NSURLUbiquitousSharedItemPermissionsReadWrite __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSURLUbiquitousSharedItemPermissionsReadWrite", "__Internal")]
        NSString NSURLUbiquitousSharedItemPermissionsReadWrite { get; }
    }

    // @interface NSPromisedItems (NSURL)
    [Category]
    [BaseType(typeof(NSUrl))]
    interface NSURL_NSPromisedItems
    {
        // -(BOOL)getPromisedItemResourceValue:(id  _Nullable * _Nonnull)value forKey:(NSURLResourceKey _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("getPromisedItemResourceValue:forKey:error:")]
        bool GetPromisedItemResourceValue([NullAllowed] out NSObject value, string key, [NullAllowed] out NSError error);

        // -(NSDictionary<NSURLResourceKey,id> * _Nullable)promisedItemResourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nonnull)keys error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("promisedItemResourceValuesForKeys:error:")]
        [return: NullAllowed]
        NSDictionary<NSString, NSObject> PromisedItemResourceValuesForKeys(string[] keys, [NullAllowed] out NSError error);

        // -(BOOL)checkPromisedItemIsReachableAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("checkPromisedItemIsReachableAndReturnError:")]
        bool CheckPromisedItemIsReachableAndReturnError([NullAllowed] out NSError error);
    }

    // @interface NSItemProvider (NSURL) <NSItemProviderReading, NSItemProviderWriting>
    [Category]
    [BaseType(typeof(NSUrl))]
    interface NSURL_NSItemProvider : INSItemProviderReading, INSItemProviderWriting
    {
    }

    // @interface NSURLQueryItem : NSObject <NSSecureCoding, NSCopying>
    [iOS(8, 0)]
    [BaseType(typeof(NSObject))]
    interface NSURLQueryItem : INSSecureCoding, INSCopying
    {
        // -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name value:(NSString * _Nullable)value __attribute__((objc_designated_initializer));
        [Export("initWithName:value:")]
        [DesignatedInitializer]
        IntPtr Constructor(string name, [NullAllowed] string value);

        // +(instancetype _Nonnull)queryItemWithName:(NSString * _Nonnull)name value:(NSString * _Nullable)value;
        [Static]
        [Export("queryItemWithName:value:")]
        NSUrlQueryItem QueryItemWithName(string name, [NullAllowed] string value);

        // @property (readonly) NSString * _Nonnull name;
        [Export("name")]
        string Name { get; }

        // @property (readonly) NSString * _Nullable value;
        [NullAllowed, Export("value")]
        string Value { get; }
    }

    // @interface NSURLComponents : NSObject <NSCopying>
    [iOS(7, 0)]
    [BaseType(typeof(NSObject))]
    interface NSURLComponents : INSCopying
    {
        // -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url resolvingAgainstBaseURL:(BOOL)resolve;
        [Export("initWithURL:resolvingAgainstBaseURL:")]
        IntPtr Constructor(NSUrl url, bool resolve);

        // +(instancetype _Nullable)componentsWithURL:(NSURL * _Nonnull)url resolvingAgainstBaseURL:(BOOL)resolve;
        [Static]
        [Export("componentsWithURL:resolvingAgainstBaseURL:")]
        [return: NullAllowed]
        NSUrlComponents ComponentsWithURL(NSUrl url, bool resolve);

        // -(instancetype _Nullable)initWithString:(NSString * _Nonnull)URLString;
        [Export("initWithString:")]
        IntPtr Constructor(string URLString);

        // +(instancetype _Nullable)componentsWithString:(NSString * _Nonnull)URLString;
        [Static]
        [Export("componentsWithString:")]
        [return: NullAllowed]
        NSUrlComponents ComponentsWithString(string URLString);

        // @property (readonly, copy) NSURL * _Nullable URL;
        [NullAllowed, Export("URL", ArgumentSemantic.Copy)]
        NSUrl URL { get; }

        // -(NSURL * _Nullable)URLRelativeToURL:(NSURL * _Nullable)baseURL;
        [Export("URLRelativeToURL:")]
        [return: NullAllowed]
        NSUrl URLRelativeToURL([NullAllowed] NSUrl baseURL);

        // @property (readonly, copy) NSString * _Nullable string __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [NullAllowed, Export("string")]
        string String { get; }

        // @property (copy) NSString * _Nullable scheme;
        [NullAllowed, Export("scheme")]
        string Scheme { get; set; }

        // @property (copy) NSString * _Nullable user;
        [NullAllowed, Export("user")]
        string User { get; set; }

        // @property (copy) NSString * _Nullable password;
        [NullAllowed, Export("password")]
        string Password { get; set; }

        // @property (copy) NSString * _Nullable host;
        [NullAllowed, Export("host")]
        string Host { get; set; }

        // @property (copy) NSNumber * _Nullable port;
        [NullAllowed, Export("port", ArgumentSemantic.Copy)]
        NSNumber Port { get; set; }

        // @property (copy) NSString * _Nullable path;
        [NullAllowed, Export("path")]
        string Path { get; set; }

        // @property (copy) NSString * _Nullable query;
        [NullAllowed, Export("query")]
        string Query { get; set; }

        // @property (copy) NSString * _Nullable fragment;
        [NullAllowed, Export("fragment")]
        string Fragment { get; set; }

        // @property (copy) NSString * _Nullable percentEncodedUser;
        [NullAllowed, Export("percentEncodedUser")]
        string PercentEncodedUser { get; set; }

        // @property (copy) NSString * _Nullable percentEncodedPassword;
        [NullAllowed, Export("percentEncodedPassword")]
        string PercentEncodedPassword { get; set; }

        // @property (copy) NSString * _Nullable percentEncodedHost;
        [NullAllowed, Export("percentEncodedHost")]
        string PercentEncodedHost { get; set; }

        // @property (copy) NSString * _Nullable percentEncodedPath;
        [NullAllowed, Export("percentEncodedPath")]
        string PercentEncodedPath { get; set; }

        // @property (copy) NSString * _Nullable percentEncodedQuery;
        [NullAllowed, Export("percentEncodedQuery")]
        string PercentEncodedQuery { get; set; }

        // @property (copy) NSString * _Nullable percentEncodedFragment;
        [NullAllowed, Export("percentEncodedFragment")]
        string PercentEncodedFragment { get; set; }

        // @property (readonly) NSRange rangeOfScheme __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("rangeOfScheme")]
        NSRange RangeOfScheme { get; }

        // @property (readonly) NSRange rangeOfUser __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("rangeOfUser")]
        NSRange RangeOfUser { get; }

        // @property (readonly) NSRange rangeOfPassword __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("rangeOfPassword")]
        NSRange RangeOfPassword { get; }

        // @property (readonly) NSRange rangeOfHost __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("rangeOfHost")]
        NSRange RangeOfHost { get; }

        // @property (readonly) NSRange rangeOfPort __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("rangeOfPort")]
        NSRange RangeOfPort { get; }

        // @property (readonly) NSRange rangeOfPath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("rangeOfPath")]
        NSRange RangeOfPath { get; }

        // @property (readonly) NSRange rangeOfQuery __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("rangeOfQuery")]
        NSRange RangeOfQuery { get; }

        // @property (readonly) NSRange rangeOfFragment __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("rangeOfFragment")]
        NSRange RangeOfFragment { get; }

        // @property (copy) NSArray<NSURLQueryItem *> * _Nullable queryItems __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [NullAllowed, Export("queryItems", ArgumentSemantic.Copy)]
        NSUrlQueryItem[] QueryItems { get; set; }

        // @property (copy) NSArray<NSURLQueryItem *> * _Nullable percentEncodedQueryItems __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [NullAllowed, Export("percentEncodedQueryItems", ArgumentSemantic.Copy)]
        NSUrlQueryItem[] PercentEncodedQueryItems { get; set; }
    }

    // @interface NSURLUtilities (NSCharacterSet)
    [Category]
    [BaseType(typeof(NSCharacterSet))]
    interface NSCharacterSet_NSURLUtilities
    {
        // @property (readonly, copy, class) NSCharacterSet * _Nonnull URLUserAllowedCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Static]
        [Export("URLUserAllowedCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet URLUserAllowedCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull URLPasswordAllowedCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Static]
        [Export("URLPasswordAllowedCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet URLPasswordAllowedCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull URLHostAllowedCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Static]
        [Export("URLHostAllowedCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet URLHostAllowedCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull URLPathAllowedCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Static]
        [Export("URLPathAllowedCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet URLPathAllowedCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull URLQueryAllowedCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Static]
        [Export("URLQueryAllowedCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet URLQueryAllowedCharacterSet { get; }

        // @property (readonly, copy, class) NSCharacterSet * _Nonnull URLFragmentAllowedCharacterSet __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Static]
        [Export("URLFragmentAllowedCharacterSet", ArgumentSemantic.Copy)]
        NSCharacterSet URLFragmentAllowedCharacterSet { get; }
    }

    // @interface NSURLUtilities (NSString)
    [Category]
    [BaseType(typeof(NSString))]
    interface NSString_NSURLUtilities
    {
        // -(NSString * _Nullable)stringByAddingPercentEncodingWithAllowedCharacters:(NSCharacterSet * _Nonnull)allowedCharacters __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("stringByAddingPercentEncodingWithAllowedCharacters:")]
        [return: NullAllowed]
        string StringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet allowedCharacters);

        // @property (readonly, copy) NSString * _Nullable stringByRemovingPercentEncoding __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [NullAllowed, Export("stringByRemovingPercentEncoding")]
        string StringByRemovingPercentEncoding { get; }

        // -(NSString * _Nullable)stringByAddingPercentEscapesUsingEncoding:(NSStringEncoding)enc __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.11)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
        [Deprecated(PlatformName.MacOSX, 10, 11, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
        [Export("stringByAddingPercentEscapesUsingEncoding:")]
        [return: NullAllowed]
        string StringByAddingPercentEscapesUsingEncoding(nuint enc);

        // -(NSString * _Nullable)stringByReplacingPercentEscapesUsingEncoding:(NSStringEncoding)enc __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.11)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
        [Deprecated(PlatformName.MacOSX, 10, 11, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
        [Export("stringByReplacingPercentEscapesUsingEncoding:")]
        [return: NullAllowed]
        string StringByReplacingPercentEscapesUsingEncoding(nuint enc);
    }

    // @interface NSURLPathUtilities (NSURL)
    [Category]
    [BaseType(typeof(NSUrl))]
    interface NSURL_NSURLPathUtilities
    {
        // +(NSURL * _Nullable)fileURLWithPathComponents:(NSArray<NSString *> * _Nonnull)components __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("fileURLWithPathComponents:")]
        [return: NullAllowed]
        NSUrl FileURLWithPathComponents(string[] components);

        // @property (readonly, copy) NSArray<NSString *> * _Nullable pathComponents __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("pathComponents", ArgumentSemantic.Copy)]
        string[] PathComponents { get; }

        // @property (readonly, copy) NSString * _Nullable lastPathComponent __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("lastPathComponent")]
        string LastPathComponent { get; }

        // @property (readonly, copy) NSString * _Nullable pathExtension __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("pathExtension")]
        string PathExtension { get; }

        // -(NSURL * _Nullable)URLByAppendingPathComponent:(NSString * _Nonnull)pathComponent __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("URLByAppendingPathComponent:")]
        [return: NullAllowed]
        NSUrl URLByAppendingPathComponent(string pathComponent);

        // -(NSURL * _Nullable)URLByAppendingPathComponent:(NSString * _Nonnull)pathComponent isDirectory:(BOOL)isDirectory __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("URLByAppendingPathComponent:isDirectory:")]
        [return: NullAllowed]
        NSUrl URLByAppendingPathComponent(string pathComponent, bool isDirectory);

        // @property (readonly, copy) NSURL * _Nullable URLByDeletingLastPathComponent __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("URLByDeletingLastPathComponent", ArgumentSemantic.Copy)]
        NSUrl URLByDeletingLastPathComponent { get; }

        // -(NSURL * _Nullable)URLByAppendingPathExtension:(NSString * _Nonnull)pathExtension __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("URLByAppendingPathExtension:")]
        [return: NullAllowed]
        NSUrl URLByAppendingPathExtension(string pathExtension);

        // @property (readonly, copy) NSURL * _Nullable URLByDeletingPathExtension __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("URLByDeletingPathExtension", ArgumentSemantic.Copy)]
        NSUrl URLByDeletingPathExtension { get; }

        // @property (readonly, copy) NSURL * _Nullable URLByStandardizingPath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("URLByStandardizingPath", ArgumentSemantic.Copy)]
        NSUrl URLByStandardizingPath { get; }

        // @property (readonly, copy) NSURL * _Nullable URLByResolvingSymlinksInPath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("URLByResolvingSymlinksInPath", ArgumentSemantic.Copy)]
        NSUrl URLByResolvingSymlinksInPath { get; }
    }

    // @interface NSFileSecurity : NSObject <NSCopying, NSSecureCoding>
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface NSFileSecurity : INSCopying, INSSecureCoding
    {
        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull NSFileManagerUnmountDissentingProcessIdentifierErrorKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11)));
        [NoWatch, NoTV, NoiOS, Mac(10, 11)]
        [Field("NSFileManagerUnmountDissentingProcessIdentifierErrorKey", "__Internal")]
        NSString NSFileManagerUnmountDissentingProcessIdentifierErrorKey { get; }

        // extern const NSNotificationName _Nonnull NSUbiquityIdentityDidChangeNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Field("NSUbiquityIdentityDidChangeNotification", "__Internal")]
        NSString NSUbiquityIdentityDidChangeNotification { get; }
    }

    // @interface NSFileManager : NSObject
    [BaseType(typeof(NSObject))]
    interface NSFileManager
    {
        // @property (readonly, strong, class) NSFileManager * _Nonnull defaultManager;
        [Static]
        [Export("defaultManager", ArgumentSemantic.Strong)]
        NSFileManager DefaultManager { get; }

        // -(NSArray<NSURL *> * _Nullable)mountedVolumeURLsIncludingResourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nullable)propertyKeys options:(NSVolumeEnumerationOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("mountedVolumeURLsIncludingResourceValuesForKeys:options:")]
        [return: NullAllowed]
        NSUrl[] MountedVolumeURLsIncludingResourceValuesForKeys([NullAllowed] string[] propertyKeys, NSVolumeEnumerationOptions options);

        // -(void)unmountVolumeAtURL:(NSURL * _Nonnull)url options:(NSFileManagerUnmountOptions)mask completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11)));
        [NoWatch, NoTV, NoiOS, Mac(10, 11)]
        [Export("unmountVolumeAtURL:options:completionHandler:")]
        void UnmountVolumeAtURL(NSUrl url, NSFileManagerUnmountOptions mask, Action<NSError> completionHandler);

        // -(NSArray<NSURL *> * _Nullable)contentsOfDirectoryAtURL:(NSURL * _Nonnull)url includingPropertiesForKeys:(NSArray<NSURLResourceKey> * _Nullable)keys options:(NSDirectoryEnumerationOptions)mask error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:")]
        [return: NullAllowed]
        NSUrl[] ContentsOfDirectoryAtURL(NSUrl url, [NullAllowed] string[] keys, NSDirectoryEnumerationOptions mask, [NullAllowed] out NSError error);

        // -(NSArray<NSURL *> * _Nonnull)URLsForDirectory:(NSSearchPathDirectory)directory inDomains:(NSSearchPathDomainMask)domainMask __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("URLsForDirectory:inDomains:")]
        NSUrl[] URLsForDirectory(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask);

        // -(NSURL * _Nullable)URLForDirectory:(NSSearchPathDirectory)directory inDomain:(NSSearchPathDomainMask)domain appropriateForURL:(NSURL * _Nullable)url create:(BOOL)shouldCreate error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("URLForDirectory:inDomain:appropriateForURL:create:error:")]
        [return: NullAllowed]
        NSUrl URLForDirectory(NSSearchPathDirectory directory, NSSearchPathDomainMask domain, [NullAllowed] NSUrl url, bool shouldCreate, [NullAllowed] out NSError error);

        // -(BOOL)getRelationship:(NSURLRelationship * _Nonnull)outRelationship ofDirectoryAtURL:(NSURL * _Nonnull)directoryURL toItemAtURL:(NSURL * _Nonnull)otherURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("getRelationship:ofDirectoryAtURL:toItemAtURL:error:")]
        unsafe bool GetRelationship(NSURLRelationship* outRelationship, NSUrl directoryURL, NSUrl otherURL, [NullAllowed] out NSError error);

        // -(BOOL)getRelationship:(NSURLRelationship * _Nonnull)outRelationship ofDirectory:(NSSearchPathDirectory)directory inDomain:(NSSearchPathDomainMask)domainMask toItemAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("getRelationship:ofDirectory:inDomain:toItemAtURL:error:")]
        unsafe bool GetRelationship(NSURLRelationship* outRelationship, NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, NSUrl url, [NullAllowed] out NSError error);

        // -(BOOL)createDirectoryAtURL:(NSURL * _Nonnull)url withIntermediateDirectories:(BOOL)createIntermediates attributes:(NSDictionary<NSFileAttributeKey,id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("createDirectoryAtURL:withIntermediateDirectories:attributes:error:")]
        bool CreateDirectoryAtURL(NSUrl url, bool createIntermediates, [NullAllowed] NSDictionary<NSString, NSObject> attributes, [NullAllowed] out NSError error);

        // -(BOOL)createSymbolicLinkAtURL:(NSURL * _Nonnull)url withDestinationURL:(NSURL * _Nonnull)destURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("createSymbolicLinkAtURL:withDestinationURL:error:")]
        bool CreateSymbolicLinkAtURL(NSUrl url, NSUrl destURL, [NullAllowed] out NSError error);

        [Wrap("WeakDelegate")]
        [NullAllowed]
        NSFileManagerDelegate Delegate { get; set; }

        // @property (assign) id<NSFileManagerDelegate> _Nullable delegate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // -(BOOL)setAttributes:(NSDictionary<NSFileAttributeKey,id> * _Nonnull)attributes ofItemAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("setAttributes:ofItemAtPath:error:")]
        bool SetAttributes(NSDictionary<NSString, NSObject> attributes, string path, [NullAllowed] out NSError error);

        // -(BOOL)createDirectoryAtPath:(NSString * _Nonnull)path withIntermediateDirectories:(BOOL)createIntermediates attributes:(NSDictionary<NSFileAttributeKey,id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("createDirectoryAtPath:withIntermediateDirectories:attributes:error:")]
        bool CreateDirectoryAtPath(string path, bool createIntermediates, [NullAllowed] NSDictionary<NSString, NSObject> attributes, [NullAllowed] out NSError error);

        // -(NSArray<NSString *> * _Nullable)contentsOfDirectoryAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("contentsOfDirectoryAtPath:error:")]
        [return: NullAllowed]
        string[] ContentsOfDirectoryAtPath(string path, [NullAllowed] out NSError error);

        // -(NSArray<NSString *> * _Nullable)subpathsOfDirectoryAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("subpathsOfDirectoryAtPath:error:")]
        [return: NullAllowed]
        string[] SubpathsOfDirectoryAtPath(string path, [NullAllowed] out NSError error);

        // -(NSDictionary<NSFileAttributeKey,id> * _Nullable)attributesOfItemAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("attributesOfItemAtPath:error:")]
        [return: NullAllowed]
        NSDictionary<NSString, NSObject> AttributesOfItemAtPath(string path, [NullAllowed] out NSError error);

        // -(NSDictionary<NSFileAttributeKey,id> * _Nullable)attributesOfFileSystemForPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("attributesOfFileSystemForPath:error:")]
        [return: NullAllowed]
        NSDictionary<NSString, NSObject> AttributesOfFileSystemForPath(string path, [NullAllowed] out NSError error);

        // -(BOOL)createSymbolicLinkAtPath:(NSString * _Nonnull)path withDestinationPath:(NSString * _Nonnull)destPath error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("createSymbolicLinkAtPath:withDestinationPath:error:")]
        bool CreateSymbolicLinkAtPath(string path, string destPath, [NullAllowed] out NSError error);

        // -(NSString * _Nullable)destinationOfSymbolicLinkAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("destinationOfSymbolicLinkAtPath:error:")]
        [return: NullAllowed]
        string DestinationOfSymbolicLinkAtPath(string path, [NullAllowed] out NSError error);

        // -(BOOL)copyItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("copyItemAtPath:toPath:error:")]
        bool CopyItemAtPath(string srcPath, string dstPath, [NullAllowed] out NSError error);

        // -(BOOL)moveItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("moveItemAtPath:toPath:error:")]
        bool MoveItemAtPath(string srcPath, string dstPath, [NullAllowed] out NSError error);

        // -(BOOL)linkItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("linkItemAtPath:toPath:error:")]
        bool LinkItemAtPath(string srcPath, string dstPath, [NullAllowed] out NSError error);

        // -(BOOL)removeItemAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("removeItemAtPath:error:")]
        bool RemoveItemAtPath(string path, [NullAllowed] out NSError error);

        // -(BOOL)copyItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("copyItemAtURL:toURL:error:")]
        bool CopyItemAtURL(NSUrl srcURL, NSUrl dstURL, [NullAllowed] out NSError error);

        // -(BOOL)moveItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("moveItemAtURL:toURL:error:")]
        bool MoveItemAtURL(NSUrl srcURL, NSUrl dstURL, [NullAllowed] out NSError error);

        // -(BOOL)linkItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("linkItemAtURL:toURL:error:")]
        bool LinkItemAtURL(NSUrl srcURL, NSUrl dstURL, [NullAllowed] out NSError error);

        // -(BOOL)removeItemAtURL:(NSURL * _Nonnull)URL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("removeItemAtURL:error:")]
        bool RemoveItemAtURL(NSUrl URL, [NullAllowed] out NSError error);

        // -(BOOL)trashItemAtURL:(NSURL * _Nonnull)url resultingItemURL:(NSURL * _Nullable * _Nullable)outResultingURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.8)));
        [NoWatch, NoTV, Mac(10, 8), iOS(11, 0)]
        [Export("trashItemAtURL:resultingItemURL:error:")]
        bool TrashItemAtURL(NSUrl url, [NullAllowed] out NSUrl outResultingURL, [NullAllowed] out NSError error);

        // -(NSDictionary * _Nullable)fileAttributesAtPath:(NSString * _Nonnull)path traverseLink:(BOOL)yorn __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -attributesOfItemAtPath:error: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -attributesOfItemAtPath:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -attributesOfItemAtPath:error: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -attributesOfItemAtPath:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -attributesOfItemAtPath:error: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -attributesOfItemAtPath:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -attributesOfItemAtPath:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 5, message: "Use -attributesOfItemAtPath:error: instead")]
        [Export("fileAttributesAtPath:traverseLink:")]
        [return: NullAllowed]
        NSDictionary FileAttributesAtPath(string path, bool yorn);

        // -(BOOL)changeFileAttributes:(NSDictionary * _Nonnull)attributes atPath:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 5, message: "Use -setAttributes:ofItemAtPath:error: instead")]
        [Export("changeFileAttributes:atPath:")]
        bool ChangeFileAttributes(NSDictionary attributes, string path);

        // -(NSArray * _Nullable)directoryContentsAtPath:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 5, message: "Use -contentsOfDirectoryAtPath:error: instead")]
        [Export("directoryContentsAtPath:")]
        [Verify(StronglyTypedNSArray)]
        [return: NullAllowed]
        NSObject[] DirectoryContentsAtPath(string path);

        // -(NSDictionary * _Nullable)fileSystemAttributesAtPath:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 5, message: "Use -attributesOfFileSystemForPath:error: instead")]
        [Export("fileSystemAttributesAtPath:")]
        [return: NullAllowed]
        NSDictionary FileSystemAttributesAtPath(string path);

        // -(NSString * _Nullable)pathContentOfSymbolicLinkAtPath:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
        [Deprecated(PlatformName.MacOSX, 10, 5, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
        [Export("pathContentOfSymbolicLinkAtPath:")]
        [return: NullAllowed]
        string PathContentOfSymbolicLinkAtPath(string path);

        // -(BOOL)createSymbolicLinkAtPath:(NSString * _Nonnull)path pathContent:(NSString * _Nonnull)otherpath __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 5, message: "Use -createSymbolicLinkAtPath:error: instead")]
        [Export("createSymbolicLinkAtPath:pathContent:")]
        bool CreateSymbolicLinkAtPath(string path, string otherpath);

        // -(BOOL)createDirectoryAtPath:(NSString * _Nonnull)path attributes:(NSDictionary * _Nonnull)attributes __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 5, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
        [Export("createDirectoryAtPath:attributes:")]
        bool CreateDirectoryAtPath(string path, NSDictionary attributes);

        // @property (readonly, copy) NSString * _Nonnull currentDirectoryPath;
        [Export("currentDirectoryPath")]
        string CurrentDirectoryPath { get; }

        // -(BOOL)changeCurrentDirectoryPath:(NSString * _Nonnull)path;
        [Export("changeCurrentDirectoryPath:")]
        bool ChangeCurrentDirectoryPath(string path);

        // -(BOOL)fileExistsAtPath:(NSString * _Nonnull)path;
        [Export("fileExistsAtPath:")]
        bool FileExistsAtPath(string path);

        // -(BOOL)fileExistsAtPath:(NSString * _Nonnull)path isDirectory:(BOOL * _Nullable)isDirectory;
        [Export("fileExistsAtPath:isDirectory:")]
        unsafe bool FileExistsAtPath(string path, [NullAllowed] bool* isDirectory);

        // -(BOOL)isReadableFileAtPath:(NSString * _Nonnull)path;
        [Export("isReadableFileAtPath:")]
        bool IsReadableFileAtPath(string path);

        // -(BOOL)isWritableFileAtPath:(NSString * _Nonnull)path;
        [Export("isWritableFileAtPath:")]
        bool IsWritableFileAtPath(string path);

        // -(BOOL)isExecutableFileAtPath:(NSString * _Nonnull)path;
        [Export("isExecutableFileAtPath:")]
        bool IsExecutableFileAtPath(string path);

        // -(BOOL)isDeletableFileAtPath:(NSString * _Nonnull)path;
        [Export("isDeletableFileAtPath:")]
        bool IsDeletableFileAtPath(string path);

        // -(BOOL)contentsEqualAtPath:(NSString * _Nonnull)path1 andPath:(NSString * _Nonnull)path2;
        [Export("contentsEqualAtPath:andPath:")]
        bool ContentsEqualAtPath(string path1, string path2);

        // -(NSString * _Nonnull)displayNameAtPath:(NSString * _Nonnull)path;
        [Export("displayNameAtPath:")]
        string DisplayNameAtPath(string path);

        // -(NSArray<NSString *> * _Nullable)componentsToDisplayForPath:(NSString * _Nonnull)path;
        [Export("componentsToDisplayForPath:")]
        [return: NullAllowed]
        string[] ComponentsToDisplayForPath(string path);

        // -(NSDirectoryEnumerator<NSString *> * _Nullable)enumeratorAtPath:(NSString * _Nonnull)path;
        [Export("enumeratorAtPath:")]
        [return: NullAllowed]
        NSDirectoryEnumerator<NSString> EnumeratorAtPath(string path);

        // -(NSDirectoryEnumerator<NSURL *> * _Nullable)enumeratorAtURL:(NSURL * _Nonnull)url includingPropertiesForKeys:(NSArray<NSURLResourceKey> * _Nullable)keys options:(NSDirectoryEnumerationOptions)mask errorHandler:(BOOL (^ _Nullable)(NSURL * _Nonnull, NSError * _Nonnull))handler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:")]
        [return: NullAllowed]
        NSDirectoryEnumerator<NSURL> EnumeratorAtURL(NSUrl url, [NullAllowed] string[] keys, NSDirectoryEnumerationOptions mask, [NullAllowed] Func<NSURL, NSError, bool> handler);

        // -(NSArray<NSString *> * _Nullable)subpathsAtPath:(NSString * _Nonnull)path;
        [Export("subpathsAtPath:")]
        [return: NullAllowed]
        string[] SubpathsAtPath(string path);

        // -(NSData * _Nullable)contentsAtPath:(NSString * _Nonnull)path;
        [Export("contentsAtPath:")]
        [return: NullAllowed]
        NSData ContentsAtPath(string path);

        // -(BOOL)createFileAtPath:(NSString * _Nonnull)path contents:(NSData * _Nullable)data attributes:(NSDictionary<NSFileAttributeKey,id> * _Nullable)attr;
        [Export("createFileAtPath:contents:attributes:")]
        bool CreateFileAtPath(string path, [NullAllowed] NSData data, [NullAllowed] NSDictionary<NSString, NSObject> attr);

        // -(const char * _Nonnull)fileSystemRepresentationWithPath:(NSString * _Nonnull)path __attribute__((objc_returns_inner_pointer));
        [Export("fileSystemRepresentationWithPath:")]
        unsafe sbyte* FileSystemRepresentationWithPath(string path);

        // -(NSString * _Nonnull)stringWithFileSystemRepresentation:(const char * _Nonnull)str length:(NSUInteger)len;
        [Export("stringWithFileSystemRepresentation:length:")]
        unsafe string StringWithFileSystemRepresentation(sbyte* str, nuint len);

        // -(BOOL)replaceItemAtURL:(NSURL * _Nonnull)originalItemURL withItemAtURL:(NSURL * _Nonnull)newItemURL backupItemName:(NSString * _Nullable)backupItemName options:(NSFileManagerItemReplacementOptions)options resultingItemURL:(NSURL * _Nullable * _Nullable)resultingURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:")]
        bool ReplaceItemAtURL(NSUrl originalItemURL, NSUrl newItemURL, [NullAllowed] string backupItemName, NSFileManagerItemReplacementOptions options, [NullAllowed] out NSUrl resultingURL, [NullAllowed] out NSError error);

        // -(BOOL)setUbiquitous:(BOOL)flag itemAtURL:(NSURL * _Nonnull)url destinationURL:(NSURL * _Nonnull)destinationURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("setUbiquitous:itemAtURL:destinationURL:error:")]
        bool SetUbiquitous(bool flag, NSUrl url, NSUrl destinationURL, [NullAllowed] out NSError error);

        // -(BOOL)isUbiquitousItemAtURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("isUbiquitousItemAtURL:")]
        bool IsUbiquitousItemAtURL(NSUrl url);

        // -(BOOL)startDownloadingUbiquitousItemAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("startDownloadingUbiquitousItemAtURL:error:")]
        bool StartDownloadingUbiquitousItemAtURL(NSUrl url, [NullAllowed] out NSError error);

        // -(BOOL)evictUbiquitousItemAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("evictUbiquitousItemAtURL:error:")]
        bool EvictUbiquitousItemAtURL(NSUrl url, [NullAllowed] out NSError error);

        // -(NSURL * _Nullable)URLForUbiquityContainerIdentifier:(NSString * _Nullable)containerIdentifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("URLForUbiquityContainerIdentifier:")]
        [return: NullAllowed]
        NSUrl URLForUbiquityContainerIdentifier([NullAllowed] string containerIdentifier);

        // -(NSURL * _Nullable)URLForPublishingUbiquitousItemAtURL:(NSURL * _Nonnull)url expirationDate:(NSDate * _Nullable * _Nullable)outDate error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("URLForPublishingUbiquitousItemAtURL:expirationDate:error:")]
        [return: NullAllowed]
        NSUrl URLForPublishingUbiquitousItemAtURL(NSUrl url, [NullAllowed] out NSDate outDate, [NullAllowed] out NSError error);

        // @property (readonly, copy) id<NSObject,NSCopying,NSCoding> _Nullable ubiquityIdentityToken __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [NullAllowed, Export("ubiquityIdentityToken", ArgumentSemantic.Copy)]
        NSObject<NSObject, NSCopying, NSCoding> UbiquityIdentityToken { get; }

        // -(void)getFileProviderServicesForItemAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSDictionary<NSFileProviderServiceName,NSFileProviderService *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [NoWatch, NoTV, Mac(10, 13), iOS(11, 0)]
        [Export("getFileProviderServicesForItemAtURL:completionHandler:")]
        void GetFileProviderServicesForItemAtURL(NSUrl url, Action<NSDictionary<NSString, NSFileProviderService>, NSError> completionHandler);

        // -(NSURL * _Nullable)containerURLForSecurityApplicationGroupIdentifier:(NSString * _Nonnull)groupIdentifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(7, 0)]
        [Export("containerURLForSecurityApplicationGroupIdentifier:")]
        [return: NullAllowed]
        NSUrl ContainerURLForSecurityApplicationGroupIdentifier(string groupIdentifier);
    }

    // @interface NSUserInformation (NSFileManager)
    [Category]
    [BaseType(typeof(NSFileManager))]
    interface NSFileManager_NSUserInformation
    {
        // @property (readonly, copy) NSURL * _Nonnull homeDirectoryForCurrentUser __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, NoiOS, Mac(10, 12)]
        [Export("homeDirectoryForCurrentUser", ArgumentSemantic.Copy)]
        NSUrl HomeDirectoryForCurrentUser { get; }

        // @property (readonly, copy) NSURL * _Nonnull temporaryDirectory __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("temporaryDirectory", ArgumentSemantic.Copy)]
        NSUrl TemporaryDirectory { get; }

        // -(NSURL * _Nullable)homeDirectoryForUser:(NSString * _Nonnull)userName __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, NoiOS, Mac(10, 12)]
        [Export("homeDirectoryForUser:")]
        [return: NullAllowed]
        NSUrl HomeDirectoryForUser(string userName);
    }

    // @interface NSCopyLinkMoveHandler (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSCopyLinkMoveHandler
    {
        // -(BOOL)fileManager:(NSFileManager * _Nonnull)fm shouldProceedAfterError:(NSDictionary * _Nonnull)errorInfo __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
        [Introduced(PlatformName.TvOS, 9, 0, message: " Handler API no longer supported")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: " Handler API no longer supported")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: " Handler API no longer supported")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: " Handler API no longer supported")]
        [Introduced(PlatformName.iOS, 2, 0, message: " Handler API no longer supported")]
        [Deprecated(PlatformName.iOS, 2, 0, message: " Handler API no longer supported")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: " Handler API no longer supported")]
        [Deprecated(PlatformName.MacOSX, 10, 5, message: " Handler API no longer supported")]
        [Export("fileManager:shouldProceedAfterError:")]
        bool FileManager(NSFileManager fm, NSDictionary errorInfo);

        // -(void)fileManager:(NSFileManager * _Nonnull)fm willProcessPath:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Handler API no longer supported")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Handler API no longer supported")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Handler API no longer supported")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Handler API no longer supported")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Handler API no longer supported")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Handler API no longer supported")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Handler API no longer supported")]
        [Deprecated(PlatformName.MacOSX, 10, 5, message: "Handler API no longer supported")]
        [Export("fileManager:willProcessPath:")]
        void FileManager(NSFileManager fm, string path);
    }

    // @protocol NSFileManagerDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSFileManagerDelegate
    {
        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldCopyItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
        [Export("fileManager:shouldCopyItemAtPath:toPath:")]
        bool ShouldCopyItemAtPath(NSFileManager fileManager, string srcPath, string dstPath);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldCopyItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("fileManager:shouldCopyItemAtURL:toURL:")]
        bool ShouldCopyItemAtURL(NSFileManager fileManager, NSUrl srcURL, NSUrl dstURL);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error copyingItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
        [Export("fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:")]
        bool ShouldProceedAfterError(NSFileManager fileManager, NSError error, string srcPath, string dstPath);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error copyingItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:")]
        bool ShouldProceedAfterError(NSFileManager fileManager, NSError error, NSUrl srcURL, NSUrl dstURL);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldMoveItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
        [Export("fileManager:shouldMoveItemAtPath:toPath:")]
        bool ShouldMoveItemAtPath(NSFileManager fileManager, string srcPath, string dstPath);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldMoveItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("fileManager:shouldMoveItemAtURL:toURL:")]
        bool ShouldMoveItemAtURL(NSFileManager fileManager, NSUrl srcURL, NSUrl dstURL);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error movingItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
        [Export("fileManager:shouldProceedAfterError:movingItemAtPath:toPath:")]
        bool ShouldProceedAfterError(NSFileManager fileManager, NSError error, string srcPath, string dstPath);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error movingItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("fileManager:shouldProceedAfterError:movingItemAtURL:toURL:")]
        bool ShouldProceedAfterError(NSFileManager fileManager, NSError error, NSUrl srcURL, NSUrl dstURL);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldLinkItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
        [Export("fileManager:shouldLinkItemAtPath:toPath:")]
        bool ShouldLinkItemAtPath(NSFileManager fileManager, string srcPath, string dstPath);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldLinkItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("fileManager:shouldLinkItemAtURL:toURL:")]
        bool ShouldLinkItemAtURL(NSFileManager fileManager, NSUrl srcURL, NSUrl dstURL);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error linkingItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
        [Export("fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:")]
        bool ShouldProceedAfterError(NSFileManager fileManager, NSError error, string srcPath, string dstPath);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error linkingItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:")]
        bool ShouldProceedAfterError(NSFileManager fileManager, NSError error, NSUrl srcURL, NSUrl dstURL);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldRemoveItemAtPath:(NSString * _Nonnull)path;
        [Export("fileManager:shouldRemoveItemAtPath:")]
        bool ShouldRemoveItemAtPath(NSFileManager fileManager, string path);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldRemoveItemAtURL:(NSURL * _Nonnull)URL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("fileManager:shouldRemoveItemAtURL:")]
        bool ShouldRemoveItemAtURL(NSFileManager fileManager, NSUrl URL);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error removingItemAtPath:(NSString * _Nonnull)path;
        [Export("fileManager:shouldProceedAfterError:removingItemAtPath:")]
        bool ShouldProceedAfterError(NSFileManager fileManager, NSError error, string path);

        // @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error removingItemAtURL:(NSURL * _Nonnull)URL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("fileManager:shouldProceedAfterError:removingItemAtURL:")]
        bool ShouldProceedAfterError(NSFileManager fileManager, NSError error, NSUrl URL);
    }

    // audit-objc-generics: @interface NSDirectoryEnumerator<ObjectType> : NSEnumerator
    [BaseType(typeof(NSEnumerator))]
    interface NSDirectoryEnumerator
    {
        // @property (readonly, copy) NSDictionary<NSFileAttributeKey,id> * _Nullable fileAttributes;
        [NullAllowed, Export("fileAttributes", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> FileAttributes { get; }

        // @property (readonly, copy) NSDictionary<NSFileAttributeKey,id> * _Nullable directoryAttributes;
        [NullAllowed, Export("directoryAttributes", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> DirectoryAttributes { get; }

        // -(void)skipDescendents;
        [Export("skipDescendents")]
        void SkipDescendents();

        // @property (readonly) NSUInteger level __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("level")]
        nuint Level { get; }

        // -(void)skipDescendants __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("skipDescendants")]
        void SkipDescendants();
    }

    // @interface NSFileProviderService : NSObject
    [NoWatch, NoTV, Mac(10, 13), iOS(11, 0)]
    [BaseType(typeof(NSObject))]
    interface NSFileProviderService
    {
        // -(void)getFileProviderConnectionWithCompletionHandler:(void (^ _Nonnull)(NSXPCConnection * _Nullable, NSError * _Nullable))completionHandler;
        [Export("getFileProviderConnectionWithCompletionHandler:")]
        void GetFileProviderConnectionWithCompletionHandler(Action<NSXPCConnection, NSError> completionHandler);

        // @property (readonly, copy) NSFileProviderServiceName _Nonnull name;
        [Export("name")]
        string Name { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSFileAttributeKey _Nonnull NSFileType;
        [Field("NSFileType", "__Internal")]
        NSString NSFileType { get; }

        // extern const NSFileAttributeType _Nonnull NSFileTypeDirectory;
        [Field("NSFileTypeDirectory", "__Internal")]
        NSString NSFileTypeDirectory { get; }

        // extern const NSFileAttributeType _Nonnull NSFileTypeRegular;
        [Field("NSFileTypeRegular", "__Internal")]
        NSString NSFileTypeRegular { get; }

        // extern const NSFileAttributeType _Nonnull NSFileTypeSymbolicLink;
        [Field("NSFileTypeSymbolicLink", "__Internal")]
        NSString NSFileTypeSymbolicLink { get; }

        // extern const NSFileAttributeType _Nonnull NSFileTypeSocket;
        [Field("NSFileTypeSocket", "__Internal")]
        NSString NSFileTypeSocket { get; }

        // extern const NSFileAttributeType _Nonnull NSFileTypeCharacterSpecial;
        [Field("NSFileTypeCharacterSpecial", "__Internal")]
        NSString NSFileTypeCharacterSpecial { get; }

        // extern const NSFileAttributeType _Nonnull NSFileTypeBlockSpecial;
        [Field("NSFileTypeBlockSpecial", "__Internal")]
        NSString NSFileTypeBlockSpecial { get; }

        // extern const NSFileAttributeType _Nonnull NSFileTypeUnknown;
        [Field("NSFileTypeUnknown", "__Internal")]
        NSString NSFileTypeUnknown { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileSize;
        [Field("NSFileSize", "__Internal")]
        NSString NSFileSize { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileModificationDate;
        [Field("NSFileModificationDate", "__Internal")]
        NSString NSFileModificationDate { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileReferenceCount;
        [Field("NSFileReferenceCount", "__Internal")]
        NSString NSFileReferenceCount { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileDeviceIdentifier;
        [Field("NSFileDeviceIdentifier", "__Internal")]
        NSString NSFileDeviceIdentifier { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileOwnerAccountName;
        [Field("NSFileOwnerAccountName", "__Internal")]
        NSString NSFileOwnerAccountName { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileGroupOwnerAccountName;
        [Field("NSFileGroupOwnerAccountName", "__Internal")]
        NSString NSFileGroupOwnerAccountName { get; }

        // extern const NSFileAttributeKey _Nonnull NSFilePosixPermissions;
        [Field("NSFilePosixPermissions", "__Internal")]
        NSString NSFilePosixPermissions { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileSystemNumber;
        [Field("NSFileSystemNumber", "__Internal")]
        NSString NSFileSystemNumber { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileSystemFileNumber;
        [Field("NSFileSystemFileNumber", "__Internal")]
        NSString NSFileSystemFileNumber { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileExtensionHidden;
        [Field("NSFileExtensionHidden", "__Internal")]
        NSString NSFileExtensionHidden { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileHFSCreatorCode;
        [Field("NSFileHFSCreatorCode", "__Internal")]
        NSString NSFileHFSCreatorCode { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileHFSTypeCode;
        [Field("NSFileHFSTypeCode", "__Internal")]
        NSString NSFileHFSTypeCode { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileImmutable;
        [Field("NSFileImmutable", "__Internal")]
        NSString NSFileImmutable { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileAppendOnly;
        [Field("NSFileAppendOnly", "__Internal")]
        NSString NSFileAppendOnly { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileCreationDate;
        [Field("NSFileCreationDate", "__Internal")]
        NSString NSFileCreationDate { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileOwnerAccountID;
        [Field("NSFileOwnerAccountID", "__Internal")]
        NSString NSFileOwnerAccountID { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileGroupOwnerAccountID;
        [Field("NSFileGroupOwnerAccountID", "__Internal")]
        NSString NSFileGroupOwnerAccountID { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileBusy;
        [Field("NSFileBusy", "__Internal")]
        NSString NSFileBusy { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileProtectionKey __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(4, 0)]
        [Field("NSFileProtectionKey", "__Internal")]
        NSString NSFileProtectionKey { get; }

        // extern const NSFileProtectionType _Nonnull NSFileProtectionNone __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(4, 0)]
        [Field("NSFileProtectionNone", "__Internal")]
        NSString NSFileProtectionNone { get; }

        // extern const NSFileProtectionType _Nonnull NSFileProtectionComplete __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(4, 0)]
        [Field("NSFileProtectionComplete", "__Internal")]
        NSString NSFileProtectionComplete { get; }

        // extern const NSFileProtectionType _Nonnull NSFileProtectionCompleteUnlessOpen __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(5, 0)]
        [Field("NSFileProtectionCompleteUnlessOpen", "__Internal")]
        NSString NSFileProtectionCompleteUnlessOpen { get; }

        // extern const NSFileProtectionType _Nonnull NSFileProtectionCompleteUntilFirstUserAuthentication __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(5, 0)]
        [Field("NSFileProtectionCompleteUntilFirstUserAuthentication", "__Internal")]
        NSString NSFileProtectionCompleteUntilFirstUserAuthentication { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileSystemSize;
        [Field("NSFileSystemSize", "__Internal")]
        NSString NSFileSystemSize { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileSystemFreeSize;
        [Field("NSFileSystemFreeSize", "__Internal")]
        NSString NSFileSystemFreeSize { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileSystemNodes;
        [Field("NSFileSystemNodes", "__Internal")]
        NSString NSFileSystemNodes { get; }

        // extern const NSFileAttributeKey _Nonnull NSFileSystemFreeNodes;
        [Field("NSFileSystemFreeNodes", "__Internal")]
        NSString NSFileSystemFreeNodes { get; }
    }

    // @interface NSFileAttributes (NSDictionary)
    [Category]
    [BaseType(typeof(NSDictionary))]
    interface NSDictionary_NSFileAttributes
    {
        // -(unsigned long long)fileSize;
        [Export("fileSize")]
        [Verify(MethodToProperty)]
        ulong FileSize { get; }

        // -(NSDate * _Nullable)fileModificationDate;
        [NullAllowed, Export("fileModificationDate")]
        [Verify(MethodToProperty)]
        NSDate FileModificationDate { get; }

        // -(NSString * _Nullable)fileType;
        [NullAllowed, Export("fileType")]
        [Verify(MethodToProperty)]
        string FileType { get; }

        // -(NSUInteger)filePosixPermissions;
        [Export("filePosixPermissions")]
        [Verify(MethodToProperty)]
        nuint FilePosixPermissions { get; }

        // -(NSString * _Nullable)fileOwnerAccountName;
        [NullAllowed, Export("fileOwnerAccountName")]
        [Verify(MethodToProperty)]
        string FileOwnerAccountName { get; }

        // -(NSString * _Nullable)fileGroupOwnerAccountName;
        [NullAllowed, Export("fileGroupOwnerAccountName")]
        [Verify(MethodToProperty)]
        string FileGroupOwnerAccountName { get; }

        // -(NSInteger)fileSystemNumber;
        [Export("fileSystemNumber")]
        [Verify(MethodToProperty)]
        nint FileSystemNumber { get; }

        // -(NSUInteger)fileSystemFileNumber;
        [Export("fileSystemFileNumber")]
        [Verify(MethodToProperty)]
        nuint FileSystemFileNumber { get; }

        // -(BOOL)fileExtensionHidden;
        [Export("fileExtensionHidden")]
        [Verify(MethodToProperty)]
        bool FileExtensionHidden { get; }

        // -(OSType)fileHFSCreatorCode;
        [Export("fileHFSCreatorCode")]
        [Verify(MethodToProperty)]
        uint FileHFSCreatorCode { get; }

        // -(OSType)fileHFSTypeCode;
        [Export("fileHFSTypeCode")]
        [Verify(MethodToProperty)]
        uint FileHFSTypeCode { get; }

        // -(BOOL)fileIsImmutable;
        [Export("fileIsImmutable")]
        [Verify(MethodToProperty)]
        bool FileIsImmutable { get; }

        // -(BOOL)fileIsAppendOnly;
        [Export("fileIsAppendOnly")]
        [Verify(MethodToProperty)]
        bool FileIsAppendOnly { get; }

        // -(NSDate * _Nullable)fileCreationDate;
        [NullAllowed, Export("fileCreationDate")]
        [Verify(MethodToProperty)]
        NSDate FileCreationDate { get; }

        // -(NSNumber * _Nullable)fileOwnerAccountID;
        [NullAllowed, Export("fileOwnerAccountID")]
        [Verify(MethodToProperty)]
        NSNumber FileOwnerAccountID { get; }

        // -(NSNumber * _Nullable)fileGroupOwnerAccountID;
        [NullAllowed, Export("fileGroupOwnerAccountID")]
        [Verify(MethodToProperty)]
        NSNumber FileGroupOwnerAccountID { get; }
    }

    // @interface NSPointerFunctions : NSObject <NSCopying>
    [iOS(6, 0)]
    [BaseType(typeof(NSObject))]
    interface NSPointerFunctions : INSCopying
    {
        // -(instancetype _Nonnull)initWithOptions:(NSPointerFunctionsOptions)options __attribute__((objc_designated_initializer));
        [Export("initWithOptions:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSPointerFunctionsOptions options);

        // +(NSPointerFunctions * _Nonnull)pointerFunctionsWithOptions:(NSPointerFunctionsOptions)options;
        [Static]
        [Export("pointerFunctionsWithOptions:")]
        NSPointerFunctions PointerFunctionsWithOptions(NSPointerFunctionsOptions options);

        // @property NSUInteger (* _Nullable)(const void * _Nonnull, NSUInteger (* _Nullable)(const void * _Nonnull)) hashFunction;
        [NullAllowed, Export("hashFunction", ArgumentSemantic.Assign)]
        unsafe Func<void*, System.Func<void*, nuint>*, nuint>* HashFunction { get; set; }

        // @property BOOL (* _Nullable)(const void * _Nonnull, const void * _Nonnull, NSUInteger (* _Nullable)(const void * _Nonnull)) isEqualFunction;
        [NullAllowed, Export("isEqualFunction", ArgumentSemantic.Assign)]
        unsafe Func<void*, void*, System.Func<void*, nuint>*, bool>* IsEqualFunction { get; set; }

        // @property NSUInteger (* _Nullable)(const void * _Nonnull) sizeFunction;
        [NullAllowed, Export("sizeFunction", ArgumentSemantic.Assign)]
        unsafe Func<void*, nuint>* SizeFunction { get; set; }

        // @property NSString * _Nullable (* _Nullable)(const void * _Nonnull) descriptionFunction;
        [NullAllowed, Export("descriptionFunction", ArgumentSemantic.Assign)]
        unsafe Func<void*, NSString>* DescriptionFunction { get; set; }

        // @property void (* _Nullable)(const void * _Nonnull, NSUInteger (* _Nullable)(const void * _Nonnull)) relinquishFunction;
        [NullAllowed, Export("relinquishFunction", ArgumentSemantic.Assign)]
        unsafe Action<void*, System.Func<void*, nuint>*>* RelinquishFunction { get; set; }

        // @property void * _Nonnull (* _Nullable)(const void * _Nonnull, NSUInteger (* _Nullable)(const void * _Nonnull), BOOL) acquireFunction;
        [NullAllowed, Export("acquireFunction", ArgumentSemantic.Assign)]
        unsafe Func<void*, System.Func<void*, nuint>*, bool, void*>* AcquireFunction { get; set; }

        // @property BOOL usesStrongWriteBarrier __attribute__((availability(tvos, introduced=9.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(ios, introduced=2.0, deprecated=10.0))) __attribute__((availability(macos, introduced=10.5, deprecated=10.12)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Garbage collection no longer supported")]
        [Deprecated(PlatformName.TvOS, 10, 0, message: "Garbage collection no longer supported")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Garbage collection no longer supported")]
        [Deprecated(PlatformName.WatchOS, 3, 0, message: "Garbage collection no longer supported")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Garbage collection no longer supported")]
        [Deprecated(PlatformName.iOS, 10, 0, message: "Garbage collection no longer supported")]
        [Introduced(PlatformName.MacOSX, 10, 5, message: "Garbage collection no longer supported")]
        [Deprecated(PlatformName.MacOSX, 10, 12, message: "Garbage collection no longer supported")]
        [Export("usesStrongWriteBarrier")]
        bool UsesStrongWriteBarrier { get; set; }

        // @property BOOL usesWeakReadAndWriteBarriers __attribute__((availability(tvos, introduced=9.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(ios, introduced=2.0, deprecated=10.0))) __attribute__((availability(macos, introduced=10.5, deprecated=10.12)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Garbage collection no longer supported")]
        [Deprecated(PlatformName.TvOS, 10, 0, message: "Garbage collection no longer supported")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Garbage collection no longer supported")]
        [Deprecated(PlatformName.WatchOS, 3, 0, message: "Garbage collection no longer supported")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Garbage collection no longer supported")]
        [Deprecated(PlatformName.iOS, 10, 0, message: "Garbage collection no longer supported")]
        [Introduced(PlatformName.MacOSX, 10, 5, message: "Garbage collection no longer supported")]
        [Deprecated(PlatformName.MacOSX, 10, 12, message: "Garbage collection no longer supported")]
        [Export("usesWeakReadAndWriteBarriers")]
        bool UsesWeakReadAndWriteBarriers { get; set; }
    }

    // audit-objc-generics: @interface NSHashTable<ObjectType> : NSObject <NSCopying, NSSecureCoding, NSFastEnumeration>
    [iOS(6, 0)]
    [BaseType(typeof(NSObject))]
    interface NSHashTable : INSCopying, INSSecureCoding, INSFastEnumeration
    {
        // -(instancetype _Nonnull)initWithOptions:(NSPointerFunctionsOptions)options capacity:(NSUInteger)initialCapacity __attribute__((objc_designated_initializer));
        [Export("initWithOptions:capacity:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSPointerFunctionsOptions options, nuint initialCapacity);

        // -(instancetype _Nonnull)initWithPointerFunctions:(NSPointerFunctions * _Nonnull)functions capacity:(NSUInteger)initialCapacity __attribute__((objc_designated_initializer));
        [Export("initWithPointerFunctions:capacity:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSPointerFunctions functions, nuint initialCapacity);

        // +(NSHashTable<ObjectType> * _Nonnull)hashTableWithOptions:(NSPointerFunctionsOptions)options;
        [Static]
        [Export("hashTableWithOptions:")]
        NSHashTable<NSObject> HashTableWithOptions(NSPointerFunctionsOptions options);

        // +(id _Nonnull)hashTableWithWeakObjects __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5, deprecated=10.8)));
        [Introduced(PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
        [Deprecated(PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
        [NoWatch, NoTV, NoiOS]
        [Static]
        [Export("hashTableWithWeakObjects")]
        [Verify(MethodToProperty)]
        NSObject HashTableWithWeakObjects { get; }

        // +(NSHashTable<ObjectType> * _Nonnull)weakObjectsHashTable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Static]
        [Export("weakObjectsHashTable")]
        [Verify(MethodToProperty)]
        NSHashTable<NSObject> WeakObjectsHashTable { get; }

        // @property (readonly, copy) NSPointerFunctions * _Nonnull pointerFunctions;
        [Export("pointerFunctions", ArgumentSemantic.Copy)]
        NSPointerFunctions PointerFunctions { get; }

        // @property (readonly) NSUInteger count;
        [Export("count")]
        nuint Count { get; }

        // -(ObjectType _Nullable)member:(ObjectType _Nullable)object;
        [Export("member:")]
        [return: NullAllowed]
        NSObject Member([NullAllowed] NSObject @object);

        // -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
        [Export("objectEnumerator")]
        [Verify(MethodToProperty)]
        NSEnumerator<NSObject> ObjectEnumerator { get; }

        // -(void)addObject:(ObjectType _Nullable)object;
        [Export("addObject:")]
        void AddObject([NullAllowed] NSObject @object);

        // -(void)removeObject:(ObjectType _Nullable)object;
        [Export("removeObject:")]
        void RemoveObject([NullAllowed] NSObject @object);

        // -(void)removeAllObjects;
        [Export("removeAllObjects")]
        void RemoveAllObjects();

        // @property (readonly, copy) NSArray<ObjectType> * _Nonnull allObjects;
        [Export("allObjects", ArgumentSemantic.Copy)]
        NSObject[] AllObjects { get; }

        // @property (readonly, nonatomic) ObjectType _Nullable anyObject;
        [NullAllowed, Export("anyObject")]
        NSObject AnyObject { get; }

        // -(BOOL)containsObject:(ObjectType _Nullable)anObject;
        [Export("containsObject:")]
        bool ContainsObject([NullAllowed] NSObject anObject);

        // -(BOOL)intersectsHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
        [Export("intersectsHashTable:")]
        bool IntersectsHashTable(NSHashTable<NSObject> other);

        // -(BOOL)isEqualToHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
        [Export("isEqualToHashTable:")]
        bool IsEqualToHashTable(NSHashTable<NSObject> other);

        // -(BOOL)isSubsetOfHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
        [Export("isSubsetOfHashTable:")]
        bool IsSubsetOfHashTable(NSHashTable<NSObject> other);

        // -(void)intersectHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
        [Export("intersectHashTable:")]
        void IntersectHashTable(NSHashTable<NSObject> other);

        // -(void)unionHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
        [Export("unionHashTable:")]
        void UnionHashTable(NSHashTable<NSObject> other);

        // -(void)minusHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
        [Export("minusHashTable:")]
        void MinusHashTable(NSHashTable<NSObject> other);

        // @property (readonly, copy) NSSet<ObjectType> * _Nonnull setRepresentation;
        [Export("setRepresentation", ArgumentSemantic.Copy)]
        NSSet<NSObject> SetRepresentation { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSHashTableCallBacks NSIntegerHashCallBacks __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5)));
        [NoWatch, NoTV, NoiOS, Mac(10, 5)]
        [Field("NSIntegerHashCallBacks", "__Internal")]
        NSHashTableCallBacks NSIntegerHashCallBacks { get; }

        // extern const NSHashTableCallBacks NSNonOwnedPointerHashCallBacks;
        [Field("NSNonOwnedPointerHashCallBacks", "__Internal")]
        NSHashTableCallBacks NSNonOwnedPointerHashCallBacks { get; }

        // extern const NSHashTableCallBacks NSNonRetainedObjectHashCallBacks;
        [Field("NSNonRetainedObjectHashCallBacks", "__Internal")]
        NSHashTableCallBacks NSNonRetainedObjectHashCallBacks { get; }

        // extern const NSHashTableCallBacks NSObjectHashCallBacks;
        [Field("NSObjectHashCallBacks", "__Internal")]
        NSHashTableCallBacks NSObjectHashCallBacks { get; }

        // extern const NSHashTableCallBacks NSOwnedObjectIdentityHashCallBacks;
        [Field("NSOwnedObjectIdentityHashCallBacks", "__Internal")]
        NSHashTableCallBacks NSOwnedObjectIdentityHashCallBacks { get; }

        // extern const NSHashTableCallBacks NSOwnedPointerHashCallBacks;
        [Field("NSOwnedPointerHashCallBacks", "__Internal")]
        NSHashTableCallBacks NSOwnedPointerHashCallBacks { get; }

        // extern const NSHashTableCallBacks NSPointerToStructHashCallBacks;
        [Field("NSPointerToStructHashCallBacks", "__Internal")]
        NSHashTableCallBacks NSPointerToStructHashCallBacks { get; }

        // extern const NSHashTableCallBacks NSIntHashCallBacks __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Not supported")]
        [Deprecated(PlatformName.MacOSX, 10, 5, message: "Not supported")]
        [NoWatch, NoTV, NoiOS]
        [Field("NSIntHashCallBacks", "__Internal")]
        NSHashTableCallBacks NSIntHashCallBacks { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieName;
        [Field("NSHTTPCookieName", "__Internal")]
        NSString NSHTTPCookieName { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieValue;
        [Field("NSHTTPCookieValue", "__Internal")]
        NSString NSHTTPCookieValue { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieOriginURL;
        [Field("NSHTTPCookieOriginURL", "__Internal")]
        NSString NSHTTPCookieOriginURL { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieVersion;
        [Field("NSHTTPCookieVersion", "__Internal")]
        NSString NSHTTPCookieVersion { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieDomain;
        [Field("NSHTTPCookieDomain", "__Internal")]
        NSString NSHTTPCookieDomain { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookiePath;
        [Field("NSHTTPCookiePath", "__Internal")]
        NSString NSHTTPCookiePath { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieSecure;
        [Field("NSHTTPCookieSecure", "__Internal")]
        NSString NSHTTPCookieSecure { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieExpires;
        [Field("NSHTTPCookieExpires", "__Internal")]
        NSString NSHTTPCookieExpires { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieComment;
        [Field("NSHTTPCookieComment", "__Internal")]
        NSString NSHTTPCookieComment { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieCommentURL;
        [Field("NSHTTPCookieCommentURL", "__Internal")]
        NSString NSHTTPCookieCommentURL { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieDiscard;
        [Field("NSHTTPCookieDiscard", "__Internal")]
        NSString NSHTTPCookieDiscard { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieMaximumAge;
        [Field("NSHTTPCookieMaximumAge", "__Internal")]
        NSString NSHTTPCookieMaximumAge { get; }

        // extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookiePort;
        [Field("NSHTTPCookiePort", "__Internal")]
        NSString NSHTTPCookiePort { get; }
    }

    // @interface NSHTTPCookie : NSObject
    [BaseType(typeof(NSObject))]
    interface NSHTTPCookie
    {
        // -(instancetype _Nullable)initWithProperties:(NSDictionary<NSHTTPCookiePropertyKey,id> * _Nonnull)properties;
        [Export("initWithProperties:")]
        IntPtr Constructor(NSDictionary<NSString, NSObject> properties);

        // +(NSHTTPCookie * _Nullable)cookieWithProperties:(NSDictionary<NSHTTPCookiePropertyKey,id> * _Nonnull)properties;
        [Static]
        [Export("cookieWithProperties:")]
        [return: NullAllowed]
        NSHttpCookie CookieWithProperties(NSDictionary<NSString, NSObject> properties);

        // +(NSDictionary<NSString *,NSString *> * _Nonnull)requestHeaderFieldsWithCookies:(NSArray<NSHTTPCookie *> * _Nonnull)cookies;
        [Static]
        [Export("requestHeaderFieldsWithCookies:")]
        NSDictionary<NSString, NSString> RequestHeaderFieldsWithCookies(NSHttpCookie[] cookies);

        // +(NSArray<NSHTTPCookie *> * _Nonnull)cookiesWithResponseHeaderFields:(NSDictionary<NSString *,NSString *> * _Nonnull)headerFields forURL:(NSURL * _Nonnull)URL;
        [Static]
        [Export("cookiesWithResponseHeaderFields:forURL:")]
        NSHttpCookie[] CookiesWithResponseHeaderFields(NSDictionary<NSString, NSString> headerFields, NSUrl URL);

        // @property (readonly, copy) NSDictionary<NSHTTPCookiePropertyKey,id> * _Nullable properties;
        [NullAllowed, Export("properties", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> Properties { get; }

        // @property (readonly) NSUInteger version;
        [Export("version")]
        nuint Version { get; }

        // @property (readonly, copy) NSString * _Nonnull name;
        [Export("name")]
        string Name { get; }

        // @property (readonly, copy) NSString * _Nonnull value;
        [Export("value")]
        string Value { get; }

        // @property (readonly, copy) NSDate * _Nullable expiresDate;
        [NullAllowed, Export("expiresDate", ArgumentSemantic.Copy)]
        NSDate ExpiresDate { get; }

        // @property (readonly, getter = isSessionOnly) BOOL sessionOnly;
        [Export("sessionOnly")]
        bool SessionOnly { [Bind("isSessionOnly")] get; }

        // @property (readonly, copy) NSString * _Nonnull domain;
        [Export("domain")]
        string Domain { get; }

        // @property (readonly, copy) NSString * _Nonnull path;
        [Export("path")]
        string Path { get; }

        // @property (readonly, getter = isSecure) BOOL secure;
        [Export("secure")]
        bool Secure { [Bind("isSecure")] get; }

        // @property (readonly, getter = isHTTPOnly) BOOL HTTPOnly;
        [Export("HTTPOnly")]
        bool HTTPOnly { [Bind("isHTTPOnly")] get; }

        // @property (readonly, copy) NSString * _Nullable comment;
        [NullAllowed, Export("comment")]
        string Comment { get; }

        // @property (readonly, copy) NSURL * _Nullable commentURL;
        [NullAllowed, Export("commentURL", ArgumentSemantic.Copy)]
        NSUrl CommentURL { get; }

        // @property (readonly, copy) NSArray<NSNumber *> * _Nullable portList;
        [NullAllowed, Export("portList", ArgumentSemantic.Copy)]
        NSNumber[] PortList { get; }
    }

    // @interface NSHTTPCookieStorage : NSObject
    [BaseType(typeof(NSObject))]
    interface NSHTTPCookieStorage
    {
        // @property (readonly, strong, class) NSHTTPCookieStorage * _Nonnull sharedHTTPCookieStorage;
        [Static]
        [Export("sharedHTTPCookieStorage", ArgumentSemantic.Strong)]
        NSHttpCookieStorage SharedHTTPCookieStorage { get; }

        // +(NSHTTPCookieStorage * _Nonnull)sharedCookieStorageForGroupContainerIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Static]
        [Export("sharedCookieStorageForGroupContainerIdentifier:")]
        NSHttpCookieStorage SharedCookieStorageForGroupContainerIdentifier(string identifier);

        // @property (readonly, copy) NSArray<NSHTTPCookie *> * _Nullable cookies;
        [NullAllowed, Export("cookies", ArgumentSemantic.Copy)]
        NSHttpCookie[] Cookies { get; }

        // -(void)setCookie:(NSHTTPCookie * _Nonnull)cookie;
        [Export("setCookie:")]
        void SetCookie(NSHttpCookie cookie);

        // -(void)deleteCookie:(NSHTTPCookie * _Nonnull)cookie;
        [Export("deleteCookie:")]
        void DeleteCookie(NSHttpCookie cookie);

        // -(void)removeCookiesSinceDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("removeCookiesSinceDate:")]
        void RemoveCookiesSinceDate(NSDate date);

        // -(NSArray<NSHTTPCookie *> * _Nullable)cookiesForURL:(NSURL * _Nonnull)URL;
        [Export("cookiesForURL:")]
        [return: NullAllowed]
        NSHttpCookie[] CookiesForURL(NSUrl URL);

        // -(void)setCookies:(NSArray<NSHTTPCookie *> * _Nonnull)cookies forURL:(NSURL * _Nullable)URL mainDocumentURL:(NSURL * _Nullable)mainDocumentURL;
        [Export("setCookies:forURL:mainDocumentURL:")]
        void SetCookies(NSHttpCookie[] cookies, [NullAllowed] NSUrl URL, [NullAllowed] NSUrl mainDocumentURL);

        // @property NSHTTPCookieAcceptPolicy cookieAcceptPolicy;
        [Export("cookieAcceptPolicy", ArgumentSemantic.Assign)]
        NSHTTPCookieAcceptPolicy CookieAcceptPolicy { get; set; }

        // -(NSArray<NSHTTPCookie *> * _Nonnull)sortedCookiesUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortOrder __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("sortedCookiesUsingDescriptors:")]
        NSHttpCookie[] SortedCookiesUsingDescriptors(NSSortDescriptor[] sortOrder);
    }

    // @interface NSURLSessionTaskAdditions (NSHTTPCookieStorage)
    [Category]
    [BaseType(typeof(NSHttpCookieStorage))]
    interface NSHTTPCookieStorage_NSURLSessionTaskAdditions
    {
        // -(void)storeCookies:(NSArray<NSHTTPCookie *> * _Nonnull)cookies forTask:(NSURLSessionTask * _Nonnull)task __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("storeCookies:forTask:")]
        void StoreCookies(NSHttpCookie[] cookies, NSUrlSessionTask task);

        // -(void)getCookiesForTask:(NSURLSessionTask * _Nonnull)task completionHandler:(void (^ _Nonnull)(NSArray<NSHTTPCookie *> * _Nullable))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("getCookiesForTask:completionHandler:")]
        void GetCookiesForTask(NSUrlSessionTask task, Action<NSArray<NSHTTPCookie>> completionHandler);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSHTTPCookieManagerAcceptPolicyChangedNotification;
        [Field("NSHTTPCookieManagerAcceptPolicyChangedNotification", "__Internal")]
        NSString NSHTTPCookieManagerAcceptPolicyChangedNotification { get; }

        // extern const NSNotificationName _Nonnull NSHTTPCookieManagerCookiesChangedNotification;
        [Field("NSHTTPCookieManagerCookiesChangedNotification", "__Internal")]
        NSString NSHTTPCookieManagerCookiesChangedNotification { get; }
    }

    // @interface NSIndexPath : NSObject <NSCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSIndexPath : INSCopying, INSSecureCoding
    {
        // +(instancetype _Nonnull)indexPathWithIndex:(NSUInteger)index;
        [Static]
        [Export("indexPathWithIndex:")]
        NSIndexPath IndexPathWithIndex(nuint index);

        // +(instancetype _Nonnull)indexPathWithIndexes:(const NSUInteger * _Nullable)indexes length:(NSUInteger)length;
        [Static]
        [Export("indexPathWithIndexes:length:")]
        NSIndexPath IndexPathWithIndexes([NullAllowed] nuint[] indexes, nuint length);

        // -(instancetype _Nonnull)initWithIndexes:(const NSUInteger * _Nullable)indexes length:(NSUInteger)length __attribute__((objc_designated_initializer));
        [Export("initWithIndexes:length:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] nuint[] indexes, nuint length);

        // -(instancetype _Nonnull)initWithIndex:(NSUInteger)index;
        [Export("initWithIndex:")]
        IntPtr Constructor(nuint index);

        // -(NSIndexPath * _Nonnull)indexPathByAddingIndex:(NSUInteger)index;
        [Export("indexPathByAddingIndex:")]
        NSIndexPath IndexPathByAddingIndex(nuint index);

        // -(NSIndexPath * _Nonnull)indexPathByRemovingLastIndex;
        [Export("indexPathByRemovingLastIndex")]
        [Verify(MethodToProperty)]
        NSIndexPath IndexPathByRemovingLastIndex { get; }

        // -(NSUInteger)indexAtPosition:(NSUInteger)position;
        [Export("indexAtPosition:")]
        nuint IndexAtPosition(nuint position);

        // @property (readonly) NSUInteger length;
        [Export("length")]
        nuint Length { get; }

        // -(void)getIndexes:(NSUInteger * _Nonnull)indexes range:(NSRange)positionRange __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("getIndexes:range:")]
        unsafe void GetIndexes(nuint* indexes, NSRange positionRange);

        // -(NSComparisonResult)compare:(NSIndexPath * _Nonnull)otherObject;
        [Export("compare:")]
        NSComparisonResult Compare(NSIndexPath otherObject);
    }

    // @interface NSDeprecated (NSIndexPath)
    [Category]
    [BaseType(typeof(NSIndexPath))]
    interface NSIndexPath_NSDeprecated
    {
        // -(void)getIndexes:(NSUInteger * _Nonnull)indexes;
        [Export("getIndexes:")]
        unsafe void GetIndexes(nuint* indexes);
    }

    // @interface NSIndexSet : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSIndexSet : INSCopying, INSMutableCopying, INSSecureCoding
    {
        // +(instancetype _Nonnull)indexSet;
        [Static]
        [Export("indexSet")]
        NSIndexSet IndexSet();

        // +(instancetype _Nonnull)indexSetWithIndex:(NSUInteger)value;
        [Static]
        [Export("indexSetWithIndex:")]
        NSIndexSet IndexSetWithIndex(nuint value);

        // +(instancetype _Nonnull)indexSetWithIndexesInRange:(NSRange)range;
        [Static]
        [Export("indexSetWithIndexesInRange:")]
        NSIndexSet IndexSetWithIndexesInRange(NSRange range);

        // -(instancetype _Nonnull)initWithIndexesInRange:(NSRange)range __attribute__((objc_designated_initializer));
        [Export("initWithIndexesInRange:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSRange range);

        // -(instancetype _Nonnull)initWithIndexSet:(NSIndexSet * _Nonnull)indexSet __attribute__((objc_designated_initializer));
        [Export("initWithIndexSet:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSIndexSet indexSet);

        // -(instancetype _Nonnull)initWithIndex:(NSUInteger)value;
        [Export("initWithIndex:")]
        IntPtr Constructor(nuint value);

        // -(BOOL)isEqualToIndexSet:(NSIndexSet * _Nonnull)indexSet;
        [Export("isEqualToIndexSet:")]
        bool IsEqualToIndexSet(NSIndexSet indexSet);

        // @property (readonly) NSUInteger count;
        [Export("count")]
        nuint Count { get; }

        // @property (readonly) NSUInteger firstIndex;
        [Export("firstIndex")]
        nuint FirstIndex { get; }

        // @property (readonly) NSUInteger lastIndex;
        [Export("lastIndex")]
        nuint LastIndex { get; }

        // -(NSUInteger)indexGreaterThanIndex:(NSUInteger)value;
        [Export("indexGreaterThanIndex:")]
        nuint IndexGreaterThanIndex(nuint value);

        // -(NSUInteger)indexLessThanIndex:(NSUInteger)value;
        [Export("indexLessThanIndex:")]
        nuint IndexLessThanIndex(nuint value);

        // -(NSUInteger)indexGreaterThanOrEqualToIndex:(NSUInteger)value;
        [Export("indexGreaterThanOrEqualToIndex:")]
        nuint IndexGreaterThanOrEqualToIndex(nuint value);

        // -(NSUInteger)indexLessThanOrEqualToIndex:(NSUInteger)value;
        [Export("indexLessThanOrEqualToIndex:")]
        nuint IndexLessThanOrEqualToIndex(nuint value);

        // -(NSUInteger)getIndexes:(NSUInteger * _Nonnull)indexBuffer maxCount:(NSUInteger)bufferSize inIndexRange:(NSRangePointer _Nullable)range;
        [Export("getIndexes:maxCount:inIndexRange:")]
        unsafe nuint GetIndexes(nuint* indexBuffer, nuint bufferSize, [NullAllowed] NSRangePointer* range);

        // -(NSUInteger)countOfIndexesInRange:(NSRange)range __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("countOfIndexesInRange:")]
        nuint CountOfIndexesInRange(NSRange range);

        // -(BOOL)containsIndex:(NSUInteger)value;
        [Export("containsIndex:")]
        bool ContainsIndex(nuint value);

        // -(BOOL)containsIndexesInRange:(NSRange)range;
        [Export("containsIndexesInRange:")]
        bool ContainsIndexesInRange(NSRange range);

        // -(BOOL)containsIndexes:(NSIndexSet * _Nonnull)indexSet;
        [Export("containsIndexes:")]
        bool ContainsIndexes(NSIndexSet indexSet);

        // -(BOOL)intersectsIndexesInRange:(NSRange)range;
        [Export("intersectsIndexesInRange:")]
        bool IntersectsIndexesInRange(NSRange range);

        // -(void)enumerateIndexesUsingBlock:(void (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateIndexesUsingBlock:")]
        unsafe void EnumerateIndexesUsingBlock(Action<nuint, bool*> block);

        // -(void)enumerateIndexesWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateIndexesWithOptions:usingBlock:")]
        unsafe void EnumerateIndexesWithOptions(NSEnumerationOptions opts, Action<nuint, bool*> block);

        // -(void)enumerateIndexesInRange:(NSRange)range options:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("enumerateIndexesInRange:options:usingBlock:")]
        unsafe void EnumerateIndexesInRange(NSRange range, NSEnumerationOptions opts, Action<nuint, bool*> block);

        // -(NSUInteger)indexPassingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexPassingTest:")]
        unsafe nuint IndexPassingTest(Func<nuint, bool*, bool> predicate);

        // -(NSUInteger)indexWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexWithOptions:passingTest:")]
        unsafe nuint IndexWithOptions(NSEnumerationOptions opts, Func<nuint, bool*, bool> predicate);

        // -(NSUInteger)indexInRange:(NSRange)range options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexInRange:options:passingTest:")]
        unsafe nuint IndexInRange(NSRange range, NSEnumerationOptions opts, Func<nuint, bool*, bool> predicate);

        // -(NSIndexSet * _Nonnull)indexesPassingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexesPassingTest:")]
        unsafe NSIndexSet IndexesPassingTest(Func<nuint, bool*, bool> predicate);

        // -(NSIndexSet * _Nonnull)indexesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexesWithOptions:passingTest:")]
        unsafe NSIndexSet IndexesWithOptions(NSEnumerationOptions opts, Func<nuint, bool*, bool> predicate);

        // -(NSIndexSet * _Nonnull)indexesInRange:(NSRange)range options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("indexesInRange:options:passingTest:")]
        unsafe NSIndexSet IndexesInRange(NSRange range, NSEnumerationOptions opts, Func<nuint, bool*, bool> predicate);

        // -(void)enumerateRangesUsingBlock:(void (^ _Nonnull)(NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("enumerateRangesUsingBlock:")]
        unsafe void EnumerateRangesUsingBlock(Action<NSRange, bool*> block);

        // -(void)enumerateRangesWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("enumerateRangesWithOptions:usingBlock:")]
        unsafe void EnumerateRangesWithOptions(NSEnumerationOptions opts, Action<NSRange, bool*> block);

        // -(void)enumerateRangesInRange:(NSRange)range options:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("enumerateRangesInRange:options:usingBlock:")]
        unsafe void EnumerateRangesInRange(NSRange range, NSEnumerationOptions opts, Action<NSRange, bool*> block);
    }

    // @interface NSMutableIndexSet : NSIndexSet
    [BaseType(typeof(NSIndexSet))]
    interface NSMutableIndexSet
    {
        // -(void)addIndexes:(NSIndexSet * _Nonnull)indexSet;
        [Export("addIndexes:")]
        void AddIndexes(NSIndexSet indexSet);

        // -(void)removeIndexes:(NSIndexSet * _Nonnull)indexSet;
        [Export("removeIndexes:")]
        void RemoveIndexes(NSIndexSet indexSet);

        // -(void)removeAllIndexes;
        [Export("removeAllIndexes")]
        void RemoveAllIndexes();

        // -(void)addIndex:(NSUInteger)value;
        [Export("addIndex:")]
        void AddIndex(nuint value);

        // -(void)removeIndex:(NSUInteger)value;
        [Export("removeIndex:")]
        void RemoveIndex(nuint value);

        // -(void)addIndexesInRange:(NSRange)range;
        [Export("addIndexesInRange:")]
        void AddIndexesInRange(NSRange range);

        // -(void)removeIndexesInRange:(NSRange)range;
        [Export("removeIndexesInRange:")]
        void RemoveIndexesInRange(NSRange range);

        // -(void)shiftIndexesStartingAtIndex:(NSUInteger)index by:(NSInteger)delta;
        [Export("shiftIndexesStartingAtIndex:by:")]
        void ShiftIndexesStartingAtIndex(nuint index, nint delta);
    }

    // @interface NSInvocation : NSObject
    [BaseType(typeof(NSObject))]
    interface NSInvocation
    {
        // +(NSInvocation * _Nonnull)invocationWithMethodSignature:(NSMethodSignature * _Nonnull)sig;
        [Static]
        [Export("invocationWithMethodSignature:")]
        NSInvocation InvocationWithMethodSignature(NSMethodSignature sig);

        // @property (readonly, retain) NSMethodSignature * _Nonnull methodSignature;
        [Export("methodSignature", ArgumentSemantic.Retain)]
        NSMethodSignature MethodSignature { get; }

        // -(void)retainArguments;
        [Export("retainArguments")]
        void RetainArguments();

        // @property (readonly) BOOL argumentsRetained;
        [Export("argumentsRetained")]
        bool ArgumentsRetained { get; }

        // @property (assign) id _Nullable target;
        [NullAllowed, Export("target", ArgumentSemantic.Assign)]
        NSObject Target { get; set; }

        // @property SEL _Nonnull selector;
        [Export("selector", ArgumentSemantic.Assign)]
        Selector Selector { get; set; }

        // -(void)getReturnValue:(void * _Nonnull)retLoc;
        [Export("getReturnValue:")]
        unsafe void GetReturnValue(void* retLoc);

        // -(void)setReturnValue:(void * _Nonnull)retLoc;
        [Export("setReturnValue:")]
        unsafe void SetReturnValue(void* retLoc);

        // -(void)getArgument:(void * _Nonnull)argumentLocation atIndex:(NSInteger)idx;
        [Export("getArgument:atIndex:")]
        unsafe void GetArgument(void* argumentLocation, nint idx);

        // -(void)setArgument:(void * _Nonnull)argumentLocation atIndex:(NSInteger)idx;
        [Export("setArgument:atIndex:")]
        unsafe void SetArgument(void* argumentLocation, nint idx);

        // -(void)invoke;
        [Export("invoke")]
        void Invoke();

        // -(void)invokeWithTarget:(id _Nonnull)target;
        [Export("invokeWithTarget:")]
        void InvokeWithTarget(NSObject target);
    }

    // @interface NSJSONSerialization : NSObject
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface NSJSONSerialization
    {
        // +(BOOL)isValidJSONObject:(id _Nonnull)obj;
        [Static]
        [Export("isValidJSONObject:")]
        bool IsValidJSONObject(NSObject obj);

        // +(NSData * _Nullable)dataWithJSONObject:(id _Nonnull)obj options:(NSJSONWritingOptions)opt error:(NSError * _Nullable * _Nullable)error;
        [Static]
        [Export("dataWithJSONObject:options:error:")]
        [return: NullAllowed]
        NSData DataWithJSONObject(NSObject obj, NSJSONWritingOptions opt, [NullAllowed] out NSError error);

        // +(id _Nullable)JSONObjectWithData:(NSData * _Nonnull)data options:(NSJSONReadingOptions)opt error:(NSError * _Nullable * _Nullable)error;
        [Static]
        [Export("JSONObjectWithData:options:error:")]
        [return: NullAllowed]
        NSObject JSONObjectWithData(NSData data, NSJSONReadingOptions opt, [NullAllowed] out NSError error);

        // +(NSInteger)writeJSONObject:(id _Nonnull)obj toStream:(NSOutputStream * _Nonnull)stream options:(NSJSONWritingOptions)opt error:(NSError * _Nullable * _Nullable)error;
        [Static]
        [Export("writeJSONObject:toStream:options:error:")]
        nint WriteJSONObject(NSObject obj, NSOutputStream stream, NSJSONWritingOptions opt, [NullAllowed] out NSError error);

        // +(id _Nullable)JSONObjectWithStream:(NSInputStream * _Nonnull)stream options:(NSJSONReadingOptions)opt error:(NSError * _Nullable * _Nullable)error;
        [Static]
        [Export("JSONObjectWithStream:options:error:")]
        [return: NullAllowed]
        NSObject JSONObjectWithStream(NSInputStream stream, NSJSONReadingOptions opt, [NullAllowed] out NSError error);
    }

    // audit-objc-generics: @interface NSOrderedSet<__covariant ObjectType> : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface NSOrderedSet : INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration
    {
        // @property (readonly) NSUInteger count;
        [Export("count")]
        nuint Count { get; }

        // -(ObjectType _Nonnull)objectAtIndex:(NSUInteger)idx;
        [Export("objectAtIndex:")]
        NSObject ObjectAtIndex(nuint idx);

        // -(NSUInteger)indexOfObject:(ObjectType _Nonnull)object;
        [Export("indexOfObject:")]
        nuint IndexOfObject(NSObject @object);

        // -(instancetype _Nonnull)initWithObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)cnt __attribute__((objc_designated_initializer));
        [Export("initWithObjects:count:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] NSObject[] objects, nuint cnt);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @interface NSExtendedOrderedSet (NSOrderedSet)
    [Category]
    [BaseType(typeof(NSOrderedSet))]
    interface NSOrderedSet_NSExtendedOrderedSet
    {
        // -(void)getObjects:(ObjectType  _Nonnull * _Nullable)objects range:(NSRange)range;
        [Export("getObjects:range:")]
        void GetObjects([NullAllowed] NSObject[] objects, NSRange range);

        // -(NSArray<ObjectType> * _Nonnull)objectsAtIndexes:(NSIndexSet * _Nonnull)indexes;
        [Export("objectsAtIndexes:")]
        NSObject[] ObjectsAtIndexes(NSIndexSet indexes);

        // @property (readonly, nonatomic) ObjectType _Nullable firstObject;
        [NullAllowed, Export("firstObject")]
        NSObject FirstObject { get; }

        // @property (readonly, nonatomic) ObjectType _Nullable lastObject;
        [NullAllowed, Export("lastObject")]
        NSObject LastObject { get; }

        // -(BOOL)isEqualToOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
        [Export("isEqualToOrderedSet:")]
        bool IsEqualToOrderedSet(NSOrderedSet<NSObject> other);

        // -(BOOL)containsObject:(ObjectType _Nonnull)object;
        [Export("containsObject:")]
        bool ContainsObject(NSObject @object);

        // -(BOOL)intersectsOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
        [Export("intersectsOrderedSet:")]
        bool IntersectsOrderedSet(NSOrderedSet<NSObject> other);

        // -(BOOL)intersectsSet:(NSSet<ObjectType> * _Nonnull)set;
        [Export("intersectsSet:")]
        bool IntersectsSet(NSSet<NSObject> set);

        // -(BOOL)isSubsetOfOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
        [Export("isSubsetOfOrderedSet:")]
        bool IsSubsetOfOrderedSet(NSOrderedSet<NSObject> other);

        // -(BOOL)isSubsetOfSet:(NSSet<ObjectType> * _Nonnull)set;
        [Export("isSubsetOfSet:")]
        bool IsSubsetOfSet(NSSet<NSObject> set);

        // -(ObjectType _Nonnull)objectAtIndexedSubscript:(NSUInteger)idx __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("objectAtIndexedSubscript:")]
        NSObject ObjectAtIndexedSubscript(nuint idx);

        // -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
        [Export("objectEnumerator")]
        [Verify(MethodToProperty)]
        NSEnumerator<NSObject> ObjectEnumerator { get; }

        // -(NSEnumerator<ObjectType> * _Nonnull)reverseObjectEnumerator;
        [Export("reverseObjectEnumerator")]
        [Verify(MethodToProperty)]
        NSEnumerator<NSObject> ReverseObjectEnumerator { get; }

        // @property (readonly, copy) NSOrderedSet<ObjectType> * _Nonnull reversedOrderedSet;
        [Export("reversedOrderedSet", ArgumentSemantic.Copy)]
        NSOrderedSet<NSObject> ReversedOrderedSet { get; }

        // @property (readonly, strong) NSArray<ObjectType> * _Nonnull array;
        [Export("array", ArgumentSemantic.Strong)]
        NSObject[] Array { get; }

        // @property (readonly, strong) NSSet<ObjectType> * _Nonnull set;
        [Export("set", ArgumentSemantic.Strong)]
        NSSet<NSObject> Set { get; }

        // -(void)enumerateObjectsUsingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block;
        [Export("enumerateObjectsUsingBlock:")]
        unsafe void EnumerateObjectsUsingBlock(Action<NSObject, nuint, bool*> block);

        // -(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block;
        [Export("enumerateObjectsWithOptions:usingBlock:")]
        unsafe void EnumerateObjectsWithOptions(NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

        // -(void)enumerateObjectsAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block;
        [Export("enumerateObjectsAtIndexes:options:usingBlock:")]
        unsafe void EnumerateObjectsAtIndexes(NSIndexSet s, NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

        // -(NSUInteger)indexOfObjectPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
        [Export("indexOfObjectPassingTest:")]
        unsafe nuint IndexOfObjectPassingTest(Func<NSObject, nuint, bool*, bool> predicate);

        // -(NSUInteger)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
        [Export("indexOfObjectWithOptions:passingTest:")]
        unsafe nuint IndexOfObjectWithOptions(NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

        // -(NSUInteger)indexOfObjectAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
        [Export("indexOfObjectAtIndexes:options:passingTest:")]
        unsafe nuint IndexOfObjectAtIndexes(NSIndexSet s, NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

        // -(NSIndexSet * _Nonnull)indexesOfObjectsPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
        [Export("indexesOfObjectsPassingTest:")]
        unsafe NSIndexSet IndexesOfObjectsPassingTest(Func<NSObject, nuint, bool*, bool> predicate);

        // -(NSIndexSet * _Nonnull)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
        [Export("indexesOfObjectsWithOptions:passingTest:")]
        unsafe NSIndexSet IndexesOfObjectsWithOptions(NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

        // -(NSIndexSet * _Nonnull)indexesOfObjectsAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
        [Export("indexesOfObjectsAtIndexes:options:passingTest:")]
        unsafe NSIndexSet IndexesOfObjectsAtIndexes(NSIndexSet s, NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

        // -(NSUInteger)indexOfObject:(ObjectType _Nonnull)object inSortedRange:(NSRange)range options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator _Nonnull)cmp;
        [Export("indexOfObject:inSortedRange:options:usingComparator:")]
        nuint IndexOfObject(NSObject @object, NSRange range, NSBinarySearchingOptions opts, NSComparator cmp);

        // -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingComparator:(NSComparator _Nonnull)cmptr;
        [Export("sortedArrayUsingComparator:")]
        NSObject[] SortedArrayUsingComparator(NSComparator cmptr);

        // -(NSArray<ObjectType> * _Nonnull)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr;
        [Export("sortedArrayWithOptions:usingComparator:")]
        NSObject[] SortedArrayWithOptions(NSSortOptions opts, NSComparator cmptr);

        // @property (readonly, copy) NSString * _Nonnull description;
        [Export("description")]
        string Description { get; }

        // -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
        [Export("descriptionWithLocale:")]
        string DescriptionWithLocale([NullAllowed] NSObject locale);

        // -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale indent:(NSUInteger)level;
        [Export("descriptionWithLocale:indent:")]
        string DescriptionWithLocale([NullAllowed] NSObject locale, nuint level);
    }

    // @interface NSOrderedSetCreation (NSOrderedSet)
    [Category]
    [BaseType(typeof(NSOrderedSet))]
    interface NSOrderedSet_NSOrderedSetCreation
    {
        // +(instancetype _Nonnull)orderedSet;
        [Static]
        [Export("orderedSet")]
        NSOrderedSet OrderedSet();

        // +(instancetype _Nonnull)orderedSetWithObject:(ObjectType _Nonnull)object;
        [Static]
        [Export("orderedSetWithObject:")]
        NSOrderedSet OrderedSetWithObject(NSObject @object);

        // +(instancetype _Nonnull)orderedSetWithObjects:(ObjectType  _Nonnull const * _Nonnull)objects count:(NSUInteger)cnt;
        [Static]
        [Export("orderedSetWithObjects:count:")]
        NSOrderedSet OrderedSetWithObjects(NSObject[] objects, nuint cnt);

        // +(instancetype _Nonnull)orderedSetWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
        [Static, Internal]
        [Export("orderedSetWithObjects:", IsVariadic = true)]
        NSOrderedSet OrderedSetWithObjects(NSObject firstObj, IntPtr varArgs);

        // +(instancetype _Nonnull)orderedSetWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set;
        [Static]
        [Export("orderedSetWithOrderedSet:")]
        NSOrderedSet OrderedSetWithOrderedSet(NSOrderedSet<NSObject> set);

        // +(instancetype _Nonnull)orderedSetWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set range:(NSRange)range copyItems:(BOOL)flag;
        [Static]
        [Export("orderedSetWithOrderedSet:range:copyItems:")]
        NSOrderedSet OrderedSetWithOrderedSet(NSOrderedSet<NSObject> set, NSRange range, bool flag);

        // +(instancetype _Nonnull)orderedSetWithArray:(NSArray<ObjectType> * _Nonnull)array;
        [Static]
        [Export("orderedSetWithArray:")]
        NSOrderedSet OrderedSetWithArray(NSObject[] array);

        // +(instancetype _Nonnull)orderedSetWithArray:(NSArray<ObjectType> * _Nonnull)array range:(NSRange)range copyItems:(BOOL)flag;
        [Static]
        [Export("orderedSetWithArray:range:copyItems:")]
        NSOrderedSet OrderedSetWithArray(NSObject[] array, NSRange range, bool flag);

        // +(instancetype _Nonnull)orderedSetWithSet:(NSSet<ObjectType> * _Nonnull)set;
        [Static]
        [Export("orderedSetWithSet:")]
        NSOrderedSet OrderedSetWithSet(NSSet<NSObject> set);

        // +(instancetype _Nonnull)orderedSetWithSet:(NSSet<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
        [Static]
        [Export("orderedSetWithSet:copyItems:")]
        NSOrderedSet OrderedSetWithSet(NSSet<NSObject> set, bool flag);

        // -(instancetype _Nonnull)initWithObject:(ObjectType _Nonnull)object;
        [Export("initWithObject:")]
        IntPtr Constructor(NSObject @object);

        // -(instancetype _Nonnull)initWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
        [Internal]
        [Export("initWithObjects:", IsVariadic = true)]
        IntPtr Constructor(NSObject firstObj, IntPtr varArgs);

        // -(instancetype _Nonnull)initWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set;
        [Export("initWithOrderedSet:")]
        IntPtr Constructor(NSOrderedSet<NSObject> set);

        // -(instancetype _Nonnull)initWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
        [Export("initWithOrderedSet:copyItems:")]
        IntPtr Constructor(NSOrderedSet<NSObject> set, bool flag);

        // -(instancetype _Nonnull)initWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set range:(NSRange)range copyItems:(BOOL)flag;
        [Export("initWithOrderedSet:range:copyItems:")]
        IntPtr Constructor(NSOrderedSet<NSObject> set, NSRange range, bool flag);

        // -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array;
        [Export("initWithArray:")]
        IntPtr Constructor(NSObject[] array);

        // -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
        [Export("initWithArray:copyItems:")]
        IntPtr Constructor(NSObject[] set, bool flag);

        // -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)set range:(NSRange)range copyItems:(BOOL)flag;
        [Export("initWithArray:range:copyItems:")]
        IntPtr Constructor(NSObject[] set, NSRange range, bool flag);

        // -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set;
        [Export("initWithSet:")]
        IntPtr Constructor(NSSet<NSObject> set);

        // -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
        [Export("initWithSet:copyItems:")]
        IntPtr Constructor(NSSet<NSObject> set, bool flag);
    }

    // audit-objc-generics: @interface NSMutableOrderedSet<ObjectType> : NSOrderedSet
    [iOS(5, 0)]
    [BaseType(typeof(NSOrderedSet))]
    interface NSMutableOrderedSet
    {
        // -(void)insertObject:(ObjectType _Nonnull)object atIndex:(NSUInteger)idx;
        [Export("insertObject:atIndex:")]
        void InsertObject(NSObject @object, nuint idx);

        // -(void)removeObjectAtIndex:(NSUInteger)idx;
        [Export("removeObjectAtIndex:")]
        void RemoveObjectAtIndex(nuint idx);

        // -(void)replaceObjectAtIndex:(NSUInteger)idx withObject:(ObjectType _Nonnull)object;
        [Export("replaceObjectAtIndex:withObject:")]
        void ReplaceObjectAtIndex(nuint idx, NSObject @object);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);

        // -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
        [Export("initWithCapacity:")]
        [DesignatedInitializer]
        IntPtr Constructor(nuint numItems);
    }

    // @interface NSExtendedMutableOrderedSet (NSMutableOrderedSet)
    [Category]
    [BaseType(typeof(NSMutableOrderedSet))]
    interface NSMutableOrderedSet_NSExtendedMutableOrderedSet
    {
        // -(void)addObject:(ObjectType _Nonnull)object;
        [Export("addObject:")]
        void AddObject(NSObject @object);

        // -(void)addObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)count;
        [Export("addObjects:count:")]
        void AddObjects([NullAllowed] NSObject[] objects, nuint count);

        // -(void)addObjectsFromArray:(NSArray<ObjectType> * _Nonnull)array;
        [Export("addObjectsFromArray:")]
        void AddObjectsFromArray(NSObject[] array);

        // -(void)exchangeObjectAtIndex:(NSUInteger)idx1 withObjectAtIndex:(NSUInteger)idx2;
        [Export("exchangeObjectAtIndex:withObjectAtIndex:")]
        void ExchangeObjectAtIndex(nuint idx1, nuint idx2);

        // -(void)moveObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes toIndex:(NSUInteger)idx;
        [Export("moveObjectsAtIndexes:toIndex:")]
        void MoveObjectsAtIndexes(NSIndexSet indexes, nuint idx);

        // -(void)insertObjects:(NSArray<ObjectType> * _Nonnull)objects atIndexes:(NSIndexSet * _Nonnull)indexes;
        [Export("insertObjects:atIndexes:")]
        void InsertObjects(NSObject[] objects, NSIndexSet indexes);

        // -(void)setObject:(ObjectType _Nonnull)obj atIndex:(NSUInteger)idx;
        [Export("setObject:atIndex:")]
        void SetObject(NSObject obj, nuint idx);

        // -(void)setObject:(ObjectType _Nonnull)obj atIndexedSubscript:(NSUInteger)idx __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("setObject:atIndexedSubscript:")]
        void SetObject(NSObject obj, nuint idx);

        // -(void)replaceObjectsInRange:(NSRange)range withObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)count;
        [Export("replaceObjectsInRange:withObjects:count:")]
        void ReplaceObjectsInRange(NSRange range, [NullAllowed] NSObject[] objects, nuint count);

        // -(void)replaceObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes withObjects:(NSArray<ObjectType> * _Nonnull)objects;
        [Export("replaceObjectsAtIndexes:withObjects:")]
        void ReplaceObjectsAtIndexes(NSIndexSet indexes, NSObject[] objects);

        // -(void)removeObjectsInRange:(NSRange)range;
        [Export("removeObjectsInRange:")]
        void RemoveObjectsInRange(NSRange range);

        // -(void)removeObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes;
        [Export("removeObjectsAtIndexes:")]
        void RemoveObjectsAtIndexes(NSIndexSet indexes);

        // -(void)removeAllObjects;
        [Export("removeAllObjects")]
        void RemoveAllObjects();

        // -(void)removeObject:(ObjectType _Nonnull)object;
        [Export("removeObject:")]
        void RemoveObject(NSObject @object);

        // -(void)removeObjectsInArray:(NSArray<ObjectType> * _Nonnull)array;
        [Export("removeObjectsInArray:")]
        void RemoveObjectsInArray(NSObject[] array);

        // -(void)intersectOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
        [Export("intersectOrderedSet:")]
        void IntersectOrderedSet(NSOrderedSet<NSObject> other);

        // -(void)minusOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
        [Export("minusOrderedSet:")]
        void MinusOrderedSet(NSOrderedSet<NSObject> other);

        // -(void)unionOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
        [Export("unionOrderedSet:")]
        void UnionOrderedSet(NSOrderedSet<NSObject> other);

        // -(void)intersectSet:(NSSet<ObjectType> * _Nonnull)other;
        [Export("intersectSet:")]
        void IntersectSet(NSSet<NSObject> other);

        // -(void)minusSet:(NSSet<ObjectType> * _Nonnull)other;
        [Export("minusSet:")]
        void MinusSet(NSSet<NSObject> other);

        // -(void)unionSet:(NSSet<ObjectType> * _Nonnull)other;
        [Export("unionSet:")]
        void UnionSet(NSSet<NSObject> other);

        // -(void)sortUsingComparator:(NSComparator _Nonnull)cmptr;
        [Export("sortUsingComparator:")]
        void SortUsingComparator(NSComparator cmptr);

        // -(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr;
        [Export("sortWithOptions:usingComparator:")]
        void SortWithOptions(NSSortOptions opts, NSComparator cmptr);

        // -(void)sortRange:(NSRange)range options:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr;
        [Export("sortRange:options:usingComparator:")]
        void SortRange(NSRange range, NSSortOptions opts, NSComparator cmptr);
    }

    // @interface NSMutableOrderedSetCreation (NSMutableOrderedSet)
    [Category]
    [BaseType(typeof(NSMutableOrderedSet))]
    interface NSMutableOrderedSet_NSMutableOrderedSetCreation
    {
        // +(instancetype _Nonnull)orderedSetWithCapacity:(NSUInteger)numItems;
        [Static]
        [Export("orderedSetWithCapacity:")]
        NSMutableOrderedSet OrderedSetWithCapacity(nuint numItems);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSExceptionName _Nonnull NSUndefinedKeyException;
        [Field("NSUndefinedKeyException", "__Internal")]
        NSString NSUndefinedKeyException { get; }

        // extern const NSKeyValueOperator _Nonnull NSAverageKeyValueOperator;
        [Field("NSAverageKeyValueOperator", "__Internal")]
        NSString NSAverageKeyValueOperator { get; }

        // extern const NSKeyValueOperator _Nonnull NSCountKeyValueOperator;
        [Field("NSCountKeyValueOperator", "__Internal")]
        NSString NSCountKeyValueOperator { get; }

        // extern const NSKeyValueOperator _Nonnull NSDistinctUnionOfArraysKeyValueOperator;
        [Field("NSDistinctUnionOfArraysKeyValueOperator", "__Internal")]
        NSString NSDistinctUnionOfArraysKeyValueOperator { get; }

        // extern const NSKeyValueOperator _Nonnull NSDistinctUnionOfObjectsKeyValueOperator;
        [Field("NSDistinctUnionOfObjectsKeyValueOperator", "__Internal")]
        NSString NSDistinctUnionOfObjectsKeyValueOperator { get; }

        // extern const NSKeyValueOperator _Nonnull NSDistinctUnionOfSetsKeyValueOperator;
        [Field("NSDistinctUnionOfSetsKeyValueOperator", "__Internal")]
        NSString NSDistinctUnionOfSetsKeyValueOperator { get; }

        // extern const NSKeyValueOperator _Nonnull NSMaximumKeyValueOperator;
        [Field("NSMaximumKeyValueOperator", "__Internal")]
        NSString NSMaximumKeyValueOperator { get; }

        // extern const NSKeyValueOperator _Nonnull NSMinimumKeyValueOperator;
        [Field("NSMinimumKeyValueOperator", "__Internal")]
        NSString NSMinimumKeyValueOperator { get; }

        // extern const NSKeyValueOperator _Nonnull NSSumKeyValueOperator;
        [Field("NSSumKeyValueOperator", "__Internal")]
        NSString NSSumKeyValueOperator { get; }

        // extern const NSKeyValueOperator _Nonnull NSUnionOfArraysKeyValueOperator;
        [Field("NSUnionOfArraysKeyValueOperator", "__Internal")]
        NSString NSUnionOfArraysKeyValueOperator { get; }

        // extern const NSKeyValueOperator _Nonnull NSUnionOfObjectsKeyValueOperator;
        [Field("NSUnionOfObjectsKeyValueOperator", "__Internal")]
        NSString NSUnionOfObjectsKeyValueOperator { get; }

        // extern const NSKeyValueOperator _Nonnull NSUnionOfSetsKeyValueOperator;
        [Field("NSUnionOfSetsKeyValueOperator", "__Internal")]
        NSString NSUnionOfSetsKeyValueOperator { get; }
    }

    // @interface NSKeyValueCoding (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSKeyValueCoding
    {
        // @property (readonly, class) BOOL accessInstanceVariablesDirectly;
        [Static]
        [Export("accessInstanceVariablesDirectly")]
        bool AccessInstanceVariablesDirectly { get; }

        // -(id _Nullable)valueForKey:(NSString * _Nonnull)key;
        [Export("valueForKey:")]
        [return: NullAllowed]
        NSObject ValueForKey(string key);

        // -(void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
        [Export("setValue:forKey:")]
        void SetValue([NullAllowed] NSObject value, string key);

        // -(BOOL)validateValue:(id  _Nullable * _Nonnull)ioValue forKey:(NSString * _Nonnull)inKey error:(NSError * _Nullable * _Nullable)outError;
        [Export("validateValue:forKey:error:")]
        bool ValidateValue([NullAllowed] out NSObject ioValue, string inKey, [NullAllowed] out NSError outError);

        // -(NSMutableArray * _Nonnull)mutableArrayValueForKey:(NSString * _Nonnull)key;
        [Export("mutableArrayValueForKey:")]
        NSMutableArray MutableArrayValueForKey(string key);

        // -(NSMutableOrderedSet * _Nonnull)mutableOrderedSetValueForKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("mutableOrderedSetValueForKey:")]
        NSMutableOrderedSet MutableOrderedSetValueForKey(string key);

        // -(NSMutableSet * _Nonnull)mutableSetValueForKey:(NSString * _Nonnull)key;
        [Export("mutableSetValueForKey:")]
        NSMutableSet MutableSetValueForKey(string key);

        // -(id _Nullable)valueForKeyPath:(NSString * _Nonnull)keyPath;
        [Export("valueForKeyPath:")]
        [return: NullAllowed]
        NSObject ValueForKeyPath(string keyPath);

        // -(void)setValue:(id _Nullable)value forKeyPath:(NSString * _Nonnull)keyPath;
        [Export("setValue:forKeyPath:")]
        void SetValue([NullAllowed] NSObject value, string keyPath);

        // -(BOOL)validateValue:(id  _Nullable * _Nonnull)ioValue forKeyPath:(NSString * _Nonnull)inKeyPath error:(NSError * _Nullable * _Nullable)outError;
        [Export("validateValue:forKeyPath:error:")]
        bool ValidateValue([NullAllowed] out NSObject ioValue, string inKeyPath, [NullAllowed] out NSError outError);

        // -(NSMutableArray * _Nonnull)mutableArrayValueForKeyPath:(NSString * _Nonnull)keyPath;
        [Export("mutableArrayValueForKeyPath:")]
        NSMutableArray MutableArrayValueForKeyPath(string keyPath);

        // -(NSMutableOrderedSet * _Nonnull)mutableOrderedSetValueForKeyPath:(NSString * _Nonnull)keyPath __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("mutableOrderedSetValueForKeyPath:")]
        NSMutableOrderedSet MutableOrderedSetValueForKeyPath(string keyPath);

        // -(NSMutableSet * _Nonnull)mutableSetValueForKeyPath:(NSString * _Nonnull)keyPath;
        [Export("mutableSetValueForKeyPath:")]
        NSMutableSet MutableSetValueForKeyPath(string keyPath);

        // -(id _Nullable)valueForUndefinedKey:(NSString * _Nonnull)key;
        [Export("valueForUndefinedKey:")]
        [return: NullAllowed]
        NSObject ValueForUndefinedKey(string key);

        // -(void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
        [Export("setValue:forUndefinedKey:")]
        void SetValue([NullAllowed] NSObject value, string key);

        // -(void)setNilValueForKey:(NSString * _Nonnull)key;
        [Export("setNilValueForKey:")]
        void SetNilValueForKey(string key);

        // -(NSDictionary<NSString *,id> * _Nonnull)dictionaryWithValuesForKeys:(NSArray<NSString *> * _Nonnull)keys;
        [Export("dictionaryWithValuesForKeys:")]
        NSDictionary<NSString, NSObject> DictionaryWithValuesForKeys(string[] keys);

        // -(void)setValuesForKeysWithDictionary:(NSDictionary<NSString *,id> * _Nonnull)keyedValues;
        [Export("setValuesForKeysWithDictionary:")]
        void SetValuesForKeysWithDictionary(NSDictionary<NSString, NSObject> keyedValues);
    }

    // @interface NSKeyValueCoding (NSArray)
    [Category]
    [BaseType(typeof(NSArray))]
    interface NSArray_NSKeyValueCoding
    {
        // -(id _Nonnull)valueForKey:(NSString * _Nonnull)key;
        [Export("valueForKey:")]
        NSObject ValueForKey(string key);

        // -(void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
        [Export("setValue:forKey:")]
        void SetValue([NullAllowed] NSObject value, string key);
    }

    // @interface NSKeyValueCoding (NSDictionary)
    [Category]
    [BaseType(typeof(NSDictionary))]
    interface NSDictionary_NSKeyValueCoding
    {
        // -(ObjectType _Nullable)valueForKey:(NSString * _Nonnull)key;
        [Export("valueForKey:")]
        [return: NullAllowed]
        NSObject ValueForKey(string key);
    }

    // @interface NSKeyValueCoding (NSMutableDictionary)
    [Category]
    [BaseType(typeof(NSMutableDictionary))]
    interface NSMutableDictionary_NSKeyValueCoding
    {
        // -(void)setValue:(ObjectType _Nullable)value forKey:(NSString * _Nonnull)key;
        [Export("setValue:forKey:")]
        void SetValue([NullAllowed] NSObject value, string key);
    }

    // @interface NSKeyValueCoding (NSOrderedSet)
    [Category]
    [BaseType(typeof(NSOrderedSet))]
    interface NSOrderedSet_NSKeyValueCoding
    {
        // -(id _Nonnull)valueForKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("valueForKey:")]
        NSObject ValueForKey(string key);

        // -(void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("setValue:forKey:")]
        void SetValue([NullAllowed] NSObject value, string key);
    }

    // @interface NSKeyValueCoding (NSSet)
    [Category]
    [BaseType(typeof(NSSet))]
    interface NSSet_NSKeyValueCoding
    {
        // -(id _Nonnull)valueForKey:(NSString * _Nonnull)key;
        [Export("valueForKey:")]
        NSObject ValueForKey(string key);

        // -(void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
        [Export("setValue:forKey:")]
        void SetValue([NullAllowed] NSObject value, string key);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSKeyValueChangeKey _Nonnull NSKeyValueChangeKindKey;
        [Field("NSKeyValueChangeKindKey", "__Internal")]
        NSString NSKeyValueChangeKindKey { get; }

        // extern const NSKeyValueChangeKey _Nonnull NSKeyValueChangeNewKey;
        [Field("NSKeyValueChangeNewKey", "__Internal")]
        NSString NSKeyValueChangeNewKey { get; }

        // extern const NSKeyValueChangeKey _Nonnull NSKeyValueChangeOldKey;
        [Field("NSKeyValueChangeOldKey", "__Internal")]
        NSString NSKeyValueChangeOldKey { get; }

        // extern const NSKeyValueChangeKey _Nonnull NSKeyValueChangeIndexesKey;
        [Field("NSKeyValueChangeIndexesKey", "__Internal")]
        NSString NSKeyValueChangeIndexesKey { get; }

        // extern const NSKeyValueChangeKey _Nonnull NSKeyValueChangeNotificationIsPriorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("NSKeyValueChangeNotificationIsPriorKey", "__Internal")]
        NSString NSKeyValueChangeNotificationIsPriorKey { get; }
    }

    // @interface NSKeyValueObserving (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSKeyValueObserving
    {
        // -(void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey,id> * _Nullable)change context:(void * _Nullable)context;
        [Export("observeValueForKeyPath:ofObject:change:context:")]
        unsafe void ObserveValueForKeyPath([NullAllowed] string keyPath, [NullAllowed] NSObject @object, [NullAllowed] NSDictionary<NSString, NSObject> change, [NullAllowed] void* context);
    }

    // @interface NSKeyValueObserverRegistration (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSKeyValueObserverRegistration
    {
        // -(void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
        [Export("addObserver:forKeyPath:options:context:")]
        unsafe void AddObserver(NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

        // -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("removeObserver:forKeyPath:context:")]
        unsafe void RemoveObserver(NSObject observer, string keyPath, [NullAllowed] void* context);

        // -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
        [Export("removeObserver:forKeyPath:")]
        void RemoveObserver(NSObject observer, string keyPath);
    }

    // @interface NSKeyValueObserverRegistration (NSArray)
    [Category]
    [BaseType(typeof(NSArray))]
    interface NSArray_NSKeyValueObserverRegistration
    {
        // -(void)addObserver:(NSObject * _Nonnull)observer toObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
        [Export("addObserver:toObjectsAtIndexes:forKeyPath:options:context:")]
        unsafe void AddObserver(NSObject observer, NSIndexSet indexes, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

        // -(void)removeObserver:(NSObject * _Nonnull)observer fromObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("removeObserver:fromObjectsAtIndexes:forKeyPath:context:")]
        unsafe void RemoveObserver(NSObject observer, NSIndexSet indexes, string keyPath, [NullAllowed] void* context);

        // -(void)removeObserver:(NSObject * _Nonnull)observer fromObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes forKeyPath:(NSString * _Nonnull)keyPath;
        [Export("removeObserver:fromObjectsAtIndexes:forKeyPath:")]
        void RemoveObserver(NSObject observer, NSIndexSet indexes, string keyPath);

        // -(void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
        [Export("addObserver:forKeyPath:options:context:")]
        unsafe void AddObserver(NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

        // -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("removeObserver:forKeyPath:context:")]
        unsafe void RemoveObserver(NSObject observer, string keyPath, [NullAllowed] void* context);

        // -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
        [Export("removeObserver:forKeyPath:")]
        void RemoveObserver(NSObject observer, string keyPath);
    }

    // @interface NSKeyValueObserverRegistration (NSOrderedSet)
    [Category]
    [BaseType(typeof(NSOrderedSet))]
    interface NSOrderedSet_NSKeyValueObserverRegistration
    {
        // -(void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
        [Export("addObserver:forKeyPath:options:context:")]
        unsafe void AddObserver(NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

        // -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("removeObserver:forKeyPath:context:")]
        unsafe void RemoveObserver(NSObject observer, string keyPath, [NullAllowed] void* context);

        // -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
        [Export("removeObserver:forKeyPath:")]
        void RemoveObserver(NSObject observer, string keyPath);
    }

    // @interface NSKeyValueObserverRegistration (NSSet)
    [Category]
    [BaseType(typeof(NSSet))]
    interface NSSet_NSKeyValueObserverRegistration
    {
        // -(void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
        [Export("addObserver:forKeyPath:options:context:")]
        unsafe void AddObserver(NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

        // -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("removeObserver:forKeyPath:context:")]
        unsafe void RemoveObserver(NSObject observer, string keyPath, [NullAllowed] void* context);

        // -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
        [Export("removeObserver:forKeyPath:")]
        void RemoveObserver(NSObject observer, string keyPath);
    }

    // @interface NSKeyValueObserverNotification (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSKeyValueObserverNotification
    {
        // -(void)willChangeValueForKey:(NSString * _Nonnull)key;
        [Export("willChangeValueForKey:")]
        void WillChangeValueForKey(string key);

        // -(void)didChangeValueForKey:(NSString * _Nonnull)key;
        [Export("didChangeValueForKey:")]
        void DidChangeValueForKey(string key);

        // -(void)willChange:(NSKeyValueChange)changeKind valuesAtIndexes:(NSIndexSet * _Nonnull)indexes forKey:(NSString * _Nonnull)key;
        [Export("willChange:valuesAtIndexes:forKey:")]
        void WillChange(NSKeyValueChange changeKind, NSIndexSet indexes, string key);

        // -(void)didChange:(NSKeyValueChange)changeKind valuesAtIndexes:(NSIndexSet * _Nonnull)indexes forKey:(NSString * _Nonnull)key;
        [Export("didChange:valuesAtIndexes:forKey:")]
        void DidChange(NSKeyValueChange changeKind, NSIndexSet indexes, string key);

        // -(void)willChangeValueForKey:(NSString * _Nonnull)key withSetMutation:(NSKeyValueSetMutationKind)mutationKind usingObjects:(NSSet * _Nonnull)objects;
        [Export("willChangeValueForKey:withSetMutation:usingObjects:")]
        void WillChangeValueForKey(string key, NSKeyValueSetMutationKind mutationKind, NSSet objects);

        // -(void)didChangeValueForKey:(NSString * _Nonnull)key withSetMutation:(NSKeyValueSetMutationKind)mutationKind usingObjects:(NSSet * _Nonnull)objects;
        [Export("didChangeValueForKey:withSetMutation:usingObjects:")]
        void DidChangeValueForKey(string key, NSKeyValueSetMutationKind mutationKind, NSSet objects);
    }

    // @interface NSKeyValueObservingCustomization (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSKeyValueObservingCustomization
    {
        // +(NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingValueForKey:(NSString * _Nonnull)key __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("keyPathsForValuesAffectingValueForKey:")]
        NSSet<NSString> KeyPathsForValuesAffectingValueForKey(string key);

        // +(BOOL)automaticallyNotifiesObserversForKey:(NSString * _Nonnull)key;
        [Static]
        [Export("automaticallyNotifiesObserversForKey:")]
        bool AutomaticallyNotifiesObserversForKey(string key);

        // @property void * _Nullable observationInfo __attribute__((objc_returns_inner_pointer));
        [NullAllowed, Export("observationInfo", ArgumentSemantic.Assign)]
        unsafe void* ObservationInfo { get; set; }
    }

    // @interface NSPropertyListSerialization : NSObject
    [BaseType(typeof(NSObject))]
    interface NSPropertyListSerialization
    {
        // +(BOOL)propertyList:(id _Nonnull)plist isValidForFormat:(NSPropertyListFormat)format;
        [Static]
        [Export("propertyList:isValidForFormat:")]
        bool PropertyList(NSObject plist, NSPropertyListFormat format);

        // +(NSData * _Nullable)dataWithPropertyList:(id _Nonnull)plist format:(NSPropertyListFormat)format options:(NSPropertyListWriteOptions)opt error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("dataWithPropertyList:format:options:error:")]
        [return: NullAllowed]
        NSData DataWithPropertyList(NSObject plist, NSPropertyListFormat format, nuint opt, [NullAllowed] out NSError error);

        // +(NSInteger)writePropertyList:(id _Nonnull)plist toStream:(NSOutputStream * _Nonnull)stream format:(NSPropertyListFormat)format options:(NSPropertyListWriteOptions)opt error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("writePropertyList:toStream:format:options:error:")]
        nint WritePropertyList(NSObject plist, NSOutputStream stream, NSPropertyListFormat format, nuint opt, [NullAllowed] out NSError error);

        // +(id _Nullable)propertyListWithData:(NSData * _Nonnull)data options:(NSPropertyListReadOptions)opt format:(NSPropertyListFormat * _Nullable)format error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("propertyListWithData:options:format:error:")]
        [return: NullAllowed]
        unsafe NSObject PropertyListWithData(NSData data, NSPropertyListReadOptions opt, [NullAllowed] NSPropertyListFormat* format, [NullAllowed] out NSError error);

        // +(id _Nullable)propertyListWithStream:(NSInputStream * _Nonnull)stream options:(NSPropertyListReadOptions)opt format:(NSPropertyListFormat * _Nullable)format error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("propertyListWithStream:options:format:error:")]
        [return: NullAllowed]
        unsafe NSObject PropertyListWithStream(NSInputStream stream, NSPropertyListReadOptions opt, [NullAllowed] NSPropertyListFormat* format, [NullAllowed] out NSError error);

        // +(NSData * _Nullable)dataFromPropertyList:(id _Nonnull)plist format:(NSPropertyListFormat)format errorDescription:(NSString * _Nullable * _Nullable)errorString __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 10, message: "Use dataWithPropertyList:format:options:error: instead.")]
        [Static]
        [Export("dataFromPropertyList:format:errorDescription:")]
        [return: NullAllowed]
        NSData DataFromPropertyList(NSObject plist, NSPropertyListFormat format, [NullAllowed] out string errorString);

        // +(id _Nullable)propertyListFromData:(NSData * _Nonnull)data mutabilityOption:(NSPropertyListMutabilityOptions)opt format:(NSPropertyListFormat * _Nullable)format errorDescription:(NSString * _Nullable * _Nullable)errorString __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use propertyListWithData:options:format:error: instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use propertyListWithData:options:format:error: instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use propertyListWithData:options:format:error: instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use propertyListWithData:options:format:error: instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use propertyListWithData:options:format:error: instead.")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use propertyListWithData:options:format:error: instead.")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use propertyListWithData:options:format:error: instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 10, message: "Use propertyListWithData:options:format:error: instead.")]
        [Static]
        [Export("propertyListFromData:mutabilityOption:format:errorDescription:")]
        [return: NullAllowed]
        unsafe NSObject PropertyListFromData(NSData data, NSPropertyListMutabilityOptions opt, [NullAllowed] NSPropertyListFormat* format, [NullAllowed] out string errorString);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSExceptionName _Nonnull NSInvalidArchiveOperationException;
        [Field("NSInvalidArchiveOperationException", "__Internal")]
        NSString NSInvalidArchiveOperationException { get; }

        // extern const NSExceptionName _Nonnull NSInvalidUnarchiveOperationException;
        [Field("NSInvalidUnarchiveOperationException", "__Internal")]
        NSString NSInvalidUnarchiveOperationException { get; }

        // extern NSString *const _Nonnull NSKeyedArchiveRootObjectKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSKeyedArchiveRootObjectKey", "__Internal")]
        NSString NSKeyedArchiveRootObjectKey { get; }
    }

    // @interface NSKeyedArchiver : NSCoder
    [BaseType(typeof(NSCoder))]
    interface NSKeyedArchiver
    {
        // -(instancetype _Nonnull)initRequiringSecureCoding:(BOOL)requiresSecureCoding __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("initRequiringSecureCoding:")]
        IntPtr Constructor(bool requiresSecureCoding);

        // +(NSData * _Nullable)archivedDataWithRootObject:(id _Nonnull)object requiringSecureCoding:(BOOL)requiresSecureCoding error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Static]
        [Export("archivedDataWithRootObject:requiringSecureCoding:error:")]
        [return: NullAllowed]
        NSData ArchivedDataWithRootObject(NSObject @object, bool requiresSecureCoding, [NullAllowed] out NSError error);

        // -(instancetype _Nonnull)initForWritingWithMutableData:(NSMutableData * _Nonnull)data __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -initRequiringSecureCoding: instead")]
        [Deprecated(PlatformName.TvOS, 12, 0, message: "Use -initRequiringSecureCoding: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -initRequiringSecureCoding: instead")]
        [Deprecated(PlatformName.WatchOS, 5, 0, message: "Use -initRequiringSecureCoding: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -initRequiringSecureCoding: instead")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Use -initRequiringSecureCoding: instead")]
        [Introduced(PlatformName.MacOSX, 10, 2, message: "Use -initRequiringSecureCoding: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 14, message: "Use -initRequiringSecureCoding: instead")]
        [Export("initForWritingWithMutableData:")]
        IntPtr Constructor(NSMutableData data);

        // +(NSData * _Nonnull)archivedDataWithRootObject:(id _Nonnull)rootObject __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Deprecated(PlatformName.TvOS, 12, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Deprecated(PlatformName.WatchOS, 5, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 2, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 14, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Static]
        [Export("archivedDataWithRootObject:")]
        NSData ArchivedDataWithRootObject(NSObject rootObject);

        // +(BOOL)archiveRootObject:(id _Nonnull)rootObject toFile:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Deprecated(PlatformName.TvOS, 12, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Deprecated(PlatformName.WatchOS, 5, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 2, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 14, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
        [Static]
        [Export("archiveRootObject:toFile:")]
        bool ArchiveRootObject(NSObject rootObject, string path);

        [Wrap("WeakDelegate")]
        [NullAllowed]
        NSKeyedArchiverDelegate Delegate { get; set; }

        // @property (assign) id<NSKeyedArchiverDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // @property NSPropertyListFormat outputFormat;
        [Export("outputFormat", ArgumentSemantic.Assign)]
        NSPropertyListFormat OutputFormat { get; set; }

        // @property (readonly, strong) NSData * _Nonnull encodedData __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("encodedData", ArgumentSemantic.Strong)]
        NSData EncodedData { get; }

        // -(void)finishEncoding;
        [Export("finishEncoding")]
        void FinishEncoding();

        // +(void)setClassName:(NSString * _Nullable)codedName forClass:(Class _Nonnull)cls;
        [Static]
        [Export("setClassName:forClass:")]
        void SetClassName([NullAllowed] string codedName, Class cls);

        // -(void)setClassName:(NSString * _Nullable)codedName forClass:(Class _Nonnull)cls;
        [Export("setClassName:forClass:")]
        void SetClassName([NullAllowed] string codedName, Class cls);

        // +(NSString * _Nullable)classNameForClass:(Class _Nonnull)cls;
        [Static]
        [Export("classNameForClass:")]
        [return: NullAllowed]
        string ClassNameForClass(Class cls);

        // -(NSString * _Nullable)classNameForClass:(Class _Nonnull)cls;
        [Export("classNameForClass:")]
        [return: NullAllowed]
        string ClassNameForClass(Class cls);

        // -(void)encodeObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
        [Export("encodeObject:forKey:")]
        void EncodeObject([NullAllowed] NSObject @object, string key);

        // -(void)encodeConditionalObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
        [Export("encodeConditionalObject:forKey:")]
        void EncodeConditionalObject([NullAllowed] NSObject @object, string key);

        // -(void)encodeBool:(BOOL)value forKey:(NSString * _Nonnull)key;
        [Export("encodeBool:forKey:")]
        void EncodeBool(bool value, string key);

        // -(void)encodeInt:(int)value forKey:(NSString * _Nonnull)key;
        [Export("encodeInt:forKey:")]
        void EncodeInt(int value, string key);

        // -(void)encodeInt32:(int32_t)value forKey:(NSString * _Nonnull)key;
        [Export("encodeInt32:forKey:")]
        void EncodeInt32(int value, string key);

        // -(void)encodeInt64:(int64_t)value forKey:(NSString * _Nonnull)key;
        [Export("encodeInt64:forKey:")]
        void EncodeInt64(long value, string key);

        // -(void)encodeFloat:(float)value forKey:(NSString * _Nonnull)key;
        [Export("encodeFloat:forKey:")]
        void EncodeFloat(float value, string key);

        // -(void)encodeDouble:(double)value forKey:(NSString * _Nonnull)key;
        [Export("encodeDouble:forKey:")]
        void EncodeDouble(double value, string key);

        // -(void)encodeBytes:(const uint8_t * _Nullable)bytes length:(NSUInteger)length forKey:(NSString * _Nonnull)key;
        [Export("encodeBytes:length:forKey:")]
        unsafe void EncodeBytes([NullAllowed] byte* bytes, nuint length, string key);

        // @property (readwrite) BOOL requiresSecureCoding __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("requiresSecureCoding")]
        bool RequiresSecureCoding { get; set; }
    }

    // @interface NSKeyedUnarchiver : NSCoder
    [BaseType(typeof(NSCoder))]
    interface NSKeyedUnarchiver
    {
        // -(instancetype _Nullable)initForReadingFromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("initForReadingFromData:error:")]
        IntPtr Constructor(NSData data, [NullAllowed] out NSError error);

        // +(id _Nullable)unarchivedObjectOfClass:(Class _Nonnull)cls fromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Static]
        [Export("unarchivedObjectOfClass:fromData:error:")]
        [return: NullAllowed]
        NSObject UnarchivedObjectOfClass(Class cls, NSData data, [NullAllowed] out NSError error);

        // +(id _Nullable)unarchivedObjectOfClasses:(NSSet<Class> * _Nonnull)classes fromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Static]
        [Export("unarchivedObjectOfClasses:fromData:error:")]
        [return: NullAllowed]
        NSObject UnarchivedObjectOfClasses(NSSet<Class> classes, NSData data, [NullAllowed] out NSError error);

        // -(instancetype _Nonnull)initForReadingWithData:(NSData * _Nonnull)data __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -initForReadingFromData:error: instead")]
        [Deprecated(PlatformName.TvOS, 12, 0, message: "Use -initForReadingFromData:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -initForReadingFromData:error: instead")]
        [Deprecated(PlatformName.WatchOS, 5, 0, message: "Use -initForReadingFromData:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -initForReadingFromData:error: instead")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Use -initForReadingFromData:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 2, message: "Use -initForReadingFromData:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 14, message: "Use -initForReadingFromData:error: instead")]
        [Export("initForReadingWithData:")]
        IntPtr Constructor(NSData data);

        // +(id _Nullable)unarchiveObjectWithData:(NSData * _Nonnull)data __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Deprecated(PlatformName.TvOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Deprecated(PlatformName.WatchOS, 5, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 2, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 14, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Static]
        [Export("unarchiveObjectWithData:")]
        [return: NullAllowed]
        NSObject UnarchiveObjectWithData(NSData data);

        // +(id _Nullable)unarchiveTopLevelObjectWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Deprecated(PlatformName.TvOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Deprecated(PlatformName.WatchOS, 5, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 2, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 14, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Static]
        [Export("unarchiveTopLevelObjectWithData:error:")]
        [return: NullAllowed]
        NSObject UnarchiveTopLevelObjectWithData(NSData data, [NullAllowed] out NSError error);

        // +(id _Nullable)unarchiveObjectWithFile:(NSString * _Nonnull)path __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.14)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Deprecated(PlatformName.TvOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Deprecated(PlatformName.WatchOS, 5, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Introduced(PlatformName.MacOSX, 10, 2, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 14, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
        [Static]
        [Export("unarchiveObjectWithFile:")]
        [return: NullAllowed]
        NSObject UnarchiveObjectWithFile(string path);

        [Wrap("WeakDelegate")]
        [NullAllowed]
        NSKeyedUnarchiverDelegate Delegate { get; set; }

        // @property (assign) id<NSKeyedUnarchiverDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // -(void)finishDecoding;
        [Export("finishDecoding")]
        void FinishDecoding();

        // +(void)setClass:(Class _Nullable)cls forClassName:(NSString * _Nonnull)codedName;
        [Static]
        [Export("setClass:forClassName:")]
        void SetClass([NullAllowed] Class cls, string codedName);

        // -(void)setClass:(Class _Nullable)cls forClassName:(NSString * _Nonnull)codedName;
        [Export("setClass:forClassName:")]
        void SetClass([NullAllowed] Class cls, string codedName);

        // +(Class _Nullable)classForClassName:(NSString * _Nonnull)codedName;
        [Static]
        [Export("classForClassName:")]
        [return: NullAllowed]
        Class ClassForClassName(string codedName);

        // -(Class _Nullable)classForClassName:(NSString * _Nonnull)codedName;
        [Export("classForClassName:")]
        [return: NullAllowed]
        Class ClassForClassName(string codedName);

        // -(BOOL)containsValueForKey:(NSString * _Nonnull)key;
        [Export("containsValueForKey:")]
        bool ContainsValueForKey(string key);

        // -(id _Nullable)decodeObjectForKey:(NSString * _Nonnull)key;
        [Export("decodeObjectForKey:")]
        [return: NullAllowed]
        NSObject DecodeObjectForKey(string key);

        // -(BOOL)decodeBoolForKey:(NSString * _Nonnull)key;
        [Export("decodeBoolForKey:")]
        bool DecodeBoolForKey(string key);

        // -(int)decodeIntForKey:(NSString * _Nonnull)key;
        [Export("decodeIntForKey:")]
        int DecodeIntForKey(string key);

        // -(int32_t)decodeInt32ForKey:(NSString * _Nonnull)key;
        [Export("decodeInt32ForKey:")]
        int DecodeInt32ForKey(string key);

        // -(int64_t)decodeInt64ForKey:(NSString * _Nonnull)key;
        [Export("decodeInt64ForKey:")]
        long DecodeInt64ForKey(string key);

        // -(float)decodeFloatForKey:(NSString * _Nonnull)key;
        [Export("decodeFloatForKey:")]
        float DecodeFloatForKey(string key);

        // -(double)decodeDoubleForKey:(NSString * _Nonnull)key;
        [Export("decodeDoubleForKey:")]
        double DecodeDoubleForKey(string key);

        // -(const uint8_t * _Nullable)decodeBytesForKey:(NSString * _Nonnull)key returnedLength:(NSUInteger * _Nullable)lengthp __attribute__((objc_returns_inner_pointer));
        [Export("decodeBytesForKey:returnedLength:")]
        [return: NullAllowed]
        unsafe byte* DecodeBytesForKey(string key, [NullAllowed] nuint* lengthp);

        // @property (readwrite) BOOL requiresSecureCoding __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("requiresSecureCoding")]
        bool RequiresSecureCoding { get; set; }

        // @property (readwrite) NSDecodingFailurePolicy decodingFailurePolicy __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("decodingFailurePolicy", ArgumentSemantic.Assign)]
        NSDecodingFailurePolicy DecodingFailurePolicy { get; set; }
    }

    // @protocol NSKeyedArchiverDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSKeyedArchiverDelegate
    {
        // @optional -(id _Nullable)archiver:(NSKeyedArchiver * _Nonnull)archiver willEncodeObject:(id _Nonnull)object;
        [Export("archiver:willEncodeObject:")]
        [return: NullAllowed]
        NSObject Archiver(NSKeyedArchiver archiver, NSObject @object);

        // @optional -(void)archiver:(NSKeyedArchiver * _Nonnull)archiver didEncodeObject:(id _Nullable)object;
        [Export("archiver:didEncodeObject:")]
        void Archiver(NSKeyedArchiver archiver, [NullAllowed] NSObject @object);

        // @optional -(void)archiver:(NSKeyedArchiver * _Nonnull)archiver willReplaceObject:(id _Nullable)object withObject:(id _Nullable)newObject;
        [Export("archiver:willReplaceObject:withObject:")]
        void Archiver(NSKeyedArchiver archiver, [NullAllowed] NSObject @object, [NullAllowed] NSObject newObject);

        // @optional -(void)archiverWillFinish:(NSKeyedArchiver * _Nonnull)archiver;
        [Export("archiverWillFinish:")]
        void ArchiverWillFinish(NSKeyedArchiver archiver);

        // @optional -(void)archiverDidFinish:(NSKeyedArchiver * _Nonnull)archiver;
        [Export("archiverDidFinish:")]
        void ArchiverDidFinish(NSKeyedArchiver archiver);
    }

    // @protocol NSKeyedUnarchiverDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSKeyedUnarchiverDelegate
    {
        // @optional -(Class _Nullable)unarchiver:(NSKeyedUnarchiver * _Nonnull)unarchiver cannotDecodeObjectOfClassName:(NSString * _Nonnull)name originalClasses:(NSArray<NSString *> * _Nonnull)classNames;
        [Export("unarchiver:cannotDecodeObjectOfClassName:originalClasses:")]
        [return: NullAllowed]
        Class Unarchiver(NSKeyedUnarchiver unarchiver, string name, string[] classNames);

        // @optional -(id _Nullable)unarchiver:(NSKeyedUnarchiver * _Nonnull)unarchiver didDecodeObject:(id _Nullable)object __attribute__((ns_returns_retained));
        [Export("unarchiver:didDecodeObject:")]
        [return: NullAllowed]
        NSObject Unarchiver(NSKeyedUnarchiver unarchiver, [NullAllowed] NSObject @object);

        // @optional -(void)unarchiver:(NSKeyedUnarchiver * _Nonnull)unarchiver willReplaceObject:(id _Nonnull)object withObject:(id _Nonnull)newObject;
        [Export("unarchiver:willReplaceObject:withObject:")]
        void Unarchiver(NSKeyedUnarchiver unarchiver, NSObject @object, NSObject newObject);

        // @optional -(void)unarchiverWillFinish:(NSKeyedUnarchiver * _Nonnull)unarchiver;
        [Export("unarchiverWillFinish:")]
        void UnarchiverWillFinish(NSKeyedUnarchiver unarchiver);

        // @optional -(void)unarchiverDidFinish:(NSKeyedUnarchiver * _Nonnull)unarchiver;
        [Export("unarchiverDidFinish:")]
        void UnarchiverDidFinish(NSKeyedUnarchiver unarchiver);
    }

    // @interface NSKeyedArchiverObjectSubstitution (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSKeyedArchiverObjectSubstitution
    {
        // @property (readonly) Class _Nullable classForKeyedArchiver;
        [NullAllowed, Export("classForKeyedArchiver")]
        Class ClassForKeyedArchiver { get; }

        // -(id _Nullable)replacementObjectForKeyedArchiver:(NSKeyedArchiver * _Nonnull)archiver;
        [Export("replacementObjectForKeyedArchiver:")]
        [return: NullAllowed]
        NSObject ReplacementObjectForKeyedArchiver(NSKeyedArchiver archiver);

        // +(NSArray<NSString *> * _Nonnull)classFallbacksForKeyedArchiver;
        [Static]
        [Export("classFallbacksForKeyedArchiver")]
        [Verify(MethodToProperty)]
        string[] ClassFallbacksForKeyedArchiver { get; }
    }

    // @interface NSKeyedUnarchiverObjectSubstitution (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSKeyedUnarchiverObjectSubstitution
    {
        // +(Class _Nonnull)classForKeyedUnarchiver;
        [Static]
        [Export("classForKeyedUnarchiver")]
        [Verify(MethodToProperty)]
        Class ClassForKeyedUnarchiver { get; }
    }

    // @protocol NSLocking
    [Protocol, Model]
    interface NSLocking
    {
        // @required -(void)lock;
        [Abstract]
        [Export("lock")]
        void Lock();

        // @required -(void)unlock;
        [Abstract]
        [Export("unlock")]
        void Unlock();
    }

    // @interface NSLock : NSObject <NSLocking>
    [BaseType(typeof(NSObject))]
    interface NSLock : INSLocking
    {
        // -(BOOL)tryLock;
        [Export("tryLock")]
        [Verify(MethodToProperty)]
        bool TryLock { get; }

        // -(BOOL)lockBeforeDate:(NSDate * _Nonnull)limit;
        [Export("lockBeforeDate:")]
        bool LockBeforeDate(NSDate limit);

        // @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [NullAllowed, Export("name")]
        string Name { get; set; }
    }

    // @interface NSConditionLock : NSObject <NSLocking>
    [BaseType(typeof(NSObject))]
    interface NSConditionLock : INSLocking
    {
        // -(instancetype _Nonnull)initWithCondition:(NSInteger)condition __attribute__((objc_designated_initializer));
        [Export("initWithCondition:")]
        [DesignatedInitializer]
        IntPtr Constructor(nint condition);

        // @property (readonly) NSInteger condition;
        [Export("condition")]
        nint Condition { get; }

        // -(void)lockWhenCondition:(NSInteger)condition;
        [Export("lockWhenCondition:")]
        void LockWhenCondition(nint condition);

        // -(BOOL)tryLock;
        [Export("tryLock")]
        [Verify(MethodToProperty)]
        bool TryLock { get; }

        // -(BOOL)tryLockWhenCondition:(NSInteger)condition;
        [Export("tryLockWhenCondition:")]
        bool TryLockWhenCondition(nint condition);

        // -(void)unlockWithCondition:(NSInteger)condition;
        [Export("unlockWithCondition:")]
        void UnlockWithCondition(nint condition);

        // -(BOOL)lockBeforeDate:(NSDate * _Nonnull)limit;
        [Export("lockBeforeDate:")]
        bool LockBeforeDate(NSDate limit);

        // -(BOOL)lockWhenCondition:(NSInteger)condition beforeDate:(NSDate * _Nonnull)limit;
        [Export("lockWhenCondition:beforeDate:")]
        bool LockWhenCondition(nint condition, NSDate limit);

        // @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [NullAllowed, Export("name")]
        string Name { get; set; }
    }

    // @interface NSRecursiveLock : NSObject <NSLocking>
    [BaseType(typeof(NSObject))]
    interface NSRecursiveLock : INSLocking
    {
        // -(BOOL)tryLock;
        [Export("tryLock")]
        [Verify(MethodToProperty)]
        bool TryLock { get; }

        // -(BOOL)lockBeforeDate:(NSDate * _Nonnull)limit;
        [Export("lockBeforeDate:")]
        bool LockBeforeDate(NSDate limit);

        // @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [NullAllowed, Export("name")]
        string Name { get; set; }
    }

    // @interface NSCondition : NSObject <NSLocking>
    [iOS(2, 0)]
    [BaseType(typeof(NSObject))]
    interface NSCondition : INSLocking
    {
        // -(void)wait;
        [Export("wait")]
        void Wait();

        // -(BOOL)waitUntilDate:(NSDate * _Nonnull)limit;
        [Export("waitUntilDate:")]
        bool WaitUntilDate(NSDate limit);

        // -(void)signal;
        [Export("signal")]
        void Signal();

        // -(void)broadcast;
        [Export("broadcast")]
        void Broadcast();

        // @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [NullAllowed, Export("name")]
        string Name { get; set; }
    }

    // audit-objc-generics: @interface NSMapTable<KeyType, ObjectType> : NSObject <NSCopying, NSSecureCoding, NSFastEnumeration>
    [iOS(6, 0)]
    [BaseType(typeof(NSObject))]
    interface NSMapTable : INSCopying, INSSecureCoding, INSFastEnumeration
    {
        // -(instancetype _Nonnull)initWithKeyOptions:(NSPointerFunctionsOptions)keyOptions valueOptions:(NSPointerFunctionsOptions)valueOptions capacity:(NSUInteger)initialCapacity __attribute__((objc_designated_initializer));
        [Export("initWithKeyOptions:valueOptions:capacity:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSPointerFunctionsOptions keyOptions, NSPointerFunctionsOptions valueOptions, nuint initialCapacity);

        // -(instancetype _Nonnull)initWithKeyPointerFunctions:(NSPointerFunctions * _Nonnull)keyFunctions valuePointerFunctions:(NSPointerFunctions * _Nonnull)valueFunctions capacity:(NSUInteger)initialCapacity __attribute__((objc_designated_initializer));
        [Export("initWithKeyPointerFunctions:valuePointerFunctions:capacity:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSPointerFunctions keyFunctions, NSPointerFunctions valueFunctions, nuint initialCapacity);

        // +(NSMapTable<KeyType,ObjectType> * _Nonnull)mapTableWithKeyOptions:(NSPointerFunctionsOptions)keyOptions valueOptions:(NSPointerFunctionsOptions)valueOptions;
        [Static]
        [Export("mapTableWithKeyOptions:valueOptions:")]
        NSMapTable<NSObject, NSObject> MapTableWithKeyOptions(NSPointerFunctionsOptions keyOptions, NSPointerFunctionsOptions valueOptions);

        // +(id _Nonnull)mapTableWithStrongToStrongObjects __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5, deprecated=10.8)));
        [Introduced(PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
        [Deprecated(PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
        [NoWatch, NoTV, NoiOS]
        [Static]
        [Export("mapTableWithStrongToStrongObjects")]
        [Verify(MethodToProperty)]
        NSObject MapTableWithStrongToStrongObjects { get; }

        // +(id _Nonnull)mapTableWithWeakToStrongObjects __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5, deprecated=10.8)));
        [Introduced(PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
        [Deprecated(PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
        [NoWatch, NoTV, NoiOS]
        [Static]
        [Export("mapTableWithWeakToStrongObjects")]
        [Verify(MethodToProperty)]
        NSObject MapTableWithWeakToStrongObjects { get; }

        // +(id _Nonnull)mapTableWithStrongToWeakObjects __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5, deprecated=10.8)));
        [Introduced(PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
        [Deprecated(PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
        [NoWatch, NoTV, NoiOS]
        [Static]
        [Export("mapTableWithStrongToWeakObjects")]
        [Verify(MethodToProperty)]
        NSObject MapTableWithStrongToWeakObjects { get; }

        // +(id _Nonnull)mapTableWithWeakToWeakObjects __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5, deprecated=10.8)));
        [Introduced(PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
        [Deprecated(PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
        [NoWatch, NoTV, NoiOS]
        [Static]
        [Export("mapTableWithWeakToWeakObjects")]
        [Verify(MethodToProperty)]
        NSObject MapTableWithWeakToWeakObjects { get; }

        // +(NSMapTable<KeyType,ObjectType> * _Nonnull)strongToStrongObjectsMapTable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Static]
        [Export("strongToStrongObjectsMapTable")]
        [Verify(MethodToProperty)]
        NSMapTable<NSObject, NSObject> StrongToStrongObjectsMapTable { get; }

        // +(NSMapTable<KeyType,ObjectType> * _Nonnull)weakToStrongObjectsMapTable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Static]
        [Export("weakToStrongObjectsMapTable")]
        [Verify(MethodToProperty)]
        NSMapTable<NSObject, NSObject> WeakToStrongObjectsMapTable { get; }

        // +(NSMapTable<KeyType,ObjectType> * _Nonnull)strongToWeakObjectsMapTable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Static]
        [Export("strongToWeakObjectsMapTable")]
        [Verify(MethodToProperty)]
        NSMapTable<NSObject, NSObject> StrongToWeakObjectsMapTable { get; }

        // +(NSMapTable<KeyType,ObjectType> * _Nonnull)weakToWeakObjectsMapTable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Static]
        [Export("weakToWeakObjectsMapTable")]
        [Verify(MethodToProperty)]
        NSMapTable<NSObject, NSObject> WeakToWeakObjectsMapTable { get; }

        // @property (readonly, copy) NSPointerFunctions * _Nonnull keyPointerFunctions;
        [Export("keyPointerFunctions", ArgumentSemantic.Copy)]
        NSPointerFunctions KeyPointerFunctions { get; }

        // @property (readonly, copy) NSPointerFunctions * _Nonnull valuePointerFunctions;
        [Export("valuePointerFunctions", ArgumentSemantic.Copy)]
        NSPointerFunctions ValuePointerFunctions { get; }

        // -(ObjectType _Nullable)objectForKey:(KeyType _Nullable)aKey;
        [Export("objectForKey:")]
        [return: NullAllowed]
        NSObject ObjectForKey([NullAllowed] NSObject aKey);

        // -(void)removeObjectForKey:(KeyType _Nullable)aKey;
        [Export("removeObjectForKey:")]
        void RemoveObjectForKey([NullAllowed] NSObject aKey);

        // -(void)setObject:(ObjectType _Nullable)anObject forKey:(KeyType _Nullable)aKey;
        [Export("setObject:forKey:")]
        void SetObject([NullAllowed] NSObject anObject, [NullAllowed] NSObject aKey);

        // @property (readonly) NSUInteger count;
        [Export("count")]
        nuint Count { get; }

        // -(NSEnumerator<KeyType> * _Nonnull)keyEnumerator;
        [Export("keyEnumerator")]
        [Verify(MethodToProperty)]
        NSEnumerator<NSObject> KeyEnumerator { get; }

        // -(NSEnumerator<ObjectType> * _Nullable)objectEnumerator;
        [NullAllowed, Export("objectEnumerator")]
        [Verify(MethodToProperty)]
        NSEnumerator<NSObject> ObjectEnumerator { get; }

        // -(void)removeAllObjects;
        [Export("removeAllObjects")]
        void RemoveAllObjects();

        // -(NSDictionary<KeyType,ObjectType> * _Nonnull)dictionaryRepresentation;
        [Export("dictionaryRepresentation")]
        [Verify(MethodToProperty)]
        NSDictionary<NSObject, NSObject> DictionaryRepresentation { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSMapTableKeyCallBacks NSIntegerMapKeyCallBacks __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5)));
        [NoWatch, NoTV, NoiOS, Mac(10, 5)]
        [Field("NSIntegerMapKeyCallBacks", "__Internal")]
        NSMapTableKeyCallBacks NSIntegerMapKeyCallBacks { get; }

        // extern const NSMapTableKeyCallBacks NSNonOwnedPointerMapKeyCallBacks;
        [Field("NSNonOwnedPointerMapKeyCallBacks", "__Internal")]
        NSMapTableKeyCallBacks NSNonOwnedPointerMapKeyCallBacks { get; }

        // extern const NSMapTableKeyCallBacks NSNonOwnedPointerOrNullMapKeyCallBacks;
        [Field("NSNonOwnedPointerOrNullMapKeyCallBacks", "__Internal")]
        NSMapTableKeyCallBacks NSNonOwnedPointerOrNullMapKeyCallBacks { get; }

        // extern const NSMapTableKeyCallBacks NSNonRetainedObjectMapKeyCallBacks;
        [Field("NSNonRetainedObjectMapKeyCallBacks", "__Internal")]
        NSMapTableKeyCallBacks NSNonRetainedObjectMapKeyCallBacks { get; }

        // extern const NSMapTableKeyCallBacks NSObjectMapKeyCallBacks;
        [Field("NSObjectMapKeyCallBacks", "__Internal")]
        NSMapTableKeyCallBacks NSObjectMapKeyCallBacks { get; }

        // extern const NSMapTableKeyCallBacks NSOwnedPointerMapKeyCallBacks;
        [Field("NSOwnedPointerMapKeyCallBacks", "__Internal")]
        NSMapTableKeyCallBacks NSOwnedPointerMapKeyCallBacks { get; }

        // extern const NSMapTableKeyCallBacks NSIntMapKeyCallBacks __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Not supported")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Not supported")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Not supported")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Not supported")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Not supported")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Not supported")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Not supported")]
        [Deprecated(PlatformName.MacOSX, 10, 5, message: "Not supported")]
        [Field("NSIntMapKeyCallBacks", "__Internal")]
        NSMapTableKeyCallBacks NSIntMapKeyCallBacks { get; }

        // extern const NSMapTableValueCallBacks NSIntegerMapValueCallBacks __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5)));
        [NoWatch, NoTV, NoiOS, Mac(10, 5)]
        [Field("NSIntegerMapValueCallBacks", "__Internal")]
        NSMapTableValueCallBacks NSIntegerMapValueCallBacks { get; }

        // extern const NSMapTableValueCallBacks NSNonOwnedPointerMapValueCallBacks;
        [Field("NSNonOwnedPointerMapValueCallBacks", "__Internal")]
        NSMapTableValueCallBacks NSNonOwnedPointerMapValueCallBacks { get; }

        // extern const NSMapTableValueCallBacks NSObjectMapValueCallBacks;
        [Field("NSObjectMapValueCallBacks", "__Internal")]
        NSMapTableValueCallBacks NSObjectMapValueCallBacks { get; }

        // extern const NSMapTableValueCallBacks NSNonRetainedObjectMapValueCallBacks;
        [Field("NSNonRetainedObjectMapValueCallBacks", "__Internal")]
        NSMapTableValueCallBacks NSNonRetainedObjectMapValueCallBacks { get; }

        // extern const NSMapTableValueCallBacks NSOwnedPointerMapValueCallBacks;
        [Field("NSOwnedPointerMapValueCallBacks", "__Internal")]
        NSMapTableValueCallBacks NSOwnedPointerMapValueCallBacks { get; }

        // extern const NSMapTableValueCallBacks NSIntMapValueCallBacks __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Not supported")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Not supported")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Not supported")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Not supported")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Not supported")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Not supported")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Not supported")]
        [Deprecated(PlatformName.MacOSX, 10, 5, message: "Not supported")]
        [Field("NSIntMapValueCallBacks", "__Internal")]
        NSMapTableValueCallBacks NSIntMapValueCallBacks { get; }
    }

    // @interface NSMethodSignature : NSObject
    [BaseType(typeof(NSObject))]
    interface NSMethodSignature
    {
        // +(NSMethodSignature * _Nullable)signatureWithObjCTypes:(const char * _Nonnull)types;
        [Static]
        [Export("signatureWithObjCTypes:")]
        [return: NullAllowed]
        unsafe NSMethodSignature SignatureWithObjCTypes(sbyte* types);

        // @property (readonly) NSUInteger numberOfArguments;
        [Export("numberOfArguments")]
        nuint NumberOfArguments { get; }

        // -(const char * _Nonnull)getArgumentTypeAtIndex:(NSUInteger)idx __attribute__((objc_returns_inner_pointer));
        [Export("getArgumentTypeAtIndex:")]
        unsafe sbyte* GetArgumentTypeAtIndex(nuint idx);

        // @property (readonly) NSUInteger frameLength;
        [Export("frameLength")]
        nuint FrameLength { get; }

        // -(BOOL)isOneway;
        [Export("isOneway")]
        [Verify(MethodToProperty)]
        bool IsOneway { get; }

        // @property (readonly) const char * _Nonnull methodReturnType __attribute__((objc_returns_inner_pointer));
        [Export("methodReturnType")]
        unsafe sbyte* MethodReturnType { get; }

        // @property (readonly) NSUInteger methodReturnLength;
        [Export("methodReturnLength")]
        nuint MethodReturnLength { get; }
    }

    // @interface NSNotificationQueue : NSObject
    [BaseType(typeof(NSObject))]
    interface NSNotificationQueue
    {
        // @property (readonly, strong, class) NSNotificationQueue * _Nonnull defaultQueue;
        [Static]
        [Export("defaultQueue", ArgumentSemantic.Strong)]
        NSNotificationQueue DefaultQueue { get; }

        // -(instancetype _Nonnull)initWithNotificationCenter:(NSNotificationCenter * _Nonnull)notificationCenter __attribute__((objc_designated_initializer));
        [Export("initWithNotificationCenter:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSNotificationCenter notificationCenter);

        // -(void)enqueueNotification:(NSNotification * _Nonnull)notification postingStyle:(NSPostingStyle)postingStyle;
        [Export("enqueueNotification:postingStyle:")]
        void EnqueueNotification(NSNotification notification, NSPostingStyle postingStyle);

        // -(void)enqueueNotification:(NSNotification * _Nonnull)notification postingStyle:(NSPostingStyle)postingStyle coalesceMask:(NSNotificationCoalescing)coalesceMask forModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
        [Export("enqueueNotification:postingStyle:coalesceMask:forModes:")]
        void EnqueueNotification(NSNotification notification, NSPostingStyle postingStyle, NSNotificationCoalescing coalesceMask, [NullAllowed] string[] modes);

        // -(void)dequeueNotificationsMatching:(NSNotification * _Nonnull)notification coalesceMask:(NSUInteger)coalesceMask;
        [Export("dequeueNotificationsMatching:coalesceMask:")]
        void DequeueNotificationsMatching(NSNotification notification, nuint coalesceMask);
    }

    // @interface NSNull : NSObject <NSCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSNull : INSCopying, INSSecureCoding
    {
        // +(NSNull * _Nonnull)null;
        [Static]
        [Export("null")]
        [Verify(MethodToProperty)]
        NSNull Null { get; }
    }

    // @interface NSOperation : NSObject
    [iOS(2, 0)]
    [BaseType(typeof(NSObject))]
    interface NSOperation
    {
        // -(void)start;
        [Export("start")]
        void Start();

        // -(void)main;
        [Export("main")]
        void Main();

        // @property (readonly, getter = isCancelled) BOOL cancelled;
        [Export("cancelled")]
        bool Cancelled { [Bind("isCancelled")] get; }

        // -(void)cancel;
        [Export("cancel")]
        void Cancel();

        // @property (readonly, getter = isExecuting) BOOL executing;
        [Export("executing")]
        bool Executing { [Bind("isExecuting")] get; }

        // @property (readonly, getter = isFinished) BOOL finished;
        [Export("finished")]
        bool Finished { [Bind("isFinished")] get; }

        // @property (readonly, getter = isConcurrent) BOOL concurrent;
        [Export("concurrent")]
        bool Concurrent { [Bind("isConcurrent")] get; }

        // @property (readonly, getter = isAsynchronous) BOOL asynchronous __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(7, 0)]
        [Export("asynchronous")]
        bool Asynchronous { [Bind("isAsynchronous")] get; }

        // @property (readonly, getter = isReady) BOOL ready;
        [Export("ready")]
        bool Ready { [Bind("isReady")] get; }

        // -(void)addDependency:(NSOperation * _Nonnull)op;
        [Export("addDependency:")]
        void AddDependency(NSOperation op);

        // -(void)removeDependency:(NSOperation * _Nonnull)op;
        [Export("removeDependency:")]
        void RemoveDependency(NSOperation op);

        // @property (readonly, copy) NSArray<NSOperation *> * _Nonnull dependencies;
        [Export("dependencies", ArgumentSemantic.Copy)]
        NSOperation[] Dependencies { get; }

        // @property NSOperationQueuePriority queuePriority;
        [Export("queuePriority", ArgumentSemantic.Assign)]
        NSOperationQueuePriority QueuePriority { get; set; }

        // @property (copy) void (^ _Nullable)(void) completionBlock __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("completionBlock", ArgumentSemantic.Copy)]
        Action CompletionBlock { get; set; }

        // -(void)waitUntilFinished __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("waitUntilFinished")]
        void WaitUntilFinished();

        // @property double threadPriority __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=4.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.6, deprecated=10.10)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Not supported")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Not supported")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Not supported")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Not supported")]
        [Introduced(PlatformName.iOS, 4, 0, message: "Not supported")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Not supported")]
        [Introduced(PlatformName.MacOSX, 10, 6, message: "Not supported")]
        [Deprecated(PlatformName.MacOSX, 10, 10, message: "Not supported")]
        [Export("threadPriority")]
        double ThreadPriority { get; set; }

        // @property NSQualityOfService qualityOfService __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("qualityOfService", ArgumentSemantic.Assign)]
        NSQualityOfService QualityOfService { get; set; }

        // @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [NullAllowed, Export("name")]
        string Name { get; set; }
    }

    // @interface NSBlockOperation : NSOperation
    [iOS(4, 0)]
    [BaseType(typeof(NSOperation))]
    interface NSBlockOperation
    {
        // +(instancetype _Nonnull)blockOperationWithBlock:(void (^ _Nonnull)(void))block;
        [Static]
        [Export("blockOperationWithBlock:")]
        NSBlockOperation BlockOperationWithBlock(Action block);

        // -(void)addExecutionBlock:(void (^ _Nonnull)(void))block;
        [Export("addExecutionBlock:")]
        void AddExecutionBlock(Action block);

        // @property (readonly, copy) NSArray<void (^)(void)> * _Nonnull executionBlocks;
        [Export("executionBlocks", ArgumentSemantic.Copy)]
        Action[] ExecutionBlocks { get; }
    }

    // @interface NSInvocationOperation : NSOperation
    [iOS(2, 0)]
    [BaseType(typeof(NSOperation))]
    interface NSInvocationOperation
    {
        // -(instancetype _Nullable)initWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)sel object:(id _Nullable)arg;
        [Export("initWithTarget:selector:object:")]
        IntPtr Constructor(NSObject target, Selector sel, [NullAllowed] NSObject arg);

        // -(instancetype _Nonnull)initWithInvocation:(NSInvocation * _Nonnull)inv __attribute__((objc_designated_initializer));
        [Export("initWithInvocation:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSInvocation inv);

        // @property (readonly, retain) NSInvocation * _Nonnull invocation;
        [Export("invocation", ArgumentSemantic.Retain)]
        NSInvocation Invocation { get; }

        // @property (readonly, retain) id _Nullable result;
        [NullAllowed, Export("result", ArgumentSemantic.Retain)]
        NSObject Result { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSExceptionName _Nonnull NSInvocationOperationVoidResultException __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("NSInvocationOperationVoidResultException", "__Internal")]
        NSString NSInvocationOperationVoidResultException { get; }

        // extern const NSExceptionName _Nonnull NSInvocationOperationCancelledException __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("NSInvocationOperationCancelledException", "__Internal")]
        NSString NSInvocationOperationCancelledException { get; }
    }

    // @interface NSOperationQueue : NSObject
    [iOS(2, 0)]
    [BaseType(typeof(NSObject))]
    interface NSOperationQueue
    {
        // -(void)addOperation:(NSOperation * _Nonnull)op;
        [Export("addOperation:")]
        void AddOperation(NSOperation op);

        // -(void)addOperations:(NSArray<NSOperation *> * _Nonnull)ops waitUntilFinished:(BOOL)wait __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("addOperations:waitUntilFinished:")]
        void AddOperations(NSOperation[] ops, bool wait);

        // -(void)addOperationWithBlock:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("addOperationWithBlock:")]
        void AddOperationWithBlock(Action block);

        // @property (readonly, copy) NSArray<__kindof NSOperation *> * _Nonnull operations;
        [Export("operations", ArgumentSemantic.Copy)]
        NSOperation[] Operations { get; }

        // @property (readonly) NSUInteger operationCount __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("operationCount")]
        nuint OperationCount { get; }

        // @property NSInteger maxConcurrentOperationCount;
        [Export("maxConcurrentOperationCount")]
        nint MaxConcurrentOperationCount { get; set; }

        // @property (getter = isSuspended) BOOL suspended;
        [Export("suspended")]
        bool Suspended { [Bind("isSuspended")] get; set; }

        // @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("name")]
        string Name { get; set; }

        // @property NSQualityOfService qualityOfService __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("qualityOfService", ArgumentSemantic.Assign)]
        NSQualityOfService QualityOfService { get; set; }

        // @property (assign) dispatch_queue_t _Nullable underlyingQueue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [NullAllowed, Export("underlyingQueue", ArgumentSemantic.Assign)]
        DispatchQueue UnderlyingQueue { get; set; }

        // -(void)cancelAllOperations;
        [Export("cancelAllOperations")]
        void CancelAllOperations();

        // -(void)waitUntilAllOperationsAreFinished;
        [Export("waitUntilAllOperationsAreFinished")]
        void WaitUntilAllOperationsAreFinished();

        // @property (readonly, strong, class) NSOperationQueue * _Nullable currentQueue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [NullAllowed, Export("currentQueue", ArgumentSemantic.Strong)]
        NSOperationQueue CurrentQueue { get; }

        // @property (readonly, strong, class) NSOperationQueue * _Nonnull mainQueue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("mainQueue", ArgumentSemantic.Strong)]
        NSOperationQueue MainQueue { get; }
    }

    // @interface NSOrthography : NSObject <NSCopying, NSSecureCoding>
    [iOS(4, 0)]
    [BaseType(typeof(NSObject))]
    interface NSOrthography : INSCopying, INSSecureCoding
    {
        // @property (readonly, copy) NSString * _Nonnull dominantScript;
        [Export("dominantScript")]
        string DominantScript { get; }

        // @property (readonly, copy) NSDictionary<NSString *,NSArray<NSString *> *> * _Nonnull languageMap;
        [Export("languageMap", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSArray<NSString>> LanguageMap { get; }

        // -(instancetype _Nonnull)initWithDominantScript:(NSString * _Nonnull)script languageMap:(NSDictionary<NSString *,NSArray<NSString *> *> * _Nonnull)map __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("initWithDominantScript:languageMap:")]
        [DesignatedInitializer]
        IntPtr Constructor(string script, NSDictionary<NSString, NSArray<NSString>> map);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);
    }

    // @interface NSOrthographyExtended (NSOrthography)
    [Category]
    [BaseType(typeof(NSOrthography))]
    interface NSOrthography_NSOrthographyExtended
    {
        // -(NSArray<NSString *> * _Nullable)languagesForScript:(NSString * _Nonnull)script __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("languagesForScript:")]
        [return: NullAllowed]
        string[] LanguagesForScript(string script);

        // -(NSString * _Nullable)dominantLanguageForScript:(NSString * _Nonnull)script __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("dominantLanguageForScript:")]
        [return: NullAllowed]
        string DominantLanguageForScript(string script);

        // @property (readonly, copy) NSString * _Nonnull dominantLanguage __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("dominantLanguage")]
        string DominantLanguage { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull allScripts __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("allScripts", ArgumentSemantic.Copy)]
        string[] AllScripts { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull allLanguages __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("allLanguages", ArgumentSemantic.Copy)]
        string[] AllLanguages { get; }

        // +(instancetype _Nonnull)defaultOrthographyForLanguage:(NSString * _Nonnull)language __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Static]
        [Export("defaultOrthographyForLanguage:")]
        NSOrthography DefaultOrthographyForLanguage(string language);
    }

    // @interface NSOrthographyCreation (NSOrthography)
    [Category]
    [BaseType(typeof(NSOrthography))]
    interface NSOrthography_NSOrthographyCreation
    {
        // +(instancetype _Nonnull)orthographyWithDominantScript:(NSString * _Nonnull)script languageMap:(NSDictionary<NSString *,NSArray<NSString *> *> * _Nonnull)map __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("orthographyWithDominantScript:languageMap:")]
        NSOrthography OrthographyWithDominantScript(string script, NSDictionary<NSString, NSArray<NSString>> map);
    }

    // @interface NSPointerArray : NSObject <NSFastEnumeration, NSCopying, NSSecureCoding>
    [iOS(6, 0)]
    [BaseType(typeof(NSObject))]
    interface NSPointerArray : INSFastEnumeration, INSCopying, INSSecureCoding
    {
        // -(instancetype _Nonnull)initWithOptions:(NSPointerFunctionsOptions)options __attribute__((objc_designated_initializer));
        [Export("initWithOptions:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSPointerFunctionsOptions options);

        // -(instancetype _Nonnull)initWithPointerFunctions:(NSPointerFunctions * _Nonnull)functions __attribute__((objc_designated_initializer));
        [Export("initWithPointerFunctions:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSPointerFunctions functions);

        // +(NSPointerArray * _Nonnull)pointerArrayWithOptions:(NSPointerFunctionsOptions)options;
        [Static]
        [Export("pointerArrayWithOptions:")]
        NSPointerArray PointerArrayWithOptions(NSPointerFunctionsOptions options);

        // +(NSPointerArray * _Nonnull)pointerArrayWithPointerFunctions:(NSPointerFunctions * _Nonnull)functions;
        [Static]
        [Export("pointerArrayWithPointerFunctions:")]
        NSPointerArray PointerArrayWithPointerFunctions(NSPointerFunctions functions);

        // @property (readonly, copy) NSPointerFunctions * _Nonnull pointerFunctions;
        [Export("pointerFunctions", ArgumentSemantic.Copy)]
        NSPointerFunctions PointerFunctions { get; }

        // -(void * _Nullable)pointerAtIndex:(NSUInteger)index;
        [Export("pointerAtIndex:")]
        [return: NullAllowed]
        unsafe void* PointerAtIndex(nuint index);

        // -(void)addPointer:(void * _Nullable)pointer;
        [Export("addPointer:")]
        unsafe void AddPointer([NullAllowed] void* pointer);

        // -(void)removePointerAtIndex:(NSUInteger)index;
        [Export("removePointerAtIndex:")]
        void RemovePointerAtIndex(nuint index);

        // -(void)insertPointer:(void * _Nullable)item atIndex:(NSUInteger)index;
        [Export("insertPointer:atIndex:")]
        unsafe void InsertPointer([NullAllowed] void* item, nuint index);

        // -(void)replacePointerAtIndex:(NSUInteger)index withPointer:(void * _Nullable)item;
        [Export("replacePointerAtIndex:withPointer:")]
        unsafe void ReplacePointerAtIndex(nuint index, [NullAllowed] void* item);

        // -(void)compact;
        [Export("compact")]
        void Compact();

        // @property NSUInteger count;
        [Export("count")]
        nuint Count { get; set; }
    }

    // @interface NSPointerArrayConveniences (NSPointerArray)
    [Category]
    [BaseType(typeof(NSPointerArray))]
    interface NSPointerArray_NSPointerArrayConveniences
    {
        // +(NSPointerArray * _Nonnull)strongObjectsPointerArray __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Static]
        [Export("strongObjectsPointerArray")]
        [Verify(MethodToProperty)]
        NSPointerArray StrongObjectsPointerArray { get; }

        // +(NSPointerArray * _Nonnull)weakObjectsPointerArray __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Static]
        [Export("weakObjectsPointerArray")]
        [Verify(MethodToProperty)]
        NSPointerArray WeakObjectsPointerArray { get; }

        // @property (readonly, copy) NSArray * _Nonnull allObjects;
        [Export("allObjects", ArgumentSemantic.Copy)]
        [Verify(StronglyTypedNSArray)]
        NSObject[] AllObjects { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSPortDidBecomeInvalidNotification;
        [Field("NSPortDidBecomeInvalidNotification", "__Internal")]
        NSString NSPortDidBecomeInvalidNotification { get; }
    }

    // @interface NSPort : NSObject <NSCopying, NSCoding>
    [BaseType(typeof(NSObject))]
    interface NSPort : INSCopying, INSCoding
    {
        // +(NSPort * _Nonnull)port;
        [Static]
        [Export("port")]
        [Verify(MethodToProperty)]
        NSPort Port { get; }

        // -(void)invalidate;
        [Export("invalidate")]
        void Invalidate();

        // @property (readonly, getter = isValid) BOOL valid;
        [Export("valid")]
        bool Valid { [Bind("isValid")] get; }

        // -(id<NSPortDelegate> _Nullable)delegate;
        // -(void)setDelegate:(id<NSPortDelegate> _Nullable)anObject;
        [NullAllowed, Export("delegate")]
        [Verify(MethodToProperty)]
        NSPortDelegate Delegate { get; set; }

        // -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)runLoop forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("scheduleInRunLoop:forMode:")]
        void ScheduleInRunLoop(NSRunLoop runLoop, string mode);

        // -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)runLoop forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("removeFromRunLoop:forMode:")]
        void RemoveFromRunLoop(NSRunLoop runLoop, string mode);

        // @property (readonly) NSUInteger reservedSpaceLength;
        [Export("reservedSpaceLength")]
        nuint ReservedSpaceLength { get; }

        // -(BOOL)sendBeforeDate:(NSDate * _Nonnull)limitDate components:(NSMutableArray * _Nullable)components from:(NSPort * _Nullable)receivePort reserved:(NSUInteger)headerSpaceReserved;
        [Export("sendBeforeDate:components:from:reserved:")]
        bool SendBeforeDate(NSDate limitDate, [NullAllowed] NSMutableArray components, [NullAllowed] NSPort receivePort, nuint headerSpaceReserved);

        // -(BOOL)sendBeforeDate:(NSDate * _Nonnull)limitDate msgid:(NSUInteger)msgID components:(NSMutableArray * _Nullable)components from:(NSPort * _Nullable)receivePort reserved:(NSUInteger)headerSpaceReserved;
        [Export("sendBeforeDate:msgid:components:from:reserved:")]
        bool SendBeforeDate(NSDate limitDate, nuint msgID, [NullAllowed] NSMutableArray components, [NullAllowed] NSPort receivePort, nuint headerSpaceReserved);
    }

    // @protocol NSPortDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSPortDelegate
    {
        // @optional -(void)handlePortMessage:(NSPortMessage * _Nonnull)message;
        [Export("handlePortMessage:")]
        void HandlePortMessage(NSPortMessage message);
    }

    // @interface NSMachPort : NSPort
    [BaseType(typeof(NSPort))]
    interface NSMachPort
    {
        // +(NSPort * _Nonnull)portWithMachPort:(uint32_t)machPort;
        [Static]
        [Export("portWithMachPort:")]
        NSPort PortWithMachPort(uint machPort);

        // -(instancetype _Nonnull)initWithMachPort:(uint32_t)machPort __attribute__((objc_designated_initializer));
        [Export("initWithMachPort:")]
        [DesignatedInitializer]
        IntPtr Constructor(uint machPort);

        // -(id<NSMachPortDelegate> _Nullable)delegate;
        // -(void)setDelegate:(id<NSMachPortDelegate> _Nullable)anObject;
        [NullAllowed, Export("delegate")]
        [Verify(MethodToProperty)]
        NSMachPortDelegate Delegate { get; set; }

        // +(NSPort * _Nonnull)portWithMachPort:(uint32_t)machPort options:(NSMachPortOptions)f __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Static]
        [Export("portWithMachPort:options:")]
        NSPort PortWithMachPort(uint machPort, NSMachPortOptions f);

        // -(instancetype _Nonnull)initWithMachPort:(uint32_t)machPort options:(NSMachPortOptions)f __attribute__((objc_designated_initializer)) __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Export("initWithMachPort:options:")]
        [DesignatedInitializer]
        IntPtr Constructor(uint machPort, NSMachPortOptions f);

        // @property (readonly) uint32_t machPort;
        [Export("machPort")]
        uint MachPort { get; }

        // -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)runLoop forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("scheduleInRunLoop:forMode:")]
        void ScheduleInRunLoop(NSRunLoop runLoop, string mode);

        // -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)runLoop forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("removeFromRunLoop:forMode:")]
        void RemoveFromRunLoop(NSRunLoop runLoop, string mode);
    }

    // @protocol NSMachPortDelegate <NSPortDelegate>
    [Protocol, Model]
    interface NSMachPortDelegate : INSPortDelegate
    {
        // @optional -(void)handleMachMessage:(void * _Nonnull)msg;
        [Export("handleMachMessage:")]
        unsafe void HandleMachMessage(void* msg);
    }

    // @interface NSMessagePort : NSPort
    [BaseType(typeof(NSPort))]
    interface NSMessagePort
    {
    }

    // @interface NSProcessInfo : NSObject
    [BaseType(typeof(NSObject))]
    interface NSProcessInfo
    {
        // @property (readonly, strong, class) NSProcessInfo * _Nonnull processInfo;
        [Static]
        [Export("processInfo", ArgumentSemantic.Strong)]
        NSProcessInfo ProcessInfo { get; }

        // @property (readonly, copy) NSDictionary<NSString *,NSString *> * _Nonnull environment;
        [Export("environment", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSString> Environment { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull arguments;
        [Export("arguments", ArgumentSemantic.Copy)]
        string[] Arguments { get; }

        // @property (readonly, copy) NSString * _Nonnull hostName;
        [Export("hostName")]
        string HostName { get; }

        // @property (copy) NSString * _Nonnull processName;
        [Export("processName")]
        string ProcessName { get; set; }

        // @property (readonly) int processIdentifier;
        [Export("processIdentifier")]
        int ProcessIdentifier { get; }

        // @property (readonly, copy) NSString * _Nonnull globallyUniqueString;
        [Export("globallyUniqueString")]
        string GloballyUniqueString { get; }

        // -(NSUInteger)operatingSystem __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
        [Deprecated(PlatformName.MacOSX, 10, 10, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
        [Export("operatingSystem")]
        [Verify(MethodToProperty)]
        nuint OperatingSystem { get; }

        // -(NSString * _Nonnull)operatingSystemName __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.10)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
        [Deprecated(PlatformName.MacOSX, 10, 10, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
        [Export("operatingSystemName")]
        [Verify(MethodToProperty)]
        string OperatingSystemName { get; }

        // @property (readonly, copy) NSString * _Nonnull operatingSystemVersionString;
        [Export("operatingSystemVersionString")]
        string OperatingSystemVersionString { get; }

        // @property (readonly) NSOperatingSystemVersion operatingSystemVersion __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("operatingSystemVersion")]
        NSOperatingSystemVersion OperatingSystemVersion { get; }

        // @property (readonly) NSUInteger processorCount __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("processorCount")]
        nuint ProcessorCount { get; }

        // @property (readonly) NSUInteger activeProcessorCount __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("activeProcessorCount")]
        nuint ActiveProcessorCount { get; }

        // @property (readonly) unsigned long long physicalMemory __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("physicalMemory")]
        ulong PhysicalMemory { get; }

        // -(BOOL)isOperatingSystemAtLeastVersion:(NSOperatingSystemVersion)version __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("isOperatingSystemAtLeastVersion:")]
        bool IsOperatingSystemAtLeastVersion(NSOperatingSystemVersion version);

        // @property (readonly) NSTimeInterval systemUptime __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("systemUptime")]
        double SystemUptime { get; }

        // -(void)disableSuddenTermination __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.6)));
        [NoWatch, NoTV, NoiOS, Mac(10, 6)]
        [Export("disableSuddenTermination")]
        void DisableSuddenTermination();

        // -(void)enableSuddenTermination __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.6)));
        [NoWatch, NoTV, NoiOS, Mac(10, 6)]
        [Export("enableSuddenTermination")]
        void EnableSuddenTermination();

        // -(void)disableAutomaticTermination:(NSString * _Nonnull)reason __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoWatch, NoTV, NoiOS, Mac(10, 7)]
        [Export("disableAutomaticTermination:")]
        void DisableAutomaticTermination(string reason);

        // -(void)enableAutomaticTermination:(NSString * _Nonnull)reason __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoWatch, NoTV, NoiOS, Mac(10, 7)]
        [Export("enableAutomaticTermination:")]
        void EnableAutomaticTermination(string reason);

        // @property BOOL automaticTerminationSupportEnabled __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoWatch, NoTV, NoiOS, Mac(10, 7)]
        [Export("automaticTerminationSupportEnabled")]
        bool AutomaticTerminationSupportEnabled { get; set; }
    }

    // @interface NSProcessInfoActivity (NSProcessInfo)
    [Category]
    [BaseType(typeof(NSProcessInfo))]
    interface NSProcessInfo_NSProcessInfoActivity
    {
        // -(id<NSObject> _Nonnull)beginActivityWithOptions:(NSActivityOptions)options reason:(NSString * _Nonnull)reason __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("beginActivityWithOptions:reason:")]
        NSObject BeginActivityWithOptions(NSActivityOptions options, string reason);

        // -(void)endActivity:(id<NSObject> _Nonnull)activity __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("endActivity:")]
        void EndActivity(NSObject activity);

        // -(void)performActivityWithOptions:(NSActivityOptions)options reason:(NSString * _Nonnull)reason usingBlock:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("performActivityWithOptions:reason:usingBlock:")]
        void PerformActivityWithOptions(NSActivityOptions options, string reason, Action block);

        // -(void)performExpiringActivityWithReason:(NSString * _Nonnull)reason usingBlock:(void (^ _Nonnull)(BOOL))block __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.2)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(8, 2)]
        [Export("performExpiringActivityWithReason:usingBlock:")]
        void PerformExpiringActivityWithReason(string reason, Action<bool> block);
    }

    // @interface NSUserInformation (NSProcessInfo)
    [Category]
    [BaseType(typeof(NSProcessInfo))]
    interface NSProcessInfo_NSUserInformation
    {
        // @property (readonly, copy) NSString * _Nonnull userName __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, NoiOS, Mac(10, 12)]
        [Export("userName")]
        string UserName { get; }

        // @property (readonly, copy) NSString * _Nonnull fullUserName __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, NoiOS, Mac(10, 12)]
        [Export("fullUserName")]
        string FullUserName { get; }
    }

    // @interface NSProcessInfoThermalState (NSProcessInfo)
    [Category]
    [BaseType(typeof(NSProcessInfo))]
    interface NSProcessInfo_NSProcessInfoThermalState
    {
        // @property (readonly) NSProcessInfoThermalState thermalState __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.10.3)));
        [Watch(4, 0), TV(11, 0), Mac(10, 10, 3), iOS(11, 0)]
        [Export("thermalState")]
        NSProcessInfoThermalState ThermalState { get; }
    }

    // @interface NSProcessInfoPowerState (NSProcessInfo)
    [Category]
    [BaseType(typeof(NSProcessInfo))]
    interface NSProcessInfo_NSProcessInfoPowerState
    {
        // @property (readonly, getter = isLowPowerModeEnabled) BOOL lowPowerModeEnabled __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Export("lowPowerModeEnabled")]
        bool LowPowerModeEnabled { [Bind("isLowPowerModeEnabled")] get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSProcessInfoThermalStateDidChangeNotification __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.10.3)));
        [Watch(4, 0), TV(11, 0), Mac(10, 10, 3), iOS(11, 0)]
        [Field("NSProcessInfoThermalStateDidChangeNotification", "__Internal")]
        NSString NSProcessInfoThermalStateDidChangeNotification { get; }

        // extern const NSNotificationName _Nonnull NSProcessInfoPowerStateDidChangeNotification __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 0)]
        [Field("NSProcessInfoPowerStateDidChangeNotification", "__Internal")]
        NSString NSProcessInfoPowerStateDidChangeNotification { get; }
    }

    // @interface NSProxy <NSObject>
    [BaseType(typeof(NSObject))]
    interface NSProxy
    {
        // +(id _Nonnull)alloc;
        [Static]
        [Export("alloc")]
        [Verify(MethodToProperty)]
        NSObject Alloc { get; }

        // +(id _Nonnull)allocWithZone:(NSZone * _Nullable)zone;
        [Static]
        [Export("allocWithZone:")]
        unsafe NSObject AllocWithZone([NullAllowed] NSZone* zone);

        // +(Class _Nonnull)class;
        [Static]
        [Export("class")]
        [Verify(MethodToProperty)]
        Class Class { get; }

        // -(void)forwardInvocation:(NSInvocation * _Nonnull)invocation;
        [Export("forwardInvocation:")]
        void ForwardInvocation(NSInvocation invocation);

        // -(NSMethodSignature * _Nullable)methodSignatureForSelector:(SEL _Nonnull)sel;
        [Export("methodSignatureForSelector:")]
        [return: NullAllowed]
        NSMethodSignature MethodSignatureForSelector(Selector sel);

        // -(void)dealloc;
        [Export("dealloc")]
        void Dealloc();

        // -(void)finalize;
        [Export("finalize")]
        void Finalize();

        // @property (readonly, copy) NSString * _Nonnull description;
        [Export("description")]
        string Description { get; }

        // @property (readonly, copy) NSString * _Nonnull debugDescription;
        [Export("debugDescription")]
        string DebugDescription { get; }

        // +(BOOL)respondsToSelector:(SEL _Nonnull)aSelector;
        [Static]
        [Export("respondsToSelector:")]
        bool RespondsToSelector(Selector aSelector);
    }

    // @interface NSTextCheckingResult : NSObject <NSCopying, NSSecureCoding>
    [iOS(4, 0)]
    [BaseType(typeof(NSObject))]
    interface NSTextCheckingResult : INSCopying, INSSecureCoding
    {
        // @property (readonly) NSTextCheckingType resultType;
        [Export("resultType")]
        NSTextCheckingType ResultType { get; }

        // @property (readonly) NSRange range;
        [Export("range")]
        NSRange Range { get; }
    }

    // @interface NSTextCheckingResultOptional (NSTextCheckingResult)
    [Category]
    [BaseType(typeof(NSTextCheckingResult))]
    interface NSTextCheckingResult_NSTextCheckingResultOptional
    {
        // @property (readonly, copy) NSOrthography * _Nullable orthography;
        [NullAllowed, Export("orthography", ArgumentSemantic.Copy)]
        NSOrthography Orthography { get; }

        // @property (readonly, copy) NSArray<NSDictionary<NSString *,id> *> * _Nullable grammarDetails;
        [NullAllowed, Export("grammarDetails", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject>[] GrammarDetails { get; }

        // @property (readonly, copy) NSDate * _Nullable date;
        [NullAllowed, Export("date", ArgumentSemantic.Copy)]
        NSDate Date { get; }

        // @property (readonly, copy) NSTimeZone * _Nullable timeZone;
        [NullAllowed, Export("timeZone", ArgumentSemantic.Copy)]
        NSTimeZone TimeZone { get; }

        // @property (readonly) NSTimeInterval duration;
        [Export("duration")]
        double Duration { get; }

        // @property (readonly, copy) NSDictionary<NSTextCheckingKey,NSString *> * _Nullable components __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [NullAllowed, Export("components", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSString> Components { get; }

        // @property (readonly, copy) NSURL * _Nullable URL;
        [NullAllowed, Export("URL", ArgumentSemantic.Copy)]
        NSUrl URL { get; }

        // @property (readonly, copy) NSString * _Nullable replacementString;
        [NullAllowed, Export("replacementString")]
        string ReplacementString { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nullable alternativeStrings __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [NullAllowed, Export("alternativeStrings", ArgumentSemantic.Copy)]
        string[] AlternativeStrings { get; }

        // @property (readonly, copy) NSRegularExpression * _Nullable regularExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [NullAllowed, Export("regularExpression", ArgumentSemantic.Copy)]
        NSRegularExpression RegularExpression { get; }

        // @property (readonly, copy) NSString * _Nullable phoneNumber __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [NullAllowed, Export("phoneNumber")]
        string PhoneNumber { get; }

        // @property (readonly) NSUInteger numberOfRanges __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Export("numberOfRanges")]
        nuint NumberOfRanges { get; }

        // -(NSRange)rangeAtIndex:(NSUInteger)idx __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Export("rangeAtIndex:")]
        NSRange RangeAtIndex(nuint idx);

        // -(NSRange)rangeWithName:(NSString * _Nonnull)name __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("rangeWithName:")]
        NSRange RangeWithName(string name);

        // -(NSTextCheckingResult * _Nonnull)resultByAdjustingRangesWithOffset:(NSInteger)offset __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("resultByAdjustingRangesWithOffset:")]
        NSTextCheckingResult ResultByAdjustingRangesWithOffset(nint offset);

        // @property (readonly, copy) NSDictionary<NSTextCheckingKey,NSString *> * _Nullable addressComponents;
        [NullAllowed, Export("addressComponents", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSString> AddressComponents { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSTextCheckingKey _Nonnull NSTextCheckingNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSTextCheckingNameKey", "__Internal")]
        NSString NSTextCheckingNameKey { get; }

        // extern const NSTextCheckingKey _Nonnull NSTextCheckingJobTitleKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSTextCheckingJobTitleKey", "__Internal")]
        NSString NSTextCheckingJobTitleKey { get; }

        // extern const NSTextCheckingKey _Nonnull NSTextCheckingOrganizationKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSTextCheckingOrganizationKey", "__Internal")]
        NSString NSTextCheckingOrganizationKey { get; }

        // extern const NSTextCheckingKey _Nonnull NSTextCheckingStreetKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSTextCheckingStreetKey", "__Internal")]
        NSString NSTextCheckingStreetKey { get; }

        // extern const NSTextCheckingKey _Nonnull NSTextCheckingCityKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSTextCheckingCityKey", "__Internal")]
        NSString NSTextCheckingCityKey { get; }

        // extern const NSTextCheckingKey _Nonnull NSTextCheckingStateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSTextCheckingStateKey", "__Internal")]
        NSString NSTextCheckingStateKey { get; }

        // extern const NSTextCheckingKey _Nonnull NSTextCheckingZIPKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSTextCheckingZIPKey", "__Internal")]
        NSString NSTextCheckingZIPKey { get; }

        // extern const NSTextCheckingKey _Nonnull NSTextCheckingCountryKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSTextCheckingCountryKey", "__Internal")]
        NSString NSTextCheckingCountryKey { get; }

        // extern const NSTextCheckingKey _Nonnull NSTextCheckingPhoneKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSTextCheckingPhoneKey", "__Internal")]
        NSString NSTextCheckingPhoneKey { get; }

        // extern const NSTextCheckingKey _Nonnull NSTextCheckingAirlineKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Field("NSTextCheckingAirlineKey", "__Internal")]
        NSString NSTextCheckingAirlineKey { get; }

        // extern const NSTextCheckingKey _Nonnull NSTextCheckingFlightKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Field("NSTextCheckingFlightKey", "__Internal")]
        NSString NSTextCheckingFlightKey { get; }
    }

    // @interface NSTextCheckingResultCreation (NSTextCheckingResult)
    [Category]
    [BaseType(typeof(NSTextCheckingResult))]
    interface NSTextCheckingResult_NSTextCheckingResultCreation
    {
        // +(NSTextCheckingResult * _Nonnull)orthographyCheckingResultWithRange:(NSRange)range orthography:(NSOrthography * _Nonnull)orthography;
        [Static]
        [Export("orthographyCheckingResultWithRange:orthography:")]
        NSTextCheckingResult OrthographyCheckingResultWithRange(NSRange range, NSOrthography orthography);

        // +(NSTextCheckingResult * _Nonnull)spellCheckingResultWithRange:(NSRange)range;
        [Static]
        [Export("spellCheckingResultWithRange:")]
        NSTextCheckingResult SpellCheckingResultWithRange(NSRange range);

        // +(NSTextCheckingResult * _Nonnull)grammarCheckingResultWithRange:(NSRange)range details:(NSArray<NSDictionary<NSString *,id> *> * _Nonnull)details;
        [Static]
        [Export("grammarCheckingResultWithRange:details:")]
        NSTextCheckingResult GrammarCheckingResultWithRange(NSRange range, NSDictionary<NSString, NSObject>[] details);

        // +(NSTextCheckingResult * _Nonnull)dateCheckingResultWithRange:(NSRange)range date:(NSDate * _Nonnull)date;
        [Static]
        [Export("dateCheckingResultWithRange:date:")]
        NSTextCheckingResult DateCheckingResultWithRange(NSRange range, NSDate date);

        // +(NSTextCheckingResult * _Nonnull)dateCheckingResultWithRange:(NSRange)range date:(NSDate * _Nonnull)date timeZone:(NSTimeZone * _Nonnull)timeZone duration:(NSTimeInterval)duration;
        [Static]
        [Export("dateCheckingResultWithRange:date:timeZone:duration:")]
        NSTextCheckingResult DateCheckingResultWithRange(NSRange range, NSDate date, NSTimeZone timeZone, double duration);

        // +(NSTextCheckingResult * _Nonnull)addressCheckingResultWithRange:(NSRange)range components:(NSDictionary<NSTextCheckingKey,NSString *> * _Nonnull)components;
        [Static]
        [Export("addressCheckingResultWithRange:components:")]
        NSTextCheckingResult AddressCheckingResultWithRange(NSRange range, NSDictionary<NSString, NSString> components);

        // +(NSTextCheckingResult * _Nonnull)linkCheckingResultWithRange:(NSRange)range URL:(NSURL * _Nonnull)url;
        [Static]
        [Export("linkCheckingResultWithRange:URL:")]
        NSTextCheckingResult LinkCheckingResultWithRange(NSRange range, NSUrl url);

        // +(NSTextCheckingResult * _Nonnull)quoteCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
        [Static]
        [Export("quoteCheckingResultWithRange:replacementString:")]
        NSTextCheckingResult QuoteCheckingResultWithRange(NSRange range, string replacementString);

        // +(NSTextCheckingResult * _Nonnull)dashCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
        [Static]
        [Export("dashCheckingResultWithRange:replacementString:")]
        NSTextCheckingResult DashCheckingResultWithRange(NSRange range, string replacementString);

        // +(NSTextCheckingResult * _Nonnull)replacementCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
        [Static]
        [Export("replacementCheckingResultWithRange:replacementString:")]
        NSTextCheckingResult ReplacementCheckingResultWithRange(NSRange range, string replacementString);

        // +(NSTextCheckingResult * _Nonnull)correctionCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
        [Static]
        [Export("correctionCheckingResultWithRange:replacementString:")]
        NSTextCheckingResult CorrectionCheckingResultWithRange(NSRange range, string replacementString);

        // +(NSTextCheckingResult * _Nonnull)correctionCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString alternativeStrings:(NSArray<NSString *> * _Nonnull)alternativeStrings __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Static]
        [Export("correctionCheckingResultWithRange:replacementString:alternativeStrings:")]
        NSTextCheckingResult CorrectionCheckingResultWithRange(NSRange range, string replacementString, string[] alternativeStrings);

        // +(NSTextCheckingResult * _Nonnull)regularExpressionCheckingResultWithRanges:(NSRangePointer _Nonnull)ranges count:(NSUInteger)count regularExpression:(NSRegularExpression * _Nonnull)regularExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Static]
        [Export("regularExpressionCheckingResultWithRanges:count:regularExpression:")]
        unsafe NSTextCheckingResult RegularExpressionCheckingResultWithRanges(NSRangePointer* ranges, nuint count, NSRegularExpression regularExpression);

        // +(NSTextCheckingResult * _Nonnull)phoneNumberCheckingResultWithRange:(NSRange)range phoneNumber:(NSString * _Nonnull)phoneNumber __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Static]
        [Export("phoneNumberCheckingResultWithRange:phoneNumber:")]
        NSTextCheckingResult PhoneNumberCheckingResultWithRange(NSRange range, string phoneNumber);

        // +(NSTextCheckingResult * _Nonnull)transitInformationCheckingResultWithRange:(NSRange)range components:(NSDictionary<NSTextCheckingKey,NSString *> * _Nonnull)components __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Static]
        [Export("transitInformationCheckingResultWithRange:components:")]
        NSTextCheckingResult TransitInformationCheckingResultWithRange(NSRange range, NSDictionary<NSString, NSString> components);
    }

    // @interface NSRegularExpression : NSObject <NSCopying, NSSecureCoding>
    [iOS(4, 0)]
    [BaseType(typeof(NSObject))]
    interface NSRegularExpression : INSCopying, INSSecureCoding
    {
        // +(NSRegularExpression * _Nullable)regularExpressionWithPattern:(NSString * _Nonnull)pattern options:(NSRegularExpressionOptions)options error:(NSError * _Nullable * _Nullable)error;
        [Static]
        [Export("regularExpressionWithPattern:options:error:")]
        [return: NullAllowed]
        NSRegularExpression RegularExpressionWithPattern(string pattern, NSRegularExpressionOptions options, [NullAllowed] out NSError error);

        // -(instancetype _Nullable)initWithPattern:(NSString * _Nonnull)pattern options:(NSRegularExpressionOptions)options error:(NSError * _Nullable * _Nullable)error __attribute__((objc_designated_initializer));
        [Export("initWithPattern:options:error:")]
        [DesignatedInitializer]
        IntPtr Constructor(string pattern, NSRegularExpressionOptions options, [NullAllowed] out NSError error);

        // @property (readonly, copy) NSString * _Nonnull pattern;
        [Export("pattern")]
        string Pattern { get; }

        // @property (readonly) NSRegularExpressionOptions options;
        [Export("options")]
        NSRegularExpressionOptions Options { get; }

        // @property (readonly) NSUInteger numberOfCaptureGroups;
        [Export("numberOfCaptureGroups")]
        nuint NumberOfCaptureGroups { get; }

        // +(NSString * _Nonnull)escapedPatternForString:(NSString * _Nonnull)string;
        [Static]
        [Export("escapedPatternForString:")]
        string EscapedPatternForString(string @string);
    }

    // @interface NSMatching (NSRegularExpression)
    [Category]
    [BaseType(typeof(NSRegularExpression))]
    interface NSRegularExpression_NSMatching
    {
        // -(void)enumerateMatchesInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range usingBlock:(void (^ _Nonnull)(NSTextCheckingResult * _Nullable, NSMatchingFlags, BOOL * _Nonnull))block;
        [Export("enumerateMatchesInString:options:range:usingBlock:")]
        unsafe void EnumerateMatchesInString(string @string, NSMatchingOptions options, NSRange range, Action<NSTextCheckingResult, NSMatchingFlags, bool*> block);

        // -(NSArray<NSTextCheckingResult *> * _Nonnull)matchesInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range;
        [Export("matchesInString:options:range:")]
        NSTextCheckingResult[] MatchesInString(string @string, NSMatchingOptions options, NSRange range);

        // -(NSUInteger)numberOfMatchesInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range;
        [Export("numberOfMatchesInString:options:range:")]
        nuint NumberOfMatchesInString(string @string, NSMatchingOptions options, NSRange range);

        // -(NSTextCheckingResult * _Nullable)firstMatchInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range;
        [Export("firstMatchInString:options:range:")]
        [return: NullAllowed]
        NSTextCheckingResult FirstMatchInString(string @string, NSMatchingOptions options, NSRange range);

        // -(NSRange)rangeOfFirstMatchInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range;
        [Export("rangeOfFirstMatchInString:options:range:")]
        NSRange RangeOfFirstMatchInString(string @string, NSMatchingOptions options, NSRange range);
    }

    // @interface NSReplacement (NSRegularExpression)
    [Category]
    [BaseType(typeof(NSRegularExpression))]
    interface NSRegularExpression_NSReplacement
    {
        // -(NSString * _Nonnull)stringByReplacingMatchesInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range withTemplate:(NSString * _Nonnull)templ;
        [Export("stringByReplacingMatchesInString:options:range:withTemplate:")]
        string StringByReplacingMatchesInString(string @string, NSMatchingOptions options, NSRange range, string templ);

        // -(NSUInteger)replaceMatchesInString:(NSMutableString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range withTemplate:(NSString * _Nonnull)templ;
        [Export("replaceMatchesInString:options:range:withTemplate:")]
        nuint ReplaceMatchesInString(NSMutableString @string, NSMatchingOptions options, NSRange range, string templ);

        // -(NSString * _Nonnull)replacementStringForResult:(NSTextCheckingResult * _Nonnull)result inString:(NSString * _Nonnull)string offset:(NSInteger)offset template:(NSString * _Nonnull)templ;
        [Export("replacementStringForResult:inString:offset:template:")]
        string ReplacementStringForResult(NSTextCheckingResult result, string @string, nint offset, string templ);

        // +(NSString * _Nonnull)escapedTemplateForString:(NSString * _Nonnull)string;
        [Static]
        [Export("escapedTemplateForString:")]
        string EscapedTemplateForString(string @string);
    }

    // @interface NSDataDetector : NSRegularExpression
    [iOS(4, 0)]
    [BaseType(typeof(NSRegularExpression))]
    interface NSDataDetector
    {
        // +(NSDataDetector * _Nullable)dataDetectorWithTypes:(NSTextCheckingTypes)checkingTypes error:(NSError * _Nullable * _Nullable)error;
        [Static]
        [Export("dataDetectorWithTypes:error:")]
        [return: NullAllowed]
        NSDataDetector DataDetectorWithTypes(ulong checkingTypes, [NullAllowed] out NSError error);

        // -(instancetype _Nullable)initWithTypes:(NSTextCheckingTypes)checkingTypes error:(NSError * _Nullable * _Nullable)error __attribute__((objc_designated_initializer));
        [Export("initWithTypes:error:")]
        [DesignatedInitializer]
        IntPtr Constructor(ulong checkingTypes, [NullAllowed] out NSError error);

        // @property (readonly) NSTextCheckingTypes checkingTypes;
        [Export("checkingTypes")]
        ulong CheckingTypes { get; }
    }

    // @interface NSSortDescriptor : NSObject <NSSecureCoding, NSCopying>
    [BaseType(typeof(NSObject))]
    interface NSSortDescriptor : INSSecureCoding, INSCopying
    {
        // +(instancetype _Nonnull)sortDescriptorWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("sortDescriptorWithKey:ascending:")]
        NSSortDescriptor SortDescriptorWithKey([NullAllowed] string key, bool ascending);

        // +(instancetype _Nonnull)sortDescriptorWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending selector:(SEL _Nullable)selector __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("sortDescriptorWithKey:ascending:selector:")]
        NSSortDescriptor SortDescriptorWithKey([NullAllowed] string key, bool ascending, [NullAllowed] Selector selector);

        // -(instancetype _Nonnull)initWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending;
        [Export("initWithKey:ascending:")]
        IntPtr Constructor([NullAllowed] string key, bool ascending);

        // -(instancetype _Nonnull)initWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending selector:(SEL _Nullable)selector;
        [Export("initWithKey:ascending:selector:")]
        IntPtr Constructor([NullAllowed] string key, bool ascending, [NullAllowed] Selector selector);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder;
        [Export("initWithCoder:")]
        IntPtr Constructor(NSCoder coder);

        // @property (readonly, copy) NSString * _Nullable key;
        [NullAllowed, Export("key")]
        string Key { get; }

        // @property (readonly) BOOL ascending;
        [Export("ascending")]
        bool Ascending { get; }

        // @property (readonly) SEL _Nullable selector;
        [NullAllowed, Export("selector")]
        Selector Selector { get; }

        // -(void)allowEvaluation __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("allowEvaluation")]
        void AllowEvaluation();

        // +(instancetype _Nonnull)sortDescriptorWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending comparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("sortDescriptorWithKey:ascending:comparator:")]
        NSSortDescriptor SortDescriptorWithKey([NullAllowed] string key, bool ascending, NSComparator cmptr);

        // -(instancetype _Nonnull)initWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending comparator:(NSComparator _Nonnull)cmptr __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("initWithKey:ascending:comparator:")]
        IntPtr Constructor([NullAllowed] string key, bool ascending, NSComparator cmptr);

        // @property (readonly) NSComparator _Nonnull comparator __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("comparator")]
        NSComparator Comparator { get; }

        // -(NSComparisonResult)compareObject:(id _Nonnull)object1 toObject:(id _Nonnull)object2;
        [Export("compareObject:toObject:")]
        NSComparisonResult CompareObject(NSObject object1, NSObject object2);

        // @property (readonly, retain) id _Nonnull reversedSortDescriptor;
        [Export("reversedSortDescriptor", ArgumentSemantic.Retain)]
        NSObject ReversedSortDescriptor { get; }
    }

    // @interface NSSortDescriptorSorting (NSSet)
    [Category]
    [BaseType(typeof(NSSet))]
    interface NSSet_NSSortDescriptorSorting
    {
        // -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("sortedArrayUsingDescriptors:")]
        NSObject[] SortedArrayUsingDescriptors(NSSortDescriptor[] sortDescriptors);
    }

    // @interface NSSortDescriptorSorting (NSArray)
    [Category]
    [BaseType(typeof(NSArray))]
    interface NSArray_NSSortDescriptorSorting
    {
        // -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors;
        [Export("sortedArrayUsingDescriptors:")]
        NSObject[] SortedArrayUsingDescriptors(NSSortDescriptor[] sortDescriptors);
    }

    // @interface NSSortDescriptorSorting (NSMutableArray)
    [Category]
    [BaseType(typeof(NSMutableArray))]
    interface NSMutableArray_NSSortDescriptorSorting
    {
        // -(void)sortUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors;
        [Export("sortUsingDescriptors:")]
        void SortUsingDescriptors(NSSortDescriptor[] sortDescriptors);
    }

    // @interface NSKeyValueSorting (NSOrderedSet)
    [Category]
    [BaseType(typeof(NSOrderedSet))]
    interface NSOrderedSet_NSKeyValueSorting
    {
        // -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("sortedArrayUsingDescriptors:")]
        NSObject[] SortedArrayUsingDescriptors(NSSortDescriptor[] sortDescriptors);
    }

    // @interface NSKeyValueSorting (NSMutableOrderedSet)
    [Category]
    [BaseType(typeof(NSMutableOrderedSet))]
    interface NSMutableOrderedSet_NSKeyValueSorting
    {
        // -(void)sortUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("sortUsingDescriptors:")]
        void SortUsingDescriptors(NSSortDescriptor[] sortDescriptors);
    }

    // @interface NSStream : NSObject
    [BaseType(typeof(NSObject))]
    interface NSStream
    {
        // -(void)open;
        [Export("open")]
        void Open();

        // -(void)close;
        [Export("close")]
        void Close();

        [Wrap("WeakDelegate")]
        [NullAllowed]
        NSStreamDelegate Delegate { get; set; }

        // @property (assign) id<NSStreamDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // -(id _Nullable)propertyForKey:(NSStreamPropertyKey _Nonnull)key;
        [Export("propertyForKey:")]
        [return: NullAllowed]
        NSObject PropertyForKey(string key);

        // -(BOOL)setProperty:(id _Nullable)property forKey:(NSStreamPropertyKey _Nonnull)key;
        [Export("setProperty:forKey:")]
        bool SetProperty([NullAllowed] NSObject property, string key);

        // -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("scheduleInRunLoop:forMode:")]
        void ScheduleInRunLoop(NSRunLoop aRunLoop, string mode);

        // -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("removeFromRunLoop:forMode:")]
        void RemoveFromRunLoop(NSRunLoop aRunLoop, string mode);

        // @property (readonly) NSStreamStatus streamStatus;
        [Export("streamStatus")]
        NSStreamStatus StreamStatus { get; }

        // @property (readonly, copy) NSError * _Nullable streamError;
        [NullAllowed, Export("streamError", ArgumentSemantic.Copy)]
        NSError StreamError { get; }
    }

    // @interface NSInputStream : NSStream
    [BaseType(typeof(NSStream))]
    interface NSInputStream
    {
        // -(NSInteger)read:(uint8_t * _Nonnull)buffer maxLength:(NSUInteger)len;
        [Export("read:maxLength:")]
        unsafe nint Read(byte* buffer, nuint len);

        // -(BOOL)getBuffer:(uint8_t * _Nullable * _Nonnull)buffer length:(NSUInteger * _Nonnull)len;
        [Export("getBuffer:length:")]
        unsafe bool GetBuffer([NullAllowed] byte** buffer, nuint* len);

        // @property (readonly) BOOL hasBytesAvailable;
        [Export("hasBytesAvailable")]
        bool HasBytesAvailable { get; }

        // -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data __attribute__((objc_designated_initializer));
        [Export("initWithData:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSData data);

        // -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("initWithURL:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSUrl url);
    }

    // @interface NSOutputStream : NSStream
    [BaseType(typeof(NSStream))]
    interface NSOutputStream
    {
        // -(NSInteger)write:(const uint8_t * _Nonnull)buffer maxLength:(NSUInteger)len;
        [Export("write:maxLength:")]
        unsafe nint Write(byte* buffer, nuint len);

        // @property (readonly) BOOL hasSpaceAvailable;
        [Export("hasSpaceAvailable")]
        bool HasSpaceAvailable { get; }

        // -(instancetype _Nonnull)initToBuffer:(uint8_t * _Nonnull)buffer capacity:(NSUInteger)capacity __attribute__((objc_designated_initializer));
        [Export("initToBuffer:capacity:")]
        [DesignatedInitializer]
        unsafe IntPtr Constructor(byte* buffer, nuint capacity);

        // -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url append:(BOOL)shouldAppend __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("initWithURL:append:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSUrl url, bool shouldAppend);
    }

    // @interface NSSocketStreamCreationExtensions (NSStream)
    [Category]
    [BaseType(typeof(NSStream))]
    interface NSStream_NSSocketStreamCreationExtensions
    {
        // +(void)getStreamsToHostWithName:(NSString * _Nonnull)hostname port:(NSInteger)port inputStream:(NSInputStream * _Nullable * _Nullable)inputStream outputStream:(NSOutputStream * _Nullable * _Nullable)outputStream __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [TV(9, 0), NoWatch, Mac(10, 10), iOS(8, 0)]
        [Static]
        [Export("getStreamsToHostWithName:port:inputStream:outputStream:")]
        void GetStreamsToHostWithName(string hostname, nint port, [NullAllowed] out NSInputStream inputStream, [NullAllowed] out NSOutputStream outputStream);
    }

    // @interface NSStreamBoundPairCreationExtensions (NSStream)
    [Category]
    [BaseType(typeof(NSStream))]
    interface NSStream_NSStreamBoundPairCreationExtensions
    {
        // +(void)getBoundStreamsWithBufferSize:(NSUInteger)bufferSize inputStream:(NSInputStream * _Nullable * _Nullable)inputStream outputStream:(NSOutputStream * _Nullable * _Nullable)outputStream __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Static]
        [Export("getBoundStreamsWithBufferSize:inputStream:outputStream:")]
        void GetBoundStreamsWithBufferSize(nuint bufferSize, [NullAllowed] out NSInputStream inputStream, [NullAllowed] out NSOutputStream outputStream);
    }

    // @interface NSInputStreamExtensions (NSInputStream)
    [Category]
    [BaseType(typeof(NSInputStream))]
    interface NSInputStream_NSInputStreamExtensions
    {
        // -(instancetype _Nullable)initWithFileAtPath:(NSString * _Nonnull)path;
        [Export("initWithFileAtPath:")]
        IntPtr Constructor(string path);

        // +(instancetype _Nullable)inputStreamWithData:(NSData * _Nonnull)data;
        [Static]
        [Export("inputStreamWithData:")]
        [return: NullAllowed]
        NSInputStream InputStreamWithData(NSData data);

        // +(instancetype _Nullable)inputStreamWithFileAtPath:(NSString * _Nonnull)path;
        [Static]
        [Export("inputStreamWithFileAtPath:")]
        [return: NullAllowed]
        NSInputStream InputStreamWithFileAtPath(string path);

        // +(instancetype _Nullable)inputStreamWithURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("inputStreamWithURL:")]
        [return: NullAllowed]
        NSInputStream InputStreamWithURL(NSUrl url);
    }

    // @interface NSOutputStreamExtensions (NSOutputStream)
    [Category]
    [BaseType(typeof(NSOutputStream))]
    interface NSOutputStream_NSOutputStreamExtensions
    {
        // -(instancetype _Nullable)initToFileAtPath:(NSString * _Nonnull)path append:(BOOL)shouldAppend;
        [Export("initToFileAtPath:append:")]
        IntPtr Constructor(string path, bool shouldAppend);

        // +(instancetype _Nonnull)outputStreamToMemory;
        [Static]
        [Export("outputStreamToMemory")]
        NSOutputStream OutputStreamToMemory();

        // +(instancetype _Nonnull)outputStreamToBuffer:(uint8_t * _Nonnull)buffer capacity:(NSUInteger)capacity;
        [Static]
        [Export("outputStreamToBuffer:capacity:")]
        unsafe NSOutputStream OutputStreamToBuffer(byte* buffer, nuint capacity);

        // +(instancetype _Nonnull)outputStreamToFileAtPath:(NSString * _Nonnull)path append:(BOOL)shouldAppend;
        [Static]
        [Export("outputStreamToFileAtPath:append:")]
        NSOutputStream OutputStreamToFileAtPath(string path, bool shouldAppend);

        // +(instancetype _Nullable)outputStreamWithURL:(NSURL * _Nonnull)url append:(BOOL)shouldAppend __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("outputStreamWithURL:append:")]
        [return: NullAllowed]
        NSOutputStream OutputStreamWithURL(NSUrl url, bool shouldAppend);
    }

    // @protocol NSStreamDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSStreamDelegate
    {
        // @optional -(void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
        [Export("stream:handleEvent:")]
        void HandleEvent(NSStream aStream, NSStreamEvent eventCode);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSStreamPropertyKey _Nonnull NSStreamSocketSecurityLevelKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSocketSecurityLevelKey", "__Internal")]
        NSString NSStreamSocketSecurityLevelKey { get; }

        // extern const NSStreamSocketSecurityLevel _Nonnull NSStreamSocketSecurityLevelNone __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSocketSecurityLevelNone", "__Internal")]
        NSString NSStreamSocketSecurityLevelNone { get; }

        // extern const NSStreamSocketSecurityLevel _Nonnull NSStreamSocketSecurityLevelSSLv2 __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSocketSecurityLevelSSLv2", "__Internal")]
        NSString NSStreamSocketSecurityLevelSSLv2 { get; }

        // extern const NSStreamSocketSecurityLevel _Nonnull NSStreamSocketSecurityLevelSSLv3 __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSocketSecurityLevelSSLv3", "__Internal")]
        NSString NSStreamSocketSecurityLevelSSLv3 { get; }

        // extern const NSStreamSocketSecurityLevel _Nonnull NSStreamSocketSecurityLevelTLSv1 __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSocketSecurityLevelTLSv1", "__Internal")]
        NSString NSStreamSocketSecurityLevelTLSv1 { get; }

        // extern const NSStreamSocketSecurityLevel _Nonnull NSStreamSocketSecurityLevelNegotiatedSSL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSocketSecurityLevelNegotiatedSSL", "__Internal")]
        NSString NSStreamSocketSecurityLevelNegotiatedSSL { get; }

        // extern const NSStreamPropertyKey _Nonnull NSStreamSOCKSProxyConfigurationKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSOCKSProxyConfigurationKey", "__Internal")]
        NSString NSStreamSOCKSProxyConfigurationKey { get; }

        // extern const NSStreamSOCKSProxyConfiguration _Nonnull NSStreamSOCKSProxyHostKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSOCKSProxyHostKey", "__Internal")]
        NSString NSStreamSOCKSProxyHostKey { get; }

        // extern const NSStreamSOCKSProxyConfiguration _Nonnull NSStreamSOCKSProxyPortKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSOCKSProxyPortKey", "__Internal")]
        NSString NSStreamSOCKSProxyPortKey { get; }

        // extern const NSStreamSOCKSProxyConfiguration _Nonnull NSStreamSOCKSProxyVersionKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSOCKSProxyVersionKey", "__Internal")]
        NSString NSStreamSOCKSProxyVersionKey { get; }

        // extern const NSStreamSOCKSProxyConfiguration _Nonnull NSStreamSOCKSProxyUserKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSOCKSProxyUserKey", "__Internal")]
        NSString NSStreamSOCKSProxyUserKey { get; }

        // extern const NSStreamSOCKSProxyConfiguration _Nonnull NSStreamSOCKSProxyPasswordKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSOCKSProxyPasswordKey", "__Internal")]
        NSString NSStreamSOCKSProxyPasswordKey { get; }

        // extern const NSStreamSOCKSProxyVersion _Nonnull NSStreamSOCKSProxyVersion4 __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSOCKSProxyVersion4", "__Internal")]
        NSString NSStreamSOCKSProxyVersion4 { get; }

        // extern const NSStreamSOCKSProxyVersion _Nonnull NSStreamSOCKSProxyVersion5 __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSOCKSProxyVersion5", "__Internal")]
        NSString NSStreamSOCKSProxyVersion5 { get; }

        // extern const NSStreamPropertyKey _Nonnull NSStreamDataWrittenToMemoryStreamKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamDataWrittenToMemoryStreamKey", "__Internal")]
        NSString NSStreamDataWrittenToMemoryStreamKey { get; }

        // extern const NSStreamPropertyKey _Nonnull NSStreamFileCurrentOffsetKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamFileCurrentOffsetKey", "__Internal")]
        NSString NSStreamFileCurrentOffsetKey { get; }

        // extern const NSErrorDomain _Nonnull NSStreamSocketSSLErrorDomain __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSocketSSLErrorDomain", "__Internal")]
        NSString NSStreamSocketSSLErrorDomain { get; }

        // extern const NSErrorDomain _Nonnull NSStreamSOCKSErrorDomain __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSStreamSOCKSErrorDomain", "__Internal")]
        NSString NSStreamSOCKSErrorDomain { get; }

        // extern const NSStreamPropertyKey _Nonnull NSStreamNetworkServiceType __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Field("NSStreamNetworkServiceType", "__Internal")]
        NSString NSStreamNetworkServiceType { get; }

        // extern const NSStreamNetworkServiceTypeValue _Nonnull NSStreamNetworkServiceTypeVoIP __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Field("NSStreamNetworkServiceTypeVoIP", "__Internal")]
        NSString NSStreamNetworkServiceTypeVoIP { get; }

        // extern const NSStreamNetworkServiceTypeValue _Nonnull NSStreamNetworkServiceTypeVideo __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSStreamNetworkServiceTypeVideo", "__Internal")]
        NSString NSStreamNetworkServiceTypeVideo { get; }

        // extern const NSStreamNetworkServiceTypeValue _Nonnull NSStreamNetworkServiceTypeBackground __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSStreamNetworkServiceTypeBackground", "__Internal")]
        NSString NSStreamNetworkServiceTypeBackground { get; }

        // extern const NSStreamNetworkServiceTypeValue _Nonnull NSStreamNetworkServiceTypeVoice __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSStreamNetworkServiceTypeVoice", "__Internal")]
        NSString NSStreamNetworkServiceTypeVoice { get; }

        // extern const NSStreamNetworkServiceTypeValue _Nonnull NSStreamNetworkServiceTypeCallSignaling __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("NSStreamNetworkServiceTypeCallSignaling", "__Internal")]
        NSString NSStreamNetworkServiceTypeCallSignaling { get; }
    }

    // @interface NSThread : NSObject
    [BaseType(typeof(NSObject))]
    interface NSThread
    {
        // @property (readonly, strong, class) NSThread * _Nonnull currentThread;
        [Static]
        [Export("currentThread", ArgumentSemantic.Strong)]
        NSThread CurrentThread { get; }

        // +(void)detachNewThreadWithBlock:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Static]
        [Export("detachNewThreadWithBlock:")]
        void DetachNewThreadWithBlock(Action block);

        // +(void)detachNewThreadSelector:(SEL _Nonnull)selector toTarget:(id _Nonnull)target withObject:(id _Nullable)argument;
        [Static]
        [Export("detachNewThreadSelector:toTarget:withObject:")]
        void DetachNewThreadSelector(Selector selector, NSObject target, [NullAllowed] NSObject argument);

        // +(BOOL)isMultiThreaded;
        [Static]
        [Export("isMultiThreaded")]
        [Verify(MethodToProperty)]
        bool IsMultiThreaded { get; }

        // @property (readonly, retain) NSMutableDictionary * _Nonnull threadDictionary;
        [Export("threadDictionary", ArgumentSemantic.Retain)]
        NSMutableDictionary ThreadDictionary { get; }

        // +(void)sleepUntilDate:(NSDate * _Nonnull)date;
        [Static]
        [Export("sleepUntilDate:")]
        void SleepUntilDate(NSDate date);

        // +(void)sleepForTimeInterval:(NSTimeInterval)ti;
        [Static]
        [Export("sleepForTimeInterval:")]
        void SleepForTimeInterval(double ti);

        // +(void)exit;
        [Static]
        [Export("exit")]
        void Exit();

        // +(double)threadPriority;
        [Static]
        [Export("threadPriority")]
        [Verify(MethodToProperty)]
        double ThreadPriority { get; }

        // +(BOOL)setThreadPriority:(double)p;
        [Static]
        [Export("setThreadPriority:")]
        bool SetThreadPriority(double p);

        // @property double threadPriority __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("threadPriority")]
        double ThreadPriority { get; set; }

        // @property NSQualityOfService qualityOfService __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("qualityOfService", ArgumentSemantic.Assign)]
        NSQualityOfService QualityOfService { get; set; }

        // @property (readonly, copy, class) NSArray<NSNumber *> * _Nonnull callStackReturnAddresses __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("callStackReturnAddresses", ArgumentSemantic.Copy)]
        NSNumber[] CallStackReturnAddresses { get; }

        // @property (readonly, copy, class) NSArray<NSString *> * _Nonnull callStackSymbols __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("callStackSymbols", ArgumentSemantic.Copy)]
        string[] CallStackSymbols { get; }

        // @property (copy) NSString * _Nullable name __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [NullAllowed, Export("name")]
        string Name { get; set; }

        // @property NSUInteger stackSize __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("stackSize")]
        nuint StackSize { get; set; }

        // @property (readonly) BOOL isMainThread __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("isMainThread")]
        bool IsMainThread { get; }

        // @property (readonly, class) BOOL isMainThread __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("isMainThread")]
        bool IsMainThread { get; }

        // @property (readonly, strong, class) NSThread * _Nonnull mainThread __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Static]
        [Export("mainThread", ArgumentSemantic.Strong)]
        NSThread MainThread { get; }

        // -(instancetype _Nonnull)initWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)selector object:(id _Nullable)argument __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("initWithTarget:selector:object:")]
        IntPtr Constructor(NSObject target, Selector selector, [NullAllowed] NSObject argument);

        // -(instancetype _Nonnull)initWithBlock:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("initWithBlock:")]
        IntPtr Constructor(Action block);

        // @property (readonly, getter = isExecuting) BOOL executing __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("executing")]
        bool Executing { [Bind("isExecuting")] get; }

        // @property (readonly, getter = isFinished) BOOL finished __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("finished")]
        bool Finished { [Bind("isFinished")] get; }

        // @property (readonly, getter = isCancelled) BOOL cancelled __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("cancelled")]
        bool Cancelled { [Bind("isCancelled")] get; }

        // -(void)cancel __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("cancel")]
        void Cancel();

        // -(void)start __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("start")]
        void Start();

        // -(void)main __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("main")]
        void Main();
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSWillBecomeMultiThreadedNotification;
        [Field("NSWillBecomeMultiThreadedNotification", "__Internal")]
        NSString NSWillBecomeMultiThreadedNotification { get; }

        // extern const NSNotificationName _Nonnull NSDidBecomeSingleThreadedNotification;
        [Field("NSDidBecomeSingleThreadedNotification", "__Internal")]
        NSString NSDidBecomeSingleThreadedNotification { get; }

        // extern const NSNotificationName _Nonnull NSThreadWillExitNotification;
        [Field("NSThreadWillExitNotification", "__Internal")]
        NSString NSThreadWillExitNotification { get; }
    }

    // @interface NSThreadPerformAdditions (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_NSThreadPerformAdditions
    {
        // -(void)performSelectorOnMainThread:(SEL _Nonnull)aSelector withObject:(id _Nullable)arg waitUntilDone:(BOOL)wait modes:(NSArray<NSString *> * _Nullable)array;
        [Export("performSelectorOnMainThread:withObject:waitUntilDone:modes:")]
        void PerformSelectorOnMainThread(Selector aSelector, [NullAllowed] NSObject arg, bool wait, [NullAllowed] string[] array);

        // -(void)performSelectorOnMainThread:(SEL _Nonnull)aSelector withObject:(id _Nullable)arg waitUntilDone:(BOOL)wait;
        [Export("performSelectorOnMainThread:withObject:waitUntilDone:")]
        void PerformSelectorOnMainThread(Selector aSelector, [NullAllowed] NSObject arg, bool wait);

        // -(void)performSelector:(SEL _Nonnull)aSelector onThread:(NSThread * _Nonnull)thr withObject:(id _Nullable)arg waitUntilDone:(BOOL)wait modes:(NSArray<NSString *> * _Nullable)array __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("performSelector:onThread:withObject:waitUntilDone:modes:")]
        void PerformSelector(Selector aSelector, NSThread thr, [NullAllowed] NSObject arg, bool wait, [NullAllowed] string[] array);

        // -(void)performSelector:(SEL _Nonnull)aSelector onThread:(NSThread * _Nonnull)thr withObject:(id _Nullable)arg waitUntilDone:(BOOL)wait __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("performSelector:onThread:withObject:waitUntilDone:")]
        void PerformSelector(Selector aSelector, NSThread thr, [NullAllowed] NSObject arg, bool wait);

        // -(void)performSelectorInBackground:(SEL _Nonnull)aSelector withObject:(id _Nullable)arg __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("performSelectorInBackground:withObject:")]
        void PerformSelectorInBackground(Selector aSelector, [NullAllowed] NSObject arg);
    }

    // @interface NSTimeZone : NSObject <NSCopying, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSTimeZone : INSCopying, INSSecureCoding
    {
        // @property (readonly, copy) NSString * _Nonnull name;
        [Export("name")]
        string Name { get; }

        // @property (readonly, copy) NSData * _Nonnull data;
        [Export("data", ArgumentSemantic.Copy)]
        NSData Data { get; }

        // -(NSInteger)secondsFromGMTForDate:(NSDate * _Nonnull)aDate;
        [Export("secondsFromGMTForDate:")]
        nint SecondsFromGMTForDate(NSDate aDate);

        // -(NSString * _Nullable)abbreviationForDate:(NSDate * _Nonnull)aDate;
        [Export("abbreviationForDate:")]
        [return: NullAllowed]
        string AbbreviationForDate(NSDate aDate);

        // -(BOOL)isDaylightSavingTimeForDate:(NSDate * _Nonnull)aDate;
        [Export("isDaylightSavingTimeForDate:")]
        bool IsDaylightSavingTimeForDate(NSDate aDate);

        // -(NSTimeInterval)daylightSavingTimeOffsetForDate:(NSDate * _Nonnull)aDate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("daylightSavingTimeOffsetForDate:")]
        double DaylightSavingTimeOffsetForDate(NSDate aDate);

        // -(NSDate * _Nullable)nextDaylightSavingTimeTransitionAfterDate:(NSDate * _Nonnull)aDate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("nextDaylightSavingTimeTransitionAfterDate:")]
        [return: NullAllowed]
        NSDate NextDaylightSavingTimeTransitionAfterDate(NSDate aDate);
    }

    // @interface NSExtendedTimeZone (NSTimeZone)
    [Category]
    [BaseType(typeof(NSTimeZone))]
    interface NSTimeZone_NSExtendedTimeZone
    {
        // @property (readonly, copy, class) NSTimeZone * _Nonnull systemTimeZone;
        [Static]
        [Export("systemTimeZone", ArgumentSemantic.Copy)]
        NSTimeZone SystemTimeZone { get; }

        // +(void)resetSystemTimeZone;
        [Static]
        [Export("resetSystemTimeZone")]
        void ResetSystemTimeZone();

        // @property (copy, class) NSTimeZone * _Nonnull defaultTimeZone;
        [Static]
        [Export("defaultTimeZone", ArgumentSemantic.Copy)]
        NSTimeZone DefaultTimeZone { get; set; }

        // @property (readonly, copy, class) NSTimeZone * _Nonnull localTimeZone;
        [Static]
        [Export("localTimeZone", ArgumentSemantic.Copy)]
        NSTimeZone LocalTimeZone { get; }

        // @property (readonly, copy, class) NSArray<NSString *> * _Nonnull knownTimeZoneNames;
        [Static]
        [Export("knownTimeZoneNames", ArgumentSemantic.Copy)]
        string[] KnownTimeZoneNames { get; }

        // @property (copy, class) NSDictionary<NSString *,NSString *> * _Nonnull abbreviationDictionary __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("abbreviationDictionary", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSString> AbbreviationDictionary { get; set; }

        // @property (readonly, copy, class) NSString * _Nonnull timeZoneDataVersion __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("timeZoneDataVersion")]
        string TimeZoneDataVersion { get; }

        // @property (readonly) NSInteger secondsFromGMT;
        [Export("secondsFromGMT")]
        nint SecondsFromGMT { get; }

        // @property (readonly, copy) NSString * _Nullable abbreviation;
        [NullAllowed, Export("abbreviation")]
        string Abbreviation { get; }

        // @property (readonly, getter = isDaylightSavingTime) BOOL daylightSavingTime;
        [Export("daylightSavingTime")]
        bool DaylightSavingTime { [Bind("isDaylightSavingTime")] get; }

        // @property (readonly) NSTimeInterval daylightSavingTimeOffset __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("daylightSavingTimeOffset")]
        double DaylightSavingTimeOffset { get; }

        // @property (readonly, copy) NSDate * _Nullable nextDaylightSavingTimeTransition __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [NullAllowed, Export("nextDaylightSavingTimeTransition", ArgumentSemantic.Copy)]
        NSDate NextDaylightSavingTimeTransition { get; }

        // @property (readonly, copy) NSString * _Nonnull description;
        [Export("description")]
        string Description { get; }

        // -(BOOL)isEqualToTimeZone:(NSTimeZone * _Nonnull)aTimeZone;
        [Export("isEqualToTimeZone:")]
        bool IsEqualToTimeZone(NSTimeZone aTimeZone);

        // -(NSString * _Nullable)localizedName:(NSTimeZoneNameStyle)style locale:(NSLocale * _Nullable)locale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("localizedName:locale:")]
        [return: NullAllowed]
        string LocalizedName(NSTimeZoneNameStyle style, [NullAllowed] NSLocale locale);
    }

    // @interface NSTimeZoneCreation (NSTimeZone)
    [Category]
    [BaseType(typeof(NSTimeZone))]
    interface NSTimeZone_NSTimeZoneCreation
    {
        // +(instancetype _Nullable)timeZoneWithName:(NSString * _Nonnull)tzName;
        [Static]
        [Export("timeZoneWithName:")]
        [return: NullAllowed]
        NSTimeZone TimeZoneWithName(string tzName);

        // +(instancetype _Nullable)timeZoneWithName:(NSString * _Nonnull)tzName data:(NSData * _Nullable)aData;
        [Static]
        [Export("timeZoneWithName:data:")]
        [return: NullAllowed]
        NSTimeZone TimeZoneWithName(string tzName, [NullAllowed] NSData aData);

        // -(instancetype _Nullable)initWithName:(NSString * _Nonnull)tzName;
        [Export("initWithName:")]
        IntPtr Constructor(string tzName);

        // -(instancetype _Nullable)initWithName:(NSString * _Nonnull)tzName data:(NSData * _Nullable)aData;
        [Export("initWithName:data:")]
        IntPtr Constructor(string tzName, [NullAllowed] NSData aData);

        // +(instancetype _Nonnull)timeZoneForSecondsFromGMT:(NSInteger)seconds;
        [Static]
        [Export("timeZoneForSecondsFromGMT:")]
        NSTimeZone TimeZoneForSecondsFromGMT(nint seconds);

        // +(instancetype _Nullable)timeZoneWithAbbreviation:(NSString * _Nonnull)abbreviation;
        [Static]
        [Export("timeZoneWithAbbreviation:")]
        [return: NullAllowed]
        NSTimeZone TimeZoneWithAbbreviation(string abbreviation);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSSystemTimeZoneDidChangeNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("NSSystemTimeZoneDidChangeNotification", "__Internal")]
        NSString NSSystemTimeZoneDidChangeNotification { get; }
    }

    // @interface NSTimer : NSObject
    [BaseType(typeof(NSObject))]
    interface NSTimer
    {
        // +(NSTimer * _Nonnull)timerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation * _Nonnull)invocation repeats:(BOOL)yesOrNo;
        [Static]
        [Export("timerWithTimeInterval:invocation:repeats:")]
        NSTimer TimerWithTimeInterval(double ti, NSInvocation invocation, bool yesOrNo);

        // +(NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation * _Nonnull)invocation repeats:(BOOL)yesOrNo;
        [Static]
        [Export("scheduledTimerWithTimeInterval:invocation:repeats:")]
        NSTimer ScheduledTimerWithTimeInterval(double ti, NSInvocation invocation, bool yesOrNo);

        // +(NSTimer * _Nonnull)timerWithTimeInterval:(NSTimeInterval)ti target:(id _Nonnull)aTarget selector:(SEL _Nonnull)aSelector userInfo:(id _Nullable)userInfo repeats:(BOOL)yesOrNo;
        [Static]
        [Export("timerWithTimeInterval:target:selector:userInfo:repeats:")]
        NSTimer TimerWithTimeInterval(double ti, NSObject aTarget, Selector aSelector, [NullAllowed] NSObject userInfo, bool yesOrNo);

        // +(NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id _Nonnull)aTarget selector:(SEL _Nonnull)aSelector userInfo:(id _Nullable)userInfo repeats:(BOOL)yesOrNo;
        [Static]
        [Export("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:")]
        NSTimer ScheduledTimerWithTimeInterval(double ti, NSObject aTarget, Selector aSelector, [NullAllowed] NSObject userInfo, bool yesOrNo);

        // +(NSTimer * _Nonnull)timerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^ _Nonnull)(NSTimer * _Nonnull))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Static]
        [Export("timerWithTimeInterval:repeats:block:")]
        NSTimer TimerWithTimeInterval(double interval, bool repeats, Action<NSTimer> block);

        // +(NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^ _Nonnull)(NSTimer * _Nonnull))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Static]
        [Export("scheduledTimerWithTimeInterval:repeats:block:")]
        NSTimer ScheduledTimerWithTimeInterval(double interval, bool repeats, Action<NSTimer> block);

        // -(instancetype _Nonnull)initWithFireDate:(NSDate * _Nonnull)date interval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^ _Nonnull)(NSTimer * _Nonnull))block __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("initWithFireDate:interval:repeats:block:")]
        IntPtr Constructor(NSDate date, double interval, bool repeats, Action<NSTimer> block);

        // -(instancetype _Nonnull)initWithFireDate:(NSDate * _Nonnull)date interval:(NSTimeInterval)ti target:(id _Nonnull)t selector:(SEL _Nonnull)s userInfo:(id _Nullable)ui repeats:(BOOL)rep __attribute__((objc_designated_initializer));
        [Export("initWithFireDate:interval:target:selector:userInfo:repeats:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSDate date, double ti, NSObject t, Selector s, [NullAllowed] NSObject ui, bool rep);

        // -(void)fire;
        [Export("fire")]
        void Fire();

        // @property (copy) NSDate * _Nonnull fireDate;
        [Export("fireDate", ArgumentSemantic.Copy)]
        NSDate FireDate { get; set; }

        // @property (readonly) NSTimeInterval timeInterval;
        [Export("timeInterval")]
        double TimeInterval { get; }

        // @property NSTimeInterval tolerance __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("tolerance")]
        double Tolerance { get; set; }

        // -(void)invalidate;
        [Export("invalidate")]
        void Invalidate();

        // @property (readonly, getter = isValid) BOOL valid;
        [Export("valid")]
        bool Valid { [Bind("isValid")] get; }

        // @property (readonly, retain) id _Nullable userInfo;
        [NullAllowed, Export("userInfo", ArgumentSemantic.Retain)]
        NSObject UserInfo { get; }
    }

    // @protocol NSURLAuthenticationChallengeSender <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSURLAuthenticationChallengeSender
    {
        // @required -(void)useCredential:(NSURLCredential * _Nonnull)credential forAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
        [Abstract]
        [Export("useCredential:forAuthenticationChallenge:")]
        void UseCredential(NSUrlCredential credential, NSUrlAuthenticationChallenge challenge);

        // @required -(void)continueWithoutCredentialForAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
        [Abstract]
        [Export("continueWithoutCredentialForAuthenticationChallenge:")]
        void ContinueWithoutCredentialForAuthenticationChallenge(NSUrlAuthenticationChallenge challenge);

        // @required -(void)cancelAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
        [Abstract]
        [Export("cancelAuthenticationChallenge:")]
        void CancelAuthenticationChallenge(NSUrlAuthenticationChallenge challenge);

        // @optional -(void)performDefaultHandlingForAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
        [Export("performDefaultHandlingForAuthenticationChallenge:")]
        void PerformDefaultHandlingForAuthenticationChallenge(NSUrlAuthenticationChallenge challenge);

        // @optional -(void)rejectProtectionSpaceAndContinueWithChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
        [Export("rejectProtectionSpaceAndContinueWithChallenge:")]
        void RejectProtectionSpaceAndContinueWithChallenge(NSUrlAuthenticationChallenge challenge);
    }

    // @interface NSURLAuthenticationChallenge : NSObject <NSSecureCoding>
    [BaseType(typeof(NSObject))]
    interface NSURLAuthenticationChallenge : INSSecureCoding
    {
        // -(instancetype _Nonnull)initWithProtectionSpace:(NSURLProtectionSpace * _Nonnull)space proposedCredential:(NSURLCredential * _Nullable)credential previousFailureCount:(NSInteger)previousFailureCount failureResponse:(NSURLResponse * _Nullable)response error:(NSError * _Nullable)error sender:(id<NSURLAuthenticationChallengeSender> _Nonnull)sender;
        [Export("initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:")]
        IntPtr Constructor(NSUrlProtectionSpace space, [NullAllowed] NSUrlCredential credential, nint previousFailureCount, [NullAllowed] NSUrlResponse response, [NullAllowed] NSError error, NSURLAuthenticationChallengeSender sender);

        // -(instancetype _Nonnull)initWithAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge sender:(id<NSURLAuthenticationChallengeSender> _Nonnull)sender;
        [Export("initWithAuthenticationChallenge:sender:")]
        IntPtr Constructor(NSUrlAuthenticationChallenge challenge, NSURLAuthenticationChallengeSender sender);

        // @property (readonly, copy) NSURLProtectionSpace * _Nonnull protectionSpace;
        [Export("protectionSpace", ArgumentSemantic.Copy)]
        NSUrlProtectionSpace ProtectionSpace { get; }

        // @property (readonly, copy) NSURLCredential * _Nullable proposedCredential;
        [NullAllowed, Export("proposedCredential", ArgumentSemantic.Copy)]
        NSUrlCredential ProposedCredential { get; }

        // @property (readonly) NSInteger previousFailureCount;
        [Export("previousFailureCount")]
        nint PreviousFailureCount { get; }

        // @property (readonly, copy) NSURLResponse * _Nullable failureResponse;
        [NullAllowed, Export("failureResponse", ArgumentSemantic.Copy)]
        NSUrlResponse FailureResponse { get; }

        // @property (readonly, copy) NSError * _Nullable error;
        [NullAllowed, Export("error", ArgumentSemantic.Copy)]
        NSError Error { get; }

        // @property (readonly, retain) id<NSURLAuthenticationChallengeSender> _Nullable sender;
        [NullAllowed, Export("sender", ArgumentSemantic.Retain)]
        NSURLAuthenticationChallengeSender Sender { get; }
    }

    // @interface NSCachedURLResponse : NSObject <NSSecureCoding, NSCopying>
    [BaseType(typeof(NSObject))]
    interface NSCachedURLResponse : INSSecureCoding, INSCopying
    {
        // -(instancetype _Nonnull)initWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nonnull)data;
        [Export("initWithResponse:data:")]
        IntPtr Constructor(NSUrlResponse response, NSData data);

        // -(instancetype _Nonnull)initWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nonnull)data userInfo:(NSDictionary * _Nullable)userInfo storagePolicy:(NSURLCacheStoragePolicy)storagePolicy;
        [Export("initWithResponse:data:userInfo:storagePolicy:")]
        IntPtr Constructor(NSUrlResponse response, NSData data, [NullAllowed] NSDictionary userInfo, NSURLCacheStoragePolicy storagePolicy);

        // @property (readonly, copy) NSURLResponse * _Nonnull response;
        [Export("response", ArgumentSemantic.Copy)]
        NSUrlResponse Response { get; }

        // @property (readonly, copy) NSData * _Nonnull data;
        [Export("data", ArgumentSemantic.Copy)]
        NSData Data { get; }

        // @property (readonly, copy) NSDictionary * _Nullable userInfo;
        [NullAllowed, Export("userInfo", ArgumentSemantic.Copy)]
        NSDictionary UserInfo { get; }

        // @property (readonly) NSURLCacheStoragePolicy storagePolicy;
        [Export("storagePolicy")]
        NSURLCacheStoragePolicy StoragePolicy { get; }
    }

    // @interface NSURLCache : NSObject
    [BaseType(typeof(NSObject))]
    interface NSURLCache
    {
        // @property (strong, class) NSURLCache * _Nonnull sharedURLCache;
        [Static]
        [Export("sharedURLCache", ArgumentSemantic.Strong)]
        NSUrlCache SharedURLCache { get; set; }

        // -(instancetype _Nonnull)initWithMemoryCapacity:(NSUInteger)memoryCapacity diskCapacity:(NSUInteger)diskCapacity diskPath:(NSString * _Nullable)path;
        [Export("initWithMemoryCapacity:diskCapacity:diskPath:")]
        IntPtr Constructor(nuint memoryCapacity, nuint diskCapacity, [NullAllowed] string path);

        // -(NSCachedURLResponse * _Nullable)cachedResponseForRequest:(NSURLRequest * _Nonnull)request;
        [Export("cachedResponseForRequest:")]
        [return: NullAllowed]
        NSCachedUrlResponse CachedResponseForRequest(NSUrlRequest request);

        // -(void)storeCachedResponse:(NSCachedURLResponse * _Nonnull)cachedResponse forRequest:(NSURLRequest * _Nonnull)request;
        [Export("storeCachedResponse:forRequest:")]
        void StoreCachedResponse(NSCachedUrlResponse cachedResponse, NSUrlRequest request);

        // -(void)removeCachedResponseForRequest:(NSURLRequest * _Nonnull)request;
        [Export("removeCachedResponseForRequest:")]
        void RemoveCachedResponseForRequest(NSUrlRequest request);

        // -(void)removeAllCachedResponses;
        [Export("removeAllCachedResponses")]
        void RemoveAllCachedResponses();

        // -(void)removeCachedResponsesSinceDate:(NSDate * _Nonnull)date __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("removeCachedResponsesSinceDate:")]
        void RemoveCachedResponsesSinceDate(NSDate date);

        // @property NSUInteger memoryCapacity;
        [Export("memoryCapacity")]
        nuint MemoryCapacity { get; set; }

        // @property NSUInteger diskCapacity;
        [Export("diskCapacity")]
        nuint DiskCapacity { get; set; }

        // @property (readonly) NSUInteger currentMemoryUsage;
        [Export("currentMemoryUsage")]
        nuint CurrentMemoryUsage { get; }

        // @property (readonly) NSUInteger currentDiskUsage;
        [Export("currentDiskUsage")]
        nuint CurrentDiskUsage { get; }
    }

    // @interface NSURLSessionTaskAdditions (NSURLCache)
    [Category]
    [BaseType(typeof(NSUrlCache))]
    interface NSURLCache_NSURLSessionTaskAdditions
    {
        // -(void)storeCachedResponse:(NSCachedURLResponse * _Nonnull)cachedResponse forDataTask:(NSURLSessionDataTask * _Nonnull)dataTask __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("storeCachedResponse:forDataTask:")]
        void StoreCachedResponse(NSCachedUrlResponse cachedResponse, NSUrlSessionDataTask dataTask);

        // -(void)getCachedResponseForDataTask:(NSURLSessionDataTask * _Nonnull)dataTask completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("getCachedResponseForDataTask:completionHandler:")]
        void GetCachedResponseForDataTask(NSUrlSessionDataTask dataTask, Action<NSCachedURLResponse> completionHandler);

        // -(void)removeCachedResponseForDataTask:(NSURLSessionDataTask * _Nonnull)dataTask __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("removeCachedResponseForDataTask:")]
        void RemoveCachedResponseForDataTask(NSUrlSessionDataTask dataTask);
    }

    // @interface NSURLConnection : NSObject
    [BaseType(typeof(NSObject))]
    interface NSURLConnection
    {
        // -(instancetype _Nullable)initWithRequest:(NSURLRequest * _Nonnull)request delegate:(id _Nullable)delegate startImmediately:(BOOL)startImmediately __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.5, deprecated=10.11)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession (see NSURLSession.h)")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
        [Introduced(PlatformName.MacOSX, 10, 5, message: "Use NSURLSession (see NSURLSession.h)")]
        [Deprecated(PlatformName.MacOSX, 10, 11, message: "Use NSURLSession (see NSURLSession.h)")]
        [NoWatch]
        [Export("initWithRequest:delegate:startImmediately:")]
        IntPtr Constructor(NSUrlRequest request, [NullAllowed] NSObject @delegate, bool startImmediately);

        // -(instancetype _Nullable)initWithRequest:(NSURLRequest * _Nonnull)request delegate:(id _Nullable)delegate __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.3, deprecated=10.11)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession (see NSURLSession.h)")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
        [Introduced(PlatformName.MacOSX, 10, 3, message: "Use NSURLSession (see NSURLSession.h)")]
        [Deprecated(PlatformName.MacOSX, 10, 11, message: "Use NSURLSession (see NSURLSession.h)")]
        [NoWatch]
        [Export("initWithRequest:delegate:")]
        IntPtr Constructor(NSUrlRequest request, [NullAllowed] NSObject @delegate);

        // +(NSURLConnection * _Nullable)connectionWithRequest:(NSURLRequest * _Nonnull)request delegate:(id _Nullable)delegate __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.3, deprecated=10.11)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession (see NSURLSession.h)")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
        [Introduced(PlatformName.MacOSX, 10, 3, message: "Use NSURLSession (see NSURLSession.h)")]
        [Deprecated(PlatformName.MacOSX, 10, 11, message: "Use NSURLSession (see NSURLSession.h)")]
        [NoWatch]
        [Static]
        [Export("connectionWithRequest:delegate:")]
        [return: NullAllowed]
        NSUrlConnection ConnectionWithRequest(NSUrlRequest request, [NullAllowed] NSObject @delegate);

        // @property (readonly, copy) NSURLRequest * _Nonnull originalRequest __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(5, 0)]
        [Export("originalRequest", ArgumentSemantic.Copy)]
        NSUrlRequest OriginalRequest { get; }

        // @property (readonly, copy) NSURLRequest * _Nonnull currentRequest __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(5, 0)]
        [Export("currentRequest", ArgumentSemantic.Copy)]
        NSUrlRequest CurrentRequest { get; }

        // -(void)start __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("start")]
        void Start();

        // -(void)cancel;
        [Export("cancel")]
        void Cancel();

        // -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("scheduleInRunLoop:forMode:")]
        void ScheduleInRunLoop(NSRunLoop aRunLoop, string mode);

        // -(void)unscheduleFromRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("unscheduleFromRunLoop:forMode:")]
        void UnscheduleFromRunLoop(NSRunLoop aRunLoop, string mode);

        // -(void)setDelegateQueue:(NSOperationQueue * _Nullable)queue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("setDelegateQueue:")]
        void SetDelegateQueue([NullAllowed] NSOperationQueue queue);

        // +(BOOL)canHandleRequest:(NSURLRequest * _Nonnull)request;
        [Static]
        [Export("canHandleRequest:")]
        bool CanHandleRequest(NSUrlRequest request);
    }

    // @protocol NSURLConnectionDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSURLConnectionDelegate
    {
        // @optional -(void)connection:(NSURLConnection * _Nonnull)connection didFailWithError:(NSError * _Nonnull)error;
        [Export("connection:didFailWithError:")]
        void Connection(NSUrlConnection connection, NSError error);

        // @optional -(BOOL)connectionShouldUseCredentialStorage:(NSURLConnection * _Nonnull)connection;
        [Export("connectionShouldUseCredentialStorage:")]
        bool ConnectionShouldUseCredentialStorage(NSUrlConnection connection);

        // @optional -(void)connection:(NSURLConnection * _Nonnull)connection willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
        [Export("connection:willSendRequestForAuthenticationChallenge:")]
        void Connection(NSUrlConnection connection, NSUrlAuthenticationChallenge challenge);

        // @optional -(BOOL)connection:(NSURLConnection * _Nonnull)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=3.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.6, deprecated=10.10)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Introduced(PlatformName.iOS, 3, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Introduced(PlatformName.MacOSX, 10, 6, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 10, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Export("connection:canAuthenticateAgainstProtectionSpace:")]
        bool Connection(NSUrlConnection connection, NSUrlProtectionSpace protectionSpace);

        // @optional -(void)connection:(NSURLConnection * _Nonnull)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.10)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Introduced(PlatformName.MacOSX, 10, 2, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 10, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Export("connection:didReceiveAuthenticationChallenge:")]
        void Connection(NSUrlConnection connection, NSUrlAuthenticationChallenge challenge);

        // @optional -(void)connection:(NSURLConnection * _Nonnull)connection didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.10)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Introduced(PlatformName.MacOSX, 10, 2, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 10, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
        [Export("connection:didCancelAuthenticationChallenge:")]
        void Connection(NSUrlConnection connection, NSUrlAuthenticationChallenge challenge);
    }

    // @protocol NSURLConnectionDataDelegate <NSURLConnectionDelegate>
    [Protocol, Model]
    interface NSURLConnectionDataDelegate : INSUrlConnectionDelegate
    {
        // @optional -(NSURLRequest * _Nullable)connection:(NSURLConnection * _Nonnull)connection willSendRequest:(NSURLRequest * _Nonnull)request redirectResponse:(NSURLResponse * _Nullable)response;
        [Export("connection:willSendRequest:redirectResponse:")]
        [return: NullAllowed]
        NSUrlRequest Connection(NSUrlConnection connection, NSUrlRequest request, [NullAllowed] NSUrlResponse response);

        // @optional -(void)connection:(NSURLConnection * _Nonnull)connection didReceiveResponse:(NSURLResponse * _Nonnull)response;
        [Export("connection:didReceiveResponse:")]
        void Connection(NSUrlConnection connection, NSUrlResponse response);

        // @optional -(void)connection:(NSURLConnection * _Nonnull)connection didReceiveData:(NSData * _Nonnull)data;
        [Export("connection:didReceiveData:")]
        void Connection(NSUrlConnection connection, NSData data);

        // @optional -(NSInputStream * _Nullable)connection:(NSURLConnection * _Nonnull)connection needNewBodyStream:(NSURLRequest * _Nonnull)request;
        [Export("connection:needNewBodyStream:")]
        [return: NullAllowed]
        NSInputStream Connection(NSUrlConnection connection, NSUrlRequest request);

        // @optional -(void)connection:(NSURLConnection * _Nonnull)connection didSendBodyData:(NSInteger)bytesWritten totalBytesWritten:(NSInteger)totalBytesWritten totalBytesExpectedToWrite:(NSInteger)totalBytesExpectedToWrite;
        [Export("connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:")]
        void Connection(NSUrlConnection connection, nint bytesWritten, nint totalBytesWritten, nint totalBytesExpectedToWrite);

        // @optional -(NSCachedURLResponse * _Nullable)connection:(NSURLConnection * _Nonnull)connection willCacheResponse:(NSCachedURLResponse * _Nonnull)cachedResponse;
        [Export("connection:willCacheResponse:")]
        [return: NullAllowed]
        NSCachedUrlResponse Connection(NSUrlConnection connection, NSCachedUrlResponse cachedResponse);

        // @optional -(void)connectionDidFinishLoading:(NSURLConnection * _Nonnull)connection;
        [Export("connectionDidFinishLoading:")]
        void ConnectionDidFinishLoading(NSUrlConnection connection);
    }

    // @protocol NSURLConnectionDownloadDelegate <NSURLConnectionDelegate>
    [Protocol, Model]
    interface NSURLConnectionDownloadDelegate : INSUrlConnectionDelegate
    {
        // @optional -(void)connection:(NSURLConnection * _Nonnull)connection didWriteData:(long long)bytesWritten totalBytesWritten:(long long)totalBytesWritten expectedTotalBytes:(long long)expectedTotalBytes;
        [Export("connection:didWriteData:totalBytesWritten:expectedTotalBytes:")]
        void Connection(NSUrlConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes);

        // @optional -(void)connectionDidResumeDownloading:(NSURLConnection * _Nonnull)connection totalBytesWritten:(long long)totalBytesWritten expectedTotalBytes:(long long)expectedTotalBytes;
        [Export("connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:")]
        void ConnectionDidResumeDownloading(NSUrlConnection connection, long totalBytesWritten, long expectedTotalBytes);

        // @required -(void)connectionDidFinishDownloading:(NSURLConnection * _Nonnull)connection destinationURL:(NSURL * _Nonnull)destinationURL;
        [Abstract]
        [Export("connectionDidFinishDownloading:destinationURL:")]
        void ConnectionDidFinishDownloading(NSUrlConnection connection, NSUrl destinationURL);
    }

    // @interface NSURLConnectionSynchronousLoading (NSURLConnection)
    [Category]
    [BaseType(typeof(NSUrlConnection))]
    interface NSURLConnection_NSURLConnectionSynchronousLoading
    {
        // +(NSData * _Nullable)sendSynchronousRequest:(NSURLRequest * _Nonnull)request returningResponse:(NSURLResponse * _Nullable * _Nullable)response error:(NSError * _Nullable * _Nullable)error __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.3, deprecated=10.11)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
        [Introduced(PlatformName.MacOSX, 10, 3, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
        [Deprecated(PlatformName.MacOSX, 10, 11, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
        [NoWatch]
        [Static]
        [Export("sendSynchronousRequest:returningResponse:error:")]
        [return: NullAllowed]
        NSData SendSynchronousRequest(NSUrlRequest request, [NullAllowed] out NSUrlResponse response, [NullAllowed] out NSError error);
    }

    // @interface NSURLConnectionQueuedLoading (NSURLConnection)
    [Category]
    [BaseType(typeof(NSUrlConnection))]
    interface NSURLConnection_NSURLConnectionQueuedLoading
    {
        // +(void)sendAsynchronousRequest:(NSURLRequest * _Nonnull)request queue:(NSOperationQueue * _Nonnull)queue completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSData * _Nullable, NSError * _Nullable))handler __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(ios, introduced=5.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.7, deprecated=10.11)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
        [Introduced(PlatformName.iOS, 5, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
        [Introduced(PlatformName.MacOSX, 10, 7, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
        [Deprecated(PlatformName.MacOSX, 10, 11, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
        [NoWatch]
        [Static]
        [Export("sendAsynchronousRequest:queue:completionHandler:")]
        void SendAsynchronousRequest(NSUrlRequest request, NSOperationQueue queue, Action<NSURLResponse, NSData, NSError> handler);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kSecClass __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecClass", "__Internal")]
        unsafe CFStringRef* kSecClass { get; }

        // extern const CFStringRef _Nonnull kSecClassInternetPassword __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecClassInternetPassword", "__Internal")]
        unsafe CFStringRef* kSecClassInternetPassword { get; }

        // extern const CFStringRef _Nonnull kSecClassGenericPassword __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(2, 0)]
        [Field("kSecClassGenericPassword", "__Internal")]
        unsafe CFStringRef* kSecClassGenericPassword { get; }

        // extern const CFStringRef _Nonnull kSecClassCertificate __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(2, 0)]
        [Field("kSecClassCertificate", "__Internal")]
        unsafe CFStringRef* kSecClassCertificate { get; }

        // extern const CFStringRef _Nonnull kSecClassKey __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(2, 0)]
        [Field("kSecClassKey", "__Internal")]
        unsafe CFStringRef* kSecClassKey { get; }

        // extern const CFStringRef _Nonnull kSecClassIdentity __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(2, 0)]
        [Field("kSecClassIdentity", "__Internal")]
        unsafe CFStringRef* kSecClassIdentity { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccessible __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(4, 0)]
        [Field("kSecAttrAccessible", "__Internal")]
        unsafe CFStringRef* kSecAttrAccessible { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccess __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrAccess", "__Internal")]
        unsafe CFStringRef* kSecAttrAccess { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccessControl __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Mac(10, 10), iOS(8, 0)]
        [Field("kSecAttrAccessControl", "__Internal")]
        unsafe CFStringRef* kSecAttrAccessControl { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccessGroup __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(3, 0)]
        [Field("kSecAttrAccessGroup", "__Internal")]
        unsafe CFStringRef* kSecAttrAccessGroup { get; }

        // extern const CFStringRef _Nonnull kSecAttrSynchronizable __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(7, 0)]
        [Field("kSecAttrSynchronizable", "__Internal")]
        unsafe CFStringRef* kSecAttrSynchronizable { get; }

        // extern const CFStringRef _Nonnull kSecAttrSynchronizableAny __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(7, 0)]
        [Field("kSecAttrSynchronizableAny", "__Internal")]
        unsafe CFStringRef* kSecAttrSynchronizableAny { get; }

        // extern const CFStringRef _Nonnull kSecAttrCreationDate __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrCreationDate", "__Internal")]
        unsafe CFStringRef* kSecAttrCreationDate { get; }

        // extern const CFStringRef _Nonnull kSecAttrModificationDate __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrModificationDate", "__Internal")]
        unsafe CFStringRef* kSecAttrModificationDate { get; }

        // extern const CFStringRef _Nonnull kSecAttrDescription __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrDescription", "__Internal")]
        unsafe CFStringRef* kSecAttrDescription { get; }

        // extern const CFStringRef _Nonnull kSecAttrComment __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrComment", "__Internal")]
        unsafe CFStringRef* kSecAttrComment { get; }

        // extern const CFStringRef _Nonnull kSecAttrCreator __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrCreator", "__Internal")]
        unsafe CFStringRef* kSecAttrCreator { get; }

        // extern const CFStringRef _Nonnull kSecAttrType __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrType", "__Internal")]
        unsafe CFStringRef* kSecAttrType { get; }

        // extern const CFStringRef _Nonnull kSecAttrLabel __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrLabel", "__Internal")]
        unsafe CFStringRef* kSecAttrLabel { get; }

        // extern const CFStringRef _Nonnull kSecAttrIsInvisible __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrIsInvisible", "__Internal")]
        unsafe CFStringRef* kSecAttrIsInvisible { get; }

        // extern const CFStringRef _Nonnull kSecAttrIsNegative __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrIsNegative", "__Internal")]
        unsafe CFStringRef* kSecAttrIsNegative { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccount __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrAccount", "__Internal")]
        unsafe CFStringRef* kSecAttrAccount { get; }

        // extern const CFStringRef _Nonnull kSecAttrService __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrService", "__Internal")]
        unsafe CFStringRef* kSecAttrService { get; }

        // extern const CFStringRef _Nonnull kSecAttrGeneric __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrGeneric", "__Internal")]
        unsafe CFStringRef* kSecAttrGeneric { get; }

        // extern const CFStringRef _Nonnull kSecAttrSecurityDomain __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrSecurityDomain", "__Internal")]
        unsafe CFStringRef* kSecAttrSecurityDomain { get; }

        // extern const CFStringRef _Nonnull kSecAttrServer __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrServer", "__Internal")]
        unsafe CFStringRef* kSecAttrServer { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocol __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocol", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocol { get; }

        // extern const CFStringRef _Nonnull kSecAttrAuthenticationType __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrAuthenticationType", "__Internal")]
        unsafe CFStringRef* kSecAttrAuthenticationType { get; }

        // extern const CFStringRef _Nonnull kSecAttrPort __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrPort", "__Internal")]
        unsafe CFStringRef* kSecAttrPort { get; }

        // extern const CFStringRef _Nonnull kSecAttrPath __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrPath", "__Internal")]
        unsafe CFStringRef* kSecAttrPath { get; }

        // extern const CFStringRef _Nonnull kSecAttrSubject __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrSubject", "__Internal")]
        unsafe CFStringRef* kSecAttrSubject { get; }

        // extern const CFStringRef _Nonnull kSecAttrIssuer __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrIssuer", "__Internal")]
        unsafe CFStringRef* kSecAttrIssuer { get; }

        // extern const CFStringRef _Nonnull kSecAttrSerialNumber __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrSerialNumber", "__Internal")]
        unsafe CFStringRef* kSecAttrSerialNumber { get; }

        // extern const CFStringRef _Nonnull kSecAttrSubjectKeyID __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrSubjectKeyID", "__Internal")]
        unsafe CFStringRef* kSecAttrSubjectKeyID { get; }

        // extern const CFStringRef _Nonnull kSecAttrPublicKeyHash __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrPublicKeyHash", "__Internal")]
        unsafe CFStringRef* kSecAttrPublicKeyHash { get; }

        // extern const CFStringRef _Nonnull kSecAttrCertificateType __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrCertificateType", "__Internal")]
        unsafe CFStringRef* kSecAttrCertificateType { get; }

        // extern const CFStringRef _Nonnull kSecAttrCertificateEncoding __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrCertificateEncoding", "__Internal")]
        unsafe CFStringRef* kSecAttrCertificateEncoding { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyClass __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrKeyClass", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyClass { get; }

        // extern const CFStringRef _Nonnull kSecAttrApplicationLabel __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrApplicationLabel", "__Internal")]
        unsafe CFStringRef* kSecAttrApplicationLabel { get; }

        // extern const CFStringRef _Nonnull kSecAttrIsPermanent __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrIsPermanent", "__Internal")]
        unsafe CFStringRef* kSecAttrIsPermanent { get; }

        // extern const CFStringRef _Nonnull kSecAttrIsSensitive __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrIsSensitive", "__Internal")]
        unsafe CFStringRef* kSecAttrIsSensitive { get; }

        // extern const CFStringRef _Nonnull kSecAttrIsExtractable __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrIsExtractable", "__Internal")]
        unsafe CFStringRef* kSecAttrIsExtractable { get; }

        // extern const CFStringRef _Nonnull kSecAttrApplicationTag __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrApplicationTag", "__Internal")]
        unsafe CFStringRef* kSecAttrApplicationTag { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyType __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrKeyType", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyType { get; }

        // extern const CFStringRef _Nonnull kSecAttrPRF __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrPRF", "__Internal")]
        unsafe CFStringRef* kSecAttrPRF { get; }

        // extern const CFStringRef _Nonnull kSecAttrSalt __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrSalt", "__Internal")]
        unsafe CFStringRef* kSecAttrSalt { get; }

        // extern const CFStringRef _Nonnull kSecAttrRounds __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrRounds", "__Internal")]
        unsafe CFStringRef* kSecAttrRounds { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeySizeInBits __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrKeySizeInBits", "__Internal")]
        unsafe CFStringRef* kSecAttrKeySizeInBits { get; }

        // extern const CFStringRef _Nonnull kSecAttrEffectiveKeySize __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrEffectiveKeySize", "__Internal")]
        unsafe CFStringRef* kSecAttrEffectiveKeySize { get; }

        // extern const CFStringRef _Nonnull kSecAttrCanEncrypt __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrCanEncrypt", "__Internal")]
        unsafe CFStringRef* kSecAttrCanEncrypt { get; }

        // extern const CFStringRef _Nonnull kSecAttrCanDecrypt __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrCanDecrypt", "__Internal")]
        unsafe CFStringRef* kSecAttrCanDecrypt { get; }

        // extern const CFStringRef _Nonnull kSecAttrCanDerive __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrCanDerive", "__Internal")]
        unsafe CFStringRef* kSecAttrCanDerive { get; }

        // extern const CFStringRef _Nonnull kSecAttrCanSign __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrCanSign", "__Internal")]
        unsafe CFStringRef* kSecAttrCanSign { get; }

        // extern const CFStringRef _Nonnull kSecAttrCanVerify __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrCanVerify", "__Internal")]
        unsafe CFStringRef* kSecAttrCanVerify { get; }

        // extern const CFStringRef _Nonnull kSecAttrCanWrap __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrCanWrap", "__Internal")]
        unsafe CFStringRef* kSecAttrCanWrap { get; }

        // extern const CFStringRef _Nonnull kSecAttrCanUnwrap __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrCanUnwrap", "__Internal")]
        unsafe CFStringRef* kSecAttrCanUnwrap { get; }

        // extern const CFStringRef _Nonnull kSecAttrSyncViewHint __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kSecAttrSyncViewHint", "__Internal")]
        unsafe CFStringRef* kSecAttrSyncViewHint { get; }

        // extern const CFStringRef _Nonnull kSecAttrTokenID __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(9, 0)]
        [Field("kSecAttrTokenID", "__Internal")]
        unsafe CFStringRef* kSecAttrTokenID { get; }

        // extern const CFStringRef _Nonnull kSecAttrPersistantReference __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecAttrPersistantReference", "__Internal")]
        unsafe CFStringRef* kSecAttrPersistantReference { get; }

        // extern const CFStringRef _Nonnull kSecAttrPersistentReference __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecAttrPersistentReference", "__Internal")]
        unsafe CFStringRef* kSecAttrPersistentReference { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccessibleWhenUnlocked __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(4, 0)]
        [Field("kSecAttrAccessibleWhenUnlocked", "__Internal")]
        unsafe CFStringRef* kSecAttrAccessibleWhenUnlocked { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccessibleAfterFirstUnlock __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(4, 0)]
        [Field("kSecAttrAccessibleAfterFirstUnlock", "__Internal")]
        unsafe CFStringRef* kSecAttrAccessibleAfterFirstUnlock { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccessibleAlways __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(4, 0)]
        [Field("kSecAttrAccessibleAlways", "__Internal")]
        unsafe CFStringRef* kSecAttrAccessibleAlways { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Mac(10, 10), iOS(8, 0)]
        [Field("kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly", "__Internal")]
        unsafe CFStringRef* kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccessibleWhenUnlockedThisDeviceOnly __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(4, 0)]
        [Field("kSecAttrAccessibleWhenUnlockedThisDeviceOnly", "__Internal")]
        unsafe CFStringRef* kSecAttrAccessibleWhenUnlockedThisDeviceOnly { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(4, 0)]
        [Field("kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly", "__Internal")]
        unsafe CFStringRef* kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccessibleAlwaysThisDeviceOnly __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(4, 0)]
        [Field("kSecAttrAccessibleAlwaysThisDeviceOnly", "__Internal")]
        unsafe CFStringRef* kSecAttrAccessibleAlwaysThisDeviceOnly { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolFTP __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolFTP", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolFTP { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolFTPAccount __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolFTPAccount", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolFTPAccount { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolHTTP __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolHTTP", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolHTTP { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolIRC __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolIRC", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolIRC { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolNNTP __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolNNTP", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolNNTP { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolPOP3 __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolPOP3", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolPOP3 { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolSMTP __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolSMTP", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolSMTP { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolSOCKS __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolSOCKS", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolSOCKS { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolIMAP __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolIMAP", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolIMAP { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolLDAP __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolLDAP", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolLDAP { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolAppleTalk __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolAppleTalk", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolAppleTalk { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolAFP __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolAFP", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolAFP { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolTelnet __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolTelnet", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolTelnet { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolSSH __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolSSH", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolSSH { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolFTPS __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolFTPS", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolFTPS { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolHTTPS __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolHTTPS", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolHTTPS { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolHTTPProxy __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolHTTPProxy", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolHTTPProxy { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolHTTPSProxy __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolHTTPSProxy", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolHTTPSProxy { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolFTPProxy __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolFTPProxy", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolFTPProxy { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolSMB __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolSMB", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolSMB { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolRTSP __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolRTSP", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolRTSP { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolRTSPProxy __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolRTSPProxy", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolRTSPProxy { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolDAAP __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolDAAP", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolDAAP { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolEPPC __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolEPPC", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolEPPC { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolIPP __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolIPP", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolIPP { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolNNTPS __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolNNTPS", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolNNTPS { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolLDAPS __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolLDAPS", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolLDAPS { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolTelnetS __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolTelnetS", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolTelnetS { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolIMAPS __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolIMAPS", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolIMAPS { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolIRCS __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolIRCS", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolIRCS { get; }

        // extern const CFStringRef _Nonnull kSecAttrProtocolPOP3S __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrProtocolPOP3S", "__Internal")]
        unsafe CFStringRef* kSecAttrProtocolPOP3S { get; }

        // extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeNTLM __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrAuthenticationTypeNTLM", "__Internal")]
        unsafe CFStringRef* kSecAttrAuthenticationTypeNTLM { get; }

        // extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeMSN __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrAuthenticationTypeMSN", "__Internal")]
        unsafe CFStringRef* kSecAttrAuthenticationTypeMSN { get; }

        // extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeDPA __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrAuthenticationTypeDPA", "__Internal")]
        unsafe CFStringRef* kSecAttrAuthenticationTypeDPA { get; }

        // extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeRPA __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrAuthenticationTypeRPA", "__Internal")]
        unsafe CFStringRef* kSecAttrAuthenticationTypeRPA { get; }

        // extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeHTTPBasic __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrAuthenticationTypeHTTPBasic", "__Internal")]
        unsafe CFStringRef* kSecAttrAuthenticationTypeHTTPBasic { get; }

        // extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeHTTPDigest __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrAuthenticationTypeHTTPDigest", "__Internal")]
        unsafe CFStringRef* kSecAttrAuthenticationTypeHTTPDigest { get; }

        // extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeHTMLForm __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrAuthenticationTypeHTMLForm", "__Internal")]
        unsafe CFStringRef* kSecAttrAuthenticationTypeHTMLForm { get; }

        // extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeDefault __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecAttrAuthenticationTypeDefault", "__Internal")]
        unsafe CFStringRef* kSecAttrAuthenticationTypeDefault { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyClassPublic __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(2, 0)]
        [Field("kSecAttrKeyClassPublic", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyClassPublic { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyClassPrivate __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(2, 0)]
        [Field("kSecAttrKeyClassPrivate", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyClassPrivate { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyClassSymmetric __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(2, 0)]
        [Field("kSecAttrKeyClassSymmetric", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyClassSymmetric { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyTypeRSA __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(2, 0)]
        [Field("kSecAttrKeyTypeRSA", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyTypeRSA { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyTypeDSA __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrKeyTypeDSA", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyTypeDSA { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyTypeAES __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrKeyTypeAES", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyTypeAES { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyTypeDES __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrKeyTypeDES", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyTypeDES { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyType3DES __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrKeyType3DES", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyType3DES { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyTypeRC4 __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrKeyTypeRC4", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyTypeRC4 { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyTypeRC2 __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrKeyTypeRC2", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyTypeRC2 { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyTypeCAST __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrKeyTypeCAST", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyTypeCAST { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyTypeECDSA __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrKeyTypeECDSA", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyTypeECDSA { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyTypeEC __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(4, 0)]
        [Field("kSecAttrKeyTypeEC", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyTypeEC { get; }

        // extern const CFStringRef _Nonnull kSecAttrKeyTypeECSECPrimeRandom __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kSecAttrKeyTypeECSECPrimeRandom", "__Internal")]
        unsafe CFStringRef* kSecAttrKeyTypeECSECPrimeRandom { get; }

        // extern const CFStringRef _Nonnull kSecAttrPRFHmacAlgSHA1 __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrPRFHmacAlgSHA1", "__Internal")]
        unsafe CFStringRef* kSecAttrPRFHmacAlgSHA1 { get; }

        // extern const CFStringRef _Nonnull kSecAttrPRFHmacAlgSHA224 __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrPRFHmacAlgSHA224", "__Internal")]
        unsafe CFStringRef* kSecAttrPRFHmacAlgSHA224 { get; }

        // extern const CFStringRef _Nonnull kSecAttrPRFHmacAlgSHA256 __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrPRFHmacAlgSHA256", "__Internal")]
        unsafe CFStringRef* kSecAttrPRFHmacAlgSHA256 { get; }

        // extern const CFStringRef _Nonnull kSecAttrPRFHmacAlgSHA384 __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrPRFHmacAlgSHA384", "__Internal")]
        unsafe CFStringRef* kSecAttrPRFHmacAlgSHA384 { get; }

        // extern const CFStringRef _Nonnull kSecAttrPRFHmacAlgSHA512 __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecAttrPRFHmacAlgSHA512", "__Internal")]
        unsafe CFStringRef* kSecAttrPRFHmacAlgSHA512 { get; }

        // extern const CFStringRef _Nonnull kSecMatchPolicy __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecMatchPolicy", "__Internal")]
        unsafe CFStringRef* kSecMatchPolicy { get; }

        // extern const CFStringRef _Nonnull kSecMatchItemList __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecMatchItemList", "__Internal")]
        unsafe CFStringRef* kSecMatchItemList { get; }

        // extern const CFStringRef _Nonnull kSecMatchSearchList __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecMatchSearchList", "__Internal")]
        unsafe CFStringRef* kSecMatchSearchList { get; }

        // extern const CFStringRef _Nonnull kSecMatchIssuers __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecMatchIssuers", "__Internal")]
        unsafe CFStringRef* kSecMatchIssuers { get; }

        // extern const CFStringRef _Nonnull kSecMatchEmailAddressIfPresent __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecMatchEmailAddressIfPresent", "__Internal")]
        unsafe CFStringRef* kSecMatchEmailAddressIfPresent { get; }

        // extern const CFStringRef _Nonnull kSecMatchSubjectContains __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecMatchSubjectContains", "__Internal")]
        unsafe CFStringRef* kSecMatchSubjectContains { get; }

        // extern const CFStringRef _Nonnull kSecMatchSubjectStartsWith __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecMatchSubjectStartsWith", "__Internal")]
        unsafe CFStringRef* kSecMatchSubjectStartsWith { get; }

        // extern const CFStringRef _Nonnull kSecMatchSubjectEndsWith __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecMatchSubjectEndsWith", "__Internal")]
        unsafe CFStringRef* kSecMatchSubjectEndsWith { get; }

        // extern const CFStringRef _Nonnull kSecMatchSubjectWholeString __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecMatchSubjectWholeString", "__Internal")]
        unsafe CFStringRef* kSecMatchSubjectWholeString { get; }

        // extern const CFStringRef _Nonnull kSecMatchCaseInsensitive __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecMatchCaseInsensitive", "__Internal")]
        unsafe CFStringRef* kSecMatchCaseInsensitive { get; }

        // extern const CFStringRef _Nonnull kSecMatchDiacriticInsensitive __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecMatchDiacriticInsensitive", "__Internal")]
        unsafe CFStringRef* kSecMatchDiacriticInsensitive { get; }

        // extern const CFStringRef _Nonnull kSecMatchWidthInsensitive __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecMatchWidthInsensitive", "__Internal")]
        unsafe CFStringRef* kSecMatchWidthInsensitive { get; }

        // extern const CFStringRef _Nonnull kSecMatchTrustedOnly __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecMatchTrustedOnly", "__Internal")]
        unsafe CFStringRef* kSecMatchTrustedOnly { get; }

        // extern const CFStringRef _Nonnull kSecMatchValidOnDate __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecMatchValidOnDate", "__Internal")]
        unsafe CFStringRef* kSecMatchValidOnDate { get; }

        // extern const CFStringRef _Nonnull kSecMatchLimit __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecMatchLimit", "__Internal")]
        unsafe CFStringRef* kSecMatchLimit { get; }

        // extern const CFStringRef _Nonnull kSecMatchLimitOne __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecMatchLimitOne", "__Internal")]
        unsafe CFStringRef* kSecMatchLimitOne { get; }

        // extern const CFStringRef _Nonnull kSecMatchLimitAll __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecMatchLimitAll", "__Internal")]
        unsafe CFStringRef* kSecMatchLimitAll { get; }

        // extern const CFStringRef _Nonnull kSecReturnData __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecReturnData", "__Internal")]
        unsafe CFStringRef* kSecReturnData { get; }

        // extern const CFStringRef _Nonnull kSecReturnAttributes __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecReturnAttributes", "__Internal")]
        unsafe CFStringRef* kSecReturnAttributes { get; }

        // extern const CFStringRef _Nonnull kSecReturnRef __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecReturnRef", "__Internal")]
        unsafe CFStringRef* kSecReturnRef { get; }

        // extern const CFStringRef _Nonnull kSecReturnPersistentRef __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecReturnPersistentRef", "__Internal")]
        unsafe CFStringRef* kSecReturnPersistentRef { get; }

        // extern const CFStringRef _Nonnull kSecValueData __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecValueData", "__Internal")]
        unsafe CFStringRef* kSecValueData { get; }

        // extern const CFStringRef _Nonnull kSecValueRef __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecValueRef", "__Internal")]
        unsafe CFStringRef* kSecValueRef { get; }

        // extern const CFStringRef _Nonnull kSecValuePersistentRef __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecValuePersistentRef", "__Internal")]
        unsafe CFStringRef* kSecValuePersistentRef { get; }

        // extern const CFStringRef _Nonnull kSecUseItemList __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.6)));
        [NoWatch, NoTV, NoiOS, Mac(10, 6)]
        [Field("kSecUseItemList", "__Internal")]
        unsafe CFStringRef* kSecUseItemList { get; }

        // extern const CFStringRef _Nonnull kSecUseKeychain __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecUseKeychain", "__Internal")]
        unsafe CFStringRef* kSecUseKeychain { get; }

        // extern const CFStringRef _Nonnull kSecUseOperationPrompt __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Mac(10, 10), iOS(8, 0)]
        [Field("kSecUseOperationPrompt", "__Internal")]
        unsafe CFStringRef* kSecUseOperationPrompt { get; }

        // extern const CFStringRef _Nonnull kSecUseNoAuthenticationUI __attribute__((availability(ios, introduced=8.0, deprecated=9.0))) __attribute__((availability(macos, introduced=10.10, deprecated=10.11)));
        [Introduced(PlatformName.iOS, 8, 0, message: "Use kSecUseAuthenticationUI instead.")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use kSecUseAuthenticationUI instead.")]
        [Introduced(PlatformName.MacOSX, 10, 10, message: "Use kSecUseAuthenticationUI instead.")]
        [Deprecated(PlatformName.MacOSX, 10, 11, message: "Use kSecUseAuthenticationUI instead.")]
        [Field("kSecUseNoAuthenticationUI", "__Internal")]
        unsafe CFStringRef* kSecUseNoAuthenticationUI { get; }

        // extern const CFStringRef _Nonnull kSecUseAuthenticationUI __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kSecUseAuthenticationUI", "__Internal")]
        unsafe CFStringRef* kSecUseAuthenticationUI { get; }

        // extern const CFStringRef _Nonnull kSecUseAuthenticationContext __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kSecUseAuthenticationContext", "__Internal")]
        unsafe CFStringRef* kSecUseAuthenticationContext { get; }

        // extern const CFStringRef _Nonnull kSecUseAuthenticationUIAllow __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kSecUseAuthenticationUIAllow", "__Internal")]
        unsafe CFStringRef* kSecUseAuthenticationUIAllow { get; }

        // extern const CFStringRef _Nonnull kSecUseAuthenticationUIFail __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kSecUseAuthenticationUIFail", "__Internal")]
        unsafe CFStringRef* kSecUseAuthenticationUIFail { get; }

        // extern const CFStringRef _Nonnull kSecUseAuthenticationUISkip __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kSecUseAuthenticationUISkip", "__Internal")]
        unsafe CFStringRef* kSecUseAuthenticationUISkip { get; }

        // extern const CFStringRef _Nonnull kSecAttrTokenIDSecureEnclave __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(9, 0)]
        [Field("kSecAttrTokenIDSecureEnclave", "__Internal")]
        unsafe CFStringRef* kSecAttrTokenIDSecureEnclave { get; }

        // extern const CFStringRef _Nonnull kSecAttrAccessGroupToken __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kSecAttrAccessGroupToken", "__Internal")]
        unsafe CFStringRef* kSecAttrAccessGroupToken { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kSecPrivateKeyAttrs __attribute__((availability(ios, introduced=2.0)));
        [iOS(2, 0)]
        [Field("kSecPrivateKeyAttrs", "__Internal")]
        unsafe CFStringRef* kSecPrivateKeyAttrs { get; }

        // extern const CFStringRef _Nonnull kSecPublicKeyAttrs __attribute__((availability(ios, introduced=2.0)));
        [iOS(2, 0)]
        [Field("kSecPublicKeyAttrs", "__Internal")]
        unsafe CFStringRef* kSecPublicKeyAttrs { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureRaw __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSASignatureRaw", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureRaw { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPSSSHA1 __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmRSASignatureDigestPSSSHA1", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPSSSHA1 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPSSSHA224 __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmRSASignatureDigestPSSSHA224", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPSSSHA224 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPSSSHA256 __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmRSASignatureDigestPSSSHA256", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPSSSHA256 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPSSSHA384 __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmRSASignatureDigestPSSSHA384", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPSSSHA384 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPSSSHA512 __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmRSASignatureDigestPSSSHA512", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPSSSHA512 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePSSSHA1 __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmRSASignatureMessagePSSSHA1", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePSSSHA1 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePSSSHA224 __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmRSASignatureMessagePSSSHA224", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePSSSHA224 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePSSSHA256 __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmRSASignatureMessagePSSSHA256", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePSSSHA256 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePSSSHA384 __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmRSASignatureMessagePSSSHA384", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePSSSHA384 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePSSSHA512 __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmRSASignatureMessagePSSSHA512", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePSSSHA512 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureRFC4754 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDSASignatureRFC4754", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureRFC4754 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureDigestX962 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDSASignatureDigestX962", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureDigestX962 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureDigestX962SHA1 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDSASignatureDigestX962SHA1", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureDigestX962SHA1 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureDigestX962SHA224 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDSASignatureDigestX962SHA224", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureDigestX962SHA224 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureDigestX962SHA256 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDSASignatureDigestX962SHA256", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureDigestX962SHA256 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureDigestX962SHA384 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDSASignatureDigestX962SHA384", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureDigestX962SHA384 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureDigestX962SHA512 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDSASignatureDigestX962SHA512", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureDigestX962SHA512 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureMessageX962SHA1 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDSASignatureMessageX962SHA1", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureMessageX962SHA1 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureMessageX962SHA224 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDSASignatureMessageX962SHA224", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureMessageX962SHA224 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureMessageX962SHA256 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDSASignatureMessageX962SHA256", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureMessageX962SHA256 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureMessageX962SHA384 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDSASignatureMessageX962SHA384", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureMessageX962SHA384 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureMessageX962SHA512 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDSASignatureMessageX962SHA512", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureMessageX962SHA512 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionRaw __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSAEncryptionRaw", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionRaw { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionPKCS1 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSAEncryptionPKCS1", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionPKCS1 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA1 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSAEncryptionOAEPSHA1", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA1 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA224 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSAEncryptionOAEPSHA224", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA224 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA256 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSAEncryptionOAEPSHA256", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA256 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA384 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSAEncryptionOAEPSHA384", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA384 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA512 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSAEncryptionOAEPSHA512", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA512 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Field("kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeStandard __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDHKeyExchangeStandard", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeStandard { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeCofactor __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDHKeyExchangeCofactor", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeCofactor { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384 { get; }

        // extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512 __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512", "__Internal")]
        unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512 { get; }

        // extern const SecKeyKeyExchangeParameter _Nonnull kSecKeyKeyExchangeParameterRequestedSize __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyKeyExchangeParameterRequestedSize", "__Internal")]
        unsafe SecKeyKeyExchangeParameter* kSecKeyKeyExchangeParameterRequestedSize { get; }

        // extern const SecKeyKeyExchangeParameter _Nonnull kSecKeyKeyExchangeParameterSharedInfo __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kSecKeyKeyExchangeParameterSharedInfo", "__Internal")]
        unsafe SecKeyKeyExchangeParameter* kSecKeyKeyExchangeParameterSharedInfo { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kSecPolicyAppleX509Basic __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyAppleX509Basic", "__Internal")]
        unsafe CFStringRef* kSecPolicyAppleX509Basic { get; }

        // extern const CFStringRef _Nonnull kSecPolicyAppleSSL __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyAppleSSL", "__Internal")]
        unsafe CFStringRef* kSecPolicyAppleSSL { get; }

        // extern const CFStringRef _Nonnull kSecPolicyAppleSMIME __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyAppleSMIME", "__Internal")]
        unsafe CFStringRef* kSecPolicyAppleSMIME { get; }

        // extern const CFStringRef _Nonnull kSecPolicyAppleEAP __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyAppleEAP", "__Internal")]
        unsafe CFStringRef* kSecPolicyAppleEAP { get; }

        // extern const CFStringRef _Nonnull kSecPolicyAppleIPsec __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyAppleIPsec", "__Internal")]
        unsafe CFStringRef* kSecPolicyAppleIPsec { get; }

        // extern const CFStringRef _Nonnull kSecPolicyApplePKINITClient __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kSecPolicyApplePKINITClient", "__Internal")]
        unsafe CFStringRef* kSecPolicyApplePKINITClient { get; }

        // extern const CFStringRef _Nonnull kSecPolicyApplePKINITServer __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kSecPolicyApplePKINITServer", "__Internal")]
        unsafe CFStringRef* kSecPolicyApplePKINITServer { get; }

        // extern const CFStringRef _Nonnull kSecPolicyAppleCodeSigning __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyAppleCodeSigning", "__Internal")]
        unsafe CFStringRef* kSecPolicyAppleCodeSigning { get; }

        // extern const CFStringRef _Nonnull kSecPolicyMacAppStoreReceipt __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kSecPolicyMacAppStoreReceipt", "__Internal")]
        unsafe CFStringRef* kSecPolicyMacAppStoreReceipt { get; }

        // extern const CFStringRef _Nonnull kSecPolicyAppleIDValidation __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyAppleIDValidation", "__Internal")]
        unsafe CFStringRef* kSecPolicyAppleIDValidation { get; }

        // extern const CFStringRef _Nonnull kSecPolicyAppleTimeStamping __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyAppleTimeStamping", "__Internal")]
        unsafe CFStringRef* kSecPolicyAppleTimeStamping { get; }

        // extern const CFStringRef _Nonnull kSecPolicyAppleRevocation __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyAppleRevocation", "__Internal")]
        unsafe CFStringRef* kSecPolicyAppleRevocation { get; }

        // extern const CFStringRef _Nonnull kSecPolicyApplePassbookSigning __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyApplePassbookSigning", "__Internal")]
        unsafe CFStringRef* kSecPolicyApplePassbookSigning { get; }

        // extern const CFStringRef _Nonnull kSecPolicyApplePayIssuerEncryption __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kSecPolicyApplePayIssuerEncryption", "__Internal")]
        unsafe CFStringRef* kSecPolicyApplePayIssuerEncryption { get; }

        // extern const CFStringRef _Nonnull kSecPolicyOid __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyOid", "__Internal")]
        unsafe CFStringRef* kSecPolicyOid { get; }

        // extern const CFStringRef _Nonnull kSecPolicyName __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyName", "__Internal")]
        unsafe CFStringRef* kSecPolicyName { get; }

        // extern const CFStringRef _Nonnull kSecPolicyClient __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyClient", "__Internal")]
        unsafe CFStringRef* kSecPolicyClient { get; }

        // extern const CFStringRef _Nonnull kSecPolicyRevocationFlags __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyRevocationFlags", "__Internal")]
        unsafe CFStringRef* kSecPolicyRevocationFlags { get; }

        // extern const CFStringRef _Nonnull kSecPolicyTeamIdentifier __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPolicyTeamIdentifier", "__Internal")]
        unsafe CFStringRef* kSecPolicyTeamIdentifier { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const SecRandomRef _Nonnull kSecRandomDefault __attribute__((availability(ios, introduced=2.0)));
        [iOS(2, 0)]
        [Field("kSecRandomDefault", "__Internal")]
        unsafe SecRandomRef* kSecRandomDefault { get; }

        // extern const CFStringRef _Nonnull kSecImportExportPassphrase __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecImportExportPassphrase", "__Internal")]
        unsafe CFStringRef* kSecImportExportPassphrase { get; }

        // extern const CFStringRef _Nonnull kSecImportExportKeychain __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecImportExportKeychain", "__Internal")]
        unsafe CFStringRef* kSecImportExportKeychain { get; }

        // extern const CFStringRef _Nonnull kSecImportExportAccess __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoiOS, Mac(10, 7)]
        [Field("kSecImportExportAccess", "__Internal")]
        unsafe CFStringRef* kSecImportExportAccess { get; }

        // extern const CFStringRef _Nonnull kSecImportItemLabel __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecImportItemLabel", "__Internal")]
        unsafe CFStringRef* kSecImportItemLabel { get; }

        // extern const CFStringRef _Nonnull kSecImportItemKeyID __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecImportItemKeyID", "__Internal")]
        unsafe CFStringRef* kSecImportItemKeyID { get; }

        // extern const CFStringRef _Nonnull kSecImportItemTrust __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecImportItemTrust", "__Internal")]
        unsafe CFStringRef* kSecImportItemTrust { get; }

        // extern const CFStringRef _Nonnull kSecImportItemCertChain __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecImportItemCertChain", "__Internal")]
        unsafe CFStringRef* kSecImportItemCertChain { get; }

        // extern const CFStringRef _Nonnull kSecImportItemIdentity __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(2, 0)]
        [Field("kSecImportItemIdentity", "__Internal")]
        unsafe CFStringRef* kSecImportItemIdentity { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kSecPropertyTypeTitle __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPropertyTypeTitle", "__Internal")]
        unsafe CFStringRef* kSecPropertyTypeTitle { get; }

        // extern const CFStringRef _Nonnull kSecPropertyTypeError __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecPropertyTypeError", "__Internal")]
        unsafe CFStringRef* kSecPropertyTypeError { get; }

        // extern const CFStringRef _Nonnull kSecTrustEvaluationDate __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecTrustEvaluationDate", "__Internal")]
        unsafe CFStringRef* kSecTrustEvaluationDate { get; }

        // extern const CFStringRef _Nonnull kSecTrustExtendedValidation __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecTrustExtendedValidation", "__Internal")]
        unsafe CFStringRef* kSecTrustExtendedValidation { get; }

        // extern const CFStringRef _Nonnull kSecTrustOrganizationName __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecTrustOrganizationName", "__Internal")]
        unsafe CFStringRef* kSecTrustOrganizationName { get; }

        // extern const CFStringRef _Nonnull kSecTrustResultValue __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecTrustResultValue", "__Internal")]
        unsafe CFStringRef* kSecTrustResultValue { get; }

        // extern const CFStringRef _Nonnull kSecTrustRevocationChecked __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecTrustRevocationChecked", "__Internal")]
        unsafe CFStringRef* kSecTrustRevocationChecked { get; }

        // extern const CFStringRef _Nonnull kSecTrustRevocationValidUntilDate __attribute__((availability(ios, introduced=7.0)));
        [iOS(7, 0)]
        [Field("kSecTrustRevocationValidUntilDate", "__Internal")]
        unsafe CFStringRef* kSecTrustRevocationValidUntilDate { get; }

        // extern const CFStringRef _Nonnull kSecTrustCertificateTransparency __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kSecTrustCertificateTransparency", "__Internal")]
        unsafe CFStringRef* kSecTrustCertificateTransparency { get; }

        // extern const CFStringRef _Nonnull kSecTrustCertificateTransparencyWhiteList __attribute__((availability(ios, introduced=10.0, deprecated=11.0)));
        [Introduced(PlatformName.iOS, 10, 0)]
        [Deprecated(PlatformName.iOS, 11, 0)]
        [Field("kSecTrustCertificateTransparencyWhiteList", "__Internal")]
        unsafe CFStringRef* kSecTrustCertificateTransparencyWhiteList { get; }
    }

    // typedef void (^SecTrustCallback)(SecTrustRef _Nonnull, SecTrustResultType);
    unsafe delegate void SecTrustCallback(SecTrustRef* arg0, SecTrustResultType arg1);

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kSecSharedPassword __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0)));
        [NoWatch, NoTV, NoMac, iOS(8, 0)]
        [Field("kSecSharedPassword", "__Internal")]
        unsafe CFStringRef* kSecSharedPassword { get; }
    }

    // @protocol OS_sec_object <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface OS_sec_object
    {
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kSSLSessionConfig_default __attribute__((availability(ios, introduced=5.0, deprecated=11.0)));
        [Introduced(PlatformName.iOS, 5, 0)]
        [Deprecated(PlatformName.iOS, 11, 0)]
        [Field("kSSLSessionConfig_default", "__Internal")]
        unsafe CFStringRef* kSSLSessionConfig_default { get; }

        // extern const CFStringRef _Nonnull kSSLSessionConfig_ATSv1 __attribute__((availability(ios, introduced=5.0)));
        [iOS(5, 0)]
        [Field("kSSLSessionConfig_ATSv1", "__Internal")]
        unsafe CFStringRef* kSSLSessionConfig_ATSv1 { get; }

        // extern const CFStringRef _Nonnull kSSLSessionConfig_ATSv1_noPFS __attribute__((availability(ios, introduced=5.0)));
        [iOS(5, 0)]
        [Field("kSSLSessionConfig_ATSv1_noPFS", "__Internal")]
        unsafe CFStringRef* kSSLSessionConfig_ATSv1_noPFS { get; }

        // extern const CFStringRef _Nonnull kSSLSessionConfig_standard __attribute__((availability(ios, introduced=5.0)));
        [iOS(5, 0)]
        [Field("kSSLSessionConfig_standard", "__Internal")]
        unsafe CFStringRef* kSSLSessionConfig_standard { get; }

        // extern const CFStringRef _Nonnull kSSLSessionConfig_RC4_fallback __attribute__((availability(ios, introduced=5.0, deprecated=11.0)));
        [Introduced(PlatformName.iOS, 5, 0)]
        [Deprecated(PlatformName.iOS, 11, 0)]
        [Field("kSSLSessionConfig_RC4_fallback", "__Internal")]
        unsafe CFStringRef* kSSLSessionConfig_RC4_fallback { get; }

        // extern const CFStringRef _Nonnull kSSLSessionConfig_TLSv1_fallback __attribute__((availability(ios, introduced=5.0)));
        [iOS(5, 0)]
        [Field("kSSLSessionConfig_TLSv1_fallback", "__Internal")]
        unsafe CFStringRef* kSSLSessionConfig_TLSv1_fallback { get; }

        // extern const CFStringRef _Nonnull kSSLSessionConfig_TLSv1_RC4_fallback __attribute__((availability(ios, introduced=5.0, deprecated=11.0)));
        [Introduced(PlatformName.iOS, 5, 0)]
        [Deprecated(PlatformName.iOS, 11, 0)]
        [Field("kSSLSessionConfig_TLSv1_RC4_fallback", "__Internal")]
        unsafe CFStringRef* kSSLSessionConfig_TLSv1_RC4_fallback { get; }

        // extern const CFStringRef _Nonnull kSSLSessionConfig_legacy __attribute__((availability(ios, introduced=5.0)));
        [iOS(5, 0)]
        [Field("kSSLSessionConfig_legacy", "__Internal")]
        unsafe CFStringRef* kSSLSessionConfig_legacy { get; }

        // extern const CFStringRef _Nonnull kSSLSessionConfig_legacy_DHE __attribute__((availability(ios, introduced=5.0)));
        [iOS(5, 0)]
        [Field("kSSLSessionConfig_legacy_DHE", "__Internal")]
        unsafe CFStringRef* kSSLSessionConfig_legacy_DHE { get; }

        // extern const CFStringRef _Nonnull kSSLSessionConfig_anonymous __attribute__((availability(ios, introduced=5.0)));
        [iOS(5, 0)]
        [Field("kSSLSessionConfig_anonymous", "__Internal")]
        unsafe CFStringRef* kSSLSessionConfig_anonymous { get; }

        // extern const CFStringRef _Nonnull kSSLSessionConfig_3DES_fallback __attribute__((availability(ios, introduced=5.0, deprecated=11.0)));
        [Introduced(PlatformName.iOS, 5, 0)]
        [Deprecated(PlatformName.iOS, 11, 0)]
        [Field("kSSLSessionConfig_3DES_fallback", "__Internal")]
        unsafe CFStringRef* kSSLSessionConfig_3DES_fallback { get; }

        // extern const CFStringRef _Nonnull kSSLSessionConfig_TLSv1_3DES_fallback __attribute__((availability(ios, introduced=5.0, deprecated=11.0)));
        [Introduced(PlatformName.iOS, 5, 0)]
        [Deprecated(PlatformName.iOS, 11, 0)]
        [Field("kSSLSessionConfig_TLSv1_3DES_fallback", "__Internal")]
        unsafe CFStringRef* kSSLSessionConfig_TLSv1_3DES_fallback { get; }
    }

    // @protocol OS_sec_trust <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface OS_sec_trust
    {
    }

    // @protocol OS_sec_identity <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface OS_sec_identity
    {
    }

    // @protocol OS_sec_certificate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface OS_sec_certificate
    {
    }

    // @protocol OS_sec_protocol_metadata <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface OS_sec_protocol_metadata
    {
    }

    // @protocol OS_sec_protocol_options <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface OS_sec_protocol_options
    {
    }

    // typedef void (^sec_protocol_key_update_complete_t)();
    delegate void sec_protocol_key_update_complete_t();

    // typedef void (^sec_protocol_key_update_t)(sec_protocol_metadata_t _Nonnull, sec_protocol_key_update_complete_t _Nonnull);
    delegate void sec_protocol_key_update_t(OS_sec_protocol_metadata arg0, sec_protocol_key_update_complete_t arg1);

    // typedef void (^sec_protocol_challenge_complete_t)(sec_identity_t _Nonnull);
    delegate void sec_protocol_challenge_complete_t(OS_sec_identity arg0);

    // typedef void (^sec_protocol_challenge_t)(sec_protocol_metadata_t _Nonnull, sec_protocol_challenge_complete_t _Nonnull);
    delegate void sec_protocol_challenge_t(OS_sec_protocol_metadata arg0, sec_protocol_challenge_complete_t arg1);

    // typedef void (^sec_protocol_verify_complete_t)(_Bool);
    delegate void sec_protocol_verify_complete_t(bool arg0);

    // typedef void (^sec_protocol_verify_t)(sec_protocol_metadata_t _Nonnull, sec_trust_t _Nonnull, sec_protocol_verify_complete_t _Nonnull);
    delegate void sec_protocol_verify_t(OS_sec_protocol_metadata arg0, OS_sec_trust arg1, sec_protocol_verify_complete_t arg2);

    // @interface NSURLCredential : NSObject <NSSecureCoding, NSCopying>
    [BaseType(typeof(NSObject))]
    interface NSURLCredential : INSSecureCoding, INSCopying
    {
        // @property (readonly) NSURLCredentialPersistence persistence;
        [Export("persistence")]
        NSURLCredentialPersistence Persistence { get; }
    }

    // @interface NSInternetPassword (NSURLCredential)
    [Category]
    [BaseType(typeof(NSUrlCredential))]
    interface NSURLCredential_NSInternetPassword
    {
        // -(instancetype _Nonnull)initWithUser:(NSString * _Nonnull)user password:(NSString * _Nonnull)password persistence:(NSURLCredentialPersistence)persistence;
        [Export("initWithUser:password:persistence:")]
        IntPtr Constructor(string user, string password, NSURLCredentialPersistence persistence);

        // +(NSURLCredential * _Nonnull)credentialWithUser:(NSString * _Nonnull)user password:(NSString * _Nonnull)password persistence:(NSURLCredentialPersistence)persistence;
        [Static]
        [Export("credentialWithUser:password:persistence:")]
        NSUrlCredential CredentialWithUser(string user, string password, NSURLCredentialPersistence persistence);

        // @property (readonly, copy) NSString * _Nullable user;
        [NullAllowed, Export("user")]
        string User { get; }

        // @property (readonly, copy) NSString * _Nullable password;
        [NullAllowed, Export("password")]
        string Password { get; }

        // @property (readonly) BOOL hasPassword;
        [Export("hasPassword")]
        bool HasPassword { get; }
    }

    // @interface NSClientCertificate (NSURLCredential)
    [Category]
    [BaseType(typeof(NSUrlCredential))]
    interface NSURLCredential_NSClientCertificate
    {
        // -(instancetype _Nonnull)initWithIdentity:(SecIdentityRef _Nonnull)identity certificates:(NSArray * _Nullable)certArray persistence:(NSURLCredentialPersistence)persistence __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Export("initWithIdentity:certificates:persistence:")]
        [Verify(StronglyTypedNSArray)]
        unsafe IntPtr Constructor(SecIdentityRef* identity, [NullAllowed] NSObject[] certArray, NSURLCredentialPersistence persistence);

        // +(NSURLCredential * _Nonnull)credentialWithIdentity:(SecIdentityRef _Nonnull)identity certificates:(NSArray * _Nullable)certArray persistence:(NSURLCredentialPersistence)persistence __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Static]
        [Export("credentialWithIdentity:certificates:persistence:")]
        [Verify(StronglyTypedNSArray)]
        unsafe NSUrlCredential CredentialWithIdentity(SecIdentityRef* identity, [NullAllowed] NSObject[] certArray, NSURLCredentialPersistence persistence);

        // @property (readonly) SecIdentityRef _Nullable identity;
        [NullAllowed, Export("identity")]
        unsafe SecIdentityRef* Identity { get; }

        // @property (readonly, copy) NSArray * _Nonnull certificates __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Export("certificates", ArgumentSemantic.Copy)]
        [Verify(StronglyTypedNSArray)]
        NSObject[] Certificates { get; }
    }

    // @interface NSServerTrust (NSURLCredential)
    [Category]
    [BaseType(typeof(NSUrlCredential))]
    interface NSURLCredential_NSServerTrust
    {
        // -(instancetype _Nonnull)initWithTrust:(SecTrustRef _Nonnull)trust __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Export("initWithTrust:")]
        unsafe IntPtr Constructor(SecTrustRef* trust);

        // +(NSURLCredential * _Nonnull)credentialForTrust:(SecTrustRef _Nonnull)trust __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Static]
        [Export("credentialForTrust:")]
        unsafe NSUrlCredential CredentialForTrust(SecTrustRef* trust);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull NSURLProtectionSpaceHTTP __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("NSURLProtectionSpaceHTTP", "__Internal")]
        NSString NSURLProtectionSpaceHTTP { get; }

        // extern NSString *const _Nonnull NSURLProtectionSpaceHTTPS __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("NSURLProtectionSpaceHTTPS", "__Internal")]
        NSString NSURLProtectionSpaceHTTPS { get; }

        // extern NSString *const _Nonnull NSURLProtectionSpaceFTP __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("NSURLProtectionSpaceFTP", "__Internal")]
        NSString NSURLProtectionSpaceFTP { get; }

        // extern NSString *const _Nonnull NSURLProtectionSpaceHTTPProxy;
        [Field("NSURLProtectionSpaceHTTPProxy", "__Internal")]
        NSString NSURLProtectionSpaceHTTPProxy { get; }

        // extern NSString *const _Nonnull NSURLProtectionSpaceHTTPSProxy;
        [Field("NSURLProtectionSpaceHTTPSProxy", "__Internal")]
        NSString NSURLProtectionSpaceHTTPSProxy { get; }

        // extern NSString *const _Nonnull NSURLProtectionSpaceFTPProxy;
        [Field("NSURLProtectionSpaceFTPProxy", "__Internal")]
        NSString NSURLProtectionSpaceFTPProxy { get; }

        // extern NSString *const _Nonnull NSURLProtectionSpaceSOCKSProxy;
        [Field("NSURLProtectionSpaceSOCKSProxy", "__Internal")]
        NSString NSURLProtectionSpaceSOCKSProxy { get; }

        // extern NSString *const _Nonnull NSURLAuthenticationMethodDefault;
        [Field("NSURLAuthenticationMethodDefault", "__Internal")]
        NSString NSURLAuthenticationMethodDefault { get; }

        // extern NSString *const _Nonnull NSURLAuthenticationMethodHTTPBasic;
        [Field("NSURLAuthenticationMethodHTTPBasic", "__Internal")]
        NSString NSURLAuthenticationMethodHTTPBasic { get; }

        // extern NSString *const _Nonnull NSURLAuthenticationMethodHTTPDigest;
        [Field("NSURLAuthenticationMethodHTTPDigest", "__Internal")]
        NSString NSURLAuthenticationMethodHTTPDigest { get; }

        // extern NSString *const _Nonnull NSURLAuthenticationMethodHTMLForm;
        [Field("NSURLAuthenticationMethodHTMLForm", "__Internal")]
        NSString NSURLAuthenticationMethodHTMLForm { get; }

        // extern NSString *const _Nonnull NSURLAuthenticationMethodNTLM __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("NSURLAuthenticationMethodNTLM", "__Internal")]
        NSString NSURLAuthenticationMethodNTLM { get; }

        // extern NSString *const _Nonnull NSURLAuthenticationMethodNegotiate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("NSURLAuthenticationMethodNegotiate", "__Internal")]
        NSString NSURLAuthenticationMethodNegotiate { get; }

        // extern NSString *const _Nonnull NSURLAuthenticationMethodClientCertificate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("NSURLAuthenticationMethodClientCertificate", "__Internal")]
        NSString NSURLAuthenticationMethodClientCertificate { get; }

        // extern NSString *const _Nonnull NSURLAuthenticationMethodServerTrust __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("NSURLAuthenticationMethodServerTrust", "__Internal")]
        NSString NSURLAuthenticationMethodServerTrust { get; }
    }

    // @interface NSURLProtectionSpace : NSObject <NSSecureCoding, NSCopying>
    [BaseType(typeof(NSObject))]
    interface NSURLProtectionSpace : INSSecureCoding, INSCopying
    {
        // -(instancetype _Nonnull)initWithHost:(NSString * _Nonnull)host port:(NSInteger)port protocol:(NSString * _Nullable)protocol realm:(NSString * _Nullable)realm authenticationMethod:(NSString * _Nullable)authenticationMethod;
        [Export("initWithHost:port:protocol:realm:authenticationMethod:")]
        IntPtr Constructor(string host, nint port, [NullAllowed] string protocol, [NullAllowed] string realm, [NullAllowed] string authenticationMethod);

        // -(instancetype _Nonnull)initWithProxyHost:(NSString * _Nonnull)host port:(NSInteger)port type:(NSString * _Nullable)type realm:(NSString * _Nullable)realm authenticationMethod:(NSString * _Nullable)authenticationMethod;
        [Export("initWithProxyHost:port:type:realm:authenticationMethod:")]
        IntPtr Constructor(string host, nint port, [NullAllowed] string type, [NullAllowed] string realm, [NullAllowed] string authenticationMethod);

        // @property (readonly, copy) NSString * _Nullable realm;
        [NullAllowed, Export("realm")]
        string Realm { get; }

        // @property (readonly) BOOL receivesCredentialSecurely;
        [Export("receivesCredentialSecurely")]
        bool ReceivesCredentialSecurely { get; }

        // @property (readonly) BOOL isProxy;
        [Export("isProxy")]
        bool IsProxy { get; }

        // @property (readonly, copy) NSString * _Nonnull host;
        [Export("host")]
        string Host { get; }

        // @property (readonly) NSInteger port;
        [Export("port")]
        nint Port { get; }

        // @property (readonly, copy) NSString * _Nullable proxyType;
        [NullAllowed, Export("proxyType")]
        string ProxyType { get; }

        // @property (readonly, copy) NSString * _Nullable protocol;
        [NullAllowed, Export("protocol")]
        string Protocol { get; }

        // @property (readonly, copy) NSString * _Nonnull authenticationMethod;
        [Export("authenticationMethod")]
        string AuthenticationMethod { get; }
    }

    // @interface NSClientCertificateSpace (NSURLProtectionSpace)
    [Category]
    [BaseType(typeof(NSUrlProtectionSpace))]
    interface NSURLProtectionSpace_NSClientCertificateSpace
    {
        // @property (readonly, copy) NSArray<NSData *> * _Nullable distinguishedNames __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [NullAllowed, Export("distinguishedNames", ArgumentSemantic.Copy)]
        NSData[] DistinguishedNames { get; }
    }

    // @interface NSServerTrustValidationSpace (NSURLProtectionSpace)
    [Category]
    [BaseType(typeof(NSUrlProtectionSpace))]
    interface NSURLProtectionSpace_NSServerTrustValidationSpace
    {
        // @property (readonly) SecTrustRef _Nullable serverTrust __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [NullAllowed, Export("serverTrust")]
        unsafe SecTrustRef* ServerTrust { get; }
    }

    // @interface NSURLCredentialStorage : NSObject
    [BaseType(typeof(NSObject))]
    interface NSURLCredentialStorage
    {
        // @property (readonly, strong, class) NSURLCredentialStorage * _Nonnull sharedCredentialStorage;
        [Static]
        [Export("sharedCredentialStorage", ArgumentSemantic.Strong)]
        NSUrlCredentialStorage SharedCredentialStorage { get; }

        // -(NSDictionary<NSString *,NSURLCredential *> * _Nullable)credentialsForProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
        [Export("credentialsForProtectionSpace:")]
        [return: NullAllowed]
        NSDictionary<NSString, NSURLCredential> CredentialsForProtectionSpace(NSUrlProtectionSpace space);

        // @property (readonly, copy) NSDictionary<NSURLProtectionSpace *,NSDictionary<NSString *,NSURLCredential *> *> * _Nonnull allCredentials;
        [Export("allCredentials", ArgumentSemantic.Copy)]
        NSDictionary<NSURLProtectionSpace, NSDictionary<NSString, NSURLCredential>> AllCredentials { get; }

        // -(void)setCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
        [Export("setCredential:forProtectionSpace:")]
        void SetCredential(NSUrlCredential credential, NSUrlProtectionSpace space);

        // -(void)removeCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
        [Export("removeCredential:forProtectionSpace:")]
        void RemoveCredential(NSUrlCredential credential, NSUrlProtectionSpace space);

        // -(void)removeCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)space options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("removeCredential:forProtectionSpace:options:")]
        void RemoveCredential(NSUrlCredential credential, NSUrlProtectionSpace space, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(NSURLCredential * _Nullable)defaultCredentialForProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
        [Export("defaultCredentialForProtectionSpace:")]
        [return: NullAllowed]
        NSUrlCredential DefaultCredentialForProtectionSpace(NSUrlProtectionSpace space);

        // -(void)setDefaultCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
        [Export("setDefaultCredential:forProtectionSpace:")]
        void SetDefaultCredential(NSUrlCredential credential, NSUrlProtectionSpace space);
    }

    // @interface NSURLSessionTaskAdditions (NSURLCredentialStorage)
    [Category]
    [BaseType(typeof(NSUrlCredentialStorage))]
    interface NSURLCredentialStorage_NSURLSessionTaskAdditions
    {
        // -(void)getCredentialsForProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace task:(NSURLSessionTask * _Nonnull)task completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *,NSURLCredential *> * _Nullable))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("getCredentialsForProtectionSpace:task:completionHandler:")]
        void GetCredentialsForProtectionSpace(NSUrlProtectionSpace protectionSpace, NSUrlSessionTask task, Action<NSDictionary<NSString, NSURLCredential>> completionHandler);

        // -(void)setCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace task:(NSURLSessionTask * _Nonnull)task __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("setCredential:forProtectionSpace:task:")]
        void SetCredential(NSUrlCredential credential, NSUrlProtectionSpace protectionSpace, NSUrlSessionTask task);

        // -(void)removeCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace options:(NSDictionary<NSString *,id> * _Nullable)options task:(NSURLSessionTask * _Nonnull)task __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("removeCredential:forProtectionSpace:options:task:")]
        void RemoveCredential(NSUrlCredential credential, NSUrlProtectionSpace protectionSpace, [NullAllowed] NSDictionary<NSString, NSObject> options, NSUrlSessionTask task);

        // -(void)getDefaultCredentialForProtectionSpace:(NSURLProtectionSpace * _Nonnull)space task:(NSURLSessionTask * _Nonnull)task completionHandler:(void (^ _Nonnull)(NSURLCredential * _Nullable))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("getDefaultCredentialForProtectionSpace:task:completionHandler:")]
        void GetDefaultCredentialForProtectionSpace(NSUrlProtectionSpace space, NSUrlSessionTask task, Action<NSURLCredential> completionHandler);

        // -(void)setDefaultCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace task:(NSURLSessionTask * _Nonnull)task __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("setDefaultCredential:forProtectionSpace:task:")]
        void SetDefaultCredential(NSUrlCredential credential, NSUrlProtectionSpace protectionSpace, NSUrlSessionTask task);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSURLCredentialStorageChangedNotification;
        [Field("NSURLCredentialStorageChangedNotification", "__Internal")]
        NSString NSURLCredentialStorageChangedNotification { get; }

        // extern NSString *const _Nonnull NSURLCredentialStorageRemoveSynchronizableCredentials __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSURLCredentialStorageRemoveSynchronizableCredentials", "__Internal")]
        NSString NSURLCredentialStorageRemoveSynchronizableCredentials { get; }

        // extern const CFStringRef _Nonnull kCFErrorDomainCFNetwork __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFErrorDomainCFNetwork", "__Internal")]
        unsafe CFStringRef* kCFErrorDomainCFNetwork { get; }

        // extern const CFStringRef _Nonnull kCFErrorDomainWinSock __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFErrorDomainWinSock", "__Internal")]
        unsafe CFStringRef* kCFErrorDomainWinSock { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCFURLErrorFailingURLErrorKey __attribute__((availability(ios, introduced=2_2)));
        [iOS(2, 2)]
        [Field("kCFURLErrorFailingURLErrorKey", "__Internal")]
        unsafe CFStringRef* kCFURLErrorFailingURLErrorKey { get; }

        // extern const CFStringRef _Nonnull kCFURLErrorFailingURLStringErrorKey __attribute__((availability(ios, introduced=2_2)));
        [iOS(2, 2)]
        [Field("kCFURLErrorFailingURLStringErrorKey", "__Internal")]
        unsafe CFStringRef* kCFURLErrorFailingURLStringErrorKey { get; }

        // extern const CFStringRef _Nonnull kCFGetAddrInfoFailureKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFGetAddrInfoFailureKey", "__Internal")]
        unsafe CFStringRef* kCFGetAddrInfoFailureKey { get; }

        // extern const CFStringRef _Nonnull kCFSOCKSStatusCodeKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFSOCKSStatusCodeKey", "__Internal")]
        unsafe CFStringRef* kCFSOCKSStatusCodeKey { get; }

        // extern const CFStringRef _Nonnull kCFSOCKSVersionKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFSOCKSVersionKey", "__Internal")]
        unsafe CFStringRef* kCFSOCKSVersionKey { get; }

        // extern const CFStringRef _Nonnull kCFSOCKSNegotiationMethodKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFSOCKSNegotiationMethodKey", "__Internal")]
        unsafe CFStringRef* kCFSOCKSNegotiationMethodKey { get; }

        // extern const CFStringRef _Nonnull kCFDNSServiceFailureKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFDNSServiceFailureKey", "__Internal")]
        unsafe CFStringRef* kCFDNSServiceFailureKey { get; }

        // extern const CFStringRef _Nonnull kCFFTPStatusCodeKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFFTPStatusCodeKey", "__Internal")]
        unsafe CFStringRef* kCFFTPStatusCodeKey { get; }

        // extern const SInt32 kCFStreamErrorDomainNetDB __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamErrorDomainNetDB", "__Internal")]
        int kCFStreamErrorDomainNetDB { get; }

        // extern const SInt32 kCFStreamErrorDomainSystemConfiguration __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamErrorDomainSystemConfiguration", "__Internal")]
        int kCFStreamErrorDomainSystemConfiguration { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const SInt32 kCFStreamErrorDomainMach __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamErrorDomainMach", "__Internal")]
        int kCFStreamErrorDomainMach { get; }

        // extern const SInt32 kCFStreamErrorDomainNetServices __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamErrorDomainNetServices", "__Internal")]
        int kCFStreamErrorDomainNetServices { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCFStreamPropertySSLContext __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCFStreamPropertySSLContext", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySSLContext { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertySSLPeerTrust __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertySSLPeerTrust", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySSLPeerTrust { get; }

        // extern const CFStringRef _Nonnull kCFStreamSSLValidatesCertificateChain __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamSSLValidatesCertificateChain", "__Internal")]
        unsafe CFStringRef* kCFStreamSSLValidatesCertificateChain { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertySSLSettings __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertySSLSettings", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySSLSettings { get; }

        // extern const CFStringRef _Nonnull kCFStreamSSLLevel __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamSSLLevel", "__Internal")]
        unsafe CFStringRef* kCFStreamSSLLevel { get; }

        // extern const CFStringRef _Nonnull kCFStreamSSLPeerName __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamSSLPeerName", "__Internal")]
        unsafe CFStringRef* kCFStreamSSLPeerName { get; }

        // extern const CFStringRef _Nonnull kCFStreamSSLCertificates __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamSSLCertificates", "__Internal")]
        unsafe CFStringRef* kCFStreamSSLCertificates { get; }

        // extern const CFStringRef _Nonnull kCFStreamSSLIsServer __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamSSLIsServer", "__Internal")]
        unsafe CFStringRef* kCFStreamSSLIsServer { get; }

        // extern const CFStringRef _Nonnull kCFStreamNetworkServiceType __attribute__((availability(ios, introduced=4_0)));
        [iOS(4, 0)]
        [Field("kCFStreamNetworkServiceType", "__Internal")]
        unsafe CFStringRef* kCFStreamNetworkServiceType { get; }

        // extern const CFStringRef _Nonnull kCFStreamNetworkServiceTypeVideo __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCFStreamNetworkServiceTypeVideo", "__Internal")]
        unsafe CFStringRef* kCFStreamNetworkServiceTypeVideo { get; }

        // extern const CFStringRef _Nonnull kCFStreamNetworkServiceTypeVoice __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCFStreamNetworkServiceTypeVoice", "__Internal")]
        unsafe CFStringRef* kCFStreamNetworkServiceTypeVoice { get; }

        // extern const CFStringRef _Nonnull kCFStreamNetworkServiceTypeBackground __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCFStreamNetworkServiceTypeBackground", "__Internal")]
        unsafe CFStringRef* kCFStreamNetworkServiceTypeBackground { get; }

        // extern const CFStringRef _Nonnull kCFStreamNetworkServiceTypeResponsiveData __attribute__((availability(ios, introduced=6.0)));
        [iOS(6, 0)]
        [Field("kCFStreamNetworkServiceTypeResponsiveData", "__Internal")]
        unsafe CFStringRef* kCFStreamNetworkServiceTypeResponsiveData { get; }

        // extern const CFStringRef _Nonnull kCFStreamNetworkServiceTypeCallSignaling __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCFStreamNetworkServiceTypeCallSignaling", "__Internal")]
        unsafe CFStringRef* kCFStreamNetworkServiceTypeCallSignaling { get; }

        // extern const CFStringRef _Nonnull kCFStreamNetworkServiceTypeVoIP __attribute__((availability(ios, introduced=4_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 4, 0, message: "use PushKit for VoIP control purposes")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "use PushKit for VoIP control purposes")]
        [Field("kCFStreamNetworkServiceTypeVoIP", "__Internal")]
        unsafe CFStringRef* kCFStreamNetworkServiceTypeVoIP { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyNoCellular __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCFStreamPropertyNoCellular", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyNoCellular { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyConnectionIsCellular __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Field("kCFStreamPropertyConnectionIsCellular", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyConnectionIsCellular { get; }

        // extern const CFIndex kCFStreamErrorDomainWinSock __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamErrorDomainWinSock", "__Internal")]
        nint kCFStreamErrorDomainWinSock { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCFStreamPropertyProxyLocalBypass __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertyProxyLocalBypass", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyProxyLocalBypass { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertySocketRemoteHost __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertySocketRemoteHost", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySocketRemoteHost { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertySocketRemoteNetService __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamPropertySocketRemoteNetService", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySocketRemoteNetService { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertySocketExtendedBackgroundIdleMode __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCFStreamPropertySocketExtendedBackgroundIdleMode", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySocketExtendedBackgroundIdleMode { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertySSLPeerCertificates __attribute__((availability(ios, introduced=2_0, deprecated=4_0)));
        [Introduced(PlatformName.iOS, 2, 0)]
        [Deprecated(PlatformName.iOS, 4, 0)]
        [Field("kCFStreamPropertySSLPeerCertificates", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertySSLPeerCertificates { get; }

        // extern const CFStringRef _Nonnull kCFStreamSSLAllowsExpiredCertificates __attribute__((availability(ios, introduced=2_0, deprecated=4_0)));
        [Introduced(PlatformName.iOS, 2, 0)]
        [Deprecated(PlatformName.iOS, 4, 0)]
        [Field("kCFStreamSSLAllowsExpiredCertificates", "__Internal")]
        unsafe CFStringRef* kCFStreamSSLAllowsExpiredCertificates { get; }

        // extern const CFStringRef _Nonnull kCFStreamSSLAllowsExpiredRoots __attribute__((availability(ios, introduced=2_0, deprecated=4_0)));
        [Introduced(PlatformName.iOS, 2, 0)]
        [Deprecated(PlatformName.iOS, 4, 0)]
        [Field("kCFStreamSSLAllowsExpiredRoots", "__Internal")]
        unsafe CFStringRef* kCFStreamSSLAllowsExpiredRoots { get; }

        // extern const CFStringRef _Nonnull kCFStreamSSLAllowsAnyRoot __attribute__((availability(ios, introduced=2_0, deprecated=4_0)));
        [Introduced(PlatformName.iOS, 2, 0)]
        [Deprecated(PlatformName.iOS, 4, 0)]
        [Field("kCFStreamSSLAllowsAnyRoot", "__Internal")]
        unsafe CFStringRef* kCFStreamSSLAllowsAnyRoot { get; }

        // extern const SInt32 kCFStreamErrorDomainFTP __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamErrorDomainFTP", "__Internal")]
        int kCFStreamErrorDomainFTP { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyFTPUserName __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFStreamPropertyFTPUserName", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyFTPUserName { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyFTPPassword __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFStreamPropertyFTPPassword", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyFTPPassword { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyFTPUsePassiveMode __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFStreamPropertyFTPUsePassiveMode", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyFTPUsePassiveMode { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyFTPResourceSize __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFStreamPropertyFTPResourceSize", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyFTPResourceSize { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyFTPFetchResourceInfo __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFStreamPropertyFTPFetchResourceInfo", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyFTPFetchResourceInfo { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyFTPFileTransferOffset __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFStreamPropertyFTPFileTransferOffset", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyFTPFileTransferOffset { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyFTPAttemptPersistentConnection __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFStreamPropertyFTPAttemptPersistentConnection", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyFTPAttemptPersistentConnection { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyFTPProxy __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFStreamPropertyFTPProxy", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyFTPProxy { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyFTPProxyHost __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFStreamPropertyFTPProxyHost", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyFTPProxyHost { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyFTPProxyPort __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFStreamPropertyFTPProxyPort", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyFTPProxyPort { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyFTPProxyUser __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFStreamPropertyFTPProxyUser", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyFTPProxyUser { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyFTPProxyPassword __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFStreamPropertyFTPProxyPassword", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyFTPProxyPassword { get; }

        // extern const CFStringRef _Nonnull kCFFTPResourceMode __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFFTPResourceMode", "__Internal")]
        unsafe CFStringRef* kCFFTPResourceMode { get; }

        // extern const CFStringRef _Nonnull kCFFTPResourceName __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFFTPResourceName", "__Internal")]
        unsafe CFStringRef* kCFFTPResourceName { get; }

        // extern const CFStringRef _Nonnull kCFFTPResourceOwner __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFFTPResourceOwner", "__Internal")]
        unsafe CFStringRef* kCFFTPResourceOwner { get; }

        // extern const CFStringRef _Nonnull kCFFTPResourceGroup __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFFTPResourceGroup", "__Internal")]
        unsafe CFStringRef* kCFFTPResourceGroup { get; }

        // extern const CFStringRef _Nonnull kCFFTPResourceLink __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFFTPResourceLink", "__Internal")]
        unsafe CFStringRef* kCFFTPResourceLink { get; }

        // extern const CFStringRef _Nonnull kCFFTPResourceSize __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFFTPResourceSize", "__Internal")]
        unsafe CFStringRef* kCFFTPResourceSize { get; }

        // extern const CFStringRef _Nonnull kCFFTPResourceType __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFFTPResourceType", "__Internal")]
        unsafe CFStringRef* kCFFTPResourceType { get; }

        // extern const CFStringRef _Nonnull kCFFTPResourceModDate __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
        [Field("kCFFTPResourceModDate", "__Internal")]
        unsafe CFStringRef* kCFFTPResourceModDate { get; }

        // extern const CFStringRef _Nonnull kCFHTTPVersion1_0 __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFHTTPVersion1_0", "__Internal")]
        unsafe CFStringRef* kCFHTTPVersion1_0 { get; }

        // extern const CFStringRef _Nonnull kCFHTTPVersion1_1 __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFHTTPVersion1_1", "__Internal")]
        unsafe CFStringRef* kCFHTTPVersion1_1 { get; }

        // extern const CFStringRef _Nonnull kCFHTTPVersion2_0 __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Field("kCFHTTPVersion2_0", "__Internal")]
        unsafe CFStringRef* kCFHTTPVersion2_0 { get; }

        // extern const CFStringRef _Nonnull kCFHTTPAuthenticationSchemeBasic __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFHTTPAuthenticationSchemeBasic", "__Internal")]
        unsafe CFStringRef* kCFHTTPAuthenticationSchemeBasic { get; }

        // extern const CFStringRef _Nonnull kCFHTTPAuthenticationSchemeDigest __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFHTTPAuthenticationSchemeDigest", "__Internal")]
        unsafe CFStringRef* kCFHTTPAuthenticationSchemeDigest { get; }

        // extern const CFStringRef _Nonnull kCFHTTPAuthenticationSchemeNTLM __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFHTTPAuthenticationSchemeNTLM", "__Internal")]
        unsafe CFStringRef* kCFHTTPAuthenticationSchemeNTLM { get; }

        // extern const CFStringRef _Nonnull kCFHTTPAuthenticationSchemeKerberos __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFHTTPAuthenticationSchemeKerberos", "__Internal")]
        unsafe CFStringRef* kCFHTTPAuthenticationSchemeKerberos { get; }

        // extern const CFStringRef _Nonnull kCFHTTPAuthenticationSchemeNegotiate __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFHTTPAuthenticationSchemeNegotiate", "__Internal")]
        unsafe CFStringRef* kCFHTTPAuthenticationSchemeNegotiate { get; }

        // extern const CFStringRef _Nonnull kCFHTTPAuthenticationSchemeNegotiate2 __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Field("kCFHTTPAuthenticationSchemeNegotiate2", "__Internal")]
        unsafe CFStringRef* kCFHTTPAuthenticationSchemeNegotiate2 { get; }

        // extern const CFStringRef _Nonnull kCFHTTPAuthenticationSchemeXMobileMeAuthToken __attribute__((availability(ios, introduced=4_3)));
        [iOS(4, 3)]
        [Field("kCFHTTPAuthenticationSchemeXMobileMeAuthToken", "__Internal")]
        unsafe CFStringRef* kCFHTTPAuthenticationSchemeXMobileMeAuthToken { get; }

        // extern const SInt32 kCFStreamErrorDomainHTTP __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFStreamErrorDomainHTTP", "__Internal")]
        int kCFStreamErrorDomainHTTP { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCFStreamPropertyHTTPResponseHeader __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
        [Field("kCFStreamPropertyHTTPResponseHeader", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyHTTPResponseHeader { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyHTTPFinalURL __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
        [Field("kCFStreamPropertyHTTPFinalURL", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyHTTPFinalURL { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyHTTPFinalRequest __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
        [Field("kCFStreamPropertyHTTPFinalRequest", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyHTTPFinalRequest { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyHTTPProxy __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
        [Field("kCFStreamPropertyHTTPProxy", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyHTTPProxy { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyHTTPProxyHost __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
        [Field("kCFStreamPropertyHTTPProxyHost", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyHTTPProxyHost { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyHTTPProxyPort __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
        [Field("kCFStreamPropertyHTTPProxyPort", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyHTTPProxyPort { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyHTTPSProxyHost __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
        [Field("kCFStreamPropertyHTTPSProxyHost", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyHTTPSProxyHost { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyHTTPSProxyPort __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
        [Field("kCFStreamPropertyHTTPSProxyPort", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyHTTPSProxyPort { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyHTTPShouldAutoredirect __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
        [Field("kCFStreamPropertyHTTPShouldAutoredirect", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyHTTPShouldAutoredirect { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyHTTPAttemptPersistentConnection __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
        [Field("kCFStreamPropertyHTTPAttemptPersistentConnection", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyHTTPAttemptPersistentConnection { get; }

        // extern const CFStringRef _Nonnull kCFStreamPropertyHTTPRequestBytesWrittenCount __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
        [Field("kCFStreamPropertyHTTPRequestBytesWrittenCount", "__Internal")]
        unsafe CFStringRef* kCFStreamPropertyHTTPRequestBytesWrittenCount { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCFHTTPAuthenticationUsername __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFHTTPAuthenticationUsername", "__Internal")]
        unsafe CFStringRef* kCFHTTPAuthenticationUsername { get; }

        // extern const CFStringRef _Nonnull kCFHTTPAuthenticationPassword __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFHTTPAuthenticationPassword", "__Internal")]
        unsafe CFStringRef* kCFHTTPAuthenticationPassword { get; }

        // extern const CFStringRef _Nonnull kCFHTTPAuthenticationAccountDomain __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFHTTPAuthenticationAccountDomain", "__Internal")]
        unsafe CFStringRef* kCFHTTPAuthenticationAccountDomain { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCFProxyTypeKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyTypeKey", "__Internal")]
        unsafe CFStringRef* kCFProxyTypeKey { get; }

        // extern const CFStringRef _Nonnull kCFProxyHostNameKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyHostNameKey", "__Internal")]
        unsafe CFStringRef* kCFProxyHostNameKey { get; }

        // extern const CFStringRef _Nonnull kCFProxyPortNumberKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyPortNumberKey", "__Internal")]
        unsafe CFStringRef* kCFProxyPortNumberKey { get; }

        // extern const CFStringRef _Nonnull kCFProxyAutoConfigurationURLKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyAutoConfigurationURLKey", "__Internal")]
        unsafe CFStringRef* kCFProxyAutoConfigurationURLKey { get; }

        // extern const CFStringRef _Nonnull kCFProxyAutoConfigurationJavaScriptKey __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Field("kCFProxyAutoConfigurationJavaScriptKey", "__Internal")]
        unsafe CFStringRef* kCFProxyAutoConfigurationJavaScriptKey { get; }

        // extern const CFStringRef _Nonnull kCFProxyUsernameKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyUsernameKey", "__Internal")]
        unsafe CFStringRef* kCFProxyUsernameKey { get; }

        // extern const CFStringRef _Nonnull kCFProxyPasswordKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyPasswordKey", "__Internal")]
        unsafe CFStringRef* kCFProxyPasswordKey { get; }

        // extern const CFStringRef _Nonnull kCFProxyTypeNone __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyTypeNone", "__Internal")]
        unsafe CFStringRef* kCFProxyTypeNone { get; }

        // extern const CFStringRef _Nonnull kCFProxyTypeHTTP __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyTypeHTTP", "__Internal")]
        unsafe CFStringRef* kCFProxyTypeHTTP { get; }

        // extern const CFStringRef _Nonnull kCFProxyTypeHTTPS __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyTypeHTTPS", "__Internal")]
        unsafe CFStringRef* kCFProxyTypeHTTPS { get; }

        // extern const CFStringRef _Nonnull kCFProxyTypeSOCKS __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyTypeSOCKS", "__Internal")]
        unsafe CFStringRef* kCFProxyTypeSOCKS { get; }

        // extern const CFStringRef _Nonnull kCFProxyTypeFTP __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyTypeFTP", "__Internal")]
        unsafe CFStringRef* kCFProxyTypeFTP { get; }

        // extern const CFStringRef _Nonnull kCFProxyTypeAutoConfigurationURL __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyTypeAutoConfigurationURL", "__Internal")]
        unsafe CFStringRef* kCFProxyTypeAutoConfigurationURL { get; }

        // extern const CFStringRef _Nonnull kCFProxyTypeAutoConfigurationJavaScript __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Field("kCFProxyTypeAutoConfigurationJavaScript", "__Internal")]
        unsafe CFStringRef* kCFProxyTypeAutoConfigurationJavaScript { get; }

        // extern const CFStringRef _Nonnull kCFProxyAutoConfigurationHTTPResponseKey __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFProxyAutoConfigurationHTTPResponseKey", "__Internal")]
        unsafe CFStringRef* kCFProxyAutoConfigurationHTTPResponseKey { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesExceptionsList __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesExceptionsList", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesExceptionsList { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesExcludeSimpleHostnames __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesExcludeSimpleHostnames", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesExcludeSimpleHostnames { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesFTPEnable __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesFTPEnable", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesFTPEnable { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesFTPPassive __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesFTPPassive", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesFTPPassive { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesFTPPort __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesFTPPort", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesFTPPort { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesFTPProxy __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesFTPProxy", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesFTPProxy { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesGopherEnable __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesGopherEnable", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesGopherEnable { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesGopherPort __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesGopherPort", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesGopherPort { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesGopherProxy __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesGopherProxy", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesGopherProxy { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesHTTPEnable __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFNetworkProxiesHTTPEnable", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesHTTPEnable { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesHTTPPort __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFNetworkProxiesHTTPPort", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesHTTPPort { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesHTTPProxy __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFNetworkProxiesHTTPProxy", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesHTTPProxy { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesHTTPSEnable __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesHTTPSEnable", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesHTTPSEnable { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesHTTPSPort __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesHTTPSPort", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesHTTPSPort { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesHTTPSProxy __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesHTTPSProxy", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesHTTPSProxy { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesRTSPEnable __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesRTSPEnable", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesRTSPEnable { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesRTSPPort __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesRTSPPort", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesRTSPPort { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesRTSPProxy __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesRTSPProxy", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesRTSPProxy { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesSOCKSEnable __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesSOCKSEnable", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesSOCKSEnable { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesSOCKSPort __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesSOCKSPort", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesSOCKSPort { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesSOCKSProxy __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesSOCKSProxy", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesSOCKSProxy { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesProxyAutoConfigEnable __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFNetworkProxiesProxyAutoConfigEnable", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesProxyAutoConfigEnable { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesProxyAutoConfigURLString __attribute__((availability(ios, introduced=2_0)));
        [iOS(2, 0)]
        [Field("kCFNetworkProxiesProxyAutoConfigURLString", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesProxyAutoConfigURLString { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesProxyAutoConfigJavaScript __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Field("kCFNetworkProxiesProxyAutoConfigJavaScript", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesProxyAutoConfigJavaScript { get; }

        // extern const CFStringRef _Nonnull kCFNetworkProxiesProxyAutoDiscoveryEnable __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCFNetworkProxiesProxyAutoDiscoveryEnable", "__Internal")]
        unsafe CFStringRef* kCFNetworkProxiesProxyAutoDiscoveryEnable { get; }

        // extern const NSErrorDomain _Nonnull NSURLErrorDomain;
        [Field("NSURLErrorDomain", "__Internal")]
        NSString NSURLErrorDomain { get; }

        // extern NSString *const _Nonnull NSURLErrorFailingURLErrorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLErrorFailingURLErrorKey", "__Internal")]
        NSString NSURLErrorFailingURLErrorKey { get; }

        // extern NSString *const _Nonnull NSURLErrorFailingURLStringErrorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLErrorFailingURLStringErrorKey", "__Internal")]
        NSString NSURLErrorFailingURLStringErrorKey { get; }

        // extern NSString *const _Nonnull NSErrorFailingURLStringKey __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.6)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
        [Deprecated(PlatformName.iOS, 4, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
        [Deprecated(PlatformName.MacOSX, 10, 6, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
        [Field("NSErrorFailingURLStringKey", "__Internal")]
        NSString NSErrorFailingURLStringKey { get; }

        // extern NSString *const _Nonnull NSURLErrorFailingURLPeerTrustErrorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("NSURLErrorFailingURLPeerTrustErrorKey", "__Internal")]
        NSString NSURLErrorFailingURLPeerTrustErrorKey { get; }

        // extern NSString *const _Nonnull NSURLErrorBackgroundTaskCancelledReasonKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSURLErrorBackgroundTaskCancelledReasonKey", "__Internal")]
        NSString NSURLErrorBackgroundTaskCancelledReasonKey { get; }
    }

    // @protocol NSURLProtocolClient <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSURLProtocolClient
    {
        // @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol wasRedirectedToRequest:(NSURLRequest * _Nonnull)request redirectResponse:(NSURLResponse * _Nonnull)redirectResponse;
        [Abstract]
        [Export("URLProtocol:wasRedirectedToRequest:redirectResponse:")]
        void URLProtocol(NSUrlProtocol protocol, NSUrlRequest request, NSUrlResponse redirectResponse);

        // @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol cachedResponseIsValid:(NSCachedURLResponse * _Nonnull)cachedResponse;
        [Abstract]
        [Export("URLProtocol:cachedResponseIsValid:")]
        void URLProtocol(NSUrlProtocol protocol, NSCachedUrlResponse cachedResponse);

        // @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didReceiveResponse:(NSURLResponse * _Nonnull)response cacheStoragePolicy:(NSURLCacheStoragePolicy)policy;
        [Abstract]
        [Export("URLProtocol:didReceiveResponse:cacheStoragePolicy:")]
        void URLProtocol(NSUrlProtocol protocol, NSUrlResponse response, NSURLCacheStoragePolicy policy);

        // @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didLoadData:(NSData * _Nonnull)data;
        [Abstract]
        [Export("URLProtocol:didLoadData:")]
        void URLProtocol(NSUrlProtocol protocol, NSData data);

        // @required -(void)URLProtocolDidFinishLoading:(NSURLProtocol * _Nonnull)protocol;
        [Abstract]
        [Export("URLProtocolDidFinishLoading:")]
        void URLProtocolDidFinishLoading(NSUrlProtocol protocol);

        // @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didFailWithError:(NSError * _Nonnull)error;
        [Abstract]
        [Export("URLProtocol:didFailWithError:")]
        void URLProtocol(NSUrlProtocol protocol, NSError error);

        // @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
        [Abstract]
        [Export("URLProtocol:didReceiveAuthenticationChallenge:")]
        void URLProtocol(NSUrlProtocol protocol, NSUrlAuthenticationChallenge challenge);

        // @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
        [Abstract]
        [Export("URLProtocol:didCancelAuthenticationChallenge:")]
        void URLProtocol(NSUrlProtocol protocol, NSUrlAuthenticationChallenge challenge);
    }

    // @interface NSURLProtocol : NSObject
    [BaseType(typeof(NSObject))]
    interface NSURLProtocol
    {
        // -(instancetype _Nonnull)initWithRequest:(NSURLRequest * _Nonnull)request cachedResponse:(NSCachedURLResponse * _Nullable)cachedResponse client:(id<NSURLProtocolClient> _Nullable)client __attribute__((objc_designated_initializer));
        [Export("initWithRequest:cachedResponse:client:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSUrlRequest request, [NullAllowed] NSCachedUrlResponse cachedResponse, [NullAllowed] NSURLProtocolClient client);

        // @property (readonly, retain) id<NSURLProtocolClient> _Nullable client;
        [NullAllowed, Export("client", ArgumentSemantic.Retain)]
        NSURLProtocolClient Client { get; }

        // @property (readonly, copy) NSURLRequest * _Nonnull request;
        [Export("request", ArgumentSemantic.Copy)]
        NSUrlRequest Request { get; }

        // @property (readonly, copy) NSCachedURLResponse * _Nullable cachedResponse;
        [NullAllowed, Export("cachedResponse", ArgumentSemantic.Copy)]
        NSCachedUrlResponse CachedResponse { get; }

        // +(BOOL)canInitWithRequest:(NSURLRequest * _Nonnull)request;
        [Static]
        [Export("canInitWithRequest:")]
        bool CanInitWithRequest(NSUrlRequest request);

        // +(NSURLRequest * _Nonnull)canonicalRequestForRequest:(NSURLRequest * _Nonnull)request;
        [Static]
        [Export("canonicalRequestForRequest:")]
        NSUrlRequest CanonicalRequestForRequest(NSUrlRequest request);

        // +(BOOL)requestIsCacheEquivalent:(NSURLRequest * _Nonnull)a toRequest:(NSURLRequest * _Nonnull)b;
        [Static]
        [Export("requestIsCacheEquivalent:toRequest:")]
        bool RequestIsCacheEquivalent(NSUrlRequest a, NSUrlRequest b);

        // -(void)startLoading;
        [Export("startLoading")]
        void StartLoading();

        // -(void)stopLoading;
        [Export("stopLoading")]
        void StopLoading();

        // +(id _Nullable)propertyForKey:(NSString * _Nonnull)key inRequest:(NSURLRequest * _Nonnull)request;
        [Static]
        [Export("propertyForKey:inRequest:")]
        [return: NullAllowed]
        NSObject PropertyForKey(string key, NSUrlRequest request);

        // +(void)setProperty:(id _Nonnull)value forKey:(NSString * _Nonnull)key inRequest:(NSMutableURLRequest * _Nonnull)request;
        [Static]
        [Export("setProperty:forKey:inRequest:")]
        void SetProperty(NSObject value, string key, NSMutableUrlRequest request);

        // +(void)removePropertyForKey:(NSString * _Nonnull)key inRequest:(NSMutableURLRequest * _Nonnull)request;
        [Static]
        [Export("removePropertyForKey:inRequest:")]
        void RemovePropertyForKey(string key, NSMutableUrlRequest request);

        // +(BOOL)registerClass:(Class _Nonnull)protocolClass;
        [Static]
        [Export("registerClass:")]
        bool RegisterClass(Class protocolClass);

        // +(void)unregisterClass:(Class _Nonnull)protocolClass;
        [Static]
        [Export("unregisterClass:")]
        void UnregisterClass(Class protocolClass);
    }

    // @interface NSURLSessionTaskAdditions (NSURLProtocol)
    [Category]
    [BaseType(typeof(NSUrlProtocol))]
    interface NSURLProtocol_NSURLSessionTaskAdditions
    {
        // +(BOOL)canInitWithTask:(NSURLSessionTask * _Nonnull)task __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Static]
        [Export("canInitWithTask:")]
        bool CanInitWithTask(NSUrlSessionTask task);

        // -(instancetype _Nonnull)initWithTask:(NSURLSessionTask * _Nonnull)task cachedResponse:(NSCachedURLResponse * _Nullable)cachedResponse client:(id<NSURLProtocolClient> _Nullable)client __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("initWithTask:cachedResponse:client:")]
        IntPtr Constructor(NSUrlSessionTask task, [NullAllowed] NSCachedUrlResponse cachedResponse, [NullAllowed] NSURLProtocolClient client);

        // @property (readonly, copy) NSURLSessionTask * _Nullable task __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [NullAllowed, Export("task", ArgumentSemantic.Copy)]
        NSUrlSessionTask Task { get; }
    }

    // @interface NSURLRequest : NSObject <NSSecureCoding, NSCopying, NSMutableCopying>
    [BaseType(typeof(NSObject))]
    interface NSURLRequest : INSSecureCoding, INSCopying, INSMutableCopying
    {
        // +(instancetype _Nonnull)requestWithURL:(NSURL * _Nonnull)URL;
        [Static]
        [Export("requestWithURL:")]
        NSUrlRequest RequestWithURL(NSUrl URL);

        // @property (readonly, class) BOOL supportsSecureCoding;
        [Static]
        [Export("supportsSecureCoding")]
        bool SupportsSecureCoding { get; }

        // +(instancetype _Nonnull)requestWithURL:(NSURL * _Nonnull)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval;
        [Static]
        [Export("requestWithURL:cachePolicy:timeoutInterval:")]
        NSUrlRequest RequestWithURL(NSUrl URL, NSURLRequestCachePolicy cachePolicy, double timeoutInterval);

        // -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL;
        [Export("initWithURL:")]
        IntPtr Constructor(NSUrl URL);

        // -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval __attribute__((objc_designated_initializer));
        [Export("initWithURL:cachePolicy:timeoutInterval:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSUrl URL, NSURLRequestCachePolicy cachePolicy, double timeoutInterval);

        // @property (readonly, copy) NSURL * _Nullable URL;
        [NullAllowed, Export("URL", ArgumentSemantic.Copy)]
        NSUrl URL { get; }

        // @property (readonly) NSURLRequestCachePolicy cachePolicy;
        [Export("cachePolicy")]
        NSURLRequestCachePolicy CachePolicy { get; }

        // @property (readonly) NSTimeInterval timeoutInterval;
        [Export("timeoutInterval")]
        double TimeoutInterval { get; }

        // @property (readonly, copy) NSURL * _Nullable mainDocumentURL;
        [NullAllowed, Export("mainDocumentURL", ArgumentSemantic.Copy)]
        NSUrl MainDocumentURL { get; }

        // @property (readonly) NSURLRequestNetworkServiceType networkServiceType __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Export("networkServiceType")]
        NSURLRequestNetworkServiceType NetworkServiceType { get; }

        // @property (readonly) BOOL allowsCellularAccess __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("allowsCellularAccess")]
        bool AllowsCellularAccess { get; }
    }

    // @interface NSMutableURLRequest : NSURLRequest
    [BaseType(typeof(NSUrlRequest))]
    interface NSMutableURLRequest
    {
        // @property (copy) NSURL * _Nullable URL;
        [NullAllowed, Export("URL", ArgumentSemantic.Copy)]
        NSUrl URL { get; set; }

        // @property NSURLRequestCachePolicy cachePolicy;
        [Export("cachePolicy", ArgumentSemantic.Assign)]
        NSURLRequestCachePolicy CachePolicy { get; set; }

        // @property NSTimeInterval timeoutInterval;
        [Export("timeoutInterval")]
        double TimeoutInterval { get; set; }

        // @property (copy) NSURL * _Nullable mainDocumentURL;
        [NullAllowed, Export("mainDocumentURL", ArgumentSemantic.Copy)]
        NSUrl MainDocumentURL { get; set; }

        // @property NSURLRequestNetworkServiceType networkServiceType __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Export("networkServiceType", ArgumentSemantic.Assign)]
        NSURLRequestNetworkServiceType NetworkServiceType { get; set; }

        // @property BOOL allowsCellularAccess __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("allowsCellularAccess")]
        bool AllowsCellularAccess { get; set; }
    }

    // @interface NSHTTPURLRequest (NSURLRequest)
    [Category]
    [BaseType(typeof(NSUrlRequest))]
    interface NSURLRequest_NSHTTPURLRequest
    {
        // @property (readonly, copy) NSString * _Nullable HTTPMethod;
        [NullAllowed, Export("HTTPMethod")]
        string HTTPMethod { get; }

        // @property (readonly, copy) NSDictionary<NSString *,NSString *> * _Nullable allHTTPHeaderFields;
        [NullAllowed, Export("allHTTPHeaderFields", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSString> AllHTTPHeaderFields { get; }

        // -(NSString * _Nullable)valueForHTTPHeaderField:(NSString * _Nonnull)field;
        [Export("valueForHTTPHeaderField:")]
        [return: NullAllowed]
        string ValueForHTTPHeaderField(string field);

        // @property (readonly, copy) NSData * _Nullable HTTPBody;
        [NullAllowed, Export("HTTPBody", ArgumentSemantic.Copy)]
        NSData HTTPBody { get; }

        // @property (readonly, retain) NSInputStream * _Nullable HTTPBodyStream;
        [NullAllowed, Export("HTTPBodyStream", ArgumentSemantic.Retain)]
        NSInputStream HTTPBodyStream { get; }

        // @property (readonly) BOOL HTTPShouldHandleCookies;
        [Export("HTTPShouldHandleCookies")]
        bool HTTPShouldHandleCookies { get; }

        // @property (readonly) BOOL HTTPShouldUsePipelining __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Export("HTTPShouldUsePipelining")]
        bool HTTPShouldUsePipelining { get; }
    }

    // @interface NSMutableHTTPURLRequest (NSMutableURLRequest)
    [Category]
    [BaseType(typeof(NSMutableUrlRequest))]
    interface NSMutableURLRequest_NSMutableHTTPURLRequest
    {
        // @property (copy) NSString * _Nonnull HTTPMethod;
        [Export("HTTPMethod")]
        string HTTPMethod { get; set; }

        // @property (copy) NSDictionary<NSString *,NSString *> * _Nullable allHTTPHeaderFields;
        [NullAllowed, Export("allHTTPHeaderFields", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSString> AllHTTPHeaderFields { get; set; }

        // -(void)setValue:(NSString * _Nullable)value forHTTPHeaderField:(NSString * _Nonnull)field;
        [Export("setValue:forHTTPHeaderField:")]
        void SetValue([NullAllowed] string value, string field);

        // -(void)addValue:(NSString * _Nonnull)value forHTTPHeaderField:(NSString * _Nonnull)field;
        [Export("addValue:forHTTPHeaderField:")]
        void AddValue(string value, string field);

        // @property (copy) NSData * _Nullable HTTPBody;
        [NullAllowed, Export("HTTPBody", ArgumentSemantic.Copy)]
        NSData HTTPBody { get; set; }

        // @property (retain) NSInputStream * _Nullable HTTPBodyStream;
        [NullAllowed, Export("HTTPBodyStream", ArgumentSemantic.Retain)]
        NSInputStream HTTPBodyStream { get; set; }

        // @property BOOL HTTPShouldHandleCookies;
        [Export("HTTPShouldHandleCookies")]
        bool HTTPShouldHandleCookies { get; set; }

        // @property BOOL HTTPShouldUsePipelining __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Export("HTTPShouldUsePipelining")]
        bool HTTPShouldUsePipelining { get; set; }
    }

    // @interface NSURLResponse : NSObject <NSSecureCoding, NSCopying>
    [BaseType(typeof(NSObject))]
    interface NSURLResponse : INSSecureCoding, INSCopying
    {
        // -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL MIMEType:(NSString * _Nullable)MIMEType expectedContentLength:(NSInteger)length textEncodingName:(NSString * _Nullable)name __attribute__((objc_designated_initializer));
        [Export("initWithURL:MIMEType:expectedContentLength:textEncodingName:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSUrl URL, [NullAllowed] string MIMEType, nint length, [NullAllowed] string name);

        // @property (readonly, copy) NSURL * _Nullable URL;
        [NullAllowed, Export("URL", ArgumentSemantic.Copy)]
        NSUrl URL { get; }

        // @property (readonly, copy) NSString * _Nullable MIMEType;
        [NullAllowed, Export("MIMEType")]
        string MIMEType { get; }

        // @property (readonly) long long expectedContentLength;
        [Export("expectedContentLength")]
        long ExpectedContentLength { get; }

        // @property (readonly, copy) NSString * _Nullable textEncodingName;
        [NullAllowed, Export("textEncodingName")]
        string TextEncodingName { get; }

        // @property (readonly, copy) NSString * _Nullable suggestedFilename;
        [NullAllowed, Export("suggestedFilename")]
        string SuggestedFilename { get; }
    }

    // @interface NSHTTPURLResponse : NSURLResponse
    [BaseType(typeof(NSUrlResponse))]
    interface NSHTTPURLResponse
    {
        // -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url statusCode:(NSInteger)statusCode HTTPVersion:(NSString * _Nullable)HTTPVersion headerFields:(NSDictionary<NSString *,NSString *> * _Nullable)headerFields __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("initWithURL:statusCode:HTTPVersion:headerFields:")]
        IntPtr Constructor(NSUrl url, nint statusCode, [NullAllowed] string HTTPVersion, [NullAllowed] NSDictionary<NSString, NSString> headerFields);

        // @property (readonly) NSInteger statusCode;
        [Export("statusCode")]
        nint StatusCode { get; }

        // @property (readonly, copy) NSDictionary * _Nonnull allHeaderFields;
        [Export("allHeaderFields", ArgumentSemantic.Copy)]
        NSDictionary AllHeaderFields { get; }

        // +(NSString * _Nonnull)localizedStringForStatusCode:(NSInteger)statusCode;
        [Static]
        [Export("localizedStringForStatusCode:")]
        string LocalizedStringForStatusCode(nint statusCode);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull NSGlobalDomain;
        [Field("NSGlobalDomain", "__Internal")]
        NSString NSGlobalDomain { get; }

        // extern NSString *const _Nonnull NSArgumentDomain;
        [Field("NSArgumentDomain", "__Internal")]
        NSString NSArgumentDomain { get; }

        // extern NSString *const _Nonnull NSRegistrationDomain;
        [Field("NSRegistrationDomain", "__Internal")]
        NSString NSRegistrationDomain { get; }
    }

    // @interface NSUserDefaults : NSObject
    [BaseType(typeof(NSObject))]
    interface NSUserDefaults
    {
        // @property (readonly, strong, class) NSUserDefaults * _Nonnull standardUserDefaults;
        [Static]
        [Export("standardUserDefaults", ArgumentSemantic.Strong)]
        NSUserDefaults StandardUserDefaults { get; }

        // +(void)resetStandardUserDefaults;
        [Static]
        [Export("resetStandardUserDefaults")]
        void ResetStandardUserDefaults();

        // -(instancetype _Nullable)initWithSuiteName:(NSString * _Nullable)suitename __attribute__((objc_designated_initializer)) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("initWithSuiteName:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] string suitename);

        // -(id _Nullable)initWithUser:(NSString * _Nonnull)username __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use -init instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use -init instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use -init instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use -init instead")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Use -init instead")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use -init instead")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Use -init instead")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use -init instead")]
        [Export("initWithUser:")]
        IntPtr Constructor(string username);

        // -(id _Nullable)objectForKey:(NSString * _Nonnull)defaultName;
        [Export("objectForKey:")]
        [return: NullAllowed]
        NSObject ObjectForKey(string defaultName);

        // -(void)setObject:(id _Nullable)value forKey:(NSString * _Nonnull)defaultName;
        [Export("setObject:forKey:")]
        void SetObject([NullAllowed] NSObject value, string defaultName);

        // -(void)removeObjectForKey:(NSString * _Nonnull)defaultName;
        [Export("removeObjectForKey:")]
        void RemoveObjectForKey(string defaultName);

        // -(NSString * _Nullable)stringForKey:(NSString * _Nonnull)defaultName;
        [Export("stringForKey:")]
        [return: NullAllowed]
        string StringForKey(string defaultName);

        // -(NSArray * _Nullable)arrayForKey:(NSString * _Nonnull)defaultName;
        [Export("arrayForKey:")]
        [Verify(StronglyTypedNSArray)]
        [return: NullAllowed]
        NSObject[] ArrayForKey(string defaultName);

        // -(NSDictionary<NSString *,id> * _Nullable)dictionaryForKey:(NSString * _Nonnull)defaultName;
        [Export("dictionaryForKey:")]
        [return: NullAllowed]
        NSDictionary<NSString, NSObject> DictionaryForKey(string defaultName);

        // -(NSData * _Nullable)dataForKey:(NSString * _Nonnull)defaultName;
        [Export("dataForKey:")]
        [return: NullAllowed]
        NSData DataForKey(string defaultName);

        // -(NSArray<NSString *> * _Nullable)stringArrayForKey:(NSString * _Nonnull)defaultName;
        [Export("stringArrayForKey:")]
        [return: NullAllowed]
        string[] StringArrayForKey(string defaultName);

        // -(NSInteger)integerForKey:(NSString * _Nonnull)defaultName;
        [Export("integerForKey:")]
        nint IntegerForKey(string defaultName);

        // -(float)floatForKey:(NSString * _Nonnull)defaultName;
        [Export("floatForKey:")]
        float FloatForKey(string defaultName);

        // -(double)doubleForKey:(NSString * _Nonnull)defaultName;
        [Export("doubleForKey:")]
        double DoubleForKey(string defaultName);

        // -(BOOL)boolForKey:(NSString * _Nonnull)defaultName;
        [Export("boolForKey:")]
        bool BoolForKey(string defaultName);

        // -(NSURL * _Nullable)URLForKey:(NSString * _Nonnull)defaultName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("URLForKey:")]
        [return: NullAllowed]
        NSUrl URLForKey(string defaultName);

        // -(void)setInteger:(NSInteger)value forKey:(NSString * _Nonnull)defaultName;
        [Export("setInteger:forKey:")]
        void SetInteger(nint value, string defaultName);

        // -(void)setFloat:(float)value forKey:(NSString * _Nonnull)defaultName;
        [Export("setFloat:forKey:")]
        void SetFloat(float value, string defaultName);

        // -(void)setDouble:(double)value forKey:(NSString * _Nonnull)defaultName;
        [Export("setDouble:forKey:")]
        void SetDouble(double value, string defaultName);

        // -(void)setBool:(BOOL)value forKey:(NSString * _Nonnull)defaultName;
        [Export("setBool:forKey:")]
        void SetBool(bool value, string defaultName);

        // -(void)setURL:(NSURL * _Nullable)url forKey:(NSString * _Nonnull)defaultName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("setURL:forKey:")]
        void SetURL([NullAllowed] NSUrl url, string defaultName);

        // -(void)registerDefaults:(NSDictionary<NSString *,id> * _Nonnull)registrationDictionary;
        [Export("registerDefaults:")]
        void RegisterDefaults(NSDictionary<NSString, NSObject> registrationDictionary);

        // -(void)addSuiteNamed:(NSString * _Nonnull)suiteName;
        [Export("addSuiteNamed:")]
        void AddSuiteNamed(string suiteName);

        // -(void)removeSuiteNamed:(NSString * _Nonnull)suiteName;
        [Export("removeSuiteNamed:")]
        void RemoveSuiteNamed(string suiteName);

        // -(NSDictionary<NSString *,id> * _Nonnull)dictionaryRepresentation;
        [Export("dictionaryRepresentation")]
        [Verify(MethodToProperty)]
        NSDictionary<NSString, NSObject> DictionaryRepresentation { get; }

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull volatileDomainNames;
        [Export("volatileDomainNames", ArgumentSemantic.Copy)]
        string[] VolatileDomainNames { get; }

        // -(NSDictionary<NSString *,id> * _Nonnull)volatileDomainForName:(NSString * _Nonnull)domainName;
        [Export("volatileDomainForName:")]
        NSDictionary<NSString, NSObject> VolatileDomainForName(string domainName);

        // -(void)setVolatileDomain:(NSDictionary<NSString *,id> * _Nonnull)domain forName:(NSString * _Nonnull)domainName;
        [Export("setVolatileDomain:forName:")]
        void SetVolatileDomain(NSDictionary<NSString, NSObject> domain, string domainName);

        // -(void)removeVolatileDomainForName:(NSString * _Nonnull)domainName;
        [Export("removeVolatileDomainForName:")]
        void RemoveVolatileDomainForName(string domainName);

        // -(NSArray * _Nonnull)persistentDomainNames __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Not recommended")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Not recommended")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Not recommended")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Not recommended")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Not recommended")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Not recommended")]
        [Introduced(PlatformName.MacOSX, 10, 0, message: "Not recommended")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Not recommended")]
        [Export("persistentDomainNames")]
        [Verify(MethodToProperty), Verify(StronglyTypedNSArray)]
        NSObject[] PersistentDomainNames { get; }

        // -(NSDictionary<NSString *,id> * _Nullable)persistentDomainForName:(NSString * _Nonnull)domainName;
        [Export("persistentDomainForName:")]
        [return: NullAllowed]
        NSDictionary<NSString, NSObject> PersistentDomainForName(string domainName);

        // -(void)setPersistentDomain:(NSDictionary<NSString *,id> * _Nonnull)domain forName:(NSString * _Nonnull)domainName;
        [Export("setPersistentDomain:forName:")]
        void SetPersistentDomain(NSDictionary<NSString, NSObject> domain, string domainName);

        // -(void)removePersistentDomainForName:(NSString * _Nonnull)domainName;
        [Export("removePersistentDomainForName:")]
        void RemovePersistentDomainForName(string domainName);

        // -(BOOL)synchronize;
        [Export("synchronize")]
        [Verify(MethodToProperty)]
        bool Synchronize { get; }

        // -(BOOL)objectIsForcedForKey:(NSString * _Nonnull)key;
        [Export("objectIsForcedForKey:")]
        bool ObjectIsForcedForKey(string key);

        // -(BOOL)objectIsForcedForKey:(NSString * _Nonnull)key inDomain:(NSString * _Nonnull)domain;
        [Export("objectIsForcedForKey:inDomain:")]
        bool ObjectIsForcedForKey(string key, string domain);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSUserDefaultsSizeLimitExceededNotification __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.3)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 3)]
        [Field("NSUserDefaultsSizeLimitExceededNotification", "__Internal")]
        NSString NSUserDefaultsSizeLimitExceededNotification { get; }

        // extern const NSNotificationName _Nonnull NSUbiquitousUserDefaultsNoCloudAccountNotification __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.3)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 3)]
        [Field("NSUbiquitousUserDefaultsNoCloudAccountNotification", "__Internal")]
        NSString NSUbiquitousUserDefaultsNoCloudAccountNotification { get; }

        // extern const NSNotificationName _Nonnull NSUbiquitousUserDefaultsDidChangeAccountsNotification __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.3)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 3)]
        [Field("NSUbiquitousUserDefaultsDidChangeAccountsNotification", "__Internal")]
        NSString NSUbiquitousUserDefaultsDidChangeAccountsNotification { get; }

        // extern const NSNotificationName _Nonnull NSUbiquitousUserDefaultsCompletedInitialSyncNotification __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.3)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(9, 3)]
        [Field("NSUbiquitousUserDefaultsCompletedInitialSyncNotification", "__Internal")]
        NSString NSUbiquitousUserDefaultsCompletedInitialSyncNotification { get; }

        // extern const NSNotificationName _Nonnull NSUserDefaultsDidChangeNotification;
        [Field("NSUserDefaultsDidChangeNotification", "__Internal")]
        NSString NSUserDefaultsDidChangeNotification { get; }

        // extern const NSValueTransformerName _Nonnull NSNegateBooleanTransformerName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(3, 0)]
        [Field("NSNegateBooleanTransformerName", "__Internal")]
        NSString NSNegateBooleanTransformerName { get; }

        // extern const NSValueTransformerName _Nonnull NSIsNilTransformerName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(3, 0)]
        [Field("NSIsNilTransformerName", "__Internal")]
        NSString NSIsNilTransformerName { get; }

        // extern const NSValueTransformerName _Nonnull NSIsNotNilTransformerName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(3, 0)]
        [Field("NSIsNotNilTransformerName", "__Internal")]
        NSString NSIsNotNilTransformerName { get; }

        // extern const NSValueTransformerName _Nonnull NSUnarchiveFromDataTransformerName __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=3.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.3, deprecated=10.14)));
        [Introduced(PlatformName.TvOS, 9, 0)]
        [Deprecated(PlatformName.TvOS, 12, 0)]
        [Introduced(PlatformName.WatchOS, 2, 0)]
        [Deprecated(PlatformName.WatchOS, 5, 0)]
        [Introduced(PlatformName.iOS, 3, 0)]
        [Deprecated(PlatformName.iOS, 12, 0)]
        [Introduced(PlatformName.MacOSX, 10, 3)]
        [Deprecated(PlatformName.MacOSX, 10, 14)]
        [Field("NSUnarchiveFromDataTransformerName", "__Internal")]
        NSString NSUnarchiveFromDataTransformerName { get; }

        // extern const NSValueTransformerName _Nonnull NSKeyedUnarchiveFromDataTransformerName __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(ios, introduced=3.0, deprecated=12.0))) __attribute__((availability(macos, introduced=10.3, deprecated=10.14)));
        [Introduced(PlatformName.TvOS, 9, 0)]
        [Deprecated(PlatformName.TvOS, 12, 0)]
        [Introduced(PlatformName.WatchOS, 2, 0)]
        [Deprecated(PlatformName.WatchOS, 5, 0)]
        [Introduced(PlatformName.iOS, 3, 0)]
        [Deprecated(PlatformName.iOS, 12, 0)]
        [Introduced(PlatformName.MacOSX, 10, 3)]
        [Deprecated(PlatformName.MacOSX, 10, 14)]
        [Field("NSKeyedUnarchiveFromDataTransformerName", "__Internal")]
        NSString NSKeyedUnarchiveFromDataTransformerName { get; }

        // extern const NSValueTransformerName _Nonnull NSSecureUnarchiveFromDataTransformerName __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Watch(5, 0), TV(12, 0), Mac(10, 14), iOS(12, 0)]
        [Field("NSSecureUnarchiveFromDataTransformerName", "__Internal")]
        NSString NSSecureUnarchiveFromDataTransformerName { get; }
    }

    // @interface NSValueTransformer : NSObject
    [iOS(3, 0)]
    [BaseType(typeof(NSObject))]
    interface NSValueTransformer
    {
        // +(void)setValueTransformer:(NSValueTransformer * _Nullable)transformer forName:(NSValueTransformerName _Nonnull)name;
        [Static]
        [Export("setValueTransformer:forName:")]
        void SetValueTransformer([NullAllowed] NSValueTransformer transformer, string name);

        // +(NSValueTransformer * _Nullable)valueTransformerForName:(NSValueTransformerName _Nonnull)name;
        [Static]
        [Export("valueTransformerForName:")]
        [return: NullAllowed]
        NSValueTransformer ValueTransformerForName(string name);

        // +(NSArray<NSValueTransformerName> * _Nonnull)valueTransformerNames;
        [Static]
        [Export("valueTransformerNames")]
        [Verify(MethodToProperty)]
        string[] ValueTransformerNames { get; }

        // +(Class _Nonnull)transformedValueClass;
        [Static]
        [Export("transformedValueClass")]
        [Verify(MethodToProperty)]
        Class TransformedValueClass { get; }

        // +(BOOL)allowsReverseTransformation;
        [Static]
        [Export("allowsReverseTransformation")]
        [Verify(MethodToProperty)]
        bool AllowsReverseTransformation { get; }

        // -(id _Nullable)transformedValue:(id _Nullable)value;
        [Export("transformedValue:")]
        [return: NullAllowed]
        NSObject TransformedValue([NullAllowed] NSObject value);

        // -(id _Nullable)reverseTransformedValue:(id _Nullable)value;
        [Export("reverseTransformedValue:")]
        [return: NullAllowed]
        NSObject ReverseTransformedValue([NullAllowed] NSObject value);
    }

    // @interface NSSecureUnarchiveFromDataTransformer : NSValueTransformer
    [Watch(5, 0), TV(12, 0), Mac(10, 14), iOS(12, 0)]
    [BaseType(typeof(NSValueTransformer))]
    interface NSSecureUnarchiveFromDataTransformer
    {
        // @property (readonly, copy, class) NSArray<Class> * _Nonnull allowedTopLevelClasses;
        [Static]
        [Export("allowedTopLevelClasses", ArgumentSemantic.Copy)]
        Class[] AllowedTopLevelClasses { get; }
    }

    // @interface NSXMLParser : NSObject
    [BaseType(typeof(NSObject))]
    interface NSXMLParser
    {
        // -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
        [Export("initWithContentsOfURL:")]
        IntPtr Constructor(NSUrl url);

        // -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data __attribute__((objc_designated_initializer));
        [Export("initWithData:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSData data);

        // -(instancetype _Nonnull)initWithStream:(NSInputStream * _Nonnull)stream __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("initWithStream:")]
        IntPtr Constructor(NSInputStream stream);

        [Wrap("WeakDelegate")]
        [NullAllowed]
        NSXMLParserDelegate Delegate { get; set; }

        // @property (assign) id<NSXMLParserDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // @property BOOL shouldProcessNamespaces;
        [Export("shouldProcessNamespaces")]
        bool ShouldProcessNamespaces { get; set; }

        // @property BOOL shouldReportNamespacePrefixes;
        [Export("shouldReportNamespacePrefixes")]
        bool ShouldReportNamespacePrefixes { get; set; }

        // @property NSXMLParserExternalEntityResolvingPolicy externalEntityResolvingPolicy __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Export("externalEntityResolvingPolicy", ArgumentSemantic.Assign)]
        NSXMLParserExternalEntityResolvingPolicy ExternalEntityResolvingPolicy { get; set; }

        // @property (copy) NSSet<NSURL *> * _Nullable allowedExternalEntityURLs __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [NullAllowed, Export("allowedExternalEntityURLs", ArgumentSemantic.Copy)]
        NSSet<NSURL> AllowedExternalEntityURLs { get; set; }

        // -(BOOL)parse;
        [Export("parse")]
        [Verify(MethodToProperty)]
        bool Parse { get; }

        // -(void)abortParsing;
        [Export("abortParsing")]
        void AbortParsing();

        // @property (readonly, copy) NSError * _Nullable parserError;
        [NullAllowed, Export("parserError", ArgumentSemantic.Copy)]
        NSError ParserError { get; }

        // @property BOOL shouldResolveExternalEntities;
        [Export("shouldResolveExternalEntities")]
        bool ShouldResolveExternalEntities { get; set; }
    }

    // @interface NSXMLParserLocatorAdditions (NSXMLParser)
    [Category]
    [BaseType(typeof(NSXMLParser))]
    interface NSXMLParser_NSXMLParserLocatorAdditions
    {
        // @property (readonly, copy) NSString * _Nullable publicID;
        [NullAllowed, Export("publicID")]
        string PublicID { get; }

        // @property (readonly, copy) NSString * _Nullable systemID;
        [NullAllowed, Export("systemID")]
        string SystemID { get; }

        // @property (readonly) NSInteger lineNumber;
        [Export("lineNumber")]
        nint LineNumber { get; }

        // @property (readonly) NSInteger columnNumber;
        [Export("columnNumber")]
        nint ColumnNumber { get; }
    }

    // @protocol NSXMLParserDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSXMLParserDelegate
    {
        // @optional -(void)parserDidStartDocument:(NSXMLParser * _Nonnull)parser;
        [Export("parserDidStartDocument:")]
        void ParserDidStartDocument(NSXMLParser parser);

        // @optional -(void)parserDidEndDocument:(NSXMLParser * _Nonnull)parser;
        [Export("parserDidEndDocument:")]
        void ParserDidEndDocument(NSXMLParser parser);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundNotationDeclarationWithName:(NSString * _Nonnull)name publicID:(NSString * _Nullable)publicID systemID:(NSString * _Nullable)systemID;
        [Export("parser:foundNotationDeclarationWithName:publicID:systemID:")]
        void Parser(NSXMLParser parser, string name, [NullAllowed] string publicID, [NullAllowed] string systemID);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundUnparsedEntityDeclarationWithName:(NSString * _Nonnull)name publicID:(NSString * _Nullable)publicID systemID:(NSString * _Nullable)systemID notationName:(NSString * _Nullable)notationName;
        [Export("parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:")]
        void Parser(NSXMLParser parser, string name, [NullAllowed] string publicID, [NullAllowed] string systemID, [NullAllowed] string notationName);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundAttributeDeclarationWithName:(NSString * _Nonnull)attributeName forElement:(NSString * _Nonnull)elementName type:(NSString * _Nullable)type defaultValue:(NSString * _Nullable)defaultValue;
        [Export("parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:")]
        void Parser(NSXMLParser parser, string attributeName, string elementName, [NullAllowed] string type, [NullAllowed] string defaultValue);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundElementDeclarationWithName:(NSString * _Nonnull)elementName model:(NSString * _Nonnull)model;
        [Export("parser:foundElementDeclarationWithName:model:")]
        void Parser(NSXMLParser parser, string elementName, string model);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundInternalEntityDeclarationWithName:(NSString * _Nonnull)name value:(NSString * _Nullable)value;
        [Export("parser:foundInternalEntityDeclarationWithName:value:")]
        void Parser(NSXMLParser parser, string name, [NullAllowed] string value);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundExternalEntityDeclarationWithName:(NSString * _Nonnull)name publicID:(NSString * _Nullable)publicID systemID:(NSString * _Nullable)systemID;
        [Export("parser:foundExternalEntityDeclarationWithName:publicID:systemID:")]
        void Parser(NSXMLParser parser, string name, [NullAllowed] string publicID, [NullAllowed] string systemID);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *,NSString *> * _Nonnull)attributeDict;
        [Export("parser:didStartElement:namespaceURI:qualifiedName:attributes:")]
        void Parser(NSXMLParser parser, string elementName, [NullAllowed] string namespaceURI, [NullAllowed] string qName, NSDictionary<NSString, NSString> attributeDict);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
        [Export("parser:didEndElement:namespaceURI:qualifiedName:")]
        void Parser(NSXMLParser parser, string elementName, [NullAllowed] string namespaceURI, [NullAllowed] string qName);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser didStartMappingPrefix:(NSString * _Nonnull)prefix toURI:(NSString * _Nonnull)namespaceURI;
        [Export("parser:didStartMappingPrefix:toURI:")]
        void Parser(NSXMLParser parser, string prefix, string namespaceURI);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser didEndMappingPrefix:(NSString * _Nonnull)prefix;
        [Export("parser:didEndMappingPrefix:")]
        void Parser(NSXMLParser parser, string prefix);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
        [Export("parser:foundCharacters:")]
        void Parser(NSXMLParser parser, string @string);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundIgnorableWhitespace:(NSString * _Nonnull)whitespaceString;
        [Export("parser:foundIgnorableWhitespace:")]
        void Parser(NSXMLParser parser, string whitespaceString);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundProcessingInstructionWithTarget:(NSString * _Nonnull)target data:(NSString * _Nullable)data;
        [Export("parser:foundProcessingInstructionWithTarget:data:")]
        void Parser(NSXMLParser parser, string target, [NullAllowed] string data);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundComment:(NSString * _Nonnull)comment;
        [Export("parser:foundComment:")]
        void Parser(NSXMLParser parser, string comment);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundCDATA:(NSData * _Nonnull)CDATABlock;
        [Export("parser:foundCDATA:")]
        void Parser(NSXMLParser parser, NSData CDATABlock);

        // @optional -(NSData * _Nullable)parser:(NSXMLParser * _Nonnull)parser resolveExternalEntityName:(NSString * _Nonnull)name systemID:(NSString * _Nullable)systemID;
        [Export("parser:resolveExternalEntityName:systemID:")]
        [return: NullAllowed]
        NSData Parser(NSXMLParser parser, string name, [NullAllowed] string systemID);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser parseErrorOccurred:(NSError * _Nonnull)parseError;
        [Export("parser:parseErrorOccurred:")]
        void Parser(NSXMLParser parser, NSError parseError);

        // @optional -(void)parser:(NSXMLParser * _Nonnull)parser validationErrorOccurred:(NSError * _Nonnull)validationError;
        [Export("parser:validationErrorOccurred:")]
        void Parser(NSXMLParser parser, NSError validationError);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSErrorDomain _Nonnull NSXMLParserErrorDomain __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.3)));
        [Watch(2, 0), TV(9, 0), Mac(10, 3), iOS(2, 0)]
        [Field("NSXMLParserErrorDomain", "__Internal")]
        NSString NSXMLParserErrorDomain { get; }
    }

    // @protocol NSXPCProxyCreating
    [Protocol, Model]
    interface NSXPCProxyCreating
    {
        // @required -(id _Nonnull)remoteObjectProxy;
        [Abstract]
        [Export("remoteObjectProxy")]
        [Verify(MethodToProperty)]
        NSObject RemoteObjectProxy { get; }

        // @required -(id _Nonnull)remoteObjectProxyWithErrorHandler:(void (^ _Nonnull)(NSError * _Nonnull))handler;
        [Abstract]
        [Export("remoteObjectProxyWithErrorHandler:")]
        NSObject RemoteObjectProxyWithErrorHandler(Action<NSError> handler);

        // @optional -(id _Nonnull)synchronousRemoteObjectProxyWithErrorHandler:(void (^ _Nonnull)(NSError * _Nonnull))handler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("synchronousRemoteObjectProxyWithErrorHandler:")]
        NSObject SynchronousRemoteObjectProxyWithErrorHandler(Action<NSError> handler);
    }

    // @interface NSXPCConnection : NSObject <NSXPCProxyCreating>
    [iOS(6, 0)]
    [BaseType(typeof(NSObject))]
    interface NSXPCConnection : INSXPCProxyCreating
    {
        // -(instancetype _Nonnull)initWithServiceName:(NSString * _Nonnull)serviceName __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
        [NoWatch, NoTV, NoiOS]
        [Export("initWithServiceName:")]
        IntPtr Constructor(string serviceName);

        // @property (readonly, copy) NSString * _Nullable serviceName;
        [NullAllowed, Export("serviceName")]
        string ServiceName { get; }

        // -(instancetype _Nonnull)initWithMachServiceName:(NSString * _Nonnull)name options:(NSXPCConnectionOptions)options __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
        [NoWatch, NoTV, NoiOS]
        [Export("initWithMachServiceName:options:")]
        IntPtr Constructor(string name, NSXPCConnectionOptions options);

        // -(instancetype _Nonnull)initWithListenerEndpoint:(NSXPCListenerEndpoint * _Nonnull)endpoint;
        [Export("initWithListenerEndpoint:")]
        IntPtr Constructor(NSXpcListenerEndpoint endpoint);

        // @property (readonly, retain) NSXPCListenerEndpoint * _Nonnull endpoint;
        [Export("endpoint", ArgumentSemantic.Retain)]
        NSXpcListenerEndpoint Endpoint { get; }

        // @property (retain) NSXPCInterface * _Nullable exportedInterface;
        [NullAllowed, Export("exportedInterface", ArgumentSemantic.Retain)]
        NSXPCInterface ExportedInterface { get; set; }

        // @property (retain) id _Nullable exportedObject;
        [NullAllowed, Export("exportedObject", ArgumentSemantic.Retain)]
        NSObject ExportedObject { get; set; }

        // @property (retain) NSXPCInterface * _Nullable remoteObjectInterface;
        [NullAllowed, Export("remoteObjectInterface", ArgumentSemantic.Retain)]
        NSXPCInterface RemoteObjectInterface { get; set; }

        // @property (readonly, retain) id _Nonnull remoteObjectProxy;
        [Export("remoteObjectProxy", ArgumentSemantic.Retain)]
        NSObject RemoteObjectProxy { get; }

        // -(id _Nonnull)remoteObjectProxyWithErrorHandler:(void (^ _Nonnull)(NSError * _Nonnull))handler;
        [Export("remoteObjectProxyWithErrorHandler:")]
        NSObject RemoteObjectProxyWithErrorHandler(Action<NSError> handler);

        // -(id _Nonnull)synchronousRemoteObjectProxyWithErrorHandler:(void (^ _Nonnull)(NSError * _Nonnull))handler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("synchronousRemoteObjectProxyWithErrorHandler:")]
        NSObject SynchronousRemoteObjectProxyWithErrorHandler(Action<NSError> handler);

        // @property (copy) void (^ _Nullable)(void) interruptionHandler;
        [NullAllowed, Export("interruptionHandler", ArgumentSemantic.Copy)]
        Action InterruptionHandler { get; set; }

        // @property (copy) void (^ _Nullable)(void) invalidationHandler;
        [NullAllowed, Export("invalidationHandler", ArgumentSemantic.Copy)]
        Action InvalidationHandler { get; set; }

        // -(void)resume;
        [Export("resume")]
        void Resume();

        // -(void)suspend;
        [Export("suspend")]
        void Suspend();

        // -(void)invalidate;
        [Export("invalidate")]
        void Invalidate();

        // @property (readonly) au_asid_t auditSessionIdentifier;
        [Export("auditSessionIdentifier")]
        int AuditSessionIdentifier { get; }

        // @property (readonly) pid_t processIdentifier;
        [Export("processIdentifier")]
        int ProcessIdentifier { get; }

        // @property (readonly) uid_t effectiveUserIdentifier;
        [Export("effectiveUserIdentifier")]
        uint EffectiveUserIdentifier { get; }

        // @property (readonly) gid_t effectiveGroupIdentifier;
        [Export("effectiveGroupIdentifier")]
        uint EffectiveGroupIdentifier { get; }
    }

    // @interface NSXPCListener : NSObject
    [iOS(6, 0)]
    [BaseType(typeof(NSObject))]
    interface NSXPCListener
    {
        // +(NSXPCListener * _Nonnull)serviceListener;
        [Static]
        [Export("serviceListener")]
        [Verify(MethodToProperty)]
        NSXPCListener ServiceListener { get; }

        // +(NSXPCListener * _Nonnull)anonymousListener;
        [Static]
        [Export("anonymousListener")]
        [Verify(MethodToProperty)]
        NSXPCListener AnonymousListener { get; }

        // -(instancetype _Nonnull)initWithMachServiceName:(NSString * _Nonnull)name __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((objc_designated_initializer));
        [NoWatch, NoTV, NoiOS]
        [Export("initWithMachServiceName:")]
        [DesignatedInitializer]
        IntPtr Constructor(string name);

        [Wrap("WeakDelegate")]
        [NullAllowed]
        NSXPCListenerDelegate Delegate { get; set; }

        // @property (assign) id<NSXPCListenerDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // @property (readonly, retain) NSXPCListenerEndpoint * _Nonnull endpoint;
        [Export("endpoint", ArgumentSemantic.Retain)]
        NSXpcListenerEndpoint Endpoint { get; }

        // -(void)resume;
        [Export("resume")]
        void Resume();

        // -(void)suspend;
        [Export("suspend")]
        void Suspend();

        // -(void)invalidate;
        [Export("invalidate")]
        void Invalidate();
    }

    // @protocol NSXPCListenerDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSXPCListenerDelegate
    {
        // @optional -(BOOL)listener:(NSXPCListener * _Nonnull)listener shouldAcceptNewConnection:(NSXPCConnection * _Nonnull)newConnection;
        [Export("listener:shouldAcceptNewConnection:")]
        bool ShouldAcceptNewConnection(NSXPCListener listener, NSXPCConnection newConnection);
    }

    // @interface NSXPCInterface : NSObject
    [iOS(6, 0)]
    [BaseType(typeof(NSObject))]
    interface NSXPCInterface
    {
        // +(NSXPCInterface * _Nonnull)interfaceWithProtocol:(Protocol * _Nonnull)protocol;
        [Static]
        [Export("interfaceWithProtocol:")]
        NSXPCInterface InterfaceWithProtocol(Protocol protocol);

        // @property (assign) Protocol * _Nonnull protocol;
        [Export("protocol", ArgumentSemantic.Assign)]
        Protocol Protocol { get; set; }

        // -(void)setClasses:(NSSet<Class> * _Nonnull)classes forSelector:(SEL _Nonnull)sel argumentIndex:(NSUInteger)arg ofReply:(BOOL)ofReply;
        [Export("setClasses:forSelector:argumentIndex:ofReply:")]
        void SetClasses(NSSet<Class> classes, Selector sel, nuint arg, bool ofReply);

        // -(NSSet<Class> * _Nonnull)classesForSelector:(SEL _Nonnull)sel argumentIndex:(NSUInteger)arg ofReply:(BOOL)ofReply;
        [Export("classesForSelector:argumentIndex:ofReply:")]
        NSSet<Class> ClassesForSelector(Selector sel, nuint arg, bool ofReply);

        // -(void)setInterface:(NSXPCInterface * _Nonnull)ifc forSelector:(SEL _Nonnull)sel argumentIndex:(NSUInteger)arg ofReply:(BOOL)ofReply;
        [Export("setInterface:forSelector:argumentIndex:ofReply:")]
        void SetInterface(NSXPCInterface ifc, Selector sel, nuint arg, bool ofReply);

        // -(NSXPCInterface * _Nullable)interfaceForSelector:(SEL _Nonnull)sel argumentIndex:(NSUInteger)arg ofReply:(BOOL)ofReply;
        [Export("interfaceForSelector:argumentIndex:ofReply:")]
        [return: NullAllowed]
        NSXPCInterface InterfaceForSelector(Selector sel, nuint arg, bool ofReply);
    }

    // @interface NSXPCListenerEndpoint : NSObject <NSSecureCoding>
    [iOS(6, 0)]
    [BaseType(typeof(NSObject))]
    interface NSXPCListenerEndpoint : INSSecureCoding
    {
    }

    // @interface NSByteCountFormatter : NSFormatter
    [iOS(6, 0)]
    [BaseType(typeof(NSFormatter))]
    interface NSByteCountFormatter
    {
        // +(NSString * _Nonnull)stringFromByteCount:(long long)byteCount countStyle:(NSByteCountFormatterCountStyle)countStyle;
        [Static]
        [Export("stringFromByteCount:countStyle:")]
        string StringFromByteCount(long byteCount, NSByteCountFormatterCountStyle countStyle);

        // -(NSString * _Nonnull)stringFromByteCount:(long long)byteCount;
        [Export("stringFromByteCount:")]
        string StringFromByteCount(long byteCount);

        // @property NSByteCountFormatterUnits allowedUnits;
        [Export("allowedUnits", ArgumentSemantic.Assign)]
        NSByteCountFormatterUnits AllowedUnits { get; set; }

        // @property NSByteCountFormatterCountStyle countStyle;
        [Export("countStyle", ArgumentSemantic.Assign)]
        NSByteCountFormatterCountStyle CountStyle { get; set; }

        // @property BOOL allowsNonnumericFormatting;
        [Export("allowsNonnumericFormatting")]
        bool AllowsNonnumericFormatting { get; set; }

        // @property BOOL includesUnit;
        [Export("includesUnit")]
        bool IncludesUnit { get; set; }

        // @property BOOL includesCount;
        [Export("includesCount")]
        bool IncludesCount { get; set; }

        // @property BOOL includesActualByteCount;
        [Export("includesActualByteCount")]
        bool IncludesActualByteCount { get; set; }

        // @property (getter = isAdaptive) BOOL adaptive;
        [Export("adaptive")]
        bool Adaptive { [Bind("isAdaptive")] get; set; }

        // @property BOOL zeroPadsFractionDigits;
        [Export("zeroPadsFractionDigits")]
        bool ZeroPadsFractionDigits { get; set; }

        // @property NSFormattingContext formattingContext __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("formattingContext", ArgumentSemantic.Assign)]
        NSFormattingContext FormattingContext { get; set; }
    }

    // audit-objc-generics: @interface NSCache<KeyType, ObjectType> : NSObject
    [iOS(4, 0)]
    [BaseType(typeof(NSObject))]
    interface NSCache
    {
        // @property (copy) NSString * _Nonnull name;
        [Export("name")]
        string Name { get; set; }

        [Wrap("WeakDelegate")]
        [NullAllowed]
        NSCacheDelegate Delegate { get; set; }

        // @property (assign) id<NSCacheDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // -(ObjectType _Nullable)objectForKey:(KeyType _Nonnull)key;
        [Export("objectForKey:")]
        [return: NullAllowed]
        NSObject ObjectForKey(NSObject key);

        // -(void)setObject:(ObjectType _Nonnull)obj forKey:(KeyType _Nonnull)key;
        [Export("setObject:forKey:")]
        void SetObject(NSObject obj, NSObject key);

        // -(void)setObject:(ObjectType _Nonnull)obj forKey:(KeyType _Nonnull)key cost:(NSUInteger)g;
        [Export("setObject:forKey:cost:")]
        void SetObject(NSObject obj, NSObject key, nuint g);

        // -(void)removeObjectForKey:(KeyType _Nonnull)key;
        [Export("removeObjectForKey:")]
        void RemoveObjectForKey(NSObject key);

        // -(void)removeAllObjects;
        [Export("removeAllObjects")]
        void RemoveAllObjects();

        // @property NSUInteger totalCostLimit;
        [Export("totalCostLimit")]
        nuint TotalCostLimit { get; set; }

        // @property NSUInteger countLimit;
        [Export("countLimit")]
        nuint CountLimit { get; set; }

        // @property BOOL evictsObjectsWithDiscardedContent;
        [Export("evictsObjectsWithDiscardedContent")]
        bool EvictsObjectsWithDiscardedContent { get; set; }
    }

    // @protocol NSCacheDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSCacheDelegate
    {
        // @optional -(void)cache:(NSCache * _Nonnull)cache willEvictObject:(id _Nonnull)obj;
        [Export("cache:willEvictObject:")]
        void WillEvictObject(NSCache cache, NSObject obj);
    }

    // @interface NSPredicate : NSObject <NSSecureCoding, NSCopying>
    [iOS(3, 0)]
    [BaseType(typeof(NSObject))]
    interface NSPredicate : INSSecureCoding, INSCopying
    {
        // +(NSPredicate * _Nonnull)predicateWithFormat:(NSString * _Nonnull)predicateFormat argumentArray:(NSArray * _Nullable)arguments;
        [Static]
        [Export("predicateWithFormat:argumentArray:")]
        [Verify(StronglyTypedNSArray)]
        NSPredicate PredicateWithFormat(string predicateFormat, [NullAllowed] NSObject[] arguments);

        // +(NSPredicate * _Nonnull)predicateWithFormat:(NSString * _Nonnull)predicateFormat, ...;
        [Static, Internal]
        [Export("predicateWithFormat:", IsVariadic = true)]
        NSPredicate PredicateWithFormat(string predicateFormat, IntPtr varArgs);

        // +(NSPredicate * _Nonnull)predicateWithFormat:(NSString * _Nonnull)predicateFormat arguments:(va_list)argList;
        [Static]
        [Export("predicateWithFormat:arguments:")]
        unsafe NSPredicate PredicateWithFormat(string predicateFormat, sbyte* argList);

        // +(NSPredicate * _Nullable)predicateFromMetadataQueryString:(NSString * _Nonnull)queryString __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Static]
        [Export("predicateFromMetadataQueryString:")]
        [return: NullAllowed]
        NSPredicate PredicateFromMetadataQueryString(string queryString);

        // +(NSPredicate * _Nonnull)predicateWithValue:(BOOL)value;
        [Static]
        [Export("predicateWithValue:")]
        NSPredicate PredicateWithValue(bool value);

        // +(NSPredicate * _Nonnull)predicateWithBlock:(BOOL (^ _Nonnull)(id _Nullable, NSDictionary<NSString *,id> * _Nullable))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("predicateWithBlock:")]
        NSPredicate PredicateWithBlock(Func<NSObject, NSDictionary<NSString, NSObject>, bool> block);

        // @property (readonly, copy) NSString * _Nonnull predicateFormat;
        [Export("predicateFormat")]
        string PredicateFormat { get; }

        // -(instancetype _Nonnull)predicateWithSubstitutionVariables:(NSDictionary<NSString *,id> * _Nonnull)variables;
        [Export("predicateWithSubstitutionVariables:")]
        NSPredicate PredicateWithSubstitutionVariables(NSDictionary<NSString, NSObject> variables);

        // -(BOOL)evaluateWithObject:(id _Nullable)object;
        [Export("evaluateWithObject:")]
        bool EvaluateWithObject([NullAllowed] NSObject @object);

        // -(BOOL)evaluateWithObject:(id _Nullable)object substitutionVariables:(NSDictionary<NSString *,id> * _Nullable)bindings __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Export("evaluateWithObject:substitutionVariables:")]
        bool EvaluateWithObject([NullAllowed] NSObject @object, [NullAllowed] NSDictionary<NSString, NSObject> bindings);

        // -(void)allowEvaluation __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("allowEvaluation")]
        void AllowEvaluation();
    }

    // @interface NSPredicateSupport (NSArray)
    [Category]
    [BaseType(typeof(NSArray))]
    interface NSArray_NSPredicateSupport
    {
        // -(NSArray<ObjectType> * _Nonnull)filteredArrayUsingPredicate:(NSPredicate * _Nonnull)predicate;
        [Export("filteredArrayUsingPredicate:")]
        NSObject[] FilteredArrayUsingPredicate(NSPredicate predicate);
    }

    // @interface NSPredicateSupport (NSMutableArray)
    [Category]
    [BaseType(typeof(NSMutableArray))]
    interface NSMutableArray_NSPredicateSupport
    {
        // -(void)filterUsingPredicate:(NSPredicate * _Nonnull)predicate;
        [Export("filterUsingPredicate:")]
        void FilterUsingPredicate(NSPredicate predicate);
    }

    // @interface NSPredicateSupport (NSSet)
    [Category]
    [BaseType(typeof(NSSet))]
    interface NSSet_NSPredicateSupport
    {
        // -(NSSet<ObjectType> * _Nonnull)filteredSetUsingPredicate:(NSPredicate * _Nonnull)predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Export("filteredSetUsingPredicate:")]
        NSSet<NSObject> FilteredSetUsingPredicate(NSPredicate predicate);
    }

    // @interface NSPredicateSupport (NSMutableSet)
    [Category]
    [BaseType(typeof(NSMutableSet))]
    interface NSMutableSet_NSPredicateSupport
    {
        // -(void)filterUsingPredicate:(NSPredicate * _Nonnull)predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Export("filterUsingPredicate:")]
        void FilterUsingPredicate(NSPredicate predicate);
    }

    // @interface NSPredicateSupport (NSOrderedSet)
    [Category]
    [BaseType(typeof(NSOrderedSet))]
    interface NSOrderedSet_NSPredicateSupport
    {
        // -(NSOrderedSet<ObjectType> * _Nonnull)filteredOrderedSetUsingPredicate:(NSPredicate * _Nonnull)p __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("filteredOrderedSetUsingPredicate:")]
        NSOrderedSet<NSObject> FilteredOrderedSetUsingPredicate(NSPredicate p);
    }

    // @interface NSPredicateSupport (NSMutableOrderedSet)
    [Category]
    [BaseType(typeof(NSMutableOrderedSet))]
    interface NSMutableOrderedSet_NSPredicateSupport
    {
        // -(void)filterUsingPredicate:(NSPredicate * _Nonnull)p __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("filterUsingPredicate:")]
        void FilterUsingPredicate(NSPredicate p);
    }

    // @interface NSComparisonPredicate : NSPredicate
    [iOS(3, 0)]
    [BaseType(typeof(NSPredicate))]
    interface NSComparisonPredicate
    {
        // +(NSComparisonPredicate * _Nonnull)predicateWithLeftExpression:(NSExpression * _Nonnull)lhs rightExpression:(NSExpression * _Nonnull)rhs modifier:(NSComparisonPredicateModifier)modifier type:(NSPredicateOperatorType)type options:(NSComparisonPredicateOptions)options;
        [Static]
        [Export("predicateWithLeftExpression:rightExpression:modifier:type:options:")]
        NSComparisonPredicate PredicateWithLeftExpression(NSExpression lhs, NSExpression rhs, NSComparisonPredicateModifier modifier, NSPredicateOperatorType type, NSComparisonPredicateOptions options);

        // +(NSComparisonPredicate * _Nonnull)predicateWithLeftExpression:(NSExpression * _Nonnull)lhs rightExpression:(NSExpression * _Nonnull)rhs customSelector:(SEL _Nonnull)selector;
        [Static]
        [Export("predicateWithLeftExpression:rightExpression:customSelector:")]
        NSComparisonPredicate PredicateWithLeftExpression(NSExpression lhs, NSExpression rhs, Selector selector);

        // -(instancetype _Nonnull)initWithLeftExpression:(NSExpression * _Nonnull)lhs rightExpression:(NSExpression * _Nonnull)rhs modifier:(NSComparisonPredicateModifier)modifier type:(NSPredicateOperatorType)type options:(NSComparisonPredicateOptions)options __attribute__((objc_designated_initializer));
        [Export("initWithLeftExpression:rightExpression:modifier:type:options:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSExpression lhs, NSExpression rhs, NSComparisonPredicateModifier modifier, NSPredicateOperatorType type, NSComparisonPredicateOptions options);

        // -(instancetype _Nonnull)initWithLeftExpression:(NSExpression * _Nonnull)lhs rightExpression:(NSExpression * _Nonnull)rhs customSelector:(SEL _Nonnull)selector __attribute__((objc_designated_initializer));
        [Export("initWithLeftExpression:rightExpression:customSelector:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSExpression lhs, NSExpression rhs, Selector selector);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder coder);

        // @property (readonly) NSPredicateOperatorType predicateOperatorType;
        [Export("predicateOperatorType")]
        NSPredicateOperatorType PredicateOperatorType { get; }

        // @property (readonly) NSComparisonPredicateModifier comparisonPredicateModifier;
        [Export("comparisonPredicateModifier")]
        NSComparisonPredicateModifier ComparisonPredicateModifier { get; }

        // @property (readonly, retain) NSExpression * _Nonnull leftExpression;
        [Export("leftExpression", ArgumentSemantic.Retain)]
        NSExpression LeftExpression { get; }

        // @property (readonly, retain) NSExpression * _Nonnull rightExpression;
        [Export("rightExpression", ArgumentSemantic.Retain)]
        NSExpression RightExpression { get; }

        // @property (readonly) SEL _Nullable customSelector;
        [NullAllowed, Export("customSelector")]
        Selector CustomSelector { get; }

        // @property (readonly) NSComparisonPredicateOptions options;
        [Export("options")]
        NSComparisonPredicateOptions Options { get; }
    }

    // @interface NSCompoundPredicate : NSPredicate
    [iOS(3, 0)]
    [BaseType(typeof(NSPredicate))]
    interface NSCompoundPredicate
    {
        // -(instancetype _Nonnull)initWithType:(NSCompoundPredicateType)type subpredicates:(NSArray<NSPredicate *> * _Nonnull)subpredicates __attribute__((objc_designated_initializer));
        [Export("initWithType:subpredicates:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCompoundPredicateType type, NSPredicate[] subpredicates);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder coder);

        // @property (readonly) NSCompoundPredicateType compoundPredicateType;
        [Export("compoundPredicateType")]
        NSCompoundPredicateType CompoundPredicateType { get; }

        // @property (readonly, copy) NSArray * _Nonnull subpredicates;
        [Export("subpredicates", ArgumentSemantic.Copy)]
        [Verify(StronglyTypedNSArray)]
        NSObject[] Subpredicates { get; }

        // +(NSCompoundPredicate * _Nonnull)andPredicateWithSubpredicates:(NSArray<NSPredicate *> * _Nonnull)subpredicates;
        [Static]
        [Export("andPredicateWithSubpredicates:")]
        NSCompoundPredicate AndPredicateWithSubpredicates(NSPredicate[] subpredicates);

        // +(NSCompoundPredicate * _Nonnull)orPredicateWithSubpredicates:(NSArray<NSPredicate *> * _Nonnull)subpredicates;
        [Static]
        [Export("orPredicateWithSubpredicates:")]
        NSCompoundPredicate OrPredicateWithSubpredicates(NSPredicate[] subpredicates);

        // +(NSCompoundPredicate * _Nonnull)notPredicateWithSubpredicate:(NSPredicate * _Nonnull)predicate;
        [Static]
        [Export("notPredicateWithSubpredicate:")]
        NSCompoundPredicate NotPredicateWithSubpredicate(NSPredicate predicate);
    }

    // @interface NSDateComponentsFormatter : NSFormatter
    [iOS(8, 0)]
    [BaseType(typeof(NSFormatter))]
    interface NSDateComponentsFormatter
    {
        // -(NSString * _Nullable)stringForObjectValue:(id _Nullable)obj;
        [Export("stringForObjectValue:")]
        [return: NullAllowed]
        string StringForObjectValue([NullAllowed] NSObject obj);

        // -(NSString * _Nullable)stringFromDateComponents:(NSDateComponents * _Nonnull)components;
        [Export("stringFromDateComponents:")]
        [return: NullAllowed]
        string StringFromDateComponents(NSDateComponents components);

        // -(NSString * _Nullable)stringFromDate:(NSDate * _Nonnull)startDate toDate:(NSDate * _Nonnull)endDate;
        [Export("stringFromDate:toDate:")]
        [return: NullAllowed]
        string StringFromDate(NSDate startDate, NSDate endDate);

        // -(NSString * _Nullable)stringFromTimeInterval:(NSTimeInterval)ti;
        [Export("stringFromTimeInterval:")]
        [return: NullAllowed]
        string StringFromTimeInterval(double ti);

        // +(NSString * _Nullable)localizedStringFromDateComponents:(NSDateComponents * _Nonnull)components unitsStyle:(NSDateComponentsFormatterUnitsStyle)unitsStyle;
        [Static]
        [Export("localizedStringFromDateComponents:unitsStyle:")]
        [return: NullAllowed]
        string LocalizedStringFromDateComponents(NSDateComponents components, NSDateComponentsFormatterUnitsStyle unitsStyle);

        // @property NSDateComponentsFormatterUnitsStyle unitsStyle;
        [Export("unitsStyle", ArgumentSemantic.Assign)]
        NSDateComponentsFormatterUnitsStyle UnitsStyle { get; set; }

        // @property NSCalendarUnit allowedUnits;
        [Export("allowedUnits", ArgumentSemantic.Assign)]
        NSCalendarUnit AllowedUnits { get; set; }

        // @property NSDateComponentsFormatterZeroFormattingBehavior zeroFormattingBehavior;
        [Export("zeroFormattingBehavior", ArgumentSemantic.Assign)]
        NSDateComponentsFormatterZeroFormattingBehavior ZeroFormattingBehavior { get; set; }

        // @property (copy) NSCalendar * _Nullable calendar;
        [NullAllowed, Export("calendar", ArgumentSemantic.Copy)]
        NSCalendar Calendar { get; set; }

        // @property (copy) NSDate * _Nullable referenceDate __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [NullAllowed, Export("referenceDate", ArgumentSemantic.Copy)]
        NSDate ReferenceDate { get; set; }

        // @property BOOL allowsFractionalUnits;
        [Export("allowsFractionalUnits")]
        bool AllowsFractionalUnits { get; set; }

        // @property NSInteger maximumUnitCount;
        [Export("maximumUnitCount")]
        nint MaximumUnitCount { get; set; }

        // @property BOOL collapsesLargestUnit;
        [Export("collapsesLargestUnit")]
        bool CollapsesLargestUnit { get; set; }

        // @property BOOL includesApproximationPhrase;
        [Export("includesApproximationPhrase")]
        bool IncludesApproximationPhrase { get; set; }

        // @property BOOL includesTimeRemainingPhrase;
        [Export("includesTimeRemainingPhrase")]
        bool IncludesTimeRemainingPhrase { get; set; }

        // @property NSFormattingContext formattingContext;
        [Export("formattingContext", ArgumentSemantic.Assign)]
        NSFormattingContext FormattingContext { get; set; }

        // -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
        [Export("getObjectValue:forString:errorDescription:")]
        bool GetObjectValue([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
    }

    // @interface NSExpression : NSObject <NSSecureCoding, NSCopying>
    [iOS(3, 0)]
    [BaseType(typeof(NSObject))]
    interface NSExpression : INSSecureCoding, INSCopying
    {
        // +(NSExpression * _Nonnull)expressionWithFormat:(NSString * _Nonnull)expressionFormat argumentArray:(NSArray * _Nonnull)arguments __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("expressionWithFormat:argumentArray:")]
        [Verify(StronglyTypedNSArray)]
        NSExpression ExpressionWithFormat(string expressionFormat, NSObject[] arguments);

        // +(NSExpression * _Nonnull)expressionWithFormat:(NSString * _Nonnull)expressionFormat, ... __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static, Internal]
        [Export("expressionWithFormat:", IsVariadic = true)]
        NSExpression ExpressionWithFormat(string expressionFormat, IntPtr varArgs);

        // +(NSExpression * _Nonnull)expressionWithFormat:(NSString * _Nonnull)expressionFormat arguments:(va_list)argList __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("expressionWithFormat:arguments:")]
        unsafe NSExpression ExpressionWithFormat(string expressionFormat, sbyte* argList);

        // +(NSExpression * _Nonnull)expressionForConstantValue:(id _Nullable)obj;
        [Static]
        [Export("expressionForConstantValue:")]
        NSExpression ExpressionForConstantValue([NullAllowed] NSObject obj);

        // +(NSExpression * _Nonnull)expressionForEvaluatedObject;
        [Static]
        [Export("expressionForEvaluatedObject")]
        [Verify(MethodToProperty)]
        NSExpression ExpressionForEvaluatedObject { get; }

        // +(NSExpression * _Nonnull)expressionForVariable:(NSString * _Nonnull)string;
        [Static]
        [Export("expressionForVariable:")]
        NSExpression ExpressionForVariable(string @string);

        // +(NSExpression * _Nonnull)expressionForKeyPath:(NSString * _Nonnull)keyPath;
        [Static]
        [Export("expressionForKeyPath:")]
        NSExpression ExpressionForKeyPath(string keyPath);

        // +(NSExpression * _Nonnull)expressionForFunction:(NSString * _Nonnull)name arguments:(NSArray * _Nonnull)parameters;
        [Static]
        [Export("expressionForFunction:arguments:")]
        [Verify(StronglyTypedNSArray)]
        NSExpression ExpressionForFunction(string name, NSObject[] parameters);

        // +(NSExpression * _Nonnull)expressionForAggregate:(NSArray<NSExpression *> * _Nonnull)subexpressions __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Static]
        [Export("expressionForAggregate:")]
        NSExpression ExpressionForAggregate(NSExpression[] subexpressions);

        // +(NSExpression * _Nonnull)expressionForUnionSet:(NSExpression * _Nonnull)left with:(NSExpression * _Nonnull)right __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Static]
        [Export("expressionForUnionSet:with:")]
        NSExpression ExpressionForUnionSet(NSExpression left, NSExpression right);

        // +(NSExpression * _Nonnull)expressionForIntersectSet:(NSExpression * _Nonnull)left with:(NSExpression * _Nonnull)right __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Static]
        [Export("expressionForIntersectSet:with:")]
        NSExpression ExpressionForIntersectSet(NSExpression left, NSExpression right);

        // +(NSExpression * _Nonnull)expressionForMinusSet:(NSExpression * _Nonnull)left with:(NSExpression * _Nonnull)right __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Static]
        [Export("expressionForMinusSet:with:")]
        NSExpression ExpressionForMinusSet(NSExpression left, NSExpression right);

        // +(NSExpression * _Nonnull)expressionForSubquery:(NSExpression * _Nonnull)expression usingIteratorVariable:(NSString * _Nonnull)variable predicate:(NSPredicate * _Nonnull)predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Static]
        [Export("expressionForSubquery:usingIteratorVariable:predicate:")]
        NSExpression ExpressionForSubquery(NSExpression expression, string variable, NSPredicate predicate);

        // +(NSExpression * _Nonnull)expressionForFunction:(NSExpression * _Nonnull)target selectorName:(NSString * _Nonnull)name arguments:(NSArray * _Nullable)parameters __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Static]
        [Export("expressionForFunction:selectorName:arguments:")]
        [Verify(StronglyTypedNSArray)]
        NSExpression ExpressionForFunction(NSExpression target, string name, [NullAllowed] NSObject[] parameters);

        // +(NSExpression * _Nonnull)expressionForAnyKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Static]
        [Export("expressionForAnyKey")]
        [Verify(MethodToProperty)]
        NSExpression ExpressionForAnyKey { get; }

        // +(NSExpression * _Nonnull)expressionForBlock:(id  _Nonnull (^ _Nonnull)(id _Nullable, NSArray<NSExpression *> * _Nonnull, NSMutableDictionary * _Nullable))block arguments:(NSArray<NSExpression *> * _Nullable)arguments __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Static]
        [Export("expressionForBlock:arguments:")]
        NSExpression ExpressionForBlock(Func<NSObject, NSArray<NSExpression>, NSMutableDictionary, NSObject> block, [NullAllowed] NSExpression[] arguments);

        // +(NSExpression * _Nonnull)expressionForConditional:(NSPredicate * _Nonnull)predicate trueExpression:(NSExpression * _Nonnull)trueExpression falseExpression:(NSExpression * _Nonnull)falseExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Static]
        [Export("expressionForConditional:trueExpression:falseExpression:")]
        NSExpression ExpressionForConditional(NSPredicate predicate, NSExpression trueExpression, NSExpression falseExpression);

        // -(instancetype _Nonnull)initWithExpressionType:(NSExpressionType)type __attribute__((objc_designated_initializer));
        [Export("initWithExpressionType:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSExpressionType type);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder coder);

        // @property (readonly) NSExpressionType expressionType;
        [Export("expressionType")]
        NSExpressionType ExpressionType { get; }

        // @property (readonly, retain) id _Nullable constantValue;
        [NullAllowed, Export("constantValue", ArgumentSemantic.Retain)]
        NSObject ConstantValue { get; }

        // @property (readonly, copy) NSString * _Nonnull keyPath;
        [Export("keyPath")]
        string KeyPath { get; }

        // @property (readonly, copy) NSString * _Nonnull function;
        [Export("function")]
        string Function { get; }

        // @property (readonly, copy) NSString * _Nonnull variable;
        [Export("variable")]
        string Variable { get; }

        // @property (readonly, copy) NSExpression * _Nonnull operand;
        [Export("operand", ArgumentSemantic.Copy)]
        NSExpression Operand { get; }

        // @property (readonly, copy) NSArray<NSExpression *> * _Nullable arguments;
        [NullAllowed, Export("arguments", ArgumentSemantic.Copy)]
        NSExpression[] Arguments { get; }

        // @property (readonly, retain) id _Nonnull collection __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Export("collection", ArgumentSemantic.Retain)]
        NSObject Collection { get; }

        // @property (readonly, copy) NSPredicate * _Nonnull predicate __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Export("predicate", ArgumentSemantic.Copy)]
        NSPredicate Predicate { get; }

        // @property (readonly, copy) NSExpression * _Nonnull leftExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Export("leftExpression", ArgumentSemantic.Copy)]
        NSExpression LeftExpression { get; }

        // @property (readonly, copy) NSExpression * _Nonnull rightExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 0)]
        [Export("rightExpression", ArgumentSemantic.Copy)]
        NSExpression RightExpression { get; }

        // @property (readonly, copy) NSExpression * _Nonnull trueExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("trueExpression", ArgumentSemantic.Copy)]
        NSExpression TrueExpression { get; }

        // @property (readonly, copy) NSExpression * _Nonnull falseExpression __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("falseExpression", ArgumentSemantic.Copy)]
        NSExpression FalseExpression { get; }

        // @property (readonly, copy) id  _Nonnull (^ _Nonnull)(id _Nullable, NSArray<NSExpression *> * _Nonnull, NSMutableDictionary * _Nullable) expressionBlock __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("expressionBlock", ArgumentSemantic.Copy)]
        Func<NSObject, NSArray<NSExpression>, NSMutableDictionary, NSObject> ExpressionBlock { get; }

        // -(id _Nullable)expressionValueWithObject:(id _Nullable)object context:(NSMutableDictionary * _Nullable)context;
        [Export("expressionValueWithObject:context:")]
        [return: NullAllowed]
        NSObject ExpressionValueWithObject([NullAllowed] NSObject @object, [NullAllowed] NSMutableDictionary context);

        // -(void)allowEvaluation __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("allowEvaluation")]
        void AllowEvaluation();
    }

    // @interface NSExtensionContext : NSObject
    [iOS(8, 0)]
    [BaseType(typeof(NSObject))]
    interface NSExtensionContext
    {
        // @property (readonly, copy, nonatomic) NSArray * _Nonnull inputItems;
        [Export("inputItems", ArgumentSemantic.Copy)]
        [Verify(StronglyTypedNSArray)]
        NSObject[] InputItems { get; }

        // -(void)completeRequestReturningItems:(NSArray * _Nullable)items completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
        [Export("completeRequestReturningItems:completionHandler:")]
        [Verify(StronglyTypedNSArray)]
        void CompleteRequestReturningItems([NullAllowed] NSObject[] items, [NullAllowed] Action<bool> completionHandler);

        // -(void)cancelRequestWithError:(NSError * _Nonnull)error;
        [Export("cancelRequestWithError:")]
        void CancelRequestWithError(NSError error);

        // -(void)openURL:(NSURL * _Nonnull)URL completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
        [Export("openURL:completionHandler:")]
        void OpenURL(NSUrl URL, [NullAllowed] Action<bool> completionHandler);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Null_unspecified NSExtensionItemsAndErrorsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSExtensionItemsAndErrorsKey", "__Internal")]
        NSString NSExtensionItemsAndErrorsKey { get; }

        // extern NSString *const _Null_unspecified NSExtensionHostWillEnterForegroundNotification __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.2)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(8, 2)]
        [Field("NSExtensionHostWillEnterForegroundNotification", "__Internal")]
        NSString NSExtensionHostWillEnterForegroundNotification { get; }

        // extern NSString *const _Null_unspecified NSExtensionHostDidEnterBackgroundNotification __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.2)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(8, 2)]
        [Field("NSExtensionHostDidEnterBackgroundNotification", "__Internal")]
        NSString NSExtensionHostDidEnterBackgroundNotification { get; }

        // extern NSString *const _Null_unspecified NSExtensionHostWillResignActiveNotification __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.2)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(8, 2)]
        [Field("NSExtensionHostWillResignActiveNotification", "__Internal")]
        NSString NSExtensionHostWillResignActiveNotification { get; }

        // extern NSString *const _Null_unspecified NSExtensionHostDidBecomeActiveNotification __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.2)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(8, 2)]
        [Field("NSExtensionHostDidBecomeActiveNotification", "__Internal")]
        NSString NSExtensionHostDidBecomeActiveNotification { get; }
    }

    // @interface NSExtensionItem : NSObject <NSCopying, NSSecureCoding>
    [iOS(8, 0)]
    [BaseType(typeof(NSObject))]
    interface NSExtensionItem : INSCopying, INSSecureCoding
    {
        // @property (copy, nonatomic) NSAttributedString * _Nullable attributedTitle;
        [NullAllowed, Export("attributedTitle", ArgumentSemantic.Copy)]
        NSAttributedString AttributedTitle { get; set; }

        // @property (copy, nonatomic) NSAttributedString * _Nullable attributedContentText;
        [NullAllowed, Export("attributedContentText", ArgumentSemantic.Copy)]
        NSAttributedString AttributedContentText { get; set; }

        // @property (copy, nonatomic) NSArray<NSItemProvider *> * _Nullable attachments;
        [NullAllowed, Export("attachments", ArgumentSemantic.Copy)]
        NSItemProvider[] Attachments { get; set; }

        // @property (copy, nonatomic) NSDictionary * _Nullable userInfo;
        [NullAllowed, Export("userInfo", ArgumentSemantic.Copy)]
        NSDictionary UserInfo { get; set; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Null_unspecified NSExtensionItemAttributedTitleKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSExtensionItemAttributedTitleKey", "__Internal")]
        NSString NSExtensionItemAttributedTitleKey { get; }

        // extern NSString *const _Null_unspecified NSExtensionItemAttributedContentTextKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSExtensionItemAttributedContentTextKey", "__Internal")]
        NSString NSExtensionItemAttributedContentTextKey { get; }

        // extern NSString *const _Null_unspecified NSExtensionItemAttachmentsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSExtensionItemAttachmentsKey", "__Internal")]
        NSString NSExtensionItemAttachmentsKey { get; }
    }

    // @protocol NSExtensionRequestHandling <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSExtensionRequestHandling
    {
        // @required -(void)beginRequestWithExtensionContext:(NSExtensionContext * _Nonnull)context;
        [Abstract]
        [Export("beginRequestWithExtensionContext:")]
        void BeginRequestWithExtensionContext(NSExtensionContext context);
    }

    // @interface NSFileAccessIntent : NSObject
    [iOS(8, 0)]
    [BaseType(typeof(NSObject))]
    interface NSFileAccessIntent
    {
        // +(instancetype _Nonnull)readingIntentWithURL:(NSURL * _Nonnull)url options:(NSFileCoordinatorReadingOptions)options;
        [Static]
        [Export("readingIntentWithURL:options:")]
        NSFileAccessIntent ReadingIntentWithURL(NSUrl url, NSFileCoordinatorReadingOptions options);

        // +(instancetype _Nonnull)writingIntentWithURL:(NSURL * _Nonnull)url options:(NSFileCoordinatorWritingOptions)options;
        [Static]
        [Export("writingIntentWithURL:options:")]
        NSFileAccessIntent WritingIntentWithURL(NSUrl url, NSFileCoordinatorWritingOptions options);

        // @property (readonly, copy) NSURL * _Nonnull URL;
        [Export("URL", ArgumentSemantic.Copy)]
        NSUrl URL { get; }
    }

    // @interface NSFileCoordinator : NSObject
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface NSFileCoordinator
    {
        // +(void)addFilePresenter:(id<NSFilePresenter> _Nonnull)filePresenter;
        [Static]
        [Export("addFilePresenter:")]
        void AddFilePresenter(NSFilePresenter filePresenter);

        // +(void)removeFilePresenter:(id<NSFilePresenter> _Nonnull)filePresenter;
        [Static]
        [Export("removeFilePresenter:")]
        void RemoveFilePresenter(NSFilePresenter filePresenter);

        // @property (readonly, copy, class) NSArray<id<NSFilePresenter>> * _Nonnull filePresenters;
        [Static]
        [Export("filePresenters", ArgumentSemantic.Copy)]
        NSFilePresenter[] FilePresenters { get; }

        // -(instancetype _Nonnull)initWithFilePresenter:(id<NSFilePresenter> _Nullable)filePresenterOrNil __attribute__((objc_designated_initializer));
        [Export("initWithFilePresenter:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] NSFilePresenter filePresenterOrNil);

        // @property (copy) NSString * _Nonnull purposeIdentifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("purposeIdentifier")]
        string PurposeIdentifier { get; set; }

        // -(void)coordinateAccessWithIntents:(NSArray<NSFileAccessIntent *> * _Nonnull)intents queue:(NSOperationQueue * _Nonnull)queue byAccessor:(void (^ _Nonnull)(NSError * _Nullable))accessor __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("coordinateAccessWithIntents:queue:byAccessor:")]
        void CoordinateAccessWithIntents(NSFileAccessIntent[] intents, NSOperationQueue queue, Action<NSError> accessor);

        // -(void)coordinateReadingItemAtURL:(NSURL * _Nonnull)url options:(NSFileCoordinatorReadingOptions)options error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(NSURL * _Nonnull))reader;
        [Export("coordinateReadingItemAtURL:options:error:byAccessor:")]
        void CoordinateReadingItemAtURL(NSUrl url, NSFileCoordinatorReadingOptions options, [NullAllowed] out NSError outError, Action<NSURL> reader);

        // -(void)coordinateWritingItemAtURL:(NSURL * _Nonnull)url options:(NSFileCoordinatorWritingOptions)options error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(NSURL * _Nonnull))writer;
        [Export("coordinateWritingItemAtURL:options:error:byAccessor:")]
        void CoordinateWritingItemAtURL(NSUrl url, NSFileCoordinatorWritingOptions options, [NullAllowed] out NSError outError, Action<NSURL> writer);

        // -(void)coordinateReadingItemAtURL:(NSURL * _Nonnull)readingURL options:(NSFileCoordinatorReadingOptions)readingOptions writingItemAtURL:(NSURL * _Nonnull)writingURL options:(NSFileCoordinatorWritingOptions)writingOptions error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(NSURL * _Nonnull, NSURL * _Nonnull))readerWriter;
        [Export("coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:")]
        void CoordinateReadingItemAtURL(NSUrl readingURL, NSFileCoordinatorReadingOptions readingOptions, NSUrl writingURL, NSFileCoordinatorWritingOptions writingOptions, [NullAllowed] out NSError outError, Action<NSURL, NSURL> readerWriter);

        // -(void)coordinateWritingItemAtURL:(NSURL * _Nonnull)url1 options:(NSFileCoordinatorWritingOptions)options1 writingItemAtURL:(NSURL * _Nonnull)url2 options:(NSFileCoordinatorWritingOptions)options2 error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(NSURL * _Nonnull, NSURL * _Nonnull))writer;
        [Export("coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:")]
        void CoordinateWritingItemAtURL(NSUrl url1, NSFileCoordinatorWritingOptions options1, NSUrl url2, NSFileCoordinatorWritingOptions options2, [NullAllowed] out NSError outError, Action<NSURL, NSURL> writer);

        // -(void)prepareForReadingItemsAtURLs:(NSArray<NSURL *> * _Nonnull)readingURLs options:(NSFileCoordinatorReadingOptions)readingOptions writingItemsAtURLs:(NSArray<NSURL *> * _Nonnull)writingURLs options:(NSFileCoordinatorWritingOptions)writingOptions error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(void (^ _Nonnull)(void)))batchAccessor;
        [Export("prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:")]
        void PrepareForReadingItemsAtURLs(NSUrl[] readingURLs, NSFileCoordinatorReadingOptions readingOptions, NSUrl[] writingURLs, NSFileCoordinatorWritingOptions writingOptions, [NullAllowed] out NSError outError, Action<Action> batchAccessor);

        // -(void)itemAtURL:(NSURL * _Nonnull)oldURL willMoveToURL:(NSURL * _Nonnull)newURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("itemAtURL:willMoveToURL:")]
        void ItemAtURL(NSUrl oldURL, NSUrl newURL);

        // -(void)itemAtURL:(NSURL * _Nonnull)oldURL didMoveToURL:(NSURL * _Nonnull)newURL;
        [Export("itemAtURL:didMoveToURL:")]
        void ItemAtURL(NSUrl oldURL, NSUrl newURL);

        // -(void)itemAtURL:(NSURL * _Nonnull)url didChangeUbiquityAttributes:(NSSet<NSURLResourceKey> * _Nonnull)attributes __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [NoWatch, NoTV, Mac(10, 13), iOS(11, 0)]
        [Export("itemAtURL:didChangeUbiquityAttributes:")]
        void ItemAtURL(NSUrl url, NSSet<NSString> attributes);

        // -(void)cancel;
        [Export("cancel")]
        void Cancel();
    }

    // @protocol NSFilePresenter <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSFilePresenter
    {
        // @required @property (readonly, copy) NSURL * _Nullable presentedItemURL;
        [Abstract]
        [NullAllowed, Export("presentedItemURL", ArgumentSemantic.Copy)]
        NSUrl PresentedItemURL { get; }

        // @required @property (readonly, retain) NSOperationQueue * _Nonnull presentedItemOperationQueue;
        [Abstract]
        [Export("presentedItemOperationQueue", ArgumentSemantic.Retain)]
        NSOperationQueue PresentedItemOperationQueue { get; }

        // @optional @property (readonly, copy) NSURL * _Nullable primaryPresentedItemURL __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.8)));
        [NoWatch, NoTV, NoiOS, Mac(10, 8)]
        [NullAllowed, Export("primaryPresentedItemURL", ArgumentSemantic.Copy)]
        NSUrl PrimaryPresentedItemURL { get; }

        // @optional -(void)relinquishPresentedItemToReader:(void (^ _Nonnull)(void (^ _Nullable)(void)))reader;
        [Export("relinquishPresentedItemToReader:")]
        void RelinquishPresentedItemToReader(Action<Action> reader);

        // @optional -(void)relinquishPresentedItemToWriter:(void (^ _Nonnull)(void (^ _Nullable)(void)))writer;
        [Export("relinquishPresentedItemToWriter:")]
        void RelinquishPresentedItemToWriter(Action<Action> writer);

        // @optional -(void)savePresentedItemChangesWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
        [Export("savePresentedItemChangesWithCompletionHandler:")]
        void SavePresentedItemChangesWithCompletionHandler(Action<NSError> completionHandler);

        // @optional -(void)accommodatePresentedItemDeletionWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
        [Export("accommodatePresentedItemDeletionWithCompletionHandler:")]
        void AccommodatePresentedItemDeletionWithCompletionHandler(Action<NSError> completionHandler);

        // @optional -(void)presentedItemDidMoveToURL:(NSURL * _Nonnull)newURL;
        [Export("presentedItemDidMoveToURL:")]
        void PresentedItemDidMoveToURL(NSUrl newURL);

        // @optional -(void)presentedItemDidChange;
        [Export("presentedItemDidChange")]
        void PresentedItemDidChange();

        // @optional -(void)presentedItemDidChangeUbiquityAttributes:(NSSet<NSURLResourceKey> * _Nonnull)attributes __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [NoWatch, NoTV, Mac(10, 13), iOS(11, 0)]
        [Export("presentedItemDidChangeUbiquityAttributes:")]
        void PresentedItemDidChangeUbiquityAttributes(NSSet<NSString> attributes);

        // @optional @property (readonly, strong) NSSet<NSURLResourceKey> * _Nonnull observedPresentedItemUbiquityAttributes __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [NoWatch, NoTV, Mac(10, 13), iOS(11, 0)]
        [Export("observedPresentedItemUbiquityAttributes", ArgumentSemantic.Strong)]
        NSSet<NSString> ObservedPresentedItemUbiquityAttributes { get; }

        // @optional -(void)presentedItemDidGainVersion:(NSFileVersion * _Nonnull)version;
        [Export("presentedItemDidGainVersion:")]
        void PresentedItemDidGainVersion(NSFileVersion version);

        // @optional -(void)presentedItemDidLoseVersion:(NSFileVersion * _Nonnull)version;
        [Export("presentedItemDidLoseVersion:")]
        void PresentedItemDidLoseVersion(NSFileVersion version);

        // @optional -(void)presentedItemDidResolveConflictVersion:(NSFileVersion * _Nonnull)version;
        [Export("presentedItemDidResolveConflictVersion:")]
        void PresentedItemDidResolveConflictVersion(NSFileVersion version);

        // @optional -(void)accommodatePresentedSubitemDeletionAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
        [Export("accommodatePresentedSubitemDeletionAtURL:completionHandler:")]
        void AccommodatePresentedSubitemDeletionAtURL(NSUrl url, Action<NSError> completionHandler);

        // @optional -(void)presentedSubitemDidAppearAtURL:(NSURL * _Nonnull)url;
        [Export("presentedSubitemDidAppearAtURL:")]
        void PresentedSubitemDidAppearAtURL(NSUrl url);

        // @optional -(void)presentedSubitemAtURL:(NSURL * _Nonnull)oldURL didMoveToURL:(NSURL * _Nonnull)newURL;
        [Export("presentedSubitemAtURL:didMoveToURL:")]
        void PresentedSubitemAtURL(NSUrl oldURL, NSUrl newURL);

        // @optional -(void)presentedSubitemDidChangeAtURL:(NSURL * _Nonnull)url;
        [Export("presentedSubitemDidChangeAtURL:")]
        void PresentedSubitemDidChangeAtURL(NSUrl url);

        // @optional -(void)presentedSubitemAtURL:(NSURL * _Nonnull)url didGainVersion:(NSFileVersion * _Nonnull)version;
        [Export("presentedSubitemAtURL:didGainVersion:")]
        void PresentedSubitemAtURL(NSUrl url, NSFileVersion version);

        // @optional -(void)presentedSubitemAtURL:(NSURL * _Nonnull)url didLoseVersion:(NSFileVersion * _Nonnull)version;
        [Export("presentedSubitemAtURL:didLoseVersion:")]
        void PresentedSubitemAtURL(NSUrl url, NSFileVersion version);

        // @optional -(void)presentedSubitemAtURL:(NSURL * _Nonnull)url didResolveConflictVersion:(NSFileVersion * _Nonnull)version;
        [Export("presentedSubitemAtURL:didResolveConflictVersion:")]
        void PresentedSubitemAtURL(NSUrl url, NSFileVersion version);
    }

    // @interface NSFileVersion : NSObject
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface NSFileVersion
    {
        // +(NSFileVersion * _Nullable)currentVersionOfItemAtURL:(NSURL * _Nonnull)url;
        [Static]
        [Export("currentVersionOfItemAtURL:")]
        [return: NullAllowed]
        NSFileVersion CurrentVersionOfItemAtURL(NSUrl url);

        // +(NSArray<NSFileVersion *> * _Nullable)otherVersionsOfItemAtURL:(NSURL * _Nonnull)url;
        [Static]
        [Export("otherVersionsOfItemAtURL:")]
        [return: NullAllowed]
        NSFileVersion[] OtherVersionsOfItemAtURL(NSUrl url);

        // +(NSArray<NSFileVersion *> * _Nullable)unresolvedConflictVersionsOfItemAtURL:(NSURL * _Nonnull)url;
        [Static]
        [Export("unresolvedConflictVersionsOfItemAtURL:")]
        [return: NullAllowed]
        NSFileVersion[] UnresolvedConflictVersionsOfItemAtURL(NSUrl url);

        // +(void)getNonlocalVersionsOfItemAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSArray<NSFileVersion *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Static]
        [Export("getNonlocalVersionsOfItemAtURL:completionHandler:")]
        void GetNonlocalVersionsOfItemAtURL(NSUrl url, Action<NSArray<NSFileVersion>, NSError> completionHandler);

        // +(NSFileVersion * _Nullable)versionOfItemAtURL:(NSURL * _Nonnull)url forPersistentIdentifier:(id _Nonnull)persistentIdentifier;
        [Static]
        [Export("versionOfItemAtURL:forPersistentIdentifier:")]
        [return: NullAllowed]
        NSFileVersion VersionOfItemAtURL(NSUrl url, NSObject persistentIdentifier);

        // +(NSFileVersion * _Nullable)addVersionOfItemAtURL:(NSURL * _Nonnull)url withContentsOfURL:(NSURL * _Nonnull)contentsURL options:(NSFileVersionAddingOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoWatch, NoTV, NoiOS, Mac(10, 7)]
        [Static]
        [Export("addVersionOfItemAtURL:withContentsOfURL:options:error:")]
        [return: NullAllowed]
        NSFileVersion AddVersionOfItemAtURL(NSUrl url, NSUrl contentsURL, NSFileVersionAddingOptions options, [NullAllowed] out NSError outError);

        // +(NSURL * _Nonnull)temporaryDirectoryURLForNewVersionOfItemAtURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoWatch, NoTV, NoiOS, Mac(10, 7)]
        [Static]
        [Export("temporaryDirectoryURLForNewVersionOfItemAtURL:")]
        NSUrl TemporaryDirectoryURLForNewVersionOfItemAtURL(NSUrl url);

        // @property (readonly, copy) NSURL * _Nonnull URL;
        [Export("URL", ArgumentSemantic.Copy)]
        NSUrl URL { get; }

        // @property (readonly, copy) NSString * _Nullable localizedName;
        [NullAllowed, Export("localizedName")]
        string LocalizedName { get; }

        // @property (readonly, copy) NSString * _Nullable localizedNameOfSavingComputer;
        [NullAllowed, Export("localizedNameOfSavingComputer")]
        string LocalizedNameOfSavingComputer { get; }

        // @property (readonly, copy) NSPersonNameComponents * _Nullable originatorNameComponents __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [NullAllowed, Export("originatorNameComponents", ArgumentSemantic.Copy)]
        NSPersonNameComponents OriginatorNameComponents { get; }

        // @property (readonly, copy) NSDate * _Nullable modificationDate;
        [NullAllowed, Export("modificationDate", ArgumentSemantic.Copy)]
        NSDate ModificationDate { get; }

        // @property (readonly, retain) id<NSCoding> _Nonnull persistentIdentifier;
        [Export("persistentIdentifier", ArgumentSemantic.Retain)]
        NSCoding PersistentIdentifier { get; }

        // @property (readonly, getter = isConflict) BOOL conflict;
        [Export("conflict")]
        bool Conflict { [Bind("isConflict")] get; }

        // @property (getter = isResolved) BOOL resolved;
        [Export("resolved")]
        bool Resolved { [Bind("isResolved")] get; set; }

        // @property (getter = isDiscardable) BOOL discardable __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.7)));
        [NoWatch, NoTV, NoiOS, Mac(10, 7)]
        [Export("discardable")]
        bool Discardable { [Bind("isDiscardable")] get; set; }

        // @property (readonly) BOOL hasLocalContents __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("hasLocalContents")]
        bool HasLocalContents { get; }

        // @property (readonly) BOOL hasThumbnail __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("hasThumbnail")]
        bool HasThumbnail { get; }

        // -(NSURL * _Nullable)replaceItemAtURL:(NSURL * _Nonnull)url options:(NSFileVersionReplacingOptions)options error:(NSError * _Nullable * _Nullable)error;
        [Export("replaceItemAtURL:options:error:")]
        [return: NullAllowed]
        NSUrl ReplaceItemAtURL(NSUrl url, NSFileVersionReplacingOptions options, [NullAllowed] out NSError error);

        // -(BOOL)removeAndReturnError:(NSError * _Nullable * _Nullable)outError;
        [Export("removeAndReturnError:")]
        bool RemoveAndReturnError([NullAllowed] out NSError outError);

        // +(BOOL)removeOtherVersionsOfItemAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)outError;
        [Static]
        [Export("removeOtherVersionsOfItemAtURL:error:")]
        bool RemoveOtherVersionsOfItemAtURL(NSUrl url, [NullAllowed] out NSError outError);
    }

    // @interface NSFileWrapper : NSObject <NSSecureCoding>
    [iOS(4, 0)]
    [BaseType(typeof(NSObject))]
    interface NSFileWrapper : INSSecureCoding
    {
        // -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url options:(NSFileWrapperReadingOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6))) __attribute__((objc_designated_initializer));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("initWithURL:options:error:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSUrl url, NSFileWrapperReadingOptions options, [NullAllowed] out NSError outError);

        // -(instancetype _Nonnull)initDirectoryWithFileWrappers:(NSDictionary<NSString *,NSFileWrapper *> * _Nonnull)childrenByPreferredName __attribute__((objc_designated_initializer));
        [Export("initDirectoryWithFileWrappers:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSDictionary<NSString, NSFileWrapper> childrenByPreferredName);

        // -(instancetype _Nonnull)initRegularFileWithContents:(NSData * _Nonnull)contents __attribute__((objc_designated_initializer));
        [Export("initRegularFileWithContents:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSData contents);

        // -(instancetype _Nonnull)initSymbolicLinkWithDestinationURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6))) __attribute__((objc_designated_initializer));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("initSymbolicLinkWithDestinationURL:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSUrl url);

        // -(instancetype _Nullable)initWithSerializedRepresentation:(NSData * _Nonnull)serializeRepresentation __attribute__((objc_designated_initializer));
        [Export("initWithSerializedRepresentation:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSData serializeRepresentation);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)inCoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder inCoder);

        // @property (readonly, getter = isDirectory) BOOL directory;
        [Export("directory")]
        bool Directory { [Bind("isDirectory")] get; }

        // @property (readonly, getter = isRegularFile) BOOL regularFile;
        [Export("regularFile")]
        bool RegularFile { [Bind("isRegularFile")] get; }

        // @property (readonly, getter = isSymbolicLink) BOOL symbolicLink;
        [Export("symbolicLink")]
        bool SymbolicLink { [Bind("isSymbolicLink")] get; }

        // @property (copy) NSString * _Nullable preferredFilename;
        [NullAllowed, Export("preferredFilename")]
        string PreferredFilename { get; set; }

        // @property (copy) NSString * _Nullable filename;
        [NullAllowed, Export("filename")]
        string Filename { get; set; }

        // @property (copy) NSDictionary<NSString *,id> * _Nonnull fileAttributes;
        [Export("fileAttributes", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> FileAttributes { get; set; }

        // -(BOOL)matchesContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("matchesContentsOfURL:")]
        bool MatchesContentsOfURL(NSUrl url);

        // -(BOOL)readFromURL:(NSURL * _Nonnull)url options:(NSFileWrapperReadingOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("readFromURL:options:error:")]
        bool ReadFromURL(NSUrl url, NSFileWrapperReadingOptions options, [NullAllowed] out NSError outError);

        // -(BOOL)writeToURL:(NSURL * _Nonnull)url options:(NSFileWrapperWritingOptions)options originalContentsURL:(NSURL * _Nullable)originalContentsURL error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Export("writeToURL:options:originalContentsURL:error:")]
        bool WriteToURL(NSUrl url, NSFileWrapperWritingOptions options, [NullAllowed] NSUrl originalContentsURL, [NullAllowed] out NSError outError);

        // @property (readonly, copy) NSData * _Nullable serializedRepresentation;
        [NullAllowed, Export("serializedRepresentation", ArgumentSemantic.Copy)]
        NSData SerializedRepresentation { get; }

        // -(NSString * _Nonnull)addFileWrapper:(NSFileWrapper * _Nonnull)child;
        [Export("addFileWrapper:")]
        string AddFileWrapper(NSFileWrapper child);

        // -(NSString * _Nonnull)addRegularFileWithContents:(NSData * _Nonnull)data preferredFilename:(NSString * _Nonnull)fileName;
        [Export("addRegularFileWithContents:preferredFilename:")]
        string AddRegularFileWithContents(NSData data, string fileName);

        // -(void)removeFileWrapper:(NSFileWrapper * _Nonnull)child;
        [Export("removeFileWrapper:")]
        void RemoveFileWrapper(NSFileWrapper child);

        // @property (readonly, copy) NSDictionary<NSString *,NSFileWrapper *> * _Nullable fileWrappers;
        [NullAllowed, Export("fileWrappers", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSFileWrapper> FileWrappers { get; }

        // -(NSString * _Nullable)keyForFileWrapper:(NSFileWrapper * _Nonnull)child;
        [Export("keyForFileWrapper:")]
        [return: NullAllowed]
        string KeyForFileWrapper(NSFileWrapper child);

        // @property (readonly, copy) NSData * _Nullable regularFileContents;
        [NullAllowed, Export("regularFileContents", ArgumentSemantic.Copy)]
        NSData RegularFileContents { get; }

        // @property (readonly, copy) NSURL * _Nullable symbolicLinkDestinationURL __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [NullAllowed, Export("symbolicLinkDestinationURL", ArgumentSemantic.Copy)]
        NSUrl SymbolicLinkDestinationURL { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeTokenType __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagSchemeTokenType", "__Internal")]
        NSString NSLinguisticTagSchemeTokenType { get; }

        // extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeLexicalClass __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagSchemeLexicalClass", "__Internal")]
        NSString NSLinguisticTagSchemeLexicalClass { get; }

        // extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeNameType __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagSchemeNameType", "__Internal")]
        NSString NSLinguisticTagSchemeNameType { get; }

        // extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeNameTypeOrLexicalClass __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagSchemeNameTypeOrLexicalClass", "__Internal")]
        NSString NSLinguisticTagSchemeNameTypeOrLexicalClass { get; }

        // extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeLemma __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagSchemeLemma", "__Internal")]
        NSString NSLinguisticTagSchemeLemma { get; }

        // extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeLanguage __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagSchemeLanguage", "__Internal")]
        NSString NSLinguisticTagSchemeLanguage { get; }

        // extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeScript __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagSchemeScript", "__Internal")]
        NSString NSLinguisticTagSchemeScript { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagWord __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagWord", "__Internal")]
        NSString NSLinguisticTagWord { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagPunctuation __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagPunctuation", "__Internal")]
        NSString NSLinguisticTagPunctuation { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagWhitespace __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagWhitespace", "__Internal")]
        NSString NSLinguisticTagWhitespace { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagOther __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagOther", "__Internal")]
        NSString NSLinguisticTagOther { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagNoun __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagNoun", "__Internal")]
        NSString NSLinguisticTagNoun { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagVerb __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagVerb", "__Internal")]
        NSString NSLinguisticTagVerb { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagAdjective __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagAdjective", "__Internal")]
        NSString NSLinguisticTagAdjective { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagAdverb __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagAdverb", "__Internal")]
        NSString NSLinguisticTagAdverb { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagPronoun __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagPronoun", "__Internal")]
        NSString NSLinguisticTagPronoun { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagDeterminer __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagDeterminer", "__Internal")]
        NSString NSLinguisticTagDeterminer { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagParticle __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagParticle", "__Internal")]
        NSString NSLinguisticTagParticle { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagPreposition __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagPreposition", "__Internal")]
        NSString NSLinguisticTagPreposition { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagNumber __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagNumber", "__Internal")]
        NSString NSLinguisticTagNumber { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagConjunction __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagConjunction", "__Internal")]
        NSString NSLinguisticTagConjunction { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagInterjection __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagInterjection", "__Internal")]
        NSString NSLinguisticTagInterjection { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagClassifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagClassifier", "__Internal")]
        NSString NSLinguisticTagClassifier { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagIdiom __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagIdiom", "__Internal")]
        NSString NSLinguisticTagIdiom { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagOtherWord __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagOtherWord", "__Internal")]
        NSString NSLinguisticTagOtherWord { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagSentenceTerminator __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagSentenceTerminator", "__Internal")]
        NSString NSLinguisticTagSentenceTerminator { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagOpenQuote __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagOpenQuote", "__Internal")]
        NSString NSLinguisticTagOpenQuote { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagCloseQuote __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagCloseQuote", "__Internal")]
        NSString NSLinguisticTagCloseQuote { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagOpenParenthesis __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagOpenParenthesis", "__Internal")]
        NSString NSLinguisticTagOpenParenthesis { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagCloseParenthesis __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagCloseParenthesis", "__Internal")]
        NSString NSLinguisticTagCloseParenthesis { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagWordJoiner __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagWordJoiner", "__Internal")]
        NSString NSLinguisticTagWordJoiner { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagDash __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagDash", "__Internal")]
        NSString NSLinguisticTagDash { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagOtherPunctuation __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagOtherPunctuation", "__Internal")]
        NSString NSLinguisticTagOtherPunctuation { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagParagraphBreak __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagParagraphBreak", "__Internal")]
        NSString NSLinguisticTagParagraphBreak { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagOtherWhitespace __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagOtherWhitespace", "__Internal")]
        NSString NSLinguisticTagOtherWhitespace { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagPersonalName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagPersonalName", "__Internal")]
        NSString NSLinguisticTagPersonalName { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagPlaceName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagPlaceName", "__Internal")]
        NSString NSLinguisticTagPlaceName { get; }

        // extern const NSLinguisticTag _Nonnull NSLinguisticTagOrganizationName __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSLinguisticTagOrganizationName", "__Internal")]
        NSString NSLinguisticTagOrganizationName { get; }
    }

    // @interface NSLinguisticTagger : NSObject
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface NSLinguisticTagger
    {
        // -(instancetype _Nonnull)initWithTagSchemes:(NSArray<NSLinguisticTagScheme> * _Nonnull)tagSchemes options:(NSUInteger)opts __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7))) __attribute__((objc_designated_initializer));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("initWithTagSchemes:options:")]
        [DesignatedInitializer]
        IntPtr Constructor(string[] tagSchemes, nuint opts);

        // @property (readonly, copy) NSArray<NSLinguisticTagScheme> * _Nonnull tagSchemes __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("tagSchemes", ArgumentSemantic.Copy)]
        string[] TagSchemes { get; }

        // @property (retain) NSString * _Nullable string __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [NullAllowed, Export("string", ArgumentSemantic.Retain)]
        string String { get; set; }

        // +(NSArray<NSLinguisticTagScheme> * _Nonnull)availableTagSchemesForUnit:(NSLinguisticTaggerUnit)unit language:(NSString * _Nonnull)language __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Static]
        [Export("availableTagSchemesForUnit:language:")]
        string[] AvailableTagSchemesForUnit(NSLinguisticTaggerUnit unit, string language);

        // +(NSArray<NSLinguisticTagScheme> * _Nonnull)availableTagSchemesForLanguage:(NSString * _Nonnull)language __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Static]
        [Export("availableTagSchemesForLanguage:")]
        string[] AvailableTagSchemesForLanguage(string language);

        // -(void)setOrthography:(NSOrthography * _Nullable)orthography range:(NSRange)range __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("setOrthography:range:")]
        void SetOrthography([NullAllowed] NSOrthography orthography, NSRange range);

        // -(NSOrthography * _Nullable)orthographyAtIndex:(NSUInteger)charIndex effectiveRange:(NSRangePointer _Nullable)effectiveRange __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("orthographyAtIndex:effectiveRange:")]
        [return: NullAllowed]
        unsafe NSOrthography OrthographyAtIndex(nuint charIndex, [NullAllowed] NSRangePointer* effectiveRange);

        // -(void)stringEditedInRange:(NSRange)newRange changeInLength:(NSInteger)delta __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("stringEditedInRange:changeInLength:")]
        void StringEditedInRange(NSRange newRange, nint delta);

        // -(NSRange)tokenRangeAtIndex:(NSUInteger)charIndex unit:(NSLinguisticTaggerUnit)unit __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("tokenRangeAtIndex:unit:")]
        NSRange TokenRangeAtIndex(nuint charIndex, NSLinguisticTaggerUnit unit);

        // -(NSRange)sentenceRangeForRange:(NSRange)range __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("sentenceRangeForRange:")]
        NSRange SentenceRangeForRange(NSRange range);

        // -(void)enumerateTagsInRange:(NSRange)range unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options usingBlock:(void (^ _Nonnull)(NSLinguisticTag _Nullable, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("enumerateTagsInRange:unit:scheme:options:usingBlock:")]
        unsafe void EnumerateTagsInRange(NSRange range, NSLinguisticTaggerUnit unit, string scheme, NSLinguisticTaggerOptions options, Action<NSString, NSRange, bool*> block);

        // -(NSLinguisticTag _Nullable)tagAtIndex:(NSUInteger)charIndex unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme tokenRange:(NSRangePointer _Nullable)tokenRange __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("tagAtIndex:unit:scheme:tokenRange:")]
        [return: NullAllowed]
        unsafe string TagAtIndex(nuint charIndex, NSLinguisticTaggerUnit unit, string scheme, [NullAllowed] NSRangePointer* tokenRange);

        // -(NSArray<NSLinguisticTag> * _Nonnull)tagsInRange:(NSRange)range unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options tokenRanges:(NSArray<NSValue *> * _Nullable * _Nullable)tokenRanges __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("tagsInRange:unit:scheme:options:tokenRanges:")]
        string[] TagsInRange(NSRange range, NSLinguisticTaggerUnit unit, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] out NSValue[] tokenRanges);

        // -(void)enumerateTagsInRange:(NSRange)range scheme:(NSLinguisticTagScheme _Nonnull)tagScheme options:(NSLinguisticTaggerOptions)opts usingBlock:(void (^ _Nonnull)(NSLinguisticTag _Nullable, NSRange, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("enumerateTagsInRange:scheme:options:usingBlock:")]
        unsafe void EnumerateTagsInRange(NSRange range, string tagScheme, NSLinguisticTaggerOptions opts, Action<NSString, NSRange, NSRange, bool*> block);

        // -(NSLinguisticTag _Nullable)tagAtIndex:(NSUInteger)charIndex scheme:(NSLinguisticTagScheme _Nonnull)scheme tokenRange:(NSRangePointer _Nullable)tokenRange sentenceRange:(NSRangePointer _Nullable)sentenceRange __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("tagAtIndex:scheme:tokenRange:sentenceRange:")]
        [return: NullAllowed]
        unsafe string TagAtIndex(nuint charIndex, string scheme, [NullAllowed] NSRangePointer* tokenRange, [NullAllowed] NSRangePointer* sentenceRange);

        // -(NSArray<NSString *> * _Nonnull)tagsInRange:(NSRange)range scheme:(NSString * _Nonnull)tagScheme options:(NSLinguisticTaggerOptions)opts tokenRanges:(NSArray<NSValue *> * _Nullable * _Nullable)tokenRanges __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("tagsInRange:scheme:options:tokenRanges:")]
        string[] TagsInRange(NSRange range, string tagScheme, NSLinguisticTaggerOptions opts, [NullAllowed] out NSValue[] tokenRanges);

        // @property (readonly, copy) NSString * _Nullable dominantLanguage __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [NullAllowed, Export("dominantLanguage")]
        string DominantLanguage { get; }

        // +(NSString * _Nullable)dominantLanguageForString:(NSString * _Nonnull)string __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Static]
        [Export("dominantLanguageForString:")]
        [return: NullAllowed]
        string DominantLanguageForString(string @string);

        // +(NSLinguisticTag _Nullable)tagForString:(NSString * _Nonnull)string atIndex:(NSUInteger)charIndex unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme orthography:(NSOrthography * _Nullable)orthography tokenRange:(NSRangePointer _Nullable)tokenRange __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Static]
        [Export("tagForString:atIndex:unit:scheme:orthography:tokenRange:")]
        [return: NullAllowed]
        unsafe string TagForString(string @string, nuint charIndex, NSLinguisticTaggerUnit unit, string scheme, [NullAllowed] NSOrthography orthography, [NullAllowed] NSRangePointer* tokenRange);

        // +(NSArray<NSLinguisticTag> * _Nonnull)tagsForString:(NSString * _Nonnull)string range:(NSRange)range unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options orthography:(NSOrthography * _Nullable)orthography tokenRanges:(NSArray<NSValue *> * _Nullable * _Nullable)tokenRanges __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Static]
        [Export("tagsForString:range:unit:scheme:options:orthography:tokenRanges:")]
        string[] TagsForString(string @string, NSRange range, NSLinguisticTaggerUnit unit, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] NSOrthography orthography, [NullAllowed] out NSValue[] tokenRanges);

        // +(void)enumerateTagsForString:(NSString * _Nonnull)string range:(NSRange)range unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options orthography:(NSOrthography * _Nullable)orthography usingBlock:(void (^ _Nonnull)(NSLinguisticTag _Nullable, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Static]
        [Export("enumerateTagsForString:range:unit:scheme:options:orthography:usingBlock:")]
        unsafe void EnumerateTagsForString(string @string, NSRange range, NSLinguisticTaggerUnit unit, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] NSOrthography orthography, Action<NSString, NSRange, bool*> block);

        // -(NSArray<NSString *> * _Nullable)possibleTagsAtIndex:(NSUInteger)charIndex scheme:(NSString * _Nonnull)tagScheme tokenRange:(NSRangePointer _Nullable)tokenRange sentenceRange:(NSRangePointer _Nullable)sentenceRange scores:(NSArray<NSValue *> * _Nullable * _Nullable)scores __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:")]
        [return: NullAllowed]
        unsafe string[] PossibleTagsAtIndex(nuint charIndex, string tagScheme, [NullAllowed] NSRangePointer* tokenRange, [NullAllowed] NSRangePointer* sentenceRange, [NullAllowed] out NSValue[] scores);
    }

    // @interface NSLinguisticAnalysis (NSString)
    [Category]
    [BaseType(typeof(NSString))]
    interface NSString_NSLinguisticAnalysis
    {
        // -(NSArray<NSLinguisticTag> * _Nonnull)linguisticTagsInRange:(NSRange)range scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options orthography:(NSOrthography * _Nullable)orthography tokenRanges:(NSArray<NSValue *> * _Nullable * _Nullable)tokenRanges __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("linguisticTagsInRange:scheme:options:orthography:tokenRanges:")]
        string[] LinguisticTagsInRange(NSRange range, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] NSOrthography orthography, [NullAllowed] out NSValue[] tokenRanges);

        // -(void)enumerateLinguisticTagsInRange:(NSRange)range scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options orthography:(NSOrthography * _Nullable)orthography usingBlock:(void (^ _Nonnull)(NSLinguisticTag _Nullable, NSRange, NSRange, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:")]
        unsafe void EnumerateLinguisticTagsInRange(NSRange range, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] NSOrthography orthography, Action<NSString, NSRange, NSRange, bool*> block);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull NSMetadataItemFSNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataItemFSNameKey", "__Internal")]
        NSString NSMetadataItemFSNameKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemDisplayNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataItemDisplayNameKey", "__Internal")]
        NSString NSMetadataItemDisplayNameKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemURLKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataItemURLKey", "__Internal")]
        NSString NSMetadataItemURLKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemPathKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataItemPathKey", "__Internal")]
        NSString NSMetadataItemPathKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemFSSizeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataItemFSSizeKey", "__Internal")]
        NSString NSMetadataItemFSSizeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemFSCreationDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataItemFSCreationDateKey", "__Internal")]
        NSString NSMetadataItemFSCreationDateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemFSContentChangeDateKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataItemFSContentChangeDateKey", "__Internal")]
        NSString NSMetadataItemFSContentChangeDateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemContentTypeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Field("NSMetadataItemContentTypeKey", "__Internal")]
        NSString NSMetadataItemContentTypeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemContentTypeTreeKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Field("NSMetadataItemContentTypeTreeKey", "__Internal")]
        NSString NSMetadataItemContentTypeTreeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemIsUbiquitousKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataItemIsUbiquitousKey", "__Internal")]
        NSString NSMetadataItemIsUbiquitousKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemHasUnresolvedConflictsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataUbiquitousItemHasUnresolvedConflictsKey", "__Internal")]
        NSString NSMetadataUbiquitousItemHasUnresolvedConflictsKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemIsDownloadedKey __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=5.0, deprecated=7.0))) __attribute__((availability(macos, introduced=10.7, deprecated=10.9)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
        [Introduced(PlatformName.iOS, 5, 0, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
        [Deprecated(PlatformName.iOS, 7, 0, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
        [Introduced(PlatformName.MacOSX, 10, 7, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
        [Deprecated(PlatformName.MacOSX, 10, 9, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
        [Field("NSMetadataUbiquitousItemIsDownloadedKey", "__Internal")]
        NSString NSMetadataUbiquitousItemIsDownloadedKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemDownloadingStatusKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSMetadataUbiquitousItemDownloadingStatusKey", "__Internal")]
        NSString NSMetadataUbiquitousItemDownloadingStatusKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemDownloadingStatusNotDownloaded __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSMetadataUbiquitousItemDownloadingStatusNotDownloaded", "__Internal")]
        NSString NSMetadataUbiquitousItemDownloadingStatusNotDownloaded { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemDownloadingStatusDownloaded __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSMetadataUbiquitousItemDownloadingStatusDownloaded", "__Internal")]
        NSString NSMetadataUbiquitousItemDownloadingStatusDownloaded { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemDownloadingStatusCurrent __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSMetadataUbiquitousItemDownloadingStatusCurrent", "__Internal")]
        NSString NSMetadataUbiquitousItemDownloadingStatusCurrent { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemIsDownloadingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataUbiquitousItemIsDownloadingKey", "__Internal")]
        NSString NSMetadataUbiquitousItemIsDownloadingKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemIsUploadedKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataUbiquitousItemIsUploadedKey", "__Internal")]
        NSString NSMetadataUbiquitousItemIsUploadedKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemIsUploadingKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataUbiquitousItemIsUploadingKey", "__Internal")]
        NSString NSMetadataUbiquitousItemIsUploadingKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemPercentDownloadedKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataUbiquitousItemPercentDownloadedKey", "__Internal")]
        NSString NSMetadataUbiquitousItemPercentDownloadedKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemPercentUploadedKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataUbiquitousItemPercentUploadedKey", "__Internal")]
        NSString NSMetadataUbiquitousItemPercentUploadedKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemDownloadingErrorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSMetadataUbiquitousItemDownloadingErrorKey", "__Internal")]
        NSString NSMetadataUbiquitousItemDownloadingErrorKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemUploadingErrorKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Field("NSMetadataUbiquitousItemUploadingErrorKey", "__Internal")]
        NSString NSMetadataUbiquitousItemUploadingErrorKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemDownloadRequestedKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSMetadataUbiquitousItemDownloadRequestedKey", "__Internal")]
        NSString NSMetadataUbiquitousItemDownloadRequestedKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemIsExternalDocumentKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSMetadataUbiquitousItemIsExternalDocumentKey", "__Internal")]
        NSString NSMetadataUbiquitousItemIsExternalDocumentKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemContainerDisplayNameKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSMetadataUbiquitousItemContainerDisplayNameKey", "__Internal")]
        NSString NSMetadataUbiquitousItemContainerDisplayNameKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemURLInLocalContainerKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSMetadataUbiquitousItemURLInLocalContainerKey", "__Internal")]
        NSString NSMetadataUbiquitousItemURLInLocalContainerKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousItemIsSharedKey __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSMetadataUbiquitousItemIsSharedKey", "__Internal")]
        NSString NSMetadataUbiquitousItemIsSharedKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemCurrentUserRoleKey __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSMetadataUbiquitousSharedItemCurrentUserRoleKey", "__Internal")]
        NSString NSMetadataUbiquitousSharedItemCurrentUserRoleKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey", "__Internal")]
        NSString NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemOwnerNameComponentsKey __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSMetadataUbiquitousSharedItemOwnerNameComponentsKey", "__Internal")]
        NSString NSMetadataUbiquitousSharedItemOwnerNameComponentsKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey", "__Internal")]
        NSString NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemRoleOwner __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSMetadataUbiquitousSharedItemRoleOwner", "__Internal")]
        NSString NSMetadataUbiquitousSharedItemRoleOwner { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemRoleParticipant __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSMetadataUbiquitousSharedItemRoleParticipant", "__Internal")]
        NSString NSMetadataUbiquitousSharedItemRoleParticipant { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemPermissionsReadOnly __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSMetadataUbiquitousSharedItemPermissionsReadOnly", "__Internal")]
        NSString NSMetadataUbiquitousSharedItemPermissionsReadOnly { get; }

        // extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemPermissionsReadWrite __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [NoWatch, NoTV, Mac(10, 12), iOS(10, 0)]
        [Field("NSMetadataUbiquitousSharedItemPermissionsReadWrite", "__Internal")]
        NSString NSMetadataUbiquitousSharedItemPermissionsReadWrite { get; }

        // extern NSString *const _Nonnull NSMetadataItemAttributeChangeDateKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAttributeChangeDateKey", "__Internal")]
        NSString NSMetadataItemAttributeChangeDateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemKeywordsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemKeywordsKey", "__Internal")]
        NSString NSMetadataItemKeywordsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemTitleKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemTitleKey", "__Internal")]
        NSString NSMetadataItemTitleKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAuthorsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAuthorsKey", "__Internal")]
        NSString NSMetadataItemAuthorsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemEditorsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemEditorsKey", "__Internal")]
        NSString NSMetadataItemEditorsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemParticipantsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemParticipantsKey", "__Internal")]
        NSString NSMetadataItemParticipantsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemProjectsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemProjectsKey", "__Internal")]
        NSString NSMetadataItemProjectsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemDownloadedDateKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemDownloadedDateKey", "__Internal")]
        NSString NSMetadataItemDownloadedDateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemWhereFromsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemWhereFromsKey", "__Internal")]
        NSString NSMetadataItemWhereFromsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemCommentKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemCommentKey", "__Internal")]
        NSString NSMetadataItemCommentKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemCopyrightKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemCopyrightKey", "__Internal")]
        NSString NSMetadataItemCopyrightKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemLastUsedDateKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemLastUsedDateKey", "__Internal")]
        NSString NSMetadataItemLastUsedDateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemContentCreationDateKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemContentCreationDateKey", "__Internal")]
        NSString NSMetadataItemContentCreationDateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemContentModificationDateKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemContentModificationDateKey", "__Internal")]
        NSString NSMetadataItemContentModificationDateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemDateAddedKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemDateAddedKey", "__Internal")]
        NSString NSMetadataItemDateAddedKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemDurationSecondsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemDurationSecondsKey", "__Internal")]
        NSString NSMetadataItemDurationSecondsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemContactKeywordsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemContactKeywordsKey", "__Internal")]
        NSString NSMetadataItemContactKeywordsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemVersionKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemVersionKey", "__Internal")]
        NSString NSMetadataItemVersionKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemPixelHeightKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemPixelHeightKey", "__Internal")]
        NSString NSMetadataItemPixelHeightKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemPixelWidthKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemPixelWidthKey", "__Internal")]
        NSString NSMetadataItemPixelWidthKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemPixelCountKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemPixelCountKey", "__Internal")]
        NSString NSMetadataItemPixelCountKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemColorSpaceKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemColorSpaceKey", "__Internal")]
        NSString NSMetadataItemColorSpaceKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemBitsPerSampleKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemBitsPerSampleKey", "__Internal")]
        NSString NSMetadataItemBitsPerSampleKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemFlashOnOffKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemFlashOnOffKey", "__Internal")]
        NSString NSMetadataItemFlashOnOffKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemFocalLengthKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemFocalLengthKey", "__Internal")]
        NSString NSMetadataItemFocalLengthKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAcquisitionMakeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAcquisitionMakeKey", "__Internal")]
        NSString NSMetadataItemAcquisitionMakeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAcquisitionModelKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAcquisitionModelKey", "__Internal")]
        NSString NSMetadataItemAcquisitionModelKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemISOSpeedKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemISOSpeedKey", "__Internal")]
        NSString NSMetadataItemISOSpeedKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemOrientationKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemOrientationKey", "__Internal")]
        NSString NSMetadataItemOrientationKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemLayerNamesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemLayerNamesKey", "__Internal")]
        NSString NSMetadataItemLayerNamesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemWhiteBalanceKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemWhiteBalanceKey", "__Internal")]
        NSString NSMetadataItemWhiteBalanceKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemApertureKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemApertureKey", "__Internal")]
        NSString NSMetadataItemApertureKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemProfileNameKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemProfileNameKey", "__Internal")]
        NSString NSMetadataItemProfileNameKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemResolutionWidthDPIKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemResolutionWidthDPIKey", "__Internal")]
        NSString NSMetadataItemResolutionWidthDPIKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemResolutionHeightDPIKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemResolutionHeightDPIKey", "__Internal")]
        NSString NSMetadataItemResolutionHeightDPIKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemExposureModeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemExposureModeKey", "__Internal")]
        NSString NSMetadataItemExposureModeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemExposureTimeSecondsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemExposureTimeSecondsKey", "__Internal")]
        NSString NSMetadataItemExposureTimeSecondsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemEXIFVersionKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemEXIFVersionKey", "__Internal")]
        NSString NSMetadataItemEXIFVersionKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemCameraOwnerKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemCameraOwnerKey", "__Internal")]
        NSString NSMetadataItemCameraOwnerKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemFocalLength35mmKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemFocalLength35mmKey", "__Internal")]
        NSString NSMetadataItemFocalLength35mmKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemLensModelKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemLensModelKey", "__Internal")]
        NSString NSMetadataItemLensModelKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemEXIFGPSVersionKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemEXIFGPSVersionKey", "__Internal")]
        NSString NSMetadataItemEXIFGPSVersionKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAltitudeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAltitudeKey", "__Internal")]
        NSString NSMetadataItemAltitudeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemLatitudeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemLatitudeKey", "__Internal")]
        NSString NSMetadataItemLatitudeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemLongitudeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemLongitudeKey", "__Internal")]
        NSString NSMetadataItemLongitudeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemSpeedKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemSpeedKey", "__Internal")]
        NSString NSMetadataItemSpeedKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemTimestampKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemTimestampKey", "__Internal")]
        NSString NSMetadataItemTimestampKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSTrackKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSTrackKey", "__Internal")]
        NSString NSMetadataItemGPSTrackKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemImageDirectionKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemImageDirectionKey", "__Internal")]
        NSString NSMetadataItemImageDirectionKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemNamedLocationKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemNamedLocationKey", "__Internal")]
        NSString NSMetadataItemNamedLocationKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSStatusKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSStatusKey", "__Internal")]
        NSString NSMetadataItemGPSStatusKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSMeasureModeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSMeasureModeKey", "__Internal")]
        NSString NSMetadataItemGPSMeasureModeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSDOPKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSDOPKey", "__Internal")]
        NSString NSMetadataItemGPSDOPKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSMapDatumKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSMapDatumKey", "__Internal")]
        NSString NSMetadataItemGPSMapDatumKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSDestLatitudeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSDestLatitudeKey", "__Internal")]
        NSString NSMetadataItemGPSDestLatitudeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSDestLongitudeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSDestLongitudeKey", "__Internal")]
        NSString NSMetadataItemGPSDestLongitudeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSDestBearingKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSDestBearingKey", "__Internal")]
        NSString NSMetadataItemGPSDestBearingKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSDestDistanceKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSDestDistanceKey", "__Internal")]
        NSString NSMetadataItemGPSDestDistanceKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSProcessingMethodKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSProcessingMethodKey", "__Internal")]
        NSString NSMetadataItemGPSProcessingMethodKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSAreaInformationKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSAreaInformationKey", "__Internal")]
        NSString NSMetadataItemGPSAreaInformationKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSDateStampKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSDateStampKey", "__Internal")]
        NSString NSMetadataItemGPSDateStampKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGPSDifferentalKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGPSDifferentalKey", "__Internal")]
        NSString NSMetadataItemGPSDifferentalKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemCodecsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemCodecsKey", "__Internal")]
        NSString NSMetadataItemCodecsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemMediaTypesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemMediaTypesKey", "__Internal")]
        NSString NSMetadataItemMediaTypesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemStreamableKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemStreamableKey", "__Internal")]
        NSString NSMetadataItemStreamableKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemTotalBitRateKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemTotalBitRateKey", "__Internal")]
        NSString NSMetadataItemTotalBitRateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemVideoBitRateKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemVideoBitRateKey", "__Internal")]
        NSString NSMetadataItemVideoBitRateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAudioBitRateKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAudioBitRateKey", "__Internal")]
        NSString NSMetadataItemAudioBitRateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemDeliveryTypeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemDeliveryTypeKey", "__Internal")]
        NSString NSMetadataItemDeliveryTypeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAlbumKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAlbumKey", "__Internal")]
        NSString NSMetadataItemAlbumKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemHasAlphaChannelKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemHasAlphaChannelKey", "__Internal")]
        NSString NSMetadataItemHasAlphaChannelKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemRedEyeOnOffKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemRedEyeOnOffKey", "__Internal")]
        NSString NSMetadataItemRedEyeOnOffKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemMeteringModeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemMeteringModeKey", "__Internal")]
        NSString NSMetadataItemMeteringModeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemMaxApertureKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemMaxApertureKey", "__Internal")]
        NSString NSMetadataItemMaxApertureKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemFNumberKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemFNumberKey", "__Internal")]
        NSString NSMetadataItemFNumberKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemExposureProgramKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemExposureProgramKey", "__Internal")]
        NSString NSMetadataItemExposureProgramKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemExposureTimeStringKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemExposureTimeStringKey", "__Internal")]
        NSString NSMetadataItemExposureTimeStringKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemHeadlineKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemHeadlineKey", "__Internal")]
        NSString NSMetadataItemHeadlineKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemInstructionsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemInstructionsKey", "__Internal")]
        NSString NSMetadataItemInstructionsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemCityKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemCityKey", "__Internal")]
        NSString NSMetadataItemCityKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemStateOrProvinceKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemStateOrProvinceKey", "__Internal")]
        NSString NSMetadataItemStateOrProvinceKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemCountryKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemCountryKey", "__Internal")]
        NSString NSMetadataItemCountryKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemTextContentKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemTextContentKey", "__Internal")]
        NSString NSMetadataItemTextContentKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAudioSampleRateKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAudioSampleRateKey", "__Internal")]
        NSString NSMetadataItemAudioSampleRateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAudioChannelCountKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAudioChannelCountKey", "__Internal")]
        NSString NSMetadataItemAudioChannelCountKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemTempoKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemTempoKey", "__Internal")]
        NSString NSMetadataItemTempoKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemKeySignatureKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemKeySignatureKey", "__Internal")]
        NSString NSMetadataItemKeySignatureKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemTimeSignatureKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemTimeSignatureKey", "__Internal")]
        NSString NSMetadataItemTimeSignatureKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAudioEncodingApplicationKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAudioEncodingApplicationKey", "__Internal")]
        NSString NSMetadataItemAudioEncodingApplicationKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemComposerKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemComposerKey", "__Internal")]
        NSString NSMetadataItemComposerKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemLyricistKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemLyricistKey", "__Internal")]
        NSString NSMetadataItemLyricistKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAudioTrackNumberKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAudioTrackNumberKey", "__Internal")]
        NSString NSMetadataItemAudioTrackNumberKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemRecordingDateKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemRecordingDateKey", "__Internal")]
        NSString NSMetadataItemRecordingDateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemMusicalGenreKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemMusicalGenreKey", "__Internal")]
        NSString NSMetadataItemMusicalGenreKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemIsGeneralMIDISequenceKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemIsGeneralMIDISequenceKey", "__Internal")]
        NSString NSMetadataItemIsGeneralMIDISequenceKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemRecordingYearKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemRecordingYearKey", "__Internal")]
        NSString NSMetadataItemRecordingYearKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemOrganizationsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemOrganizationsKey", "__Internal")]
        NSString NSMetadataItemOrganizationsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemLanguagesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemLanguagesKey", "__Internal")]
        NSString NSMetadataItemLanguagesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemRightsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemRightsKey", "__Internal")]
        NSString NSMetadataItemRightsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemPublishersKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemPublishersKey", "__Internal")]
        NSString NSMetadataItemPublishersKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemContributorsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemContributorsKey", "__Internal")]
        NSString NSMetadataItemContributorsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemCoverageKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemCoverageKey", "__Internal")]
        NSString NSMetadataItemCoverageKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemSubjectKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemSubjectKey", "__Internal")]
        NSString NSMetadataItemSubjectKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemThemeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemThemeKey", "__Internal")]
        NSString NSMetadataItemThemeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemDescriptionKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemDescriptionKey", "__Internal")]
        NSString NSMetadataItemDescriptionKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemIdentifierKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemIdentifierKey", "__Internal")]
        NSString NSMetadataItemIdentifierKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAudiencesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAudiencesKey", "__Internal")]
        NSString NSMetadataItemAudiencesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemNumberOfPagesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemNumberOfPagesKey", "__Internal")]
        NSString NSMetadataItemNumberOfPagesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemPageWidthKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemPageWidthKey", "__Internal")]
        NSString NSMetadataItemPageWidthKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemPageHeightKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemPageHeightKey", "__Internal")]
        NSString NSMetadataItemPageHeightKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemSecurityMethodKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemSecurityMethodKey", "__Internal")]
        NSString NSMetadataItemSecurityMethodKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemCreatorKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemCreatorKey", "__Internal")]
        NSString NSMetadataItemCreatorKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemEncodingApplicationsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemEncodingApplicationsKey", "__Internal")]
        NSString NSMetadataItemEncodingApplicationsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemDueDateKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemDueDateKey", "__Internal")]
        NSString NSMetadataItemDueDateKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemStarRatingKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemStarRatingKey", "__Internal")]
        NSString NSMetadataItemStarRatingKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemPhoneNumbersKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemPhoneNumbersKey", "__Internal")]
        NSString NSMetadataItemPhoneNumbersKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemEmailAddressesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemEmailAddressesKey", "__Internal")]
        NSString NSMetadataItemEmailAddressesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemInstantMessageAddressesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemInstantMessageAddressesKey", "__Internal")]
        NSString NSMetadataItemInstantMessageAddressesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemKindKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemKindKey", "__Internal")]
        NSString NSMetadataItemKindKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemRecipientsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemRecipientsKey", "__Internal")]
        NSString NSMetadataItemRecipientsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemFinderCommentKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemFinderCommentKey", "__Internal")]
        NSString NSMetadataItemFinderCommentKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemFontsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemFontsKey", "__Internal")]
        NSString NSMetadataItemFontsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAppleLoopsRootKeyKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAppleLoopsRootKeyKey", "__Internal")]
        NSString NSMetadataItemAppleLoopsRootKeyKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAppleLoopsKeyFilterTypeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAppleLoopsKeyFilterTypeKey", "__Internal")]
        NSString NSMetadataItemAppleLoopsKeyFilterTypeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAppleLoopsLoopModeKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAppleLoopsLoopModeKey", "__Internal")]
        NSString NSMetadataItemAppleLoopsLoopModeKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAppleLoopDescriptorsKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAppleLoopDescriptorsKey", "__Internal")]
        NSString NSMetadataItemAppleLoopDescriptorsKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemMusicalInstrumentCategoryKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemMusicalInstrumentCategoryKey", "__Internal")]
        NSString NSMetadataItemMusicalInstrumentCategoryKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemMusicalInstrumentNameKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemMusicalInstrumentNameKey", "__Internal")]
        NSString NSMetadataItemMusicalInstrumentNameKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemCFBundleIdentifierKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemCFBundleIdentifierKey", "__Internal")]
        NSString NSMetadataItemCFBundleIdentifierKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemInformationKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemInformationKey", "__Internal")]
        NSString NSMetadataItemInformationKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemDirectorKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemDirectorKey", "__Internal")]
        NSString NSMetadataItemDirectorKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemProducerKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemProducerKey", "__Internal")]
        NSString NSMetadataItemProducerKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemGenreKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemGenreKey", "__Internal")]
        NSString NSMetadataItemGenreKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemPerformersKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemPerformersKey", "__Internal")]
        NSString NSMetadataItemPerformersKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemOriginalFormatKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemOriginalFormatKey", "__Internal")]
        NSString NSMetadataItemOriginalFormatKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemOriginalSourceKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemOriginalSourceKey", "__Internal")]
        NSString NSMetadataItemOriginalSourceKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAuthorEmailAddressesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAuthorEmailAddressesKey", "__Internal")]
        NSString NSMetadataItemAuthorEmailAddressesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemRecipientEmailAddressesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemRecipientEmailAddressesKey", "__Internal")]
        NSString NSMetadataItemRecipientEmailAddressesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemAuthorAddressesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemAuthorAddressesKey", "__Internal")]
        NSString NSMetadataItemAuthorAddressesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemRecipientAddressesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemRecipientAddressesKey", "__Internal")]
        NSString NSMetadataItemRecipientAddressesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemIsLikelyJunkKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemIsLikelyJunkKey", "__Internal")]
        NSString NSMetadataItemIsLikelyJunkKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemExecutableArchitecturesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemExecutableArchitecturesKey", "__Internal")]
        NSString NSMetadataItemExecutableArchitecturesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemExecutablePlatformKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemExecutablePlatformKey", "__Internal")]
        NSString NSMetadataItemExecutablePlatformKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemApplicationCategoriesKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemApplicationCategoriesKey", "__Internal")]
        NSString NSMetadataItemApplicationCategoriesKey { get; }

        // extern NSString *const _Nonnull NSMetadataItemIsApplicationManagedKey __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataItemIsApplicationManagedKey", "__Internal")]
        NSString NSMetadataItemIsApplicationManagedKey { get; }
    }

    // @interface NSMetadataQuery : NSObject
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface NSMetadataQuery
    {
        [Wrap("WeakDelegate")]
        [NullAllowed]
        NSMetadataQueryDelegate Delegate { get; set; }

        // @property (assign) id<NSMetadataQueryDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // @property (copy) NSPredicate * _Nullable predicate;
        [NullAllowed, Export("predicate", ArgumentSemantic.Copy)]
        NSPredicate Predicate { get; set; }

        // @property (copy) NSArray<NSSortDescriptor *> * _Nonnull sortDescriptors;
        [Export("sortDescriptors", ArgumentSemantic.Copy)]
        NSSortDescriptor[] SortDescriptors { get; set; }

        // @property (copy) NSArray<NSString *> * _Nonnull valueListAttributes;
        [Export("valueListAttributes", ArgumentSemantic.Copy)]
        string[] ValueListAttributes { get; set; }

        // @property (copy) NSArray<NSString *> * _Nullable groupingAttributes;
        [NullAllowed, Export("groupingAttributes", ArgumentSemantic.Copy)]
        string[] GroupingAttributes { get; set; }

        // @property NSTimeInterval notificationBatchingInterval;
        [Export("notificationBatchingInterval")]
        double NotificationBatchingInterval { get; set; }

        // @property (copy) NSArray * _Nonnull searchScopes;
        [Export("searchScopes", ArgumentSemantic.Copy)]
        [Verify(StronglyTypedNSArray)]
        NSObject[] SearchScopes { get; set; }

        // @property (copy) NSArray * _Nullable searchItems __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [NullAllowed, Export("searchItems", ArgumentSemantic.Copy)]
        [Verify(StronglyTypedNSArray)]
        NSObject[] SearchItems { get; set; }

        // @property (retain) NSOperationQueue * _Nullable operationQueue __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [NullAllowed, Export("operationQueue", ArgumentSemantic.Retain)]
        NSOperationQueue OperationQueue { get; set; }

        // -(BOOL)startQuery;
        [Export("startQuery")]
        [Verify(MethodToProperty)]
        bool StartQuery { get; }

        // -(void)stopQuery;
        [Export("stopQuery")]
        void StopQuery();

        // @property (readonly, getter = isStarted) BOOL started;
        [Export("started")]
        bool Started { [Bind("isStarted")] get; }

        // @property (readonly, getter = isGathering) BOOL gathering;
        [Export("gathering")]
        bool Gathering { [Bind("isGathering")] get; }

        // @property (readonly, getter = isStopped) BOOL stopped;
        [Export("stopped")]
        bool Stopped { [Bind("isStopped")] get; }

        // -(void)disableUpdates;
        [Export("disableUpdates")]
        void DisableUpdates();

        // -(void)enableUpdates;
        [Export("enableUpdates")]
        void EnableUpdates();

        // @property (readonly) NSUInteger resultCount;
        [Export("resultCount")]
        nuint ResultCount { get; }

        // -(id _Nonnull)resultAtIndex:(NSUInteger)idx;
        [Export("resultAtIndex:")]
        NSObject ResultAtIndex(nuint idx);

        // -(void)enumerateResultsUsingBlock:(void (^ _Nonnull)(id _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("enumerateResultsUsingBlock:")]
        unsafe void EnumerateResultsUsingBlock(Action<NSObject, nuint, bool*> block);

        // -(void)enumerateResultsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(id _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("enumerateResultsWithOptions:usingBlock:")]
        unsafe void EnumerateResultsWithOptions(NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

        // @property (readonly, copy) NSArray * _Nonnull results;
        [Export("results", ArgumentSemantic.Copy)]
        [Verify(StronglyTypedNSArray)]
        NSObject[] Results { get; }

        // -(NSUInteger)indexOfResult:(id _Nonnull)result;
        [Export("indexOfResult:")]
        nuint IndexOfResult(NSObject result);

        // @property (readonly, copy) NSDictionary<NSString *,NSArray<NSMetadataQueryAttributeValueTuple *> *> * _Nonnull valueLists;
        [Export("valueLists", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSArray<NSMetadataQueryAttributeValueTuple>> ValueLists { get; }

        // @property (readonly, copy) NSArray<NSMetadataQueryResultGroup *> * _Nonnull groupedResults;
        [Export("groupedResults", ArgumentSemantic.Copy)]
        NSMetadataQueryResultGroup[] GroupedResults { get; }

        // -(id _Nullable)valueOfAttribute:(NSString * _Nonnull)attrName forResultAtIndex:(NSUInteger)idx;
        [Export("valueOfAttribute:forResultAtIndex:")]
        [return: NullAllowed]
        NSObject ValueOfAttribute(string attrName, nuint idx);
    }

    // @protocol NSMetadataQueryDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSMetadataQueryDelegate
    {
        // @optional -(id _Nonnull)metadataQuery:(NSMetadataQuery * _Nonnull)query replacementObjectForResultObject:(NSMetadataItem * _Nonnull)result;
        [Export("metadataQuery:replacementObjectForResultObject:")]
        NSObject ReplacementObjectForResultObject(NSMetadataQuery query, NSMetadataItem result);

        // @optional -(id _Nonnull)metadataQuery:(NSMetadataQuery * _Nonnull)query replacementValueForAttribute:(NSString * _Nonnull)attrName value:(id _Nonnull)attrValue;
        [Export("metadataQuery:replacementValueForAttribute:value:")]
        NSObject ReplacementValueForAttribute(NSMetadataQuery query, string attrName, NSObject attrValue);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSMetadataQueryDidStartGatheringNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(2, 0), TV(9, 0), Mac(10, 4), iOS(5, 0)]
        [Field("NSMetadataQueryDidStartGatheringNotification", "__Internal")]
        NSString NSMetadataQueryDidStartGatheringNotification { get; }

        // extern const NSNotificationName _Nonnull NSMetadataQueryGatheringProgressNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(2, 0), TV(9, 0), Mac(10, 4), iOS(5, 0)]
        [Field("NSMetadataQueryGatheringProgressNotification", "__Internal")]
        NSString NSMetadataQueryGatheringProgressNotification { get; }

        // extern const NSNotificationName _Nonnull NSMetadataQueryDidFinishGatheringNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(2, 0), TV(9, 0), Mac(10, 4), iOS(5, 0)]
        [Field("NSMetadataQueryDidFinishGatheringNotification", "__Internal")]
        NSString NSMetadataQueryDidFinishGatheringNotification { get; }

        // extern const NSNotificationName _Nonnull NSMetadataQueryDidUpdateNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(2, 0), TV(9, 0), Mac(10, 4), iOS(5, 0)]
        [Field("NSMetadataQueryDidUpdateNotification", "__Internal")]
        NSString NSMetadataQueryDidUpdateNotification { get; }

        // extern NSString *const _Nonnull NSMetadataQueryUpdateAddedItemsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Field("NSMetadataQueryUpdateAddedItemsKey", "__Internal")]
        NSString NSMetadataQueryUpdateAddedItemsKey { get; }

        // extern NSString *const _Nonnull NSMetadataQueryUpdateChangedItemsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Field("NSMetadataQueryUpdateChangedItemsKey", "__Internal")]
        NSString NSMetadataQueryUpdateChangedItemsKey { get; }

        // extern NSString *const _Nonnull NSMetadataQueryUpdateRemovedItemsKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(8, 0)]
        [Field("NSMetadataQueryUpdateRemovedItemsKey", "__Internal")]
        NSString NSMetadataQueryUpdateRemovedItemsKey { get; }

        // extern NSString *const _Nonnull NSMetadataQueryResultContentRelevanceAttribute __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(2, 0), TV(9, 0), Mac(10, 4), iOS(5, 0)]
        [Field("NSMetadataQueryResultContentRelevanceAttribute", "__Internal")]
        NSString NSMetadataQueryResultContentRelevanceAttribute { get; }

        // extern NSString *const _Nonnull NSMetadataQueryUserHomeScope __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.4)));
        [NoWatch, NoTV, NoiOS, Mac(10, 4)]
        [Field("NSMetadataQueryUserHomeScope", "__Internal")]
        NSString NSMetadataQueryUserHomeScope { get; }

        // extern NSString *const _Nonnull NSMetadataQueryLocalComputerScope __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.4)));
        [NoWatch, NoTV, NoiOS, Mac(10, 4)]
        [Field("NSMetadataQueryLocalComputerScope", "__Internal")]
        NSString NSMetadataQueryLocalComputerScope { get; }

        // extern NSString *const _Nonnull NSMetadataQueryNetworkScope __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.4)));
        [NoWatch, NoTV, NoiOS, Mac(10, 4)]
        [Field("NSMetadataQueryNetworkScope", "__Internal")]
        NSString NSMetadataQueryNetworkScope { get; }

        // extern NSString *const _Nonnull NSMetadataQueryIndexedLocalComputerScope __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataQueryIndexedLocalComputerScope", "__Internal")]
        NSString NSMetadataQueryIndexedLocalComputerScope { get; }

        // extern NSString *const _Nonnull NSMetadataQueryIndexedNetworkScope __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9)));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Field("NSMetadataQueryIndexedNetworkScope", "__Internal")]
        NSString NSMetadataQueryIndexedNetworkScope { get; }

        // extern NSString *const _Nonnull NSMetadataQueryUbiquitousDocumentsScope __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataQueryUbiquitousDocumentsScope", "__Internal")]
        NSString NSMetadataQueryUbiquitousDocumentsScope { get; }

        // extern NSString *const _Nonnull NSMetadataQueryUbiquitousDataScope __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSMetadataQueryUbiquitousDataScope", "__Internal")]
        NSString NSMetadataQueryUbiquitousDataScope { get; }

        // extern NSString *const _Nonnull NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope", "__Internal")]
        NSString NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope { get; }
    }

    // @interface NSMetadataItem : NSObject
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface NSMetadataItem
    {
        // -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.9))) __attribute__((objc_designated_initializer));
        [NoWatch, NoTV, NoiOS, Mac(10, 9)]
        [Export("initWithURL:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSUrl url);

        // -(id _Nullable)valueForAttribute:(NSString * _Nonnull)key;
        [Export("valueForAttribute:")]
        [return: NullAllowed]
        NSObject ValueForAttribute(string key);

        // -(NSDictionary<NSString *,id> * _Nullable)valuesForAttributes:(NSArray<NSString *> * _Nonnull)keys;
        [Export("valuesForAttributes:")]
        [return: NullAllowed]
        NSDictionary<NSString, NSObject> ValuesForAttributes(string[] keys);

        // @property (readonly, copy) NSArray<NSString *> * _Nonnull attributes;
        [Export("attributes", ArgumentSemantic.Copy)]
        string[] Attributes { get; }
    }

    // @interface NSMetadataQueryAttributeValueTuple : NSObject
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface NSMetadataQueryAttributeValueTuple
    {
        // @property (readonly, copy) NSString * _Nonnull attribute;
        [Export("attribute")]
        string Attribute { get; }

        // @property (readonly, retain) id _Nullable value;
        [NullAllowed, Export("value", ArgumentSemantic.Retain)]
        NSObject Value { get; }

        // @property (readonly) NSUInteger count;
        [Export("count")]
        nuint Count { get; }
    }

    // @interface NSMetadataQueryResultGroup : NSObject
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface NSMetadataQueryResultGroup
    {
        // @property (readonly, copy) NSString * _Nonnull attribute;
        [Export("attribute")]
        string Attribute { get; }

        // @property (readonly, retain) id _Nonnull value;
        [Export("value", ArgumentSemantic.Retain)]
        NSObject Value { get; }

        // @property (readonly, copy) NSArray<NSMetadataQueryResultGroup *> * _Nullable subgroups;
        [NullAllowed, Export("subgroups", ArgumentSemantic.Copy)]
        NSMetadataQueryResultGroup[] Subgroups { get; }

        // @property (readonly) NSUInteger resultCount;
        [Export("resultCount")]
        nuint ResultCount { get; }

        // -(id _Nonnull)resultAtIndex:(NSUInteger)idx;
        [Export("resultAtIndex:")]
        NSObject ResultAtIndex(nuint idx);

        // @property (readonly, copy) NSArray * _Nonnull results;
        [Export("results", ArgumentSemantic.Copy)]
        [Verify(StronglyTypedNSArray)]
        NSObject[] Results { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull NSNetServicesErrorCode;
        [Field("NSNetServicesErrorCode", "__Internal")]
        NSString NSNetServicesErrorCode { get; }

        // extern const NSErrorDomain _Nonnull NSNetServicesErrorDomain;
        [Field("NSNetServicesErrorDomain", "__Internal")]
        NSString NSNetServicesErrorDomain { get; }
    }

    // @interface NSNetService : NSObject
    [NoWatch]
    [BaseType(typeof(NSObject))]
    interface NSNetService
    {
        // -(instancetype _Nonnull)initWithDomain:(NSString * _Nonnull)domain type:(NSString * _Nonnull)type name:(NSString * _Nonnull)name port:(int)port __attribute__((objc_designated_initializer));
        [Export("initWithDomain:type:name:port:")]
        [DesignatedInitializer]
        IntPtr Constructor(string domain, string type, string name, int port);

        // -(instancetype _Nonnull)initWithDomain:(NSString * _Nonnull)domain type:(NSString * _Nonnull)type name:(NSString * _Nonnull)name;
        [Export("initWithDomain:type:name:")]
        IntPtr Constructor(string domain, string type, string name);

        // -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("scheduleInRunLoop:forMode:")]
        void ScheduleInRunLoop(NSRunLoop aRunLoop, string mode);

        // -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("removeFromRunLoop:forMode:")]
        void RemoveFromRunLoop(NSRunLoop aRunLoop, string mode);

        [Wrap("WeakDelegate")]
        [NullAllowed]
        NSNetServiceDelegate Delegate { get; set; }

        // @property (assign) id<NSNetServiceDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // @property BOOL includesPeerToPeer __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(7, 0)]
        [Export("includesPeerToPeer")]
        bool IncludesPeerToPeer { get; set; }

        // @property (readonly, copy) NSString * _Nonnull name;
        [Export("name")]
        string Name { get; }

        // @property (readonly, copy) NSString * _Nonnull type;
        [Export("type")]
        string Type { get; }

        // @property (readonly, copy) NSString * _Nonnull domain;
        [Export("domain")]
        string Domain { get; }

        // @property (readonly, copy) NSString * _Nullable hostName;
        [NullAllowed, Export("hostName")]
        string HostName { get; }

        // @property (readonly, copy) NSArray<NSData *> * _Nullable addresses;
        [NullAllowed, Export("addresses", ArgumentSemantic.Copy)]
        NSData[] Addresses { get; }

        // @property (readonly) NSInteger port __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("port")]
        nint Port { get; }

        // -(void)publish;
        [Export("publish")]
        void Publish();

        // -(void)publishWithOptions:(NSNetServiceOptions)options __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Export("publishWithOptions:")]
        void PublishWithOptions(NSNetServiceOptions options);

        // -(void)resolve __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(macos, introduced=10.2, deprecated=10.4)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "Not supported")]
        [Deprecated(PlatformName.TvOS, 9, 0, message: "Not supported")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "Not supported")]
        [Deprecated(PlatformName.WatchOS, 2, 0, message: "Not supported")]
        [Introduced(PlatformName.iOS, 2, 0, message: "Not supported")]
        [Deprecated(PlatformName.iOS, 2, 0, message: "Not supported")]
        [Introduced(PlatformName.MacOSX, 10, 2, message: "Not supported")]
        [Deprecated(PlatformName.MacOSX, 10, 4, message: "Not supported")]
        [Export("resolve")]
        void Resolve();

        // -(void)stop;
        [Export("stop")]
        void Stop();

        // +(NSDictionary<NSString *,NSData *> * _Nonnull)dictionaryFromTXTRecordData:(NSData * _Nonnull)txtData;
        [Static]
        [Export("dictionaryFromTXTRecordData:")]
        NSDictionary<NSString, NSData> DictionaryFromTXTRecordData(NSData txtData);

        // +(NSData * _Nonnull)dataFromTXTRecordDictionary:(NSDictionary<NSString *,NSData *> * _Nonnull)txtDictionary;
        [Static]
        [Export("dataFromTXTRecordDictionary:")]
        NSData DataFromTXTRecordDictionary(NSDictionary<NSString, NSData> txtDictionary);

        // -(void)resolveWithTimeout:(NSTimeInterval)timeout;
        [Export("resolveWithTimeout:")]
        void ResolveWithTimeout(double timeout);

        // -(BOOL)getInputStream:(NSInputStream * _Nullable * _Nullable)inputStream outputStream:(NSOutputStream * _Nullable * _Nullable)outputStream;
        [Export("getInputStream:outputStream:")]
        bool GetInputStream([NullAllowed] out NSInputStream inputStream, [NullAllowed] out NSOutputStream outputStream);

        // -(BOOL)setTXTRecordData:(NSData * _Nullable)recordData;
        [Export("setTXTRecordData:")]
        bool SetTXTRecordData([NullAllowed] NSData recordData);

        // -(NSData * _Nullable)TXTRecordData;
        [NullAllowed, Export("TXTRecordData")]
        [Verify(MethodToProperty)]
        NSData TXTRecordData { get; }

        // -(void)startMonitoring;
        [Export("startMonitoring")]
        void StartMonitoring();

        // -(void)stopMonitoring;
        [Export("stopMonitoring")]
        void StopMonitoring();
    }

    // @interface NSNetServiceBrowser : NSObject
    [NoWatch]
    [BaseType(typeof(NSObject))]
    interface NSNetServiceBrowser
    {
        [Wrap("WeakDelegate")]
        [NullAllowed]
        NSNetServiceBrowserDelegate Delegate { get; set; }

        // @property (assign) id<NSNetServiceBrowserDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // @property BOOL includesPeerToPeer __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(7, 0)]
        [Export("includesPeerToPeer")]
        bool IncludesPeerToPeer { get; set; }

        // -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("scheduleInRunLoop:forMode:")]
        void ScheduleInRunLoop(NSRunLoop aRunLoop, string mode);

        // -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("removeFromRunLoop:forMode:")]
        void RemoveFromRunLoop(NSRunLoop aRunLoop, string mode);

        // -(void)searchForBrowsableDomains;
        [Export("searchForBrowsableDomains")]
        void SearchForBrowsableDomains();

        // -(void)searchForRegistrationDomains;
        [Export("searchForRegistrationDomains")]
        void SearchForRegistrationDomains();

        // -(void)searchForServicesOfType:(NSString * _Nonnull)type inDomain:(NSString * _Nonnull)domainString;
        [Export("searchForServicesOfType:inDomain:")]
        void SearchForServicesOfType(string type, string domainString);

        // -(void)stop;
        [Export("stop")]
        void Stop();
    }

    // @protocol NSNetServiceDelegate <NSObject>
    [NoWatch]
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSNetServiceDelegate
    {
        // @optional -(void)netServiceWillPublish:(NSNetService * _Nonnull)sender;
        [Export("netServiceWillPublish:")]
        void NetServiceWillPublish(NSNetService sender);

        // @optional -(void)netServiceDidPublish:(NSNetService * _Nonnull)sender;
        [Export("netServiceDidPublish:")]
        void NetServiceDidPublish(NSNetService sender);

        // @optional -(void)netService:(NSNetService * _Nonnull)sender didNotPublish:(NSDictionary<NSString *,NSNumber *> * _Nonnull)errorDict;
        [Export("netService:didNotPublish:")]
        void NetService(NSNetService sender, NSDictionary<NSString, NSNumber> errorDict);

        // @optional -(void)netServiceWillResolve:(NSNetService * _Nonnull)sender;
        [Export("netServiceWillResolve:")]
        void NetServiceWillResolve(NSNetService sender);

        // @optional -(void)netServiceDidResolveAddress:(NSNetService * _Nonnull)sender;
        [Export("netServiceDidResolveAddress:")]
        void NetServiceDidResolveAddress(NSNetService sender);

        // @optional -(void)netService:(NSNetService * _Nonnull)sender didNotResolve:(NSDictionary<NSString *,NSNumber *> * _Nonnull)errorDict;
        [Export("netService:didNotResolve:")]
        void NetService(NSNetService sender, NSDictionary<NSString, NSNumber> errorDict);

        // @optional -(void)netServiceDidStop:(NSNetService * _Nonnull)sender;
        [Export("netServiceDidStop:")]
        void NetServiceDidStop(NSNetService sender);

        // @optional -(void)netService:(NSNetService * _Nonnull)sender didUpdateTXTRecordData:(NSData * _Nonnull)data;
        [Export("netService:didUpdateTXTRecordData:")]
        void NetService(NSNetService sender, NSData data);

        // @optional -(void)netService:(NSNetService * _Nonnull)sender didAcceptConnectionWithInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Watch(2, 0), TV(9, 0), Mac(10, 9), iOS(7, 0)]
        [Export("netService:didAcceptConnectionWithInputStream:outputStream:")]
        void NetService(NSNetService sender, NSInputStream inputStream, NSOutputStream outputStream);
    }

    // @protocol NSNetServiceBrowserDelegate <NSObject>
    [NoWatch]
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSNetServiceBrowserDelegate
    {
        // @optional -(void)netServiceBrowserWillSearch:(NSNetServiceBrowser * _Nonnull)browser;
        [Export("netServiceBrowserWillSearch:")]
        void NetServiceBrowserWillSearch(NSNetServiceBrowser browser);

        // @optional -(void)netServiceBrowserDidStopSearch:(NSNetServiceBrowser * _Nonnull)browser;
        [Export("netServiceBrowserDidStopSearch:")]
        void NetServiceBrowserDidStopSearch(NSNetServiceBrowser browser);

        // @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didNotSearch:(NSDictionary<NSString *,NSNumber *> * _Nonnull)errorDict;
        [Export("netServiceBrowser:didNotSearch:")]
        void NetServiceBrowser(NSNetServiceBrowser browser, NSDictionary<NSString, NSNumber> errorDict);

        // @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didFindDomain:(NSString * _Nonnull)domainString moreComing:(BOOL)moreComing;
        [Export("netServiceBrowser:didFindDomain:moreComing:")]
        void NetServiceBrowser(NSNetServiceBrowser browser, string domainString, bool moreComing);

        // @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didFindService:(NSNetService * _Nonnull)service moreComing:(BOOL)moreComing;
        [Export("netServiceBrowser:didFindService:moreComing:")]
        void NetServiceBrowser(NSNetServiceBrowser browser, NSNetService service, bool moreComing);

        // @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didRemoveDomain:(NSString * _Nonnull)domainString moreComing:(BOOL)moreComing;
        [Export("netServiceBrowser:didRemoveDomain:moreComing:")]
        void NetServiceBrowser(NSNetServiceBrowser browser, string domainString, bool moreComing);

        // @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didRemoveService:(NSNetService * _Nonnull)service moreComing:(BOOL)moreComing;
        [Export("netServiceBrowser:didRemoveService:moreComing:")]
        void NetServiceBrowser(NSNetServiceBrowser browser, NSNetService service, bool moreComing);
    }

    // @interface NSUbiquitousKeyValueStore : NSObject
    [NoWatch, iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface NSUbiquitousKeyValueStore
    {
        // @property (readonly, strong, class) NSUbiquitousKeyValueStore * _Nonnull defaultStore;
        [Static]
        [Export("defaultStore", ArgumentSemantic.Strong)]
        NSUbiquitousKeyValueStore DefaultStore { get; }

        // -(id _Nullable)objectForKey:(NSString * _Nonnull)aKey;
        [Export("objectForKey:")]
        [return: NullAllowed]
        NSObject ObjectForKey(string aKey);

        // -(void)setObject:(id _Nullable)anObject forKey:(NSString * _Nonnull)aKey;
        [Export("setObject:forKey:")]
        void SetObject([NullAllowed] NSObject anObject, string aKey);

        // -(void)removeObjectForKey:(NSString * _Nonnull)aKey;
        [Export("removeObjectForKey:")]
        void RemoveObjectForKey(string aKey);

        // -(NSString * _Nullable)stringForKey:(NSString * _Nonnull)aKey;
        [Export("stringForKey:")]
        [return: NullAllowed]
        string StringForKey(string aKey);

        // -(NSArray * _Nullable)arrayForKey:(NSString * _Nonnull)aKey;
        [Export("arrayForKey:")]
        [Verify(StronglyTypedNSArray)]
        [return: NullAllowed]
        NSObject[] ArrayForKey(string aKey);

        // -(NSDictionary<NSString *,id> * _Nullable)dictionaryForKey:(NSString * _Nonnull)aKey;
        [Export("dictionaryForKey:")]
        [return: NullAllowed]
        NSDictionary<NSString, NSObject> DictionaryForKey(string aKey);

        // -(NSData * _Nullable)dataForKey:(NSString * _Nonnull)aKey;
        [Export("dataForKey:")]
        [return: NullAllowed]
        NSData DataForKey(string aKey);

        // -(long long)longLongForKey:(NSString * _Nonnull)aKey;
        [Export("longLongForKey:")]
        long LongLongForKey(string aKey);

        // -(double)doubleForKey:(NSString * _Nonnull)aKey;
        [Export("doubleForKey:")]
        double DoubleForKey(string aKey);

        // -(BOOL)boolForKey:(NSString * _Nonnull)aKey;
        [Export("boolForKey:")]
        bool BoolForKey(string aKey);

        // -(void)setString:(NSString * _Nullable)aString forKey:(NSString * _Nonnull)aKey;
        [Export("setString:forKey:")]
        void SetString([NullAllowed] string aString, string aKey);

        // -(void)setData:(NSData * _Nullable)aData forKey:(NSString * _Nonnull)aKey;
        [Export("setData:forKey:")]
        void SetData([NullAllowed] NSData aData, string aKey);

        // -(void)setArray:(NSArray * _Nullable)anArray forKey:(NSString * _Nonnull)aKey;
        [Export("setArray:forKey:")]
        [Verify(StronglyTypedNSArray)]
        void SetArray([NullAllowed] NSObject[] anArray, string aKey);

        // -(void)setDictionary:(NSDictionary<NSString *,id> * _Nullable)aDictionary forKey:(NSString * _Nonnull)aKey;
        [Export("setDictionary:forKey:")]
        void SetDictionary([NullAllowed] NSDictionary<NSString, NSObject> aDictionary, string aKey);

        // -(void)setLongLong:(long long)value forKey:(NSString * _Nonnull)aKey;
        [Export("setLongLong:forKey:")]
        void SetLongLong(long value, string aKey);

        // -(void)setDouble:(double)value forKey:(NSString * _Nonnull)aKey;
        [Export("setDouble:forKey:")]
        void SetDouble(double value, string aKey);

        // -(void)setBool:(BOOL)value forKey:(NSString * _Nonnull)aKey;
        [Export("setBool:forKey:")]
        void SetBool(bool value, string aKey);

        // @property (readonly, copy) NSDictionary<NSString *,id> * _Nonnull dictionaryRepresentation;
        [Export("dictionaryRepresentation", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> DictionaryRepresentation { get; }

        // -(BOOL)synchronize;
        [Export("synchronize")]
        [Verify(MethodToProperty)]
        bool Synchronize { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const NSNotificationName _Nonnull NSUbiquitousKeyValueStoreDidChangeExternallyNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSUbiquitousKeyValueStoreDidChangeExternallyNotification", "__Internal")]
        NSString NSUbiquitousKeyValueStoreDidChangeExternallyNotification { get; }

        // extern NSString *const _Nonnull NSUbiquitousKeyValueStoreChangeReasonKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSUbiquitousKeyValueStoreChangeReasonKey", "__Internal")]
        NSString NSUbiquitousKeyValueStoreChangeReasonKey { get; }

        // extern NSString *const _Nonnull NSUbiquitousKeyValueStoreChangedKeysKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSUbiquitousKeyValueStoreChangedKeysKey", "__Internal")]
        NSString NSUbiquitousKeyValueStoreChangedKeysKey { get; }
    }

    // @interface NSUndoManager : NSObject
    [iOS(3, 0)]
    [BaseType(typeof(NSObject))]
    interface NSUndoManager
    {
        // -(void)beginUndoGrouping;
        [Export("beginUndoGrouping")]
        void BeginUndoGrouping();

        // -(void)endUndoGrouping;
        [Export("endUndoGrouping")]
        void EndUndoGrouping();

        // @property (readonly) NSInteger groupingLevel;
        [Export("groupingLevel")]
        nint GroupingLevel { get; }

        // -(void)disableUndoRegistration;
        [Export("disableUndoRegistration")]
        void DisableUndoRegistration();

        // -(void)enableUndoRegistration;
        [Export("enableUndoRegistration")]
        void EnableUndoRegistration();

        // @property (readonly, getter = isUndoRegistrationEnabled) BOOL undoRegistrationEnabled;
        [Export("undoRegistrationEnabled")]
        bool UndoRegistrationEnabled { [Bind("isUndoRegistrationEnabled")] get; }

        // @property BOOL groupsByEvent;
        [Export("groupsByEvent")]
        bool GroupsByEvent { get; set; }

        // @property NSUInteger levelsOfUndo;
        [Export("levelsOfUndo")]
        nuint LevelsOfUndo { get; set; }

        // @property (copy) NSArray<NSRunLoopMode> * _Nonnull runLoopModes;
        [Export("runLoopModes", ArgumentSemantic.Copy)]
        string[] RunLoopModes { get; set; }

        // -(void)undo;
        [Export("undo")]
        void Undo();

        // -(void)redo;
        [Export("redo")]
        void Redo();

        // -(void)undoNestedGroup;
        [Export("undoNestedGroup")]
        void UndoNestedGroup();

        // @property (readonly) BOOL canUndo;
        [Export("canUndo")]
        bool CanUndo { get; }

        // @property (readonly) BOOL canRedo;
        [Export("canRedo")]
        bool CanRedo { get; }

        // @property (readonly, getter = isUndoing) BOOL undoing;
        [Export("undoing")]
        bool Undoing { [Bind("isUndoing")] get; }

        // @property (readonly, getter = isRedoing) BOOL redoing;
        [Export("redoing")]
        bool Redoing { [Bind("isRedoing")] get; }

        // -(void)removeAllActions;
        [Export("removeAllActions")]
        void RemoveAllActions();

        // -(void)removeAllActionsWithTarget:(id _Nonnull)target;
        [Export("removeAllActionsWithTarget:")]
        void RemoveAllActionsWithTarget(NSObject target);

        // -(void)registerUndoWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)selector object:(id _Nullable)anObject;
        [Export("registerUndoWithTarget:selector:object:")]
        void RegisterUndoWithTarget(NSObject target, Selector selector, [NullAllowed] NSObject anObject);

        // -(id _Nonnull)prepareWithInvocationTarget:(id _Nonnull)target;
        [Export("prepareWithInvocationTarget:")]
        NSObject PrepareWithInvocationTarget(NSObject target);

        // -(void)registerUndoWithTarget:(id _Nonnull)target handler:(void (^ _Nonnull)(id _Nonnull))undoHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("registerUndoWithTarget:handler:")]
        void RegisterUndoWithTarget(NSObject target, Action<NSObject> undoHandler);

        // -(void)setActionIsDiscardable:(BOOL)discardable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("setActionIsDiscardable:")]
        void SetActionIsDiscardable(bool discardable);

        // @property (readonly) BOOL undoActionIsDiscardable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("undoActionIsDiscardable")]
        bool UndoActionIsDiscardable { get; }

        // @property (readonly) BOOL redoActionIsDiscardable __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Export("redoActionIsDiscardable")]
        bool RedoActionIsDiscardable { get; }

        // @property (readonly, copy) NSString * _Nonnull undoActionName;
        [Export("undoActionName")]
        string UndoActionName { get; }

        // @property (readonly, copy) NSString * _Nonnull redoActionName;
        [Export("redoActionName")]
        string RedoActionName { get; }

        // -(void)setActionName:(NSString * _Nonnull)actionName;
        [Export("setActionName:")]
        void SetActionName(string actionName);

        // @property (readonly, copy) NSString * _Nonnull undoMenuItemTitle;
        [Export("undoMenuItemTitle")]
        string UndoMenuItemTitle { get; }

        // @property (readonly, copy) NSString * _Nonnull redoMenuItemTitle;
        [Export("redoMenuItemTitle")]
        string RedoMenuItemTitle { get; }

        // -(NSString * _Nonnull)undoMenuTitleForUndoActionName:(NSString * _Nonnull)actionName;
        [Export("undoMenuTitleForUndoActionName:")]
        string UndoMenuTitleForUndoActionName(string actionName);

        // -(NSString * _Nonnull)redoMenuTitleForUndoActionName:(NSString * _Nonnull)actionName;
        [Export("redoMenuTitleForUndoActionName:")]
        string RedoMenuTitleForUndoActionName(string actionName);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull NSUndoManagerGroupIsDiscardableKey __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSUndoManagerGroupIsDiscardableKey", "__Internal")]
        NSString NSUndoManagerGroupIsDiscardableKey { get; }

        // extern const NSNotificationName _Nonnull NSUndoManagerCheckpointNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.0)));
        [Watch(2, 0), TV(9, 0), Mac(10, 0), iOS(3, 0)]
        [Field("NSUndoManagerCheckpointNotification", "__Internal")]
        NSString NSUndoManagerCheckpointNotification { get; }

        // extern const NSNotificationName _Nonnull NSUndoManagerWillUndoChangeNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.0)));
        [Watch(2, 0), TV(9, 0), Mac(10, 0), iOS(3, 0)]
        [Field("NSUndoManagerWillUndoChangeNotification", "__Internal")]
        NSString NSUndoManagerWillUndoChangeNotification { get; }

        // extern const NSNotificationName _Nonnull NSUndoManagerWillRedoChangeNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.0)));
        [Watch(2, 0), TV(9, 0), Mac(10, 0), iOS(3, 0)]
        [Field("NSUndoManagerWillRedoChangeNotification", "__Internal")]
        NSString NSUndoManagerWillRedoChangeNotification { get; }

        // extern const NSNotificationName _Nonnull NSUndoManagerDidUndoChangeNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.0)));
        [Watch(2, 0), TV(9, 0), Mac(10, 0), iOS(3, 0)]
        [Field("NSUndoManagerDidUndoChangeNotification", "__Internal")]
        NSString NSUndoManagerDidUndoChangeNotification { get; }

        // extern const NSNotificationName _Nonnull NSUndoManagerDidRedoChangeNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.0)));
        [Watch(2, 0), TV(9, 0), Mac(10, 0), iOS(3, 0)]
        [Field("NSUndoManagerDidRedoChangeNotification", "__Internal")]
        NSString NSUndoManagerDidRedoChangeNotification { get; }

        // extern const NSNotificationName _Nonnull NSUndoManagerDidOpenUndoGroupNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.0)));
        [Watch(2, 0), TV(9, 0), Mac(10, 0), iOS(3, 0)]
        [Field("NSUndoManagerDidOpenUndoGroupNotification", "__Internal")]
        NSString NSUndoManagerDidOpenUndoGroupNotification { get; }

        // extern const NSNotificationName _Nonnull NSUndoManagerWillCloseUndoGroupNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.0)));
        [Watch(2, 0), TV(9, 0), Mac(10, 0), iOS(3, 0)]
        [Field("NSUndoManagerWillCloseUndoGroupNotification", "__Internal")]
        NSString NSUndoManagerWillCloseUndoGroupNotification { get; }

        // extern const NSNotificationName _Nonnull NSUndoManagerDidCloseUndoGroupNotification __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(5, 0)]
        [Field("NSUndoManagerDidCloseUndoGroupNotification", "__Internal")]
        NSString NSUndoManagerDidCloseUndoGroupNotification { get; }

        // extern const int64_t NSURLSessionTransferSizeUnknown __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSURLSessionTransferSizeUnknown", "__Internal")]
        long NSURLSessionTransferSizeUnknown { get; }
    }

    // @interface NSURLSession : NSObject
    [iOS(7, 0)]
    [BaseType(typeof(NSObject))]
    interface NSURLSession
    {
        // @property (readonly, strong, class) NSURLSession * _Nonnull sharedSession;
        [Static]
        [Export("sharedSession", ArgumentSemantic.Strong)]
        NSUrlSession SharedSession { get; }

        // +(NSURLSession * _Nonnull)sessionWithConfiguration:(NSURLSessionConfiguration * _Nonnull)configuration;
        [Static]
        [Export("sessionWithConfiguration:")]
        NSUrlSession SessionWithConfiguration(NSUrlSessionConfiguration configuration);

        // +(NSURLSession * _Nonnull)sessionWithConfiguration:(NSURLSessionConfiguration * _Nonnull)configuration delegate:(id<NSURLSessionDelegate> _Nullable)delegate delegateQueue:(NSOperationQueue * _Nullable)queue;
        [Static]
        [Export("sessionWithConfiguration:delegate:delegateQueue:")]
        NSUrlSession SessionWithConfiguration(NSUrlSessionConfiguration configuration, [NullAllowed] NSUrlSessionDelegate @delegate, [NullAllowed] NSOperationQueue queue);

        // @property (readonly, retain) NSOperationQueue * _Nonnull delegateQueue;
        [Export("delegateQueue", ArgumentSemantic.Retain)]
        NSOperationQueue DelegateQueue { get; }

        [Wrap("WeakDelegate")]
        [NullAllowed]
        NSUrlSessionDelegate Delegate { get; }

        // @property (readonly, retain) id<NSURLSessionDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Retain)]
        NSObject WeakDelegate { get; }

        // @property (readonly, copy) NSURLSessionConfiguration * _Nonnull configuration;
        [Export("configuration", ArgumentSemantic.Copy)]
        NSUrlSessionConfiguration Configuration { get; }

        // @property (copy) NSString * _Nullable sessionDescription;
        [NullAllowed, Export("sessionDescription")]
        string SessionDescription { get; set; }

        // -(void)finishTasksAndInvalidate;
        [Export("finishTasksAndInvalidate")]
        void FinishTasksAndInvalidate();

        // -(void)invalidateAndCancel;
        [Export("invalidateAndCancel")]
        void InvalidateAndCancel();

        // -(void)resetWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
        [Export("resetWithCompletionHandler:")]
        void ResetWithCompletionHandler(Action completionHandler);

        // -(void)flushWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
        [Export("flushWithCompletionHandler:")]
        void FlushWithCompletionHandler(Action completionHandler);

        // -(void)getTasksWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSURLSessionDataTask *> * _Nonnull, NSArray<NSURLSessionUploadTask *> * _Nonnull, NSArray<NSURLSessionDownloadTask *> * _Nonnull))completionHandler;
        [Export("getTasksWithCompletionHandler:")]
        void GetTasksWithCompletionHandler(Action<NSArray<NSURLSessionDataTask>, NSArray<NSURLSessionUploadTask>, NSArray<NSURLSessionDownloadTask>> completionHandler);

        // -(void)getAllTasksWithCompletionHandler:(void (^ _Nonnull)(NSArray<__kindof NSURLSessionTask *> * _Nonnull))completionHandler __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("getAllTasksWithCompletionHandler:")]
        void GetAllTasksWithCompletionHandler(Action<NSArray<NSURLSessionTask>> completionHandler);

        // -(NSURLSessionDataTask * _Nonnull)dataTaskWithRequest:(NSURLRequest * _Nonnull)request;
        [Export("dataTaskWithRequest:")]
        NSUrlSessionDataTask DataTaskWithRequest(NSUrlRequest request);

        // -(NSURLSessionDataTask * _Nonnull)dataTaskWithURL:(NSURL * _Nonnull)url;
        [Export("dataTaskWithURL:")]
        NSUrlSessionDataTask DataTaskWithURL(NSUrl url);

        // -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithRequest:(NSURLRequest * _Nonnull)request fromFile:(NSURL * _Nonnull)fileURL;
        [Export("uploadTaskWithRequest:fromFile:")]
        NSUrlSessionUploadTask UploadTaskWithRequest(NSUrlRequest request, NSUrl fileURL);

        // -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithRequest:(NSURLRequest * _Nonnull)request fromData:(NSData * _Nonnull)bodyData;
        [Export("uploadTaskWithRequest:fromData:")]
        NSUrlSessionUploadTask UploadTaskWithRequest(NSUrlRequest request, NSData bodyData);

        // -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithStreamedRequest:(NSURLRequest * _Nonnull)request;
        [Export("uploadTaskWithStreamedRequest:")]
        NSUrlSessionUploadTask UploadTaskWithStreamedRequest(NSUrlRequest request);

        // -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithRequest:(NSURLRequest * _Nonnull)request;
        [Export("downloadTaskWithRequest:")]
        NSUrlSessionDownloadTask DownloadTaskWithRequest(NSUrlRequest request);

        // -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithURL:(NSURL * _Nonnull)url;
        [Export("downloadTaskWithURL:")]
        NSUrlSessionDownloadTask DownloadTaskWithURL(NSUrl url);

        // -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithResumeData:(NSData * _Nonnull)resumeData;
        [Export("downloadTaskWithResumeData:")]
        NSUrlSessionDownloadTask DownloadTaskWithResumeData(NSData resumeData);

        // -(NSURLSessionStreamTask * _Nonnull)streamTaskWithHostName:(NSString * _Nonnull)hostname port:(NSInteger)port __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [TV(9, 0), NoWatch, Mac(10, 11), iOS(9, 0)]
        [Export("streamTaskWithHostName:port:")]
        NSUrlSessionStreamTask StreamTaskWithHostName(string hostname, nint port);

        // -(NSURLSessionStreamTask * _Nonnull)streamTaskWithNetService:(NSNetService * _Nonnull)service __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [TV(9, 0), NoWatch, Mac(10, 11), iOS(9, 0)]
        [Export("streamTaskWithNetService:")]
        NSUrlSessionStreamTask StreamTaskWithNetService(NSNetService service);
    }

    // @interface NSURLSessionAsynchronousConvenience (NSURLSession)
    [Category]
    [BaseType(typeof(NSUrlSession))]
    interface NSURLSession_NSURLSessionAsynchronousConvenience
    {
        // -(NSURLSessionDataTask * _Nonnull)dataTaskWithRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
        [Export("dataTaskWithRequest:completionHandler:")]
        NSUrlSessionDataTask DataTaskWithRequest(NSUrlRequest request, Action<NSData, NSURLResponse, NSError> completionHandler);

        // -(NSURLSessionDataTask * _Nonnull)dataTaskWithURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
        [Export("dataTaskWithURL:completionHandler:")]
        NSUrlSessionDataTask DataTaskWithURL(NSUrl url, Action<NSData, NSURLResponse, NSError> completionHandler);

        // -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithRequest:(NSURLRequest * _Nonnull)request fromFile:(NSURL * _Nonnull)fileURL completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
        [Export("uploadTaskWithRequest:fromFile:completionHandler:")]
        NSUrlSessionUploadTask UploadTaskWithRequest(NSUrlRequest request, NSUrl fileURL, Action<NSData, NSURLResponse, NSError> completionHandler);

        // -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithRequest:(NSURLRequest * _Nonnull)request fromData:(NSData * _Nullable)bodyData completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
        [Export("uploadTaskWithRequest:fromData:completionHandler:")]
        NSUrlSessionUploadTask UploadTaskWithRequest(NSUrlRequest request, [NullAllowed] NSData bodyData, Action<NSData, NSURLResponse, NSError> completionHandler);

        // -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
        [Export("downloadTaskWithRequest:completionHandler:")]
        NSUrlSessionDownloadTask DownloadTaskWithRequest(NSUrlRequest request, Action<NSURL, NSURLResponse, NSError> completionHandler);

        // -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
        [Export("downloadTaskWithURL:completionHandler:")]
        NSUrlSessionDownloadTask DownloadTaskWithURL(NSUrl url, Action<NSURL, NSURLResponse, NSError> completionHandler);

        // -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithResumeData:(NSData * _Nonnull)resumeData completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
        [Export("downloadTaskWithResumeData:completionHandler:")]
        NSUrlSessionDownloadTask DownloadTaskWithResumeData(NSData resumeData, Action<NSURL, NSURLResponse, NSError> completionHandler);
    }

    // @interface NSURLSessionTask : NSObject <NSCopying, NSProgressReporting>
    [iOS(7, 0)]
    [BaseType(typeof(NSObject))]
    interface NSURLSessionTask : INSCopying, INSProgressReporting
    {
        // @property (readonly) NSUInteger taskIdentifier;
        [Export("taskIdentifier")]
        nuint TaskIdentifier { get; }

        // @property (readonly, copy) NSURLRequest * _Nullable originalRequest;
        [NullAllowed, Export("originalRequest", ArgumentSemantic.Copy)]
        NSUrlRequest OriginalRequest { get; }

        // @property (readonly, copy) NSURLRequest * _Nullable currentRequest;
        [NullAllowed, Export("currentRequest", ArgumentSemantic.Copy)]
        NSUrlRequest CurrentRequest { get; }

        // @property (readonly, copy) NSURLResponse * _Nullable response;
        [NullAllowed, Export("response", ArgumentSemantic.Copy)]
        NSUrlResponse Response { get; }

        // @property (readonly, strong) NSProgress * _Nonnull progress __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("progress", ArgumentSemantic.Strong)]
        NSProgress Progress { get; }

        // @property (copy) NSDate * _Nullable earliestBeginDate __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [NullAllowed, Export("earliestBeginDate", ArgumentSemantic.Copy)]
        NSDate EarliestBeginDate { get; set; }

        // @property int64_t countOfBytesClientExpectsToSend __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("countOfBytesClientExpectsToSend")]
        long CountOfBytesClientExpectsToSend { get; set; }

        // @property int64_t countOfBytesClientExpectsToReceive __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("countOfBytesClientExpectsToReceive")]
        long CountOfBytesClientExpectsToReceive { get; set; }

        // @property (readonly) int64_t countOfBytesReceived;
        [Export("countOfBytesReceived")]
        long CountOfBytesReceived { get; }

        // @property (readonly) int64_t countOfBytesSent;
        [Export("countOfBytesSent")]
        long CountOfBytesSent { get; }

        // @property (readonly) int64_t countOfBytesExpectedToSend;
        [Export("countOfBytesExpectedToSend")]
        long CountOfBytesExpectedToSend { get; }

        // @property (readonly) int64_t countOfBytesExpectedToReceive;
        [Export("countOfBytesExpectedToReceive")]
        long CountOfBytesExpectedToReceive { get; }

        // @property (copy) NSString * _Nullable taskDescription;
        [NullAllowed, Export("taskDescription")]
        string TaskDescription { get; set; }

        // -(void)cancel;
        [Export("cancel")]
        void Cancel();

        // @property (readonly) NSURLSessionTaskState state;
        [Export("state")]
        NSURLSessionTaskState State { get; }

        // @property (readonly, copy) NSError * _Nullable error;
        [NullAllowed, Export("error", ArgumentSemantic.Copy)]
        NSError Error { get; }

        // -(void)suspend;
        [Export("suspend")]
        void Suspend();

        // -(void)resume;
        [Export("resume")]
        void Resume();

        // @property float priority __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Export("priority")]
        float Priority { get; set; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const float NSURLSessionTaskPriorityDefault __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSURLSessionTaskPriorityDefault", "__Internal")]
        float NSURLSessionTaskPriorityDefault { get; }

        // extern const float NSURLSessionTaskPriorityLow __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSURLSessionTaskPriorityLow", "__Internal")]
        float NSURLSessionTaskPriorityLow { get; }

        // extern const float NSURLSessionTaskPriorityHigh __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Field("NSURLSessionTaskPriorityHigh", "__Internal")]
        float NSURLSessionTaskPriorityHigh { get; }
    }

    // @interface NSURLSessionDataTask : NSURLSessionTask
    [BaseType(typeof(NSUrlSessionTask))]
    interface NSURLSessionDataTask
    {
    }

    // @interface NSURLSessionUploadTask : NSURLSessionDataTask
    [BaseType(typeof(NSUrlSessionDataTask))]
    interface NSURLSessionUploadTask
    {
    }

    // @interface NSURLSessionDownloadTask : NSURLSessionTask
    [BaseType(typeof(NSUrlSessionTask))]
    interface NSURLSessionDownloadTask
    {
        // -(void)cancelByProducingResumeData:(void (^ _Nonnull)(NSData * _Nullable))completionHandler;
        [Export("cancelByProducingResumeData:")]
        void CancelByProducingResumeData(Action<NSData> completionHandler);
    }

    // @interface NSURLSessionStreamTask : NSURLSessionTask
    [iOS(9, 0)]
    [BaseType(typeof(NSUrlSessionTask))]
    interface NSURLSessionStreamTask
    {
        // -(void)readDataOfMinLength:(NSUInteger)minBytes maxLength:(NSUInteger)maxBytes timeout:(NSTimeInterval)timeout completionHandler:(void (^ _Nonnull)(NSData * _Nullable, BOOL, NSError * _Nullable))completionHandler;
        [Export("readDataOfMinLength:maxLength:timeout:completionHandler:")]
        void ReadDataOfMinLength(nuint minBytes, nuint maxBytes, double timeout, Action<NSData, bool, NSError> completionHandler);

        // -(void)writeData:(NSData * _Nonnull)data timeout:(NSTimeInterval)timeout completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
        [Export("writeData:timeout:completionHandler:")]
        void WriteData(NSData data, double timeout, Action<NSError> completionHandler);

        // -(void)captureStreams;
        [Export("captureStreams")]
        void CaptureStreams();

        // -(void)closeWrite;
        [Export("closeWrite")]
        void CloseWrite();

        // -(void)closeRead;
        [Export("closeRead")]
        void CloseRead();

        // -(void)startSecureConnection;
        [Export("startSecureConnection")]
        void StartSecureConnection();

        // -(void)stopSecureConnection;
        [Export("stopSecureConnection")]
        void StopSecureConnection();
    }

    // @interface NSURLSessionConfiguration : NSObject <NSCopying>
    [iOS(7, 0)]
    [BaseType(typeof(NSObject))]
    interface NSURLSessionConfiguration : INSCopying
    {
        // @property (readonly, strong, class) NSURLSessionConfiguration * _Nonnull defaultSessionConfiguration;
        [Static]
        [Export("defaultSessionConfiguration", ArgumentSemantic.Strong)]
        NSUrlSessionConfiguration DefaultSessionConfiguration { get; }

        // @property (readonly, strong, class) NSURLSessionConfiguration * _Nonnull ephemeralSessionConfiguration;
        [Static]
        [Export("ephemeralSessionConfiguration", ArgumentSemantic.Strong)]
        NSUrlSessionConfiguration EphemeralSessionConfiguration { get; }

        // +(NSURLSessionConfiguration * _Nonnull)backgroundSessionConfigurationWithIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [Static]
        [Export("backgroundSessionConfigurationWithIdentifier:")]
        NSUrlSessionConfiguration BackgroundSessionConfigurationWithIdentifier(string identifier);

        // @property (readonly, copy) NSString * _Nullable identifier;
        [NullAllowed, Export("identifier")]
        string Identifier { get; }

        // @property NSURLRequestCachePolicy requestCachePolicy;
        [Export("requestCachePolicy", ArgumentSemantic.Assign)]
        NSURLRequestCachePolicy RequestCachePolicy { get; set; }

        // @property NSTimeInterval timeoutIntervalForRequest;
        [Export("timeoutIntervalForRequest")]
        double TimeoutIntervalForRequest { get; set; }

        // @property NSTimeInterval timeoutIntervalForResource;
        [Export("timeoutIntervalForResource")]
        double TimeoutIntervalForResource { get; set; }

        // @property NSURLRequestNetworkServiceType networkServiceType;
        [Export("networkServiceType", ArgumentSemantic.Assign)]
        NSURLRequestNetworkServiceType NetworkServiceType { get; set; }

        // @property BOOL allowsCellularAccess;
        [Export("allowsCellularAccess")]
        bool AllowsCellularAccess { get; set; }

        // @property BOOL waitsForConnectivity __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("waitsForConnectivity")]
        bool WaitsForConnectivity { get; set; }

        // @property (getter = isDiscretionary) BOOL discretionary __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(7, 0)]
        [Export("discretionary")]
        bool Discretionary { [Bind("isDiscretionary")] get; set; }

        // @property (copy) NSString * _Nullable sharedContainerIdentifier __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
        [NullAllowed, Export("sharedContainerIdentifier")]
        string SharedContainerIdentifier { get; set; }

        // @property BOOL sessionSendsLaunchEvents __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(7, 0)]
        [Export("sessionSendsLaunchEvents")]
        bool SessionSendsLaunchEvents { get; set; }

        // @property (copy) NSDictionary * _Nullable connectionProxyDictionary;
        [NullAllowed, Export("connectionProxyDictionary", ArgumentSemantic.Copy)]
        NSDictionary ConnectionProxyDictionary { get; set; }

        // @property SSLProtocol TLSMinimumSupportedProtocol;
        [Export("TLSMinimumSupportedProtocol", ArgumentSemantic.Assign)]
        SSLProtocol TLSMinimumSupportedProtocol { get; set; }

        // @property SSLProtocol TLSMaximumSupportedProtocol;
        [Export("TLSMaximumSupportedProtocol", ArgumentSemantic.Assign)]
        SSLProtocol TLSMaximumSupportedProtocol { get; set; }

        // @property BOOL HTTPShouldUsePipelining;
        [Export("HTTPShouldUsePipelining")]
        bool HTTPShouldUsePipelining { get; set; }

        // @property BOOL HTTPShouldSetCookies;
        [Export("HTTPShouldSetCookies")]
        bool HTTPShouldSetCookies { get; set; }

        // @property NSHTTPCookieAcceptPolicy HTTPCookieAcceptPolicy;
        [Export("HTTPCookieAcceptPolicy", ArgumentSemantic.Assign)]
        NSHTTPCookieAcceptPolicy HTTPCookieAcceptPolicy { get; set; }

        // @property (copy) NSDictionary * _Nullable HTTPAdditionalHeaders;
        [NullAllowed, Export("HTTPAdditionalHeaders", ArgumentSemantic.Copy)]
        NSDictionary HTTPAdditionalHeaders { get; set; }

        // @property NSInteger HTTPMaximumConnectionsPerHost;
        [Export("HTTPMaximumConnectionsPerHost")]
        nint HTTPMaximumConnectionsPerHost { get; set; }

        // @property (retain) NSHTTPCookieStorage * _Nullable HTTPCookieStorage;
        [NullAllowed, Export("HTTPCookieStorage", ArgumentSemantic.Retain)]
        NSHttpCookieStorage HTTPCookieStorage { get; set; }

        // @property (retain) NSURLCredentialStorage * _Nullable URLCredentialStorage;
        [NullAllowed, Export("URLCredentialStorage", ArgumentSemantic.Retain)]
        NSUrlCredentialStorage URLCredentialStorage { get; set; }

        // @property (retain) NSURLCache * _Nullable URLCache;
        [NullAllowed, Export("URLCache", ArgumentSemantic.Retain)]
        NSUrlCache URLCache { get; set; }

        // @property BOOL shouldUseExtendedBackgroundIdleMode __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
        [Export("shouldUseExtendedBackgroundIdleMode")]
        bool ShouldUseExtendedBackgroundIdleMode { get; set; }

        // @property (copy) NSArray<Class> * _Nullable protocolClasses;
        [NullAllowed, Export("protocolClasses", ArgumentSemantic.Copy)]
        Class[] ProtocolClasses { get; set; }

        // @property NSURLSessionMultipathServiceType multipathServiceType __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
        [NoWatch, NoTV, NoMac, iOS(11, 0)]
        [Export("multipathServiceType", ArgumentSemantic.Assign)]
        NSURLSessionMultipathServiceType MultipathServiceType { get; set; }
    }

    // @protocol NSURLSessionDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSURLSessionDelegate
    {
        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session didBecomeInvalidWithError:(NSError * _Nullable)error;
        [Export("URLSession:didBecomeInvalidWithError:")]
        void URLSession(NSUrlSession session, [NullAllowed] NSError error);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
        [Export("URLSession:didReceiveChallenge:completionHandler:")]
        void URLSession(NSUrlSession session, NSUrlAuthenticationChallenge challenge, Action<NSURLSessionAuthChallengeDisposition, NSURLCredential> completionHandler);

        // @optional -(void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0)));
        [Watch(2, 0), TV(9, 0), NoMac, iOS(7, 0)]
        [Export("URLSessionDidFinishEventsForBackgroundURLSession:")]
        void URLSessionDidFinishEventsForBackgroundURLSession(NSUrlSession session);
    }

    // @protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>
    [Protocol, Model]
    interface NSURLSessionTaskDelegate : INSUrlSessionDelegate
    {
        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willBeginDelayedRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLSessionDelayedRequestDisposition, NSURLRequest * _Nullable))completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("URLSession:task:willBeginDelayedRequest:completionHandler:")]
        void Task(NSUrlSession session, NSUrlSessionTask task, NSUrlRequest request, Action<NSURLSessionDelayedRequestDisposition, NSURLRequest> completionHandler);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session taskIsWaitingForConnectivity:(NSURLSessionTask * _Nonnull)task __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("URLSession:taskIsWaitingForConnectivity:")]
        void TaskIsWaitingForConnectivity(NSUrlSession session, NSUrlSessionTask task);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
        [Export("URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:")]
        void Task(NSUrlSession session, NSUrlSessionTask task, NSHttpUrlResponse response, NSUrlRequest request, Action<NSURLRequest> completionHandler);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
        [Export("URLSession:task:didReceiveChallenge:completionHandler:")]
        void Task(NSUrlSession session, NSUrlSessionTask task, NSUrlAuthenticationChallenge challenge, Action<NSURLSessionAuthChallengeDisposition, NSURLCredential> completionHandler);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task needNewBodyStream:(void (^ _Nonnull)(NSInputStream * _Nullable))completionHandler;
        [Export("URLSession:task:needNewBodyStream:")]
        void Task(NSUrlSession session, NSUrlSessionTask task, Action<NSInputStream> completionHandler);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
        [Export("URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:")]
        void Task(NSUrlSession session, NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didFinishCollectingMetrics:(NSURLSessionTaskMetrics * _Nonnull)metrics __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("URLSession:task:didFinishCollectingMetrics:")]
        void Task(NSUrlSession session, NSUrlSessionTask task, NSUrlSessionTaskMetrics metrics);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
        [Export("URLSession:task:didCompleteWithError:")]
        void Task(NSUrlSession session, NSUrlSessionTask task, [NullAllowed] NSError error);
    }

    // @protocol NSURLSessionDataDelegate <NSURLSessionTaskDelegate>
    [Protocol, Model]
    interface NSURLSessionDataDelegate : INSUrlSessionTaskDelegate
    {
        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(NSURLSessionResponseDisposition))completionHandler;
        [Export("URLSession:dataTask:didReceiveResponse:completionHandler:")]
        void DataTask(NSUrlSession session, NSUrlSessionDataTask dataTask, NSUrlResponse response, Action<NSURLSessionResponseDisposition> completionHandler);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeDownloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask;
        [Export("URLSession:dataTask:didBecomeDownloadTask:")]
        void DataTask(NSUrlSession session, NSUrlSessionDataTask dataTask, NSUrlSessionDownloadTask downloadTask);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
        [Export("URLSession:dataTask:didBecomeStreamTask:")]
        void DataTask(NSUrlSession session, NSUrlSessionDataTask dataTask, NSUrlSessionStreamTask streamTask);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
        [Export("URLSession:dataTask:didReceiveData:")]
        void DataTask(NSUrlSession session, NSUrlSessionDataTask dataTask, NSData data);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask willCacheResponse:(NSCachedURLResponse * _Nonnull)proposedResponse completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler;
        [Export("URLSession:dataTask:willCacheResponse:completionHandler:")]
        void DataTask(NSUrlSession session, NSUrlSessionDataTask dataTask, NSCachedUrlResponse proposedResponse, Action<NSCachedURLResponse> completionHandler);
    }

    // @protocol NSURLSessionDownloadDelegate <NSURLSessionTaskDelegate>
    [Protocol, Model]
    interface NSURLSessionDownloadDelegate : INSUrlSessionTaskDelegate
    {
        // @required -(void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
        [Abstract]
        [Export("URLSession:downloadTask:didFinishDownloadingToURL:")]
        void DownloadTask(NSUrlSession session, NSUrlSessionDownloadTask downloadTask, NSUrl location);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
        [Export("URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:")]
        void DownloadTask(NSUrlSession session, NSUrlSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
        [Export("URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:")]
        void DownloadTask(NSUrlSession session, NSUrlSessionDownloadTask downloadTask, long fileOffset, long expectedTotalBytes);
    }

    // @protocol NSURLSessionStreamDelegate <NSURLSessionTaskDelegate>
    [Protocol, Model]
    interface NSURLSessionStreamDelegate : INSUrlSessionTaskDelegate
    {
        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session readClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
        [Export("URLSession:readClosedForStreamTask:")]
        void ReadClosedForStreamTask(NSUrlSession session, NSUrlSessionStreamTask streamTask);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session writeClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
        [Export("URLSession:writeClosedForStreamTask:")]
        void WriteClosedForStreamTask(NSUrlSession session, NSUrlSessionStreamTask streamTask);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session betterRouteDiscoveredForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
        [Export("URLSession:betterRouteDiscoveredForStreamTask:")]
        void BetterRouteDiscoveredForStreamTask(NSUrlSession session, NSUrlSessionStreamTask streamTask);

        // @optional -(void)URLSession:(NSURLSession * _Nonnull)session streamTask:(NSURLSessionStreamTask * _Nonnull)streamTask didBecomeInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
        [Export("URLSession:streamTask:didBecomeInputStream:outputStream:")]
        void StreamTask(NSUrlSession session, NSUrlSessionStreamTask streamTask, NSInputStream inputStream, NSOutputStream outputStream);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull NSURLSessionDownloadTaskResumeData __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("NSURLSessionDownloadTaskResumeData", "__Internal")]
        NSString NSURLSessionDownloadTaskResumeData { get; }
    }

    // @interface NSURLSessionDeprecated (NSURLSessionConfiguration)
    [Category]
    [BaseType(typeof(NSUrlSessionConfiguration))]
    interface NSURLSessionConfiguration_NSURLSessionDeprecated
    {
        // +(NSURLSessionConfiguration * _Nonnull)backgroundSessionConfiguration:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=7_0, deprecated=8_0)));
        [Introduced(PlatformName.iOS, 7, 0, message: "Please use backgroundSessionConfigurationWithIdentifier: instead")]
        [Deprecated(PlatformName.iOS, 8, 0, message: "Please use backgroundSessionConfigurationWithIdentifier: instead")]
        [Static]
        [Export("backgroundSessionConfiguration:")]
        NSUrlSessionConfiguration BackgroundSessionConfiguration(string identifier);
    }

    // @interface NSURLSessionTaskTransactionMetrics : NSObject
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSObject))]
    interface NSURLSessionTaskTransactionMetrics
    {
        // @property (readonly, copy) NSURLRequest * _Nonnull request;
        [Export("request", ArgumentSemantic.Copy)]
        NSUrlRequest Request { get; }

        // @property (readonly, copy) NSURLResponse * _Nullable response;
        [NullAllowed, Export("response", ArgumentSemantic.Copy)]
        NSUrlResponse Response { get; }

        // @property (readonly, copy) NSDate * _Nullable fetchStartDate;
        [NullAllowed, Export("fetchStartDate", ArgumentSemantic.Copy)]
        NSDate FetchStartDate { get; }

        // @property (readonly, copy) NSDate * _Nullable domainLookupStartDate;
        [NullAllowed, Export("domainLookupStartDate", ArgumentSemantic.Copy)]
        NSDate DomainLookupStartDate { get; }

        // @property (readonly, copy) NSDate * _Nullable domainLookupEndDate;
        [NullAllowed, Export("domainLookupEndDate", ArgumentSemantic.Copy)]
        NSDate DomainLookupEndDate { get; }

        // @property (readonly, copy) NSDate * _Nullable connectStartDate;
        [NullAllowed, Export("connectStartDate", ArgumentSemantic.Copy)]
        NSDate ConnectStartDate { get; }

        // @property (readonly, copy) NSDate * _Nullable secureConnectionStartDate;
        [NullAllowed, Export("secureConnectionStartDate", ArgumentSemantic.Copy)]
        NSDate SecureConnectionStartDate { get; }

        // @property (readonly, copy) NSDate * _Nullable secureConnectionEndDate;
        [NullAllowed, Export("secureConnectionEndDate", ArgumentSemantic.Copy)]
        NSDate SecureConnectionEndDate { get; }

        // @property (readonly, copy) NSDate * _Nullable connectEndDate;
        [NullAllowed, Export("connectEndDate", ArgumentSemantic.Copy)]
        NSDate ConnectEndDate { get; }

        // @property (readonly, copy) NSDate * _Nullable requestStartDate;
        [NullAllowed, Export("requestStartDate", ArgumentSemantic.Copy)]
        NSDate RequestStartDate { get; }

        // @property (readonly, copy) NSDate * _Nullable requestEndDate;
        [NullAllowed, Export("requestEndDate", ArgumentSemantic.Copy)]
        NSDate RequestEndDate { get; }

        // @property (readonly, copy) NSDate * _Nullable responseStartDate;
        [NullAllowed, Export("responseStartDate", ArgumentSemantic.Copy)]
        NSDate ResponseStartDate { get; }

        // @property (readonly, copy) NSDate * _Nullable responseEndDate;
        [NullAllowed, Export("responseEndDate", ArgumentSemantic.Copy)]
        NSDate ResponseEndDate { get; }

        // @property (readonly, copy) NSString * _Nullable networkProtocolName;
        [NullAllowed, Export("networkProtocolName")]
        string NetworkProtocolName { get; }

        // @property (readonly, getter = isProxyConnection, assign) BOOL proxyConnection;
        [Export("proxyConnection")]
        bool ProxyConnection { [Bind("isProxyConnection")] get; }

        // @property (readonly, getter = isReusedConnection, assign) BOOL reusedConnection;
        [Export("reusedConnection")]
        bool ReusedConnection { [Bind("isReusedConnection")] get; }

        // @property (readonly, assign) NSURLSessionTaskMetricsResourceFetchType resourceFetchType;
        [Export("resourceFetchType", ArgumentSemantic.Assign)]
        NSURLSessionTaskMetricsResourceFetchType ResourceFetchType { get; }
    }

    // @interface NSURLSessionTaskMetrics : NSObject
    [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
    [BaseType(typeof(NSObject))]
    interface NSURLSessionTaskMetrics
    {
        // @property (readonly, copy) NSArray<NSURLSessionTaskTransactionMetrics *> * _Nonnull transactionMetrics;
        [Export("transactionMetrics", ArgumentSemantic.Copy)]
        NSUrlSessionTaskTransactionMetrics[] TransactionMetrics { get; }

        // @property (readonly, copy) NSDateInterval * _Nonnull taskInterval;
        [Export("taskInterval", ArgumentSemantic.Copy)]
        NSDateInterval TaskInterval { get; }

        // @property (readonly, assign) NSUInteger redirectCount;
        [Export("redirectCount")]
        nuint RedirectCount { get; }
    }

    // @interface NSUserActivity : NSObject
    [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
    [BaseType(typeof(NSObject))]
    interface NSUserActivity
    {
        // -(instancetype _Nonnull)initWithActivityType:(NSString * _Nonnull)activityType __attribute__((objc_designated_initializer));
        [Export("initWithActivityType:")]
        [DesignatedInitializer]
        IntPtr Constructor(string activityType);

        // @property (readonly, copy) NSString * _Nonnull activityType;
        [Export("activityType")]
        string ActivityType { get; }

        // @property (copy) NSString * _Nullable title;
        [NullAllowed, Export("title")]
        string Title { get; set; }

        // @property (copy) NSDictionary * _Nullable userInfo;
        [NullAllowed, Export("userInfo", ArgumentSemantic.Copy)]
        NSDictionary UserInfo { get; set; }

        // -(void)addUserInfoEntriesFromDictionary:(NSDictionary * _Nonnull)otherDictionary;
        [Export("addUserInfoEntriesFromDictionary:")]
        void AddUserInfoEntriesFromDictionary(NSDictionary otherDictionary);

        // @property (copy) NSSet<NSString *> * _Nullable requiredUserInfoKeys __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(3, 0), TV(10, 0), Mac(10, 11), iOS(9, 0)]
        [NullAllowed, Export("requiredUserInfoKeys", ArgumentSemantic.Copy)]
        NSSet<NSString> RequiredUserInfoKeys { get; set; }

        // @property (assign) BOOL needsSave;
        [Export("needsSave")]
        bool NeedsSave { get; set; }

        // @property (copy) NSURL * _Nullable webpageURL;
        [NullAllowed, Export("webpageURL", ArgumentSemantic.Copy)]
        NSUrl WebpageURL { get; set; }

        // @property (copy) NSURL * _Nullable referrerURL __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [NullAllowed, Export("referrerURL", ArgumentSemantic.Copy)]
        NSUrl ReferrerURL { get; set; }

        // @property (copy) NSDate * _Nullable expirationDate __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(3, 0), TV(10, 0), Mac(10, 11), iOS(9, 0)]
        [NullAllowed, Export("expirationDate", ArgumentSemantic.Copy)]
        NSDate ExpirationDate { get; set; }

        // @property (copy) NSSet<NSString *> * _Nonnull keywords __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(3, 0), TV(10, 0), Mac(10, 11), iOS(9, 0)]
        [Export("keywords", ArgumentSemantic.Copy)]
        NSSet<NSString> Keywords { get; set; }

        // @property BOOL supportsContinuationStreams;
        [Export("supportsContinuationStreams")]
        bool SupportsContinuationStreams { get; set; }

        [Wrap("WeakDelegate")]
        [NullAllowed]
        NSUserActivityDelegate Delegate { get; set; }

        // @property (weak) id<NSUserActivityDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        // -(void)becomeCurrent;
        [Export("becomeCurrent")]
        void BecomeCurrent();

        // -(void)resignCurrent __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(3, 0), TV(10, 0), Mac(10, 11), iOS(9, 0)]
        [Export("resignCurrent")]
        void ResignCurrent();

        // -(void)invalidate;
        [Export("invalidate")]
        void Invalidate();

        // -(void)getContinuationStreamsWithCompletionHandler:(void (^ _Nonnull)(NSInputStream * _Nullable, NSOutputStream * _Nullable, NSError * _Nullable))completionHandler;
        [Export("getContinuationStreamsWithCompletionHandler:")]
        void GetContinuationStreamsWithCompletionHandler(Action<NSInputStream, NSOutputStream, NSError> completionHandler);

        // @property (getter = isEligibleForHandoff) BOOL eligibleForHandoff __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(3, 0), TV(10, 0), Mac(10, 11), iOS(9, 0)]
        [Export("eligibleForHandoff")]
        bool EligibleForHandoff { [Bind("isEligibleForHandoff")] get; set; }

        // @property (getter = isEligibleForSearch) BOOL eligibleForSearch __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(3, 0), TV(10, 0), Mac(10, 11), iOS(9, 0)]
        [Export("eligibleForSearch")]
        bool EligibleForSearch { [Bind("isEligibleForSearch")] get; set; }

        // @property (getter = isEligibleForPublicIndexing) BOOL eligibleForPublicIndexing __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(3, 0), TV(10, 0), Mac(10, 11), iOS(9, 0)]
        [Export("eligibleForPublicIndexing")]
        bool EligibleForPublicIndexing { [Bind("isEligibleForPublicIndexing")] get; set; }

        // @property (getter = isEligibleForPrediction) BOOL eligibleForPrediction __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0)));
        [Watch(5, 0), NoTV, NoMac, iOS(12, 0)]
        [Export("eligibleForPrediction")]
        bool EligibleForPrediction { [Bind("isEligibleForPrediction")] get; set; }

        // @property (copy) NSUserActivityPersistentIdentifier _Nullable persistentIdentifier __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0)));
        [Watch(5, 0), NoTV, NoMac, iOS(12, 0)]
        [NullAllowed, Export("persistentIdentifier")]
        string PersistentIdentifier { get; set; }

        // +(void)deleteSavedUserActivitiesWithPersistentIdentifiers:(NSArray<NSUserActivityPersistentIdentifier> * _Nonnull)persistentIdentifiers completionHandler:(void (^ _Nonnull)(void))handler __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0)));
        [Watch(5, 0), NoTV, NoMac, iOS(12, 0)]
        [Static]
        [Export("deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:")]
        void DeleteSavedUserActivitiesWithPersistentIdentifiers(string[] persistentIdentifiers, Action handler);

        // +(void)deleteAllSavedUserActivitiesWithCompletionHandler:(void (^ _Nonnull)(void))handler __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0)));
        [Watch(5, 0), NoTV, NoMac, iOS(12, 0)]
        [Static]
        [Export("deleteAllSavedUserActivitiesWithCompletionHandler:")]
        void DeleteAllSavedUserActivitiesWithCompletionHandler(Action handler);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull NSUserActivityTypeBrowsingWeb;
        [Field("NSUserActivityTypeBrowsingWeb", "__Internal")]
        NSString NSUserActivityTypeBrowsingWeb { get; }
    }

    // @protocol NSUserActivityDelegate <NSObject>
    [Watch(3, 0), TV(9, 0), Mac(10, 10), iOS(8, 0)]
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface NSUserActivityDelegate
    {
        // @optional -(void)userActivityWillSave:(NSUserActivity * _Nonnull)userActivity;
        [Export("userActivityWillSave:")]
        void UserActivityWillSave(NSUserActivity userActivity);

        // @optional -(void)userActivityWasContinued:(NSUserActivity * _Nonnull)userActivity;
        [Export("userActivityWasContinued:")]
        void UserActivityWasContinued(NSUserActivity userActivity);

        // @optional -(void)userActivity:(NSUserActivity * _Nonnull)userActivity didReceiveInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
        [Export("userActivity:didReceiveInputStream:outputStream:")]
        void UserActivity(NSUserActivity userActivity, NSInputStream inputStream, NSOutputStream outputStream);
    }

    // @interface NSUUID : NSObject <NSCopying, NSSecureCoding>
    [iOS(6, 0)]
    [BaseType(typeof(NSObject))]
    interface NSUUID : INSCopying, INSSecureCoding
    {
        // +(instancetype _Nonnull)UUID;
        [Static]
        [Export("UUID")]
        NSUuid UUID();

        // -(instancetype _Nullable)initWithUUIDString:(NSString * _Nonnull)string;
        [Export("initWithUUIDString:")]
        IntPtr Constructor(string @string);

        // -(instancetype _Nonnull)initWithUUIDBytes:(const unsigned char * _Nullable)bytes;
        [Export("initWithUUIDBytes:")]
        IntPtr Constructor([NullAllowed] byte[] bytes);

        // -(void)getUUIDBytes:(unsigned char * _Nonnull)uuid;
        [Export("getUUIDBytes:")]
        void GetUUIDBytes(byte[] uuid);

        // @property (readonly, copy) NSString * _Nonnull UUIDString;
        [Export("UUIDString")]
        string UUIDString { get; }
    }

    // @interface UIAcceleration : NSObject
    [Introduced(PlatformName.iOS, 2, 0, message: "UIAcceleration has been replaced by the CoreMotion framework")]
    [Deprecated(PlatformName.iOS, 5, 0, message: "UIAcceleration has been replaced by the CoreMotion framework")]
    [NoTV]
    [BaseType(typeof(NSObject))]
    interface UIAcceleration
    {
        // @property (readonly, nonatomic) NSTimeInterval timestamp;
        [Export("timestamp")]
        double Timestamp { get; }

        // @property (readonly, nonatomic) UIAccelerationValue x;
        [Export("x")]
        double X { get; }

        // @property (readonly, nonatomic) UIAccelerationValue y;
        [Export("y")]
        double Y { get; }

        // @property (readonly, nonatomic) UIAccelerationValue z;
        [Export("z")]
        double Z { get; }
    }

    // @interface UIAccelerometer : NSObject
    [Introduced(PlatformName.iOS, 2, 0, message: "UIAccelerometer has been replaced by the CoreMotion framework")]
    [Deprecated(PlatformName.iOS, 5, 0, message: "UIAccelerometer has been replaced by the CoreMotion framework")]
    [NoTV]
    [BaseType(typeof(NSObject))]
    interface UIAccelerometer
    {
        // +(UIAccelerometer * _Nonnull)sharedAccelerometer;
        [Static]
        [Export("sharedAccelerometer")]
        [Verify(MethodToProperty)]
        UIAccelerometer SharedAccelerometer { get; }

        // @property (nonatomic) NSTimeInterval updateInterval;
        [Export("updateInterval")]
        double UpdateInterval { get; set; }

        [Wrap("WeakDelegate")]
        [NullAllowed]
        UIAccelerometerDelegate Delegate { get; set; }

        // @property (nonatomic, weak) id<UIAccelerometerDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }
    }

    // @protocol UIAccelerometerDelegate <NSObject>
    [NoTV]
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface UIAccelerometerDelegate
    {
        // @optional -(void)accelerometer:(UIAccelerometer * _Nonnull)accelerometer didAccelerate:(UIAcceleration * _Nonnull)acceleration __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=5_0)));
        [Introduced(PlatformName.iOS, 2, 0)]
        [Deprecated(PlatformName.iOS, 5, 0)]
        [NoTV]
        [Export("accelerometer:didAccelerate:")]
        void DidAccelerate(UIAccelerometer accelerometer, UIAcceleration acceleration);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CGPoint CGPointZero __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
        [Mac(10, 0), iOS(2, 0)]
        [Field("CGPointZero", "__Internal")]
        CGPoint CGPointZero { get; }

        // extern const CGSize CGSizeZero __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
        [Mac(10, 0), iOS(2, 0)]
        [Field("CGSizeZero", "__Internal")]
        CGSize CGSizeZero { get; }

        // extern const CGRect CGRectZero __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
        [Mac(10, 0), iOS(2, 0)]
        [Field("CGRectZero", "__Internal")]
        CGRect CGRectZero { get; }

        // extern const CGRect CGRectNull __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
        [Mac(10, 0), iOS(2, 0)]
        [Field("CGRectNull", "__Internal")]
        CGRect CGRectNull { get; }

        // extern const CGRect CGRectInfinite __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("CGRectInfinite", "__Internal")]
        CGRect CGRectInfinite { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CGAffineTransform CGAffineTransformIdentity __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.0)));
        [Mac(10, 0), iOS(2, 0)]
        [Field("CGAffineTransformIdentity", "__Internal")]
        CGAffineTransform CGAffineTransformIdentity { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCGColorSpaceGenericGray __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(9, 0)]
        [Field("kCGColorSpaceGenericGray", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceGenericGray { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceGenericRGB __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(9, 0)]
        [Field("kCGColorSpaceGenericRGB", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceGenericRGB { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceGenericCMYK __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(9, 0)]
        [Field("kCGColorSpaceGenericCMYK", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceGenericCMYK { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceDisplayP3 __attribute__((availability(ios, introduced=9.3))) __attribute__((availability(macos, introduced=10.11.2)));
        [Mac(10, 11, 2), iOS(9, 3)]
        [Field("kCGColorSpaceDisplayP3", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceDisplayP3 { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceGenericRGBLinear __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(9, 0)]
        [Field("kCGColorSpaceGenericRGBLinear", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceGenericRGBLinear { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceAdobeRGB1998 __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(9, 0)]
        [Field("kCGColorSpaceAdobeRGB1998", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceAdobeRGB1998 { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceSRGB __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(9, 0)]
        [Field("kCGColorSpaceSRGB", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceSRGB { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceGenericGrayGamma2_2 __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(9, 0)]
        [Field("kCGColorSpaceGenericGrayGamma2_2", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceGenericGrayGamma2_2 { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceGenericXYZ __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kCGColorSpaceGenericXYZ", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceGenericXYZ { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceGenericLab __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGColorSpaceGenericLab", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceGenericLab { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceACESCGLinear __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kCGColorSpaceACESCGLinear", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceACESCGLinear { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceITUR_709 __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kCGColorSpaceITUR_709", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceITUR_709 { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceITUR_2020 __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kCGColorSpaceITUR_2020", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceITUR_2020 { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceROMMRGB __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kCGColorSpaceROMMRGB", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceROMMRGB { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceDCIP3 __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kCGColorSpaceDCIP3", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceDCIP3 { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceExtendedSRGB __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGColorSpaceExtendedSRGB", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceExtendedSRGB { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceLinearSRGB __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGColorSpaceLinearSRGB", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceLinearSRGB { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceExtendedLinearSRGB __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGColorSpaceExtendedLinearSRGB", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceExtendedLinearSRGB { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceExtendedGray __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGColorSpaceExtendedGray", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceExtendedGray { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceLinearGray __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGColorSpaceLinearGray", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceLinearGray { get; }

        // extern const CFStringRef _Nonnull kCGColorSpaceExtendedLinearGray __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGColorSpaceExtendedLinearGray", "__Internal")]
        unsafe CFStringRef* kCGColorSpaceExtendedLinearGray { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCGColorWhite __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5)));
        [NoWatch, NoTV, NoiOS, Mac(10, 5)]
        [Field("kCGColorWhite", "__Internal")]
        unsafe CFStringRef* kCGColorWhite { get; }

        // extern const CFStringRef _Nonnull kCGColorBlack __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5)));
        [NoWatch, NoTV, NoiOS, Mac(10, 5)]
        [Field("kCGColorBlack", "__Internal")]
        unsafe CFStringRef* kCGColorBlack { get; }

        // extern const CFStringRef _Nonnull kCGColorClear __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.5)));
        [NoWatch, NoTV, NoiOS, Mac(10, 5)]
        [Field("kCGColorClear", "__Internal")]
        unsafe CFStringRef* kCGColorClear { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCGFontVariationAxisName __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGFontVariationAxisName", "__Internal")]
        unsafe CFStringRef* kCGFontVariationAxisName { get; }

        // extern const CFStringRef _Nonnull kCGFontVariationAxisMinValue __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGFontVariationAxisMinValue", "__Internal")]
        unsafe CFStringRef* kCGFontVariationAxisMinValue { get; }

        // extern const CFStringRef _Nonnull kCGFontVariationAxisMaxValue __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGFontVariationAxisMaxValue", "__Internal")]
        unsafe CFStringRef* kCGFontVariationAxisMaxValue { get; }

        // extern const CFStringRef _Nonnull kCGFontVariationAxisDefaultValue __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGFontVariationAxisDefaultValue", "__Internal")]
        unsafe CFStringRef* kCGFontVariationAxisDefaultValue { get; }
    }

    // typedef void (^CGPathApplyBlock)(const CGPathElement * _Nonnull);
    unsafe delegate void CGPathApplyBlock(CGPathElement* arg0);

    // typedef _Bool (^CGPDFArrayApplierBlock)(size_t, CGPDFObjectRef _Nonnull, void * _Nullable);
    unsafe delegate bool CGPDFArrayApplierBlock(nuint arg0, CGPDFObjectRef* arg1, [NullAllowed] void* arg2);

    // typedef _Bool (^CGPDFDictionaryApplierBlock)(const char * _Nonnull, CGPDFObjectRef _Nonnull, void * _Nullable);
    unsafe delegate bool CGPDFDictionaryApplierBlock(sbyte* arg0, CGPDFObjectRef* arg1, [NullAllowed] void* arg2);

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCGPDFOutlineTitle __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGPDFOutlineTitle", "__Internal")]
        unsafe CFStringRef* kCGPDFOutlineTitle { get; }

        // extern const CFStringRef _Nonnull kCGPDFOutlineChildren __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGPDFOutlineChildren", "__Internal")]
        unsafe CFStringRef* kCGPDFOutlineChildren { get; }

        // extern const CFStringRef _Nonnull kCGPDFOutlineDestination __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGPDFOutlineDestination", "__Internal")]
        unsafe CFStringRef* kCGPDFOutlineDestination { get; }

        // extern const CFStringRef _Nonnull kCGPDFOutlineDestinationRect __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGPDFOutlineDestinationRect", "__Internal")]
        unsafe CFStringRef* kCGPDFOutlineDestinationRect { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCGColorConversionBlackPointCompensation __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGColorConversionBlackPointCompensation", "__Internal")]
        unsafe CFStringRef* kCGColorConversionBlackPointCompensation { get; }

        // extern const CFStringRef _Nonnull kCGColorConversionTRCSize __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGColorConversionTRCSize", "__Internal")]
        unsafe CFStringRef* kCGColorConversionTRCSize { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCGPDFContextMediaBox __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGPDFContextMediaBox", "__Internal")]
        unsafe CFStringRef* kCGPDFContextMediaBox { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextCropBox __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGPDFContextCropBox", "__Internal")]
        unsafe CFStringRef* kCGPDFContextCropBox { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextBleedBox __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGPDFContextBleedBox", "__Internal")]
        unsafe CFStringRef* kCGPDFContextBleedBox { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextTrimBox __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGPDFContextTrimBox", "__Internal")]
        unsafe CFStringRef* kCGPDFContextTrimBox { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextArtBox __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGPDFContextArtBox", "__Internal")]
        unsafe CFStringRef* kCGPDFContextArtBox { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextTitle __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGPDFContextTitle", "__Internal")]
        unsafe CFStringRef* kCGPDFContextTitle { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextAuthor __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGPDFContextAuthor", "__Internal")]
        unsafe CFStringRef* kCGPDFContextAuthor { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextSubject __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(2, 0)]
        [Field("kCGPDFContextSubject", "__Internal")]
        unsafe CFStringRef* kCGPDFContextSubject { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextKeywords __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(2, 0)]
        [Field("kCGPDFContextKeywords", "__Internal")]
        unsafe CFStringRef* kCGPDFContextKeywords { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextCreator __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGPDFContextCreator", "__Internal")]
        unsafe CFStringRef* kCGPDFContextCreator { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextOwnerPassword __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGPDFContextOwnerPassword", "__Internal")]
        unsafe CFStringRef* kCGPDFContextOwnerPassword { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextUserPassword __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGPDFContextUserPassword", "__Internal")]
        unsafe CFStringRef* kCGPDFContextUserPassword { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextEncryptionKeyLength __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(2, 0)]
        [Field("kCGPDFContextEncryptionKeyLength", "__Internal")]
        unsafe CFStringRef* kCGPDFContextEncryptionKeyLength { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextAllowsPrinting __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGPDFContextAllowsPrinting", "__Internal")]
        unsafe CFStringRef* kCGPDFContextAllowsPrinting { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextAllowsCopying __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(2, 0)]
        [Field("kCGPDFContextAllowsCopying", "__Internal")]
        unsafe CFStringRef* kCGPDFContextAllowsCopying { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextOutputIntent __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.4)));
        [NoWatch, NoTV, NoiOS, Mac(10, 4)]
        [Field("kCGPDFContextOutputIntent", "__Internal")]
        unsafe CFStringRef* kCGPDFContextOutputIntent { get; }

        // extern const CFStringRef _Nonnull kCGPDFXOutputIntentSubtype __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.4)));
        [NoWatch, NoTV, NoiOS, Mac(10, 4)]
        [Field("kCGPDFXOutputIntentSubtype", "__Internal")]
        unsafe CFStringRef* kCGPDFXOutputIntentSubtype { get; }

        // extern const CFStringRef _Nonnull kCGPDFXOutputConditionIdentifier __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.4)));
        [NoWatch, NoTV, NoiOS, Mac(10, 4)]
        [Field("kCGPDFXOutputConditionIdentifier", "__Internal")]
        unsafe CFStringRef* kCGPDFXOutputConditionIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGPDFXOutputCondition __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.4)));
        [NoWatch, NoTV, NoiOS, Mac(10, 4)]
        [Field("kCGPDFXOutputCondition", "__Internal")]
        unsafe CFStringRef* kCGPDFXOutputCondition { get; }

        // extern const CFStringRef _Nonnull kCGPDFXRegistryName __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.4)));
        [NoWatch, NoTV, NoiOS, Mac(10, 4)]
        [Field("kCGPDFXRegistryName", "__Internal")]
        unsafe CFStringRef* kCGPDFXRegistryName { get; }

        // extern const CFStringRef _Nonnull kCGPDFXInfo __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.4)));
        [NoWatch, NoTV, NoiOS, Mac(10, 4)]
        [Field("kCGPDFXInfo", "__Internal")]
        unsafe CFStringRef* kCGPDFXInfo { get; }

        // extern const CFStringRef _Nonnull kCGPDFXDestinationOutputProfile __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.4)));
        [NoWatch, NoTV, NoiOS, Mac(10, 4)]
        [Field("kCGPDFXDestinationOutputProfile", "__Internal")]
        unsafe CFStringRef* kCGPDFXDestinationOutputProfile { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextOutputIntents __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.4)));
        [NoWatch, NoTV, NoiOS, Mac(10, 4)]
        [Field("kCGPDFContextOutputIntents", "__Internal")]
        unsafe CFStringRef* kCGPDFContextOutputIntents { get; }

        // extern const CFStringRef _Nonnull kCGPDFContextAccessPermissions __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGPDFContextAccessPermissions", "__Internal")]
        unsafe CFStringRef* kCGPDFContextAccessPermissions { get; }
    }

    // @interface UIBezierPath : NSObject <NSCopying, NSSecureCoding>
    [iOS(3, 2)]
    [BaseType(typeof(NSObject))]
    interface UIBezierPath : INSCopying, INSSecureCoding
    {
        // +(instancetype _Nonnull)bezierPath;
        [Static]
        [Export("bezierPath")]
        UIBezierPath BezierPath();

        // +(instancetype _Nonnull)bezierPathWithRect:(CGRect)rect;
        [Static]
        [Export("bezierPathWithRect:")]
        UIBezierPath BezierPathWithRect(CGRect rect);

        // +(instancetype _Nonnull)bezierPathWithOvalInRect:(CGRect)rect;
        [Static]
        [Export("bezierPathWithOvalInRect:")]
        UIBezierPath BezierPathWithOvalInRect(CGRect rect);

        // +(instancetype _Nonnull)bezierPathWithRoundedRect:(CGRect)rect cornerRadius:(CGFloat)cornerRadius;
        [Static]
        [Export("bezierPathWithRoundedRect:cornerRadius:")]
        UIBezierPath BezierPathWithRoundedRect(CGRect rect, nfloat cornerRadius);

        // +(instancetype _Nonnull)bezierPathWithRoundedRect:(CGRect)rect byRoundingCorners:(UIRectCorner)corners cornerRadii:(CGSize)cornerRadii;
        [Static]
        [Export("bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:")]
        UIBezierPath BezierPathWithRoundedRect(CGRect rect, UIRectCorner corners, CGSize cornerRadii);

        // +(instancetype _Nonnull)bezierPathWithArcCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise;
        [Static]
        [Export("bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:")]
        UIBezierPath BezierPathWithArcCenter(CGPoint center, nfloat radius, nfloat startAngle, nfloat endAngle, bool clockwise);

        // +(instancetype _Nonnull)bezierPathWithCGPath:(CGPathRef _Nonnull)CGPath;
        [Static]
        [Export("bezierPathWithCGPath:")]
        unsafe UIBezierPath BezierPathWithCGPath(CGPathRef* CGPath);

        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);

        // @property (nonatomic) CGPathRef _Nonnull CGPath;
        [Export("CGPath", ArgumentSemantic.Assign)]
        unsafe CGPathRef* CGPath { get; set; }

        // -(void)moveToPoint:(CGPoint)point;
        [Export("moveToPoint:")]
        void MoveToPoint(CGPoint point);

        // -(void)addLineToPoint:(CGPoint)point;
        [Export("addLineToPoint:")]
        void AddLineToPoint(CGPoint point);

        // -(void)addCurveToPoint:(CGPoint)endPoint controlPoint1:(CGPoint)controlPoint1 controlPoint2:(CGPoint)controlPoint2;
        [Export("addCurveToPoint:controlPoint1:controlPoint2:")]
        void AddCurveToPoint(CGPoint endPoint, CGPoint controlPoint1, CGPoint controlPoint2);

        // -(void)addQuadCurveToPoint:(CGPoint)endPoint controlPoint:(CGPoint)controlPoint;
        [Export("addQuadCurveToPoint:controlPoint:")]
        void AddQuadCurveToPoint(CGPoint endPoint, CGPoint controlPoint);

        // -(void)addArcWithCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise __attribute__((availability(ios, introduced=4_0)));
        [iOS(4, 0)]
        [Export("addArcWithCenter:radius:startAngle:endAngle:clockwise:")]
        void AddArcWithCenter(CGPoint center, nfloat radius, nfloat startAngle, nfloat endAngle, bool clockwise);

        // -(void)closePath;
        [Export("closePath")]
        void ClosePath();

        // -(void)removeAllPoints;
        [Export("removeAllPoints")]
        void RemoveAllPoints();

        // -(void)appendPath:(UIBezierPath * _Nonnull)bezierPath;
        [Export("appendPath:")]
        void AppendPath(UIBezierPath bezierPath);

        // -(UIBezierPath * _Nonnull)bezierPathByReversingPath __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Export("bezierPathByReversingPath")]
        [Verify(MethodToProperty)]
        UIBezierPath BezierPathByReversingPath { get; }

        // -(void)applyTransform:(CGAffineTransform)transform;
        [Export("applyTransform:")]
        void ApplyTransform(CGAffineTransform transform);

        // @property (readonly, getter = isEmpty) BOOL empty;
        [Export("empty")]
        bool Empty { [Bind("isEmpty")] get; }

        // @property (readonly, nonatomic) CGRect bounds;
        [Export("bounds")]
        CGRect Bounds { get; }

        // @property (readonly, nonatomic) CGPoint currentPoint;
        [Export("currentPoint")]
        CGPoint CurrentPoint { get; }

        // -(BOOL)containsPoint:(CGPoint)point;
        [Export("containsPoint:")]
        bool ContainsPoint(CGPoint point);

        // @property (nonatomic) CGFloat lineWidth;
        [Export("lineWidth")]
        nfloat LineWidth { get; set; }

        // @property (nonatomic) CGLineCap lineCapStyle;
        [Export("lineCapStyle", ArgumentSemantic.Assign)]
        CGLineCap LineCapStyle { get; set; }

        // @property (nonatomic) CGLineJoin lineJoinStyle;
        [Export("lineJoinStyle", ArgumentSemantic.Assign)]
        CGLineJoin LineJoinStyle { get; set; }

        // @property (nonatomic) CGFloat miterLimit;
        [Export("miterLimit")]
        nfloat MiterLimit { get; set; }

        // @property (nonatomic) CGFloat flatness;
        [Export("flatness")]
        nfloat Flatness { get; set; }

        // @property (nonatomic) BOOL usesEvenOddFillRule;
        [Export("usesEvenOddFillRule")]
        bool UsesEvenOddFillRule { get; set; }

        // -(void)setLineDash:(const CGFloat * _Nullable)pattern count:(NSInteger)count phase:(CGFloat)phase;
        [Export("setLineDash:count:phase:")]
        unsafe void SetLineDash([NullAllowed] nfloat* pattern, nint count, nfloat phase);

        // -(void)getLineDash:(CGFloat * _Nullable)pattern count:(NSInteger * _Nullable)count phase:(CGFloat * _Nullable)phase;
        [Export("getLineDash:count:phase:")]
        unsafe void GetLineDash([NullAllowed] nfloat* pattern, [NullAllowed] nint* count, [NullAllowed] nfloat* phase);

        // -(void)fill;
        [Export("fill")]
        void Fill();

        // -(void)stroke;
        [Export("stroke")]
        void Stroke();

        // -(void)fillWithBlendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha;
        [Export("fillWithBlendMode:alpha:")]
        void FillWithBlendMode(CGBlendMode blendMode, nfloat alpha);

        // -(void)strokeWithBlendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha;
        [Export("strokeWithBlendMode:alpha:")]
        void StrokeWithBlendMode(CGBlendMode blendMode, nfloat alpha);

        // -(void)addClip;
        [Export("addClip")]
        void AddClip();
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CATransform3D CATransform3DIdentity __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("CATransform3DIdentity", "__Internal")]
        CATransform3D CATransform3DIdentity { get; }
    }

    // @interface CATransform3DAdditions (NSValue)
    [Category]
    [BaseType(typeof(NSValue))]
    interface NSValue_CATransform3DAdditions
    {
        // +(NSValue * _Nonnull)valueWithCATransform3D:(CATransform3D)t;
        [Static]
        [Export("valueWithCATransform3D:")]
        NSValue ValueWithCATransform3D(CATransform3D t);

        // @property (readonly) CATransform3D CATransform3DValue;
        [Export("CATransform3DValue")]
        CATransform3D CATransform3DValue { get; }
    }

    // @protocol CAMediaTiming
    [Protocol, Model]
    interface CAMediaTiming
    {
        // @required @property CFTimeInterval beginTime;
        [Abstract]
        [Export("beginTime")]
        double BeginTime { get; set; }

        // @required @property CFTimeInterval duration;
        [Abstract]
        [Export("duration")]
        double Duration { get; set; }

        // @required @property float speed;
        [Abstract]
        [Export("speed")]
        float Speed { get; set; }

        // @required @property CFTimeInterval timeOffset;
        [Abstract]
        [Export("timeOffset")]
        double TimeOffset { get; set; }

        // @required @property float repeatCount;
        [Abstract]
        [Export("repeatCount")]
        float RepeatCount { get; set; }

        // @required @property CFTimeInterval repeatDuration;
        [Abstract]
        [Export("repeatDuration")]
        double RepeatDuration { get; set; }

        // @required @property BOOL autoreverses;
        [Abstract]
        [Export("autoreverses")]
        bool Autoreverses { get; set; }

        // @required @property (copy) CAMediaTimingFillMode _Nonnull fillMode;
        [Abstract]
        [Export("fillMode")]
        string FillMode { get; set; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CAMediaTimingFillMode _Nonnull kCAFillModeForwards __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAFillModeForwards", "__Internal")]
        NSString kCAFillModeForwards { get; }

        // extern const CAMediaTimingFillMode _Nonnull kCAFillModeBackwards __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAFillModeBackwards", "__Internal")]
        NSString kCAFillModeBackwards { get; }

        // extern const CAMediaTimingFillMode _Nonnull kCAFillModeBoth __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAFillModeBoth", "__Internal")]
        NSString kCAFillModeBoth { get; }

        // extern const CAMediaTimingFillMode _Nonnull kCAFillModeRemoved __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAFillModeRemoved", "__Internal")]
        NSString kCAFillModeRemoved { get; }
    }

    // @interface CALayer : NSObject <NSSecureCoding, CAMediaTiming>
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
    [BaseType(typeof(NSObject))]
    interface CALayer : INSSecureCoding, ICAMediaTiming
    {
        // +(instancetype _Nonnull)layer;
        [Static]
        [Export("layer")]
        CALayer Layer();

        // -(instancetype _Nonnull)initWithLayer:(id _Nonnull)layer;
        [Export("initWithLayer:")]
        IntPtr Constructor(NSObject layer);

        // -(instancetype _Nullable)presentationLayer;
        [Export("presentationLayer")]
        [return: NullAllowed]
        CALayer PresentationLayer();

        // -(instancetype _Nonnull)modelLayer;
        [Export("modelLayer")]
        CALayer ModelLayer();

        // +(id _Nullable)defaultValueForKey:(NSString * _Nonnull)key;
        [Static]
        [Export("defaultValueForKey:")]
        [return: NullAllowed]
        NSObject DefaultValueForKey(string key);

        // +(BOOL)needsDisplayForKey:(NSString * _Nonnull)key;
        [Static]
        [Export("needsDisplayForKey:")]
        bool NeedsDisplayForKey(string key);

        // -(BOOL)shouldArchiveValueForKey:(NSString * _Nonnull)key;
        [Export("shouldArchiveValueForKey:")]
        bool ShouldArchiveValueForKey(string key);

        // @property CGRect bounds;
        [Export("bounds", ArgumentSemantic.Assign)]
        CGRect Bounds { get; set; }

        // @property CGPoint position;
        [Export("position", ArgumentSemantic.Assign)]
        CGPoint Position { get; set; }

        // @property CGFloat zPosition;
        [Export("zPosition")]
        nfloat ZPosition { get; set; }

        // @property CGPoint anchorPoint;
        [Export("anchorPoint", ArgumentSemantic.Assign)]
        CGPoint AnchorPoint { get; set; }

        // @property CGFloat anchorPointZ;
        [Export("anchorPointZ")]
        nfloat AnchorPointZ { get; set; }

        // @property CATransform3D transform;
        [Export("transform", ArgumentSemantic.Assign)]
        CATransform3D Transform { get; set; }

        // -(CGAffineTransform)affineTransform;
        // -(void)setAffineTransform:(CGAffineTransform)m;
        [Export("affineTransform")]
        [Verify(MethodToProperty)]
        CGAffineTransform AffineTransform { get; set; }

        // @property CGRect frame;
        [Export("frame", ArgumentSemantic.Assign)]
        CGRect Frame { get; set; }

        // @property (getter = isHidden) BOOL hidden;
        [Export("hidden")]
        bool Hidden { [Bind("isHidden")] get; set; }

        // @property (getter = isDoubleSided) BOOL doubleSided;
        [Export("doubleSided")]
        bool DoubleSided { [Bind("isDoubleSided")] get; set; }

        // @property (getter = isGeometryFlipped) BOOL geometryFlipped;
        [Export("geometryFlipped")]
        bool GeometryFlipped { [Bind("isGeometryFlipped")] get; set; }

        // -(BOOL)contentsAreFlipped;
        [Export("contentsAreFlipped")]
        bool ContentsAreFlipped();

        // @property (readonly) CALayer * _Nullable superlayer;
        [NullAllowed, Export("superlayer")]
        CALayer Superlayer { get; }

        // -(void)removeFromSuperlayer;
        [Export("removeFromSuperlayer")]
        void RemoveFromSuperlayer();

        // @property (copy) NSArray<__kindof CALayer *> * _Nullable sublayers;
        [NullAllowed, Export("sublayers", ArgumentSemantic.Copy)]
        CALayer[] Sublayers { get; set; }

        // -(void)addSublayer:(CALayer * _Nonnull)layer;
        [Export("addSublayer:")]
        void AddSublayer(CALayer layer);

        // -(void)insertSublayer:(CALayer * _Nonnull)layer atIndex:(unsigned int)idx;
        [Export("insertSublayer:atIndex:")]
        void InsertSublayer(CALayer layer, uint idx);

        // -(void)insertSublayer:(CALayer * _Nonnull)layer below:(CALayer * _Nullable)sibling;
        [Export("insertSublayer:below:")]
        void InsertSublayer(CALayer layer, [NullAllowed] CALayer sibling);

        // -(void)insertSublayer:(CALayer * _Nonnull)layer above:(CALayer * _Nullable)sibling;
        [Export("insertSublayer:above:")]
        void InsertSublayer(CALayer layer, [NullAllowed] CALayer sibling);

        // -(void)replaceSublayer:(CALayer * _Nonnull)oldLayer with:(CALayer * _Nonnull)newLayer;
        [Export("replaceSublayer:with:")]
        void ReplaceSublayer(CALayer oldLayer, CALayer newLayer);

        // @property CATransform3D sublayerTransform;
        [Export("sublayerTransform", ArgumentSemantic.Assign)]
        CATransform3D SublayerTransform { get; set; }

        // @property (strong) __kindof CALayer * _Nullable mask;
        [Export("mask", ArgumentSemantic.Strong)]
        CALayer Mask { get; set; }

        // @property BOOL masksToBounds;
        [Export("masksToBounds")]
        bool MasksToBounds { get; set; }

        // -(CGPoint)convertPoint:(CGPoint)p fromLayer:(CALayer * _Nullable)l;
        [Export("convertPoint:fromLayer:")]
        CGPoint ConvertPoint(CGPoint p, [NullAllowed] CALayer l);

        // -(CGPoint)convertPoint:(CGPoint)p toLayer:(CALayer * _Nullable)l;
        [Export("convertPoint:toLayer:")]
        CGPoint ConvertPoint(CGPoint p, [NullAllowed] CALayer l);

        // -(CGRect)convertRect:(CGRect)r fromLayer:(CALayer * _Nullable)l;
        [Export("convertRect:fromLayer:")]
        CGRect ConvertRect(CGRect r, [NullAllowed] CALayer l);

        // -(CGRect)convertRect:(CGRect)r toLayer:(CALayer * _Nullable)l;
        [Export("convertRect:toLayer:")]
        CGRect ConvertRect(CGRect r, [NullAllowed] CALayer l);

        // -(CFTimeInterval)convertTime:(CFTimeInterval)t fromLayer:(CALayer * _Nullable)l;
        [Export("convertTime:fromLayer:")]
        double ConvertTime(double t, [NullAllowed] CALayer l);

        // -(CFTimeInterval)convertTime:(CFTimeInterval)t toLayer:(CALayer * _Nullable)l;
        [Export("convertTime:toLayer:")]
        double ConvertTime(double t, [NullAllowed] CALayer l);

        // -(__kindof CALayer * _Nullable)hitTest:(CGPoint)p;
        [Export("hitTest:")]
        CALayer HitTest(CGPoint p);

        // -(BOOL)containsPoint:(CGPoint)p;
        [Export("containsPoint:")]
        bool ContainsPoint(CGPoint p);

        // @property (strong) id _Nullable contents;
        [NullAllowed, Export("contents", ArgumentSemantic.Strong)]
        NSObject Contents { get; set; }

        // @property CGRect contentsRect;
        [Export("contentsRect", ArgumentSemantic.Assign)]
        CGRect ContentsRect { get; set; }

        // @property (copy) CALayerContentsGravity _Nonnull contentsGravity;
        [Export("contentsGravity")]
        string ContentsGravity { get; set; }

        // @property CGFloat contentsScale __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Export("contentsScale")]
        nfloat ContentsScale { get; set; }

        // @property CGRect contentsCenter;
        [Export("contentsCenter", ArgumentSemantic.Assign)]
        CGRect ContentsCenter { get; set; }

        // @property (copy) CALayerContentsFormat _Nonnull contentsFormat __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("contentsFormat")]
        string ContentsFormat { get; set; }

        // @property (copy) CALayerContentsFilter _Nonnull minificationFilter;
        [Export("minificationFilter")]
        string MinificationFilter { get; set; }

        // @property (copy) CALayerContentsFilter _Nonnull magnificationFilter;
        [Export("magnificationFilter")]
        string MagnificationFilter { get; set; }

        // @property float minificationFilterBias;
        [Export("minificationFilterBias")]
        float MinificationFilterBias { get; set; }

        // @property (getter = isOpaque) BOOL opaque;
        [Export("opaque")]
        bool Opaque { [Bind("isOpaque")] get; set; }

        // -(void)display;
        [Export("display")]
        void Display();

        // -(void)setNeedsDisplay;
        [Export("setNeedsDisplay")]
        void SetNeedsDisplay();

        // -(void)setNeedsDisplayInRect:(CGRect)r;
        [Export("setNeedsDisplayInRect:")]
        void SetNeedsDisplayInRect(CGRect r);

        // -(BOOL)needsDisplay;
        [Export("needsDisplay")]
        bool NeedsDisplay();

        // -(void)displayIfNeeded;
        [Export("displayIfNeeded")]
        void DisplayIfNeeded();

        // @property BOOL needsDisplayOnBoundsChange;
        [Export("needsDisplayOnBoundsChange")]
        bool NeedsDisplayOnBoundsChange { get; set; }

        // @property BOOL drawsAsynchronously __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(macos, introduced=10.8)));
        [Watch(2, 0), TV(9, 0), Mac(10, 8), iOS(6, 0)]
        [Export("drawsAsynchronously")]
        bool DrawsAsynchronously { get; set; }

        // -(void)drawInContext:(CGContextRef _Nonnull)ctx;
        [Export("drawInContext:")]
        unsafe void DrawInContext(CGContextRef* ctx);

        // -(void)renderInContext:(CGContextRef _Nonnull)ctx;
        [Export("renderInContext:")]
        unsafe void RenderInContext(CGContextRef* ctx);

        // @property CAEdgeAntialiasingMask edgeAntialiasingMask;
        [Export("edgeAntialiasingMask", ArgumentSemantic.Assign)]
        CAEdgeAntialiasingMask EdgeAntialiasingMask { get; set; }

        // @property BOOL allowsEdgeAntialiasing __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(2, 0)]
        [Export("allowsEdgeAntialiasing")]
        bool AllowsEdgeAntialiasing { get; set; }

        // @property CGColorRef _Nullable backgroundColor;
        [NullAllowed, Export("backgroundColor", ArgumentSemantic.Assign)]
        unsafe CGColorRef* BackgroundColor { get; set; }

        // @property CGFloat cornerRadius;
        [Export("cornerRadius")]
        nfloat CornerRadius { get; set; }

        // @property CACornerMask maskedCorners __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("maskedCorners", ArgumentSemantic.Assign)]
        CACornerMask MaskedCorners { get; set; }

        // @property CGFloat borderWidth;
        [Export("borderWidth")]
        nfloat BorderWidth { get; set; }

        // @property CGColorRef _Nullable borderColor;
        [NullAllowed, Export("borderColor", ArgumentSemantic.Assign)]
        unsafe CGColorRef* BorderColor { get; set; }

        // @property float opacity;
        [Export("opacity")]
        float Opacity { get; set; }

        // @property BOOL allowsGroupOpacity __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.10)));
        [Watch(2, 0), TV(9, 0), Mac(10, 10), iOS(2, 0)]
        [Export("allowsGroupOpacity")]
        bool AllowsGroupOpacity { get; set; }

        // @property (strong) id _Nullable compositingFilter;
        [NullAllowed, Export("compositingFilter", ArgumentSemantic.Strong)]
        NSObject CompositingFilter { get; set; }

        // @property (copy) NSArray * _Nullable filters;
        [NullAllowed, Export("filters", ArgumentSemantic.Copy)]
        [Verify(StronglyTypedNSArray)]
        NSObject[] Filters { get; set; }

        // @property (copy) NSArray * _Nullable backgroundFilters;
        [NullAllowed, Export("backgroundFilters", ArgumentSemantic.Copy)]
        [Verify(StronglyTypedNSArray)]
        NSObject[] BackgroundFilters { get; set; }

        // @property BOOL shouldRasterize;
        [Export("shouldRasterize")]
        bool ShouldRasterize { get; set; }

        // @property CGFloat rasterizationScale;
        [Export("rasterizationScale")]
        nfloat RasterizationScale { get; set; }

        // @property CGColorRef _Nullable shadowColor;
        [NullAllowed, Export("shadowColor", ArgumentSemantic.Assign)]
        unsafe CGColorRef* ShadowColor { get; set; }

        // @property float shadowOpacity;
        [Export("shadowOpacity")]
        float ShadowOpacity { get; set; }

        // @property CGSize shadowOffset;
        [Export("shadowOffset", ArgumentSemantic.Assign)]
        CGSize ShadowOffset { get; set; }

        // @property CGFloat shadowRadius;
        [Export("shadowRadius")]
        nfloat ShadowRadius { get; set; }

        // @property CGPathRef _Nullable shadowPath;
        [NullAllowed, Export("shadowPath", ArgumentSemantic.Assign)]
        unsafe CGPathRef* ShadowPath { get; set; }

        // -(CGSize)preferredFrameSize;
        [Export("preferredFrameSize")]
        CGSize PreferredFrameSize();

        // -(void)setNeedsLayout;
        [Export("setNeedsLayout")]
        void SetNeedsLayout();

        // -(BOOL)needsLayout;
        [Export("needsLayout")]
        bool NeedsLayout();

        // -(void)layoutIfNeeded;
        [Export("layoutIfNeeded")]
        void LayoutIfNeeded();

        // -(void)layoutSublayers;
        [Export("layoutSublayers")]
        void LayoutSublayers();

        // +(id<CAAction> _Nullable)defaultActionForKey:(NSString * _Nonnull)event;
        [Static]
        [Export("defaultActionForKey:")]
        [return: NullAllowed]
        CAAction DefaultActionForKey(string @event);

        // -(id<CAAction> _Nullable)actionForKey:(NSString * _Nonnull)event;
        [Export("actionForKey:")]
        [return: NullAllowed]
        CAAction ActionForKey(string @event);

        // @property (copy) NSDictionary<NSString *,id<CAAction>> * _Nullable actions;
        [NullAllowed, Export("actions", ArgumentSemantic.Copy)]
        NSDictionary<NSString, CAAction> Actions { get; set; }

        // -(void)addAnimation:(CAAnimation * _Nonnull)anim forKey:(NSString * _Nullable)key;
        [Export("addAnimation:forKey:")]
        void AddAnimation(CAAnimation anim, [NullAllowed] string key);

        // -(void)removeAllAnimations;
        [Export("removeAllAnimations")]
        void RemoveAllAnimations();

        // -(void)removeAnimationForKey:(NSString * _Nonnull)key;
        [Export("removeAnimationForKey:")]
        void RemoveAnimationForKey(string key);

        // -(NSArray<NSString *> * _Nullable)animationKeys;
        [Export("animationKeys")]
        [return: NullAllowed]
        string[] AnimationKeys();

        // -(__kindof CAAnimation * _Nullable)animationForKey:(NSString * _Nonnull)key;
        [Export("animationForKey:")]
        CAAnimation AnimationForKey(string key);

        // @property (copy) NSString * _Nullable name;
        [NullAllowed, Export("name")]
        string Name { get; set; }

        [Wrap("WeakDelegate")]
        [NullAllowed]
        CALayerDelegate Delegate { get; set; }

        // @property (weak) id<CALayerDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        // @property (copy) NSDictionary * _Nullable style;
        [NullAllowed, Export("style", ArgumentSemantic.Copy)]
        NSDictionary Style { get; set; }
    }

    // @protocol CAAction
    [Protocol, Model]
    interface CAAction
    {
        // @required -(void)runActionForKey:(NSString * _Nonnull)event object:(id _Nonnull)anObject arguments:(NSDictionary * _Nullable)dict;
        [Abstract]
        [Export("runActionForKey:object:arguments:")]
        void Object(string @event, NSObject anObject, [NullAllowed] NSDictionary dict);
    }

    // @interface CAActionAdditions (NSNull) <CAAction>
    [Category]
    [BaseType(typeof(NSNull))]
    interface NSNull_CAActionAdditions : ICAAction
    {
    }

    // @protocol CALayerDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface CALayerDelegate
    {
        // @optional -(void)displayLayer:(CALayer * _Nonnull)layer;
        [Export("displayLayer:")]
        void DisplayLayer(CALayer layer);

        // @optional -(void)drawLayer:(CALayer * _Nonnull)layer inContext:(CGContextRef _Nonnull)ctx;
        [Export("drawLayer:inContext:")]
        unsafe void DrawLayer(CALayer layer, CGContextRef* ctx);

        // @optional -(void)layerWillDraw:(CALayer * _Nonnull)layer __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Export("layerWillDraw:")]
        void LayerWillDraw(CALayer layer);

        // @optional -(void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
        [Export("layoutSublayersOfLayer:")]
        void LayoutSublayersOfLayer(CALayer layer);

        // @optional -(id<CAAction> _Nullable)actionForLayer:(CALayer * _Nonnull)layer forKey:(NSString * _Nonnull)event;
        [Export("actionForLayer:forKey:")]
        [return: NullAllowed]
        CAAction ActionForLayer(CALayer layer, string @event);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CALayerContentsGravity _Nonnull kCAGravityCenter __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAGravityCenter", "__Internal")]
        NSString kCAGravityCenter { get; }

        // extern const CALayerContentsGravity _Nonnull kCAGravityTop __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAGravityTop", "__Internal")]
        NSString kCAGravityTop { get; }

        // extern const CALayerContentsGravity _Nonnull kCAGravityBottom __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAGravityBottom", "__Internal")]
        NSString kCAGravityBottom { get; }

        // extern const CALayerContentsGravity _Nonnull kCAGravityLeft __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAGravityLeft", "__Internal")]
        NSString kCAGravityLeft { get; }

        // extern const CALayerContentsGravity _Nonnull kCAGravityRight __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAGravityRight", "__Internal")]
        NSString kCAGravityRight { get; }

        // extern const CALayerContentsGravity _Nonnull kCAGravityTopLeft __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAGravityTopLeft", "__Internal")]
        NSString kCAGravityTopLeft { get; }

        // extern const CALayerContentsGravity _Nonnull kCAGravityTopRight __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAGravityTopRight", "__Internal")]
        NSString kCAGravityTopRight { get; }

        // extern const CALayerContentsGravity _Nonnull kCAGravityBottomLeft __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAGravityBottomLeft", "__Internal")]
        NSString kCAGravityBottomLeft { get; }

        // extern const CALayerContentsGravity _Nonnull kCAGravityBottomRight __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAGravityBottomRight", "__Internal")]
        NSString kCAGravityBottomRight { get; }

        // extern const CALayerContentsGravity _Nonnull kCAGravityResize __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAGravityResize", "__Internal")]
        NSString kCAGravityResize { get; }

        // extern const CALayerContentsGravity _Nonnull kCAGravityResizeAspect __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAGravityResizeAspect", "__Internal")]
        NSString kCAGravityResizeAspect { get; }

        // extern const CALayerContentsGravity _Nonnull kCAGravityResizeAspectFill __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAGravityResizeAspectFill", "__Internal")]
        NSString kCAGravityResizeAspectFill { get; }

        // extern const CALayerContentsFormat _Nonnull kCAContentsFormatRGBA8Uint __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kCAContentsFormatRGBA8Uint", "__Internal")]
        NSString kCAContentsFormatRGBA8Uint { get; }

        // extern const CALayerContentsFormat _Nonnull kCAContentsFormatRGBA16Float __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kCAContentsFormatRGBA16Float", "__Internal")]
        NSString kCAContentsFormatRGBA16Float { get; }

        // extern const CALayerContentsFormat _Nonnull kCAContentsFormatGray8Uint __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Watch(3, 0), TV(10, 0), Mac(10, 12), iOS(10, 0)]
        [Field("kCAContentsFormatGray8Uint", "__Internal")]
        NSString kCAContentsFormatGray8Uint { get; }

        // extern const CALayerContentsFilter _Nonnull kCAFilterNearest __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAFilterNearest", "__Internal")]
        NSString kCAFilterNearest { get; }

        // extern const CALayerContentsFilter _Nonnull kCAFilterLinear __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAFilterLinear", "__Internal")]
        NSString kCAFilterLinear { get; }

        // extern const CALayerContentsFilter _Nonnull kCAFilterTrilinear __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAFilterTrilinear", "__Internal")]
        NSString kCAFilterTrilinear { get; }

        // extern NSString *const _Nonnull kCAOnOrderIn __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAOnOrderIn", "__Internal")]
        NSString kCAOnOrderIn { get; }

        // extern NSString *const _Nonnull kCAOnOrderOut __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAOnOrderOut", "__Internal")]
        NSString kCAOnOrderOut { get; }

        // extern NSString *const _Nonnull kCATransition __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCATransition", "__Internal")]
        NSString kCATransition { get; }
    }

    // @interface CAAnimation : NSObject <NSSecureCoding, NSCopying, CAMediaTiming, CAAction>
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
    [BaseType(typeof(NSObject))]
    interface CAAnimation : INSSecureCoding, INSCopying, ICAMediaTiming, ICAAction
    {
        // +(instancetype _Nonnull)animation;
        [Static]
        [Export("animation")]
        CAAnimation Animation();

        // +(id _Nullable)defaultValueForKey:(NSString * _Nonnull)key;
        [Static]
        [Export("defaultValueForKey:")]
        [return: NullAllowed]
        NSObject DefaultValueForKey(string key);

        // -(BOOL)shouldArchiveValueForKey:(NSString * _Nonnull)key;
        [Export("shouldArchiveValueForKey:")]
        bool ShouldArchiveValueForKey(string key);

        // @property (strong) CAMediaTimingFunction * _Nullable timingFunction;
        [NullAllowed, Export("timingFunction", ArgumentSemantic.Strong)]
        CAMediaTimingFunction TimingFunction { get; set; }

        [Wrap("WeakDelegate")]
        [NullAllowed]
        CAAnimationDelegate Delegate { get; set; }

        // @property (strong) id<CAAnimationDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Strong)]
        NSObject WeakDelegate { get; set; }

        // @property (getter = isRemovedOnCompletion) BOOL removedOnCompletion;
        [Export("removedOnCompletion")]
        bool RemovedOnCompletion { [Bind("isRemovedOnCompletion")] get; set; }
    }

    // @protocol CAAnimationDelegate <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface CAAnimationDelegate
    {
        // @optional -(void)animationDidStart:(CAAnimation * _Nonnull)anim;
        [Export("animationDidStart:")]
        void AnimationDidStart(CAAnimation anim);

        // @optional -(void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
        [Export("animationDidStop:finished:")]
        void AnimationDidStop(CAAnimation anim, bool flag);
    }

    // @interface CAPropertyAnimation : CAAnimation
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
    [BaseType(typeof(CAAnimation))]
    interface CAPropertyAnimation
    {
        // +(instancetype _Nonnull)animationWithKeyPath:(NSString * _Nullable)path;
        [Static]
        [Export("animationWithKeyPath:")]
        CAPropertyAnimation AnimationWithKeyPath([NullAllowed] string path);

        // @property (copy) NSString * _Nullable keyPath;
        [NullAllowed, Export("keyPath")]
        string KeyPath { get; set; }

        // @property (getter = isAdditive) BOOL additive;
        [Export("additive")]
        bool Additive { [Bind("isAdditive")] get; set; }

        // @property (getter = isCumulative) BOOL cumulative;
        [Export("cumulative")]
        bool Cumulative { [Bind("isCumulative")] get; set; }

        // @property (strong) CAValueFunction * _Nullable valueFunction;
        [NullAllowed, Export("valueFunction", ArgumentSemantic.Strong)]
        CAValueFunction ValueFunction { get; set; }
    }

    // @interface CABasicAnimation : CAPropertyAnimation
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
    [BaseType(typeof(CAPropertyAnimation))]
    interface CABasicAnimation
    {
        // @property (strong) id _Nullable fromValue;
        [NullAllowed, Export("fromValue", ArgumentSemantic.Strong)]
        NSObject FromValue { get; set; }

        // @property (strong) id _Nullable toValue;
        [NullAllowed, Export("toValue", ArgumentSemantic.Strong)]
        NSObject ToValue { get; set; }

        // @property (strong) id _Nullable byValue;
        [NullAllowed, Export("byValue", ArgumentSemantic.Strong)]
        NSObject ByValue { get; set; }
    }

    // @interface CAKeyframeAnimation : CAPropertyAnimation
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
    [BaseType(typeof(CAPropertyAnimation))]
    interface CAKeyframeAnimation
    {
        // @property (copy) NSArray * _Nullable values;
        [NullAllowed, Export("values", ArgumentSemantic.Copy)]
        [Verify(StronglyTypedNSArray)]
        NSObject[] Values { get; set; }

        // @property CGPathRef _Nullable path;
        [NullAllowed, Export("path", ArgumentSemantic.Assign)]
        unsafe CGPathRef* Path { get; set; }

        // @property (copy) NSArray<NSNumber *> * _Nullable keyTimes;
        [NullAllowed, Export("keyTimes", ArgumentSemantic.Copy)]
        NSNumber[] KeyTimes { get; set; }

        // @property (copy) NSArray<CAMediaTimingFunction *> * _Nullable timingFunctions;
        [NullAllowed, Export("timingFunctions", ArgumentSemantic.Copy)]
        CAMediaTimingFunction[] TimingFunctions { get; set; }

        // @property (copy) CAAnimationCalculationMode _Nonnull calculationMode;
        [Export("calculationMode")]
        string CalculationMode { get; set; }

        // @property (copy) NSArray<NSNumber *> * _Nullable tensionValues;
        [NullAllowed, Export("tensionValues", ArgumentSemantic.Copy)]
        NSNumber[] TensionValues { get; set; }

        // @property (copy) NSArray<NSNumber *> * _Nullable continuityValues;
        [NullAllowed, Export("continuityValues", ArgumentSemantic.Copy)]
        NSNumber[] ContinuityValues { get; set; }

        // @property (copy) NSArray<NSNumber *> * _Nullable biasValues;
        [NullAllowed, Export("biasValues", ArgumentSemantic.Copy)]
        NSNumber[] BiasValues { get; set; }

        // @property (copy) CAAnimationRotationMode _Nullable rotationMode;
        [NullAllowed, Export("rotationMode")]
        string RotationMode { get; set; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CAAnimationCalculationMode _Nonnull kCAAnimationLinear __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAAnimationLinear", "__Internal")]
        NSString kCAAnimationLinear { get; }

        // extern const CAAnimationCalculationMode _Nonnull kCAAnimationDiscrete __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAAnimationDiscrete", "__Internal")]
        NSString kCAAnimationDiscrete { get; }

        // extern const CAAnimationCalculationMode _Nonnull kCAAnimationPaced __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAAnimationPaced", "__Internal")]
        NSString kCAAnimationPaced { get; }

        // extern const CAAnimationCalculationMode _Nonnull kCAAnimationCubic __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Field("kCAAnimationCubic", "__Internal")]
        NSString kCAAnimationCubic { get; }

        // extern const CAAnimationCalculationMode _Nonnull kCAAnimationCubicPaced __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Watch(2, 0), TV(9, 0), Mac(10, 7), iOS(4, 0)]
        [Field("kCAAnimationCubicPaced", "__Internal")]
        NSString kCAAnimationCubicPaced { get; }

        // extern const CAAnimationRotationMode _Nonnull kCAAnimationRotateAuto __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAAnimationRotateAuto", "__Internal")]
        NSString kCAAnimationRotateAuto { get; }

        // extern const CAAnimationRotationMode _Nonnull kCAAnimationRotateAutoReverse __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAAnimationRotateAutoReverse", "__Internal")]
        NSString kCAAnimationRotateAutoReverse { get; }
    }

    // @interface CASpringAnimation : CABasicAnimation
    [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(9, 0)]
    [BaseType(typeof(CABasicAnimation))]
    interface CASpringAnimation
    {
        // @property CGFloat mass;
        [Export("mass")]
        nfloat Mass { get; set; }

        // @property CGFloat stiffness;
        [Export("stiffness")]
        nfloat Stiffness { get; set; }

        // @property CGFloat damping;
        [Export("damping")]
        nfloat Damping { get; set; }

        // @property CGFloat initialVelocity;
        [Export("initialVelocity")]
        nfloat InitialVelocity { get; set; }

        // @property (readonly) CFTimeInterval settlingDuration;
        [Export("settlingDuration")]
        double SettlingDuration { get; }
    }

    // @interface CATransition : CAAnimation
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
    [BaseType(typeof(CAAnimation))]
    interface CATransition
    {
        // @property (copy) CATransitionType _Nonnull type;
        [Export("type")]
        string Type { get; set; }

        // @property (copy) CATransitionSubtype _Nullable subtype;
        [NullAllowed, Export("subtype")]
        string Subtype { get; set; }

        // @property float startProgress;
        [Export("startProgress")]
        float StartProgress { get; set; }

        // @property float endProgress;
        [Export("endProgress")]
        float EndProgress { get; set; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CATransitionType _Nonnull kCATransitionFade __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCATransitionFade", "__Internal")]
        NSString kCATransitionFade { get; }

        // extern const CATransitionType _Nonnull kCATransitionMoveIn __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCATransitionMoveIn", "__Internal")]
        NSString kCATransitionMoveIn { get; }

        // extern const CATransitionType _Nonnull kCATransitionPush __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCATransitionPush", "__Internal")]
        NSString kCATransitionPush { get; }

        // extern const CATransitionType _Nonnull kCATransitionReveal __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCATransitionReveal", "__Internal")]
        NSString kCATransitionReveal { get; }

        // extern const CATransitionSubtype _Nonnull kCATransitionFromRight __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCATransitionFromRight", "__Internal")]
        NSString kCATransitionFromRight { get; }

        // extern const CATransitionSubtype _Nonnull kCATransitionFromLeft __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCATransitionFromLeft", "__Internal")]
        NSString kCATransitionFromLeft { get; }

        // extern const CATransitionSubtype _Nonnull kCATransitionFromTop __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCATransitionFromTop", "__Internal")]
        NSString kCATransitionFromTop { get; }

        // extern const CATransitionSubtype _Nonnull kCATransitionFromBottom __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCATransitionFromBottom", "__Internal")]
        NSString kCATransitionFromBottom { get; }
    }

    // @interface CAAnimationGroup : CAAnimation
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
    [BaseType(typeof(CAAnimation))]
    interface CAAnimationGroup
    {
        // @property (copy) NSArray<CAAnimation *> * _Nullable animations;
        [NullAllowed, Export("animations", ArgumentSemantic.Copy)]
        CAAnimation[] Animations { get; set; }
    }

    // @interface CADisplayLink : NSObject
    [Watch(2, 0), TV(9, 0), Mac(10, 14), iOS(3, 1)]
    [BaseType(typeof(NSObject))]
    interface CADisplayLink
    {
        // +(CADisplayLink * _Nonnull)displayLinkWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)sel;
        [Static]
        [Export("displayLinkWithTarget:selector:")]
        CADisplayLink DisplayLinkWithTarget(NSObject target, Selector sel);

        // -(void)addToRunLoop:(NSRunLoop * _Nonnull)runloop forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("addToRunLoop:forMode:")]
        void AddToRunLoop(NSRunLoop runloop, string mode);

        // -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)runloop forMode:(NSRunLoopMode _Nonnull)mode;
        [Export("removeFromRunLoop:forMode:")]
        void RemoveFromRunLoop(NSRunLoop runloop, string mode);

        // -(void)invalidate;
        [Export("invalidate")]
        void Invalidate();

        // @property (readonly, nonatomic) CFTimeInterval timestamp;
        [Export("timestamp")]
        double Timestamp { get; }

        // @property (readonly, nonatomic) CFTimeInterval duration;
        [Export("duration")]
        double Duration { get; }

        // @property (readonly, nonatomic) CFTimeInterval targetTimestamp __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.14)));
        [Watch(3, 0), TV(10, 0), Mac(10, 14), iOS(10, 0)]
        [Export("targetTimestamp")]
        double TargetTimestamp { get; }

        // @property (getter = isPaused, nonatomic) BOOL paused;
        [Export("paused")]
        bool Paused { [Bind("isPaused")] get; set; }

        // @property (nonatomic) NSInteger frameInterval __attribute__((availability(tvos, introduced=9.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(ios, introduced=3.1, deprecated=10.0)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "preferredFramesPerSecond")]
        [Deprecated(PlatformName.TvOS, 10, 0, message: "preferredFramesPerSecond")]
        [Introduced(PlatformName.WatchOS, 2, 0, message: "preferredFramesPerSecond")]
        [Deprecated(PlatformName.WatchOS, 3, 0, message: "preferredFramesPerSecond")]
        [Introduced(PlatformName.iOS, 3, 1, message: "preferredFramesPerSecond")]
        [Deprecated(PlatformName.iOS, 10, 0, message: "preferredFramesPerSecond")]
        [Export("frameInterval")]
        nint FrameInterval { get; set; }

        // @property (nonatomic) NSInteger preferredFramesPerSecond __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0)));
        [Watch(3, 0), TV(10, 0), iOS(10, 0)]
        [Export("preferredFramesPerSecond")]
        nint PreferredFramesPerSecond { get; set; }
    }

    // @interface EAGLSharegroup : NSObject
    [BaseType(typeof(NSObject))]
    interface EAGLSharegroup
    {
        // @property (copy, nonatomic) NSString * _Nullable debugLabel __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [NullAllowed, Export("debugLabel")]
        string DebugLabel { get; set; }
    }

    // @interface EAGLContext : NSObject
    [Introduced(PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
    [Deprecated(PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
    [Introduced(PlatformName.iOS, 2, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
    [Deprecated(PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
    [BaseType(typeof(NSObject))]
    [DisableDefaultCtor]
    interface EAGLContext
    {
        // -(instancetype _Nullable)initWithAPI:(EAGLRenderingAPI)api;
        [Export("initWithAPI:")]
        IntPtr Constructor(EAGLRenderingAPI api);

        // -(instancetype _Nullable)initWithAPI:(EAGLRenderingAPI)api sharegroup:(EAGLSharegroup * _Nonnull)sharegroup __attribute__((objc_designated_initializer));
        [Export("initWithAPI:sharegroup:")]
        [DesignatedInitializer]
        IntPtr Constructor(EAGLRenderingAPI api, EAGLSharegroup sharegroup);

        // +(BOOL)setCurrentContext:(EAGLContext * _Nullable)context;
        [Static]
        [Export("setCurrentContext:")]
        bool SetCurrentContext([NullAllowed] EAGLContext context);

        // +(EAGLContext * _Nullable)currentContext;
        [Static]
        [NullAllowed, Export("currentContext")]
        [Verify(MethodToProperty)]
        EAGLContext CurrentContext { get; }

        // @property (readonly) EAGLRenderingAPI API;
        [Export("API")]
        EAGLRenderingAPI API { get; }

        // @property (readonly) EAGLSharegroup * _Nonnull sharegroup;
        [Export("sharegroup")]
        EAGLSharegroup Sharegroup { get; }

        // @property (copy, nonatomic) NSString * _Nullable debugLabel __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [NullAllowed, Export("debugLabel")]
        string DebugLabel { get; set; }

        // @property (getter = isMultiThreaded, nonatomic) BOOL multiThreaded __attribute__((availability(ios, introduced=7_1)));
        [iOS(7, 1)]
        [Export("multiThreaded")]
        bool MultiThreaded { [Bind("isMultiThreaded")] get; set; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull kEAGLDrawablePropertyRetainedBacking __attribute__((visibility("default")));
        [Field("kEAGLDrawablePropertyRetainedBacking", "__Internal")]
        NSString kEAGLDrawablePropertyRetainedBacking { get; }

        // extern NSString *const _Nonnull kEAGLDrawablePropertyColorFormat __attribute__((visibility("default")));
        [Field("kEAGLDrawablePropertyColorFormat", "__Internal")]
        NSString kEAGLDrawablePropertyColorFormat { get; }

        // extern NSString *const _Nonnull kEAGLColorFormatRGBA8 __attribute__((visibility("default")));
        [Field("kEAGLColorFormatRGBA8", "__Internal")]
        NSString kEAGLColorFormatRGBA8 { get; }

        // extern NSString *const _Nonnull kEAGLColorFormatRGB565 __attribute__((visibility("default")));
        [Field("kEAGLColorFormatRGB565", "__Internal")]
        NSString kEAGLColorFormatRGB565 { get; }

        // extern NSString *const _Nonnull kEAGLColorFormatSRGBA8 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kEAGLColorFormatSRGBA8", "__Internal")]
        NSString kEAGLColorFormatSRGBA8 { get; }
    }

    // @protocol EAGLDrawable
    [Protocol, Model]
    interface EAGLDrawable
    {
        // @required @property (copy) NSDictionary<NSString *,id> * _Nullable drawableProperties;
        [Abstract]
        [NullAllowed, Export("drawableProperties", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSObject> DrawableProperties { get; set; }
    }

    // @interface EAGLContextDrawableAdditions (EAGLContext)
    [Introduced(PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
    [Deprecated(PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
    [Introduced(PlatformName.iOS, 2, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
    [Deprecated(PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
    [Category]
    [BaseType(typeof(EAGLContext))]
    interface EAGLContext_EAGLContextDrawableAdditions
    {
        // -(BOOL)renderbufferStorage:(NSUInteger)target fromDrawable:(id<EAGLDrawable> _Nullable)drawable;
        [Export("renderbufferStorage:fromDrawable:")]
        bool RenderbufferStorage(nuint target, [NullAllowed] EAGLDrawable drawable);

        // -(BOOL)presentRenderbuffer:(NSUInteger)target;
        [Export("presentRenderbuffer:")]
        bool PresentRenderbuffer(nuint target);

        // -(BOOL)presentRenderbuffer:(NSUInteger)target atTime:(CFTimeInterval)presentationTime;
        [Export("presentRenderbuffer:atTime:")]
        bool PresentRenderbuffer(nuint target, double presentationTime);

        // -(BOOL)presentRenderbuffer:(NSUInteger)target afterMinimumDuration:(CFTimeInterval)duration;
        [Export("presentRenderbuffer:afterMinimumDuration:")]
        bool PresentRenderbuffer(nuint target, double duration);
    }

    // @interface CAEAGLLayer : CALayer <EAGLDrawable>
    [Introduced(PlatformName.TvOS, 9, 0, message: "OpenGLES is deprecated")]
    [Deprecated(PlatformName.TvOS, 12, 0, message: "OpenGLES is deprecated")]
    [Introduced(PlatformName.WatchOS, 2, 0, message: "OpenGLES is deprecated")]
    [Deprecated(PlatformName.WatchOS, 5, 0, message: "OpenGLES is deprecated")]
    [Introduced(PlatformName.iOS, 2, 0, message: "OpenGLES is deprecated")]
    [Deprecated(PlatformName.iOS, 12, 0, message: "OpenGLES is deprecated")]
    [NoMac]
    [BaseType(typeof(CALayer))]
    interface CAEAGLLayer : IEAGLDrawable
    {
        // @property BOOL presentsWithTransaction __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0)));
        [Watch(2, 0), TV(9, 0), iOS(9, 0)]
        [Export("presentsWithTransaction")]
        bool PresentsWithTransaction { get; set; }
    }

    // typedef void (^MTLDrawablePresentedHandler)(id<MTLDrawable> _Nonnull);
    delegate void MTLDrawablePresentedHandler(MTLDrawable arg0);

    // @protocol MTLDrawable <NSObject>
    [Mac(10, 11), iOS(8, 0)]
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface MTLDrawable
    {
        // @required -(void)present;
        [Abstract]
        [Export("present")]
        void Present();

        // @required -(void)presentAtTime:(CFTimeInterval)presentationTime;
        [Abstract]
        [Export("presentAtTime:")]
        void PresentAtTime(double presentationTime);

        // @required -(void)presentAfterMinimumDuration:(CFTimeInterval)duration __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3)));
        [NoMac, iOS(10, 3)]
        [Abstract]
        [Export("presentAfterMinimumDuration:")]
        void PresentAfterMinimumDuration(double duration);

        // @required -(void)addPresentedHandler:(MTLDrawablePresentedHandler _Nonnull)block __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3)));
        [NoMac, iOS(10, 3)]
        [Abstract]
        [Export("addPresentedHandler:")]
        void AddPresentedHandler(MTLDrawablePresentedHandler block);

        // @required @property (readonly, nonatomic) CFTimeInterval presentedTime __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3)));
        [NoMac, iOS(10, 3)]
        [Abstract]
        [Export("presentedTime")]
        double PresentedTime { get; }

        // @required @property (readonly, nonatomic) NSUInteger drawableID __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.3)));
        [NoMac, iOS(10, 3)]
        [Abstract]
        [Export("drawableID")]
        nuint DrawableID { get; }
    }

    // @protocol CAMetalDrawable <MTLDrawable>
    [Protocol, Model]
    interface CAMetalDrawable : IMTLDrawable
    {
        // @required @property (readonly) id<MTLTexture> _Nonnull texture;
        [Abstract]
        [Export("texture")]
        MTLTexture Texture { get; }

        // @required @property (readonly) CAMetalLayer * _Nonnull layer;
        [Abstract]
        [Export("layer")]
        CAMetalLayer Layer { get; }
    }

    // @interface CAMetalLayer : CALayer
    [Watch(2, 0), TV(9, 0), Mac(10, 11), iOS(8, 0)]
    [BaseType(typeof(CALayer))]
    interface CAMetalLayer
    {
        // @property (retain) id<MTLDevice> _Nullable device;
        [NullAllowed, Export("device", ArgumentSemantic.Retain)]
        MTLDevice Device { get; set; }

        // @property MTLPixelFormat pixelFormat;
        [Export("pixelFormat", ArgumentSemantic.Assign)]
        MTLPixelFormat PixelFormat { get; set; }

        // @property BOOL framebufferOnly;
        [Export("framebufferOnly")]
        bool FramebufferOnly { get; set; }

        // @property CGSize drawableSize;
        [Export("drawableSize", ArgumentSemantic.Assign)]
        CGSize DrawableSize { get; set; }

        // -(id<CAMetalDrawable> _Nullable)nextDrawable;
        [NullAllowed, Export("nextDrawable")]
        [Verify(MethodToProperty)]
        CAMetalDrawable NextDrawable { get; }

        // @property NSUInteger maximumDrawableCount __attribute__((availability(tvos, introduced=11.2))) __attribute__((availability(watchos, introduced=4.2))) __attribute__((availability(ios, introduced=11.2))) __attribute__((availability(macos, introduced=10.13.2)));
        [Watch(4, 2), TV(11, 2), Mac(10, 13, 2), iOS(11, 2)]
        [Export("maximumDrawableCount")]
        nuint MaximumDrawableCount { get; set; }

        // @property BOOL presentsWithTransaction;
        [Export("presentsWithTransaction")]
        bool PresentsWithTransaction { get; set; }

        // @property BOOL allowsNextDrawableTimeout __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Watch(4, 0), TV(11, 0), Mac(10, 13), iOS(11, 0)]
        [Export("allowsNextDrawableTimeout")]
        bool AllowsNextDrawableTimeout { get; set; }
    }

    // @interface CAEmitterCell : NSObject <NSSecureCoding, CAMediaTiming>
    [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface CAEmitterCell : INSSecureCoding, ICAMediaTiming
    {
        // +(instancetype _Nonnull)emitterCell;
        [Static]
        [Export("emitterCell")]
        CAEmitterCell EmitterCell();

        // +(id _Nullable)defaultValueForKey:(NSString * _Nonnull)key;
        [Static]
        [Export("defaultValueForKey:")]
        [return: NullAllowed]
        NSObject DefaultValueForKey(string key);

        // -(BOOL)shouldArchiveValueForKey:(NSString * _Nonnull)key;
        [Export("shouldArchiveValueForKey:")]
        bool ShouldArchiveValueForKey(string key);

        // @property (copy) NSString * _Nullable name;
        [NullAllowed, Export("name")]
        string Name { get; set; }

        // @property (getter = isEnabled) BOOL enabled;
        [Export("enabled")]
        bool Enabled { [Bind("isEnabled")] get; set; }

        // @property float birthRate;
        [Export("birthRate")]
        float BirthRate { get; set; }

        // @property float lifetime;
        [Export("lifetime")]
        float Lifetime { get; set; }

        // @property float lifetimeRange;
        [Export("lifetimeRange")]
        float LifetimeRange { get; set; }

        // @property CGFloat emissionLatitude;
        [Export("emissionLatitude")]
        nfloat EmissionLatitude { get; set; }

        // @property CGFloat emissionLongitude;
        [Export("emissionLongitude")]
        nfloat EmissionLongitude { get; set; }

        // @property CGFloat emissionRange;
        [Export("emissionRange")]
        nfloat EmissionRange { get; set; }

        // @property CGFloat velocity;
        [Export("velocity")]
        nfloat Velocity { get; set; }

        // @property CGFloat velocityRange;
        [Export("velocityRange")]
        nfloat VelocityRange { get; set; }

        // @property CGFloat xAcceleration;
        [Export("xAcceleration")]
        nfloat XAcceleration { get; set; }

        // @property CGFloat yAcceleration;
        [Export("yAcceleration")]
        nfloat YAcceleration { get; set; }

        // @property CGFloat zAcceleration;
        [Export("zAcceleration")]
        nfloat ZAcceleration { get; set; }

        // @property CGFloat scale;
        [Export("scale")]
        nfloat Scale { get; set; }

        // @property CGFloat scaleRange;
        [Export("scaleRange")]
        nfloat ScaleRange { get; set; }

        // @property CGFloat scaleSpeed;
        [Export("scaleSpeed")]
        nfloat ScaleSpeed { get; set; }

        // @property CGFloat spin;
        [Export("spin")]
        nfloat Spin { get; set; }

        // @property CGFloat spinRange;
        [Export("spinRange")]
        nfloat SpinRange { get; set; }

        // @property CGColorRef _Nullable color;
        [NullAllowed, Export("color", ArgumentSemantic.Assign)]
        unsafe CGColorRef* Color { get; set; }

        // @property float redRange;
        [Export("redRange")]
        float RedRange { get; set; }

        // @property float greenRange;
        [Export("greenRange")]
        float GreenRange { get; set; }

        // @property float blueRange;
        [Export("blueRange")]
        float BlueRange { get; set; }

        // @property float alphaRange;
        [Export("alphaRange")]
        float AlphaRange { get; set; }

        // @property float redSpeed;
        [Export("redSpeed")]
        float RedSpeed { get; set; }

        // @property float greenSpeed;
        [Export("greenSpeed")]
        float GreenSpeed { get; set; }

        // @property float blueSpeed;
        [Export("blueSpeed")]
        float BlueSpeed { get; set; }

        // @property float alphaSpeed;
        [Export("alphaSpeed")]
        float AlphaSpeed { get; set; }

        // @property (strong) id _Nullable contents;
        [NullAllowed, Export("contents", ArgumentSemantic.Strong)]
        NSObject Contents { get; set; }

        // @property CGRect contentsRect;
        [Export("contentsRect", ArgumentSemantic.Assign)]
        CGRect ContentsRect { get; set; }

        // @property CGFloat contentsScale;
        [Export("contentsScale")]
        nfloat ContentsScale { get; set; }

        // @property (copy) NSString * _Nonnull minificationFilter;
        [Export("minificationFilter")]
        string MinificationFilter { get; set; }

        // @property (copy) NSString * _Nonnull magnificationFilter;
        [Export("magnificationFilter")]
        string MagnificationFilter { get; set; }

        // @property float minificationFilterBias;
        [Export("minificationFilterBias")]
        float MinificationFilterBias { get; set; }

        // @property (copy) NSArray<CAEmitterCell *> * _Nullable emitterCells;
        [NullAllowed, Export("emitterCells", ArgumentSemantic.Copy)]
        CAEmitterCell[] EmitterCells { get; set; }

        // @property (copy) NSDictionary * _Nullable style;
        [NullAllowed, Export("style", ArgumentSemantic.Copy)]
        NSDictionary Style { get; set; }
    }

    // @interface CAEmitterLayer : CALayer
    [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
    [BaseType(typeof(CALayer))]
    interface CAEmitterLayer
    {
        // @property (copy) NSArray<CAEmitterCell *> * _Nullable emitterCells;
        [NullAllowed, Export("emitterCells", ArgumentSemantic.Copy)]
        CAEmitterCell[] EmitterCells { get; set; }

        // @property float birthRate;
        [Export("birthRate")]
        float BirthRate { get; set; }

        // @property float lifetime;
        [Export("lifetime")]
        float Lifetime { get; set; }

        // @property CGPoint emitterPosition;
        [Export("emitterPosition", ArgumentSemantic.Assign)]
        CGPoint EmitterPosition { get; set; }

        // @property CGFloat emitterZPosition;
        [Export("emitterZPosition")]
        nfloat EmitterZPosition { get; set; }

        // @property CGSize emitterSize;
        [Export("emitterSize", ArgumentSemantic.Assign)]
        CGSize EmitterSize { get; set; }

        // @property CGFloat emitterDepth;
        [Export("emitterDepth")]
        nfloat EmitterDepth { get; set; }

        // @property (copy) CAEmitterLayerEmitterShape _Nonnull emitterShape;
        [Export("emitterShape")]
        string EmitterShape { get; set; }

        // @property (copy) CAEmitterLayerEmitterMode _Nonnull emitterMode;
        [Export("emitterMode")]
        string EmitterMode { get; set; }

        // @property (copy) CAEmitterLayerRenderMode _Nonnull renderMode;
        [Export("renderMode")]
        string RenderMode { get; set; }

        // @property BOOL preservesDepth;
        [Export("preservesDepth")]
        bool PreservesDepth { get; set; }

        // @property float velocity;
        [Export("velocity")]
        float Velocity { get; set; }

        // @property float scale;
        [Export("scale")]
        float Scale { get; set; }

        // @property float spin;
        [Export("spin")]
        float Spin { get; set; }

        // @property unsigned int seed;
        [Export("seed")]
        uint Seed { get; set; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CAEmitterLayerEmitterShape _Nonnull kCAEmitterLayerPoint __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerPoint", "__Internal")]
        NSString kCAEmitterLayerPoint { get; }

        // extern const CAEmitterLayerEmitterShape _Nonnull kCAEmitterLayerLine __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerLine", "__Internal")]
        NSString kCAEmitterLayerLine { get; }

        // extern const CAEmitterLayerEmitterShape _Nonnull kCAEmitterLayerRectangle __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerRectangle", "__Internal")]
        NSString kCAEmitterLayerRectangle { get; }

        // extern const CAEmitterLayerEmitterShape _Nonnull kCAEmitterLayerCuboid __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerCuboid", "__Internal")]
        NSString kCAEmitterLayerCuboid { get; }

        // extern const CAEmitterLayerEmitterShape _Nonnull kCAEmitterLayerCircle __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerCircle", "__Internal")]
        NSString kCAEmitterLayerCircle { get; }

        // extern const CAEmitterLayerEmitterShape _Nonnull kCAEmitterLayerSphere __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerSphere", "__Internal")]
        NSString kCAEmitterLayerSphere { get; }

        // extern const CAEmitterLayerEmitterMode _Nonnull kCAEmitterLayerPoints __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerPoints", "__Internal")]
        NSString kCAEmitterLayerPoints { get; }

        // extern const CAEmitterLayerEmitterMode _Nonnull kCAEmitterLayerOutline __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerOutline", "__Internal")]
        NSString kCAEmitterLayerOutline { get; }

        // extern const CAEmitterLayerEmitterMode _Nonnull kCAEmitterLayerSurface __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerSurface", "__Internal")]
        NSString kCAEmitterLayerSurface { get; }

        // extern const CAEmitterLayerEmitterMode _Nonnull kCAEmitterLayerVolume __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerVolume", "__Internal")]
        NSString kCAEmitterLayerVolume { get; }

        // extern const CAEmitterLayerRenderMode _Nonnull kCAEmitterLayerUnordered __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerUnordered", "__Internal")]
        NSString kCAEmitterLayerUnordered { get; }

        // extern const CAEmitterLayerRenderMode _Nonnull kCAEmitterLayerOldestFirst __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerOldestFirst", "__Internal")]
        NSString kCAEmitterLayerOldestFirst { get; }

        // extern const CAEmitterLayerRenderMode _Nonnull kCAEmitterLayerOldestLast __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerOldestLast", "__Internal")]
        NSString kCAEmitterLayerOldestLast { get; }

        // extern const CAEmitterLayerRenderMode _Nonnull kCAEmitterLayerBackToFront __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerBackToFront", "__Internal")]
        NSString kCAEmitterLayerBackToFront { get; }

        // extern const CAEmitterLayerRenderMode _Nonnull kCAEmitterLayerAdditive __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(5, 0)]
        [Field("kCAEmitterLayerAdditive", "__Internal")]
        NSString kCAEmitterLayerAdditive { get; }
    }

    // @interface CAMediaTimingFunction : NSObject <NSSecureCoding>
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
    [BaseType(typeof(NSObject))]
    interface CAMediaTimingFunction : INSSecureCoding
    {
        // +(instancetype _Nonnull)functionWithName:(CAMediaTimingFunctionName _Nonnull)name;
        [Static]
        [Export("functionWithName:")]
        CAMediaTimingFunction FunctionWithName(string name);

        // +(instancetype _Nonnull)functionWithControlPoints:(float)c1x :(float)c1y :(float)c2x :(float)c2y;
        [Static]
        [Export("functionWithControlPoints::::")]
        CAMediaTimingFunction FunctionWithControlPoints(float c1x, float c1y, float c2x, float c2y);

        // -(instancetype _Nonnull)initWithControlPoints:(float)c1x :(float)c1y :(float)c2x :(float)c2y;
        [Export("initWithControlPoints::::")]
        IntPtr Constructor(float c1x, float c1y, float c2x, float c2y);

        // -(void)getControlPointAtIndex:(size_t)idx values:(float * _Nonnull)ptr;
        [Export("getControlPointAtIndex:values:")]
        void GetControlPointAtIndex(nuint idx, float[] ptr);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CAMediaTimingFunctionName _Nonnull kCAMediaTimingFunctionLinear __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAMediaTimingFunctionLinear", "__Internal")]
        NSString kCAMediaTimingFunctionLinear { get; }

        // extern const CAMediaTimingFunctionName _Nonnull kCAMediaTimingFunctionEaseIn __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAMediaTimingFunctionEaseIn", "__Internal")]
        NSString kCAMediaTimingFunctionEaseIn { get; }

        // extern const CAMediaTimingFunctionName _Nonnull kCAMediaTimingFunctionEaseOut __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAMediaTimingFunctionEaseOut", "__Internal")]
        NSString kCAMediaTimingFunctionEaseOut { get; }

        // extern const CAMediaTimingFunctionName _Nonnull kCAMediaTimingFunctionEaseInEaseOut __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAMediaTimingFunctionEaseInEaseOut", "__Internal")]
        NSString kCAMediaTimingFunctionEaseInEaseOut { get; }

        // extern const CAMediaTimingFunctionName _Nonnull kCAMediaTimingFunctionDefault __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAMediaTimingFunctionDefault", "__Internal")]
        NSString kCAMediaTimingFunctionDefault { get; }
    }

    // @interface CAGradientLayer : CALayer
    [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
    [BaseType(typeof(CALayer))]
    interface CAGradientLayer
    {
        // @property (copy) NSArray * _Nullable colors;
        [NullAllowed, Export("colors", ArgumentSemantic.Copy)]
        [Verify(StronglyTypedNSArray)]
        NSObject[] Colors { get; set; }

        // @property (copy) NSArray<NSNumber *> * _Nullable locations;
        [NullAllowed, Export("locations", ArgumentSemantic.Copy)]
        NSNumber[] Locations { get; set; }

        // @property CGPoint startPoint;
        [Export("startPoint", ArgumentSemantic.Assign)]
        CGPoint StartPoint { get; set; }

        // @property CGPoint endPoint;
        [Export("endPoint", ArgumentSemantic.Assign)]
        CGPoint EndPoint { get; set; }

        // @property (copy) CAGradientLayerType _Nonnull type;
        [Export("type")]
        string Type { get; set; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CAGradientLayerType _Nonnull kCAGradientLayerAxial __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAGradientLayerAxial", "__Internal")]
        NSString kCAGradientLayerAxial { get; }

        // extern const CAGradientLayerType _Nonnull kCAGradientLayerRadial __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 2)]
        [Field("kCAGradientLayerRadial", "__Internal")]
        NSString kCAGradientLayerRadial { get; }

        // extern const CAGradientLayerType _Nonnull kCAGradientLayerConic __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Watch(5, 0), TV(12, 0), Mac(10, 14), iOS(12, 0)]
        [Field("kCAGradientLayerConic", "__Internal")]
        NSString kCAGradientLayerConic { get; }
    }

    // @interface CAReplicatorLayer : CALayer
    [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
    [BaseType(typeof(CALayer))]
    interface CAReplicatorLayer
    {
        // @property NSInteger instanceCount;
        [Export("instanceCount")]
        nint InstanceCount { get; set; }

        // @property BOOL preservesDepth;
        [Export("preservesDepth")]
        bool PreservesDepth { get; set; }

        // @property CFTimeInterval instanceDelay;
        [Export("instanceDelay")]
        double InstanceDelay { get; set; }

        // @property CATransform3D instanceTransform;
        [Export("instanceTransform", ArgumentSemantic.Assign)]
        CATransform3D InstanceTransform { get; set; }

        // @property CGColorRef _Nullable instanceColor;
        [NullAllowed, Export("instanceColor", ArgumentSemantic.Assign)]
        unsafe CGColorRef* InstanceColor { get; set; }

        // @property float instanceRedOffset;
        [Export("instanceRedOffset")]
        float InstanceRedOffset { get; set; }

        // @property float instanceGreenOffset;
        [Export("instanceGreenOffset")]
        float InstanceGreenOffset { get; set; }

        // @property float instanceBlueOffset;
        [Export("instanceBlueOffset")]
        float InstanceBlueOffset { get; set; }

        // @property float instanceAlphaOffset;
        [Export("instanceAlphaOffset")]
        float InstanceAlphaOffset { get; set; }
    }

    // @interface CAScrollLayer : CALayer
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
    [BaseType(typeof(CALayer))]
    interface CAScrollLayer
    {
        // -(void)scrollToPoint:(CGPoint)p;
        [Export("scrollToPoint:")]
        void ScrollToPoint(CGPoint p);

        // -(void)scrollToRect:(CGRect)r;
        [Export("scrollToRect:")]
        void ScrollToRect(CGRect r);

        // @property (copy) CAScrollLayerScrollMode _Nonnull scrollMode;
        [Export("scrollMode")]
        string ScrollMode { get; set; }
    }

    // @interface CALayerScrolling (CALayer)
    [Category]
    [BaseType(typeof(CALayer))]
    interface CALayer_CALayerScrolling
    {
        // -(void)scrollPoint:(CGPoint)p;
        [Export("scrollPoint:")]
        void ScrollPoint(CGPoint p);

        // -(void)scrollRectToVisible:(CGRect)r;
        [Export("scrollRectToVisible:")]
        void ScrollRectToVisible(CGRect r);

        // @property (readonly) CGRect visibleRect;
        [Export("visibleRect")]
        CGRect VisibleRect { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CAScrollLayerScrollMode _Nonnull kCAScrollNone __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAScrollNone", "__Internal")]
        NSString kCAScrollNone { get; }

        // extern const CAScrollLayerScrollMode _Nonnull kCAScrollVertically __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAScrollVertically", "__Internal")]
        NSString kCAScrollVertically { get; }

        // extern const CAScrollLayerScrollMode _Nonnull kCAScrollHorizontally __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAScrollHorizontally", "__Internal")]
        NSString kCAScrollHorizontally { get; }

        // extern const CAScrollLayerScrollMode _Nonnull kCAScrollBoth __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCAScrollBoth", "__Internal")]
        NSString kCAScrollBoth { get; }
    }

    // @interface CAShapeLayer : CALayer
    [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
    [BaseType(typeof(CALayer))]
    interface CAShapeLayer
    {
        // @property CGPathRef _Nullable path;
        [NullAllowed, Export("path", ArgumentSemantic.Assign)]
        unsafe CGPathRef* Path { get; set; }

        // @property CGColorRef _Nullable fillColor;
        [NullAllowed, Export("fillColor", ArgumentSemantic.Assign)]
        unsafe CGColorRef* FillColor { get; set; }

        // @property (copy) CAShapeLayerFillRule _Nonnull fillRule;
        [Export("fillRule")]
        string FillRule { get; set; }

        // @property CGColorRef _Nullable strokeColor;
        [NullAllowed, Export("strokeColor", ArgumentSemantic.Assign)]
        unsafe CGColorRef* StrokeColor { get; set; }

        // @property CGFloat strokeStart;
        [Export("strokeStart")]
        nfloat StrokeStart { get; set; }

        // @property CGFloat strokeEnd;
        [Export("strokeEnd")]
        nfloat StrokeEnd { get; set; }

        // @property CGFloat lineWidth;
        [Export("lineWidth")]
        nfloat LineWidth { get; set; }

        // @property CGFloat miterLimit;
        [Export("miterLimit")]
        nfloat MiterLimit { get; set; }

        // @property (copy) CAShapeLayerLineCap _Nonnull lineCap;
        [Export("lineCap")]
        string LineCap { get; set; }

        // @property (copy) CAShapeLayerLineJoin _Nonnull lineJoin;
        [Export("lineJoin")]
        string LineJoin { get; set; }

        // @property CGFloat lineDashPhase;
        [Export("lineDashPhase")]
        nfloat LineDashPhase { get; set; }

        // @property (copy) NSArray<NSNumber *> * _Nullable lineDashPattern;
        [NullAllowed, Export("lineDashPattern", ArgumentSemantic.Copy)]
        NSNumber[] LineDashPattern { get; set; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CAShapeLayerFillRule _Nonnull kCAFillRuleNonZero __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAFillRuleNonZero", "__Internal")]
        NSString kCAFillRuleNonZero { get; }

        // extern const CAShapeLayerFillRule _Nonnull kCAFillRuleEvenOdd __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAFillRuleEvenOdd", "__Internal")]
        NSString kCAFillRuleEvenOdd { get; }

        // extern const CAShapeLayerLineJoin _Nonnull kCALineJoinMiter __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCALineJoinMiter", "__Internal")]
        NSString kCALineJoinMiter { get; }

        // extern const CAShapeLayerLineJoin _Nonnull kCALineJoinRound __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCALineJoinRound", "__Internal")]
        NSString kCALineJoinRound { get; }

        // extern const CAShapeLayerLineJoin _Nonnull kCALineJoinBevel __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCALineJoinBevel", "__Internal")]
        NSString kCALineJoinBevel { get; }

        // extern const CAShapeLayerLineCap _Nonnull kCALineCapButt __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCALineCapButt", "__Internal")]
        NSString kCALineCapButt { get; }

        // extern const CAShapeLayerLineCap _Nonnull kCALineCapRound __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCALineCapRound", "__Internal")]
        NSString kCALineCapRound { get; }

        // extern const CAShapeLayerLineCap _Nonnull kCALineCapSquare __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCALineCapSquare", "__Internal")]
        NSString kCALineCapSquare { get; }
    }

    // @interface CATextLayer : CALayer
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
    [BaseType(typeof(CALayer))]
    interface CATextLayer
    {
        // @property (copy) id _Nullable string;
        [NullAllowed, Export("string", ArgumentSemantic.Copy)]
        NSObject String { get; set; }

        // @property CFTypeRef _Nullable font;
        [NullAllowed, Export("font", ArgumentSemantic.Assign)]
        unsafe void* Font { get; set; }

        // @property CGFloat fontSize;
        [Export("fontSize")]
        nfloat FontSize { get; set; }

        // @property CGColorRef _Nullable foregroundColor;
        [NullAllowed, Export("foregroundColor", ArgumentSemantic.Assign)]
        unsafe CGColorRef* ForegroundColor { get; set; }

        // @property (getter = isWrapped) BOOL wrapped;
        [Export("wrapped")]
        bool Wrapped { [Bind("isWrapped")] get; set; }

        // @property (copy) CATextLayerTruncationMode _Nonnull truncationMode;
        [Export("truncationMode")]
        string TruncationMode { get; set; }

        // @property (copy) CATextLayerAlignmentMode _Nonnull alignmentMode;
        [Export("alignmentMode")]
        string AlignmentMode { get; set; }

        // @property BOOL allowsFontSubpixelQuantization;
        [Export("allowsFontSubpixelQuantization")]
        bool AllowsFontSubpixelQuantization { get; set; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CATextLayerTruncationMode _Nonnull kCATruncationNone __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 2)]
        [Field("kCATruncationNone", "__Internal")]
        NSString kCATruncationNone { get; }

        // extern const CATextLayerTruncationMode _Nonnull kCATruncationStart __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 2)]
        [Field("kCATruncationStart", "__Internal")]
        NSString kCATruncationStart { get; }

        // extern const CATextLayerTruncationMode _Nonnull kCATruncationEnd __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 2)]
        [Field("kCATruncationEnd", "__Internal")]
        NSString kCATruncationEnd { get; }

        // extern const CATextLayerTruncationMode _Nonnull kCATruncationMiddle __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 2)]
        [Field("kCATruncationMiddle", "__Internal")]
        NSString kCATruncationMiddle { get; }

        // extern const CATextLayerAlignmentMode _Nonnull kCAAlignmentNatural __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 2)]
        [Field("kCAAlignmentNatural", "__Internal")]
        NSString kCAAlignmentNatural { get; }

        // extern const CATextLayerAlignmentMode _Nonnull kCAAlignmentLeft __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 2)]
        [Field("kCAAlignmentLeft", "__Internal")]
        NSString kCAAlignmentLeft { get; }

        // extern const CATextLayerAlignmentMode _Nonnull kCAAlignmentRight __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 2)]
        [Field("kCAAlignmentRight", "__Internal")]
        NSString kCAAlignmentRight { get; }

        // extern const CATextLayerAlignmentMode _Nonnull kCAAlignmentCenter __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 2)]
        [Field("kCAAlignmentCenter", "__Internal")]
        NSString kCAAlignmentCenter { get; }

        // extern const CATextLayerAlignmentMode _Nonnull kCAAlignmentJustified __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(3, 2)]
        [Field("kCAAlignmentJustified", "__Internal")]
        NSString kCAAlignmentJustified { get; }
    }

    // @interface CATiledLayer : CALayer
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
    [BaseType(typeof(CALayer))]
    interface CATiledLayer
    {
        // +(CFTimeInterval)fadeDuration;
        [Static]
        [Export("fadeDuration")]
        [Verify(MethodToProperty)]
        double FadeDuration { get; }

        // @property size_t levelsOfDetail;
        [Export("levelsOfDetail")]
        nuint LevelsOfDetail { get; set; }

        // @property size_t levelsOfDetailBias;
        [Export("levelsOfDetailBias")]
        nuint LevelsOfDetailBias { get; set; }

        // @property CGSize tileSize;
        [Export("tileSize", ArgumentSemantic.Assign)]
        CGSize TileSize { get; set; }
    }

    // @interface CATransaction : NSObject
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
    [BaseType(typeof(NSObject))]
    interface CATransaction
    {
        // +(void)begin;
        [Static]
        [Export("begin")]
        void Begin();

        // +(void)commit;
        [Static]
        [Export("commit")]
        void Commit();

        // +(void)flush;
        [Static]
        [Export("flush")]
        void Flush();

        // +(void)lock;
        [Static]
        [Export("lock")]
        void Lock();

        // +(void)unlock;
        [Static]
        [Export("unlock")]
        void Unlock();

        // +(CFTimeInterval)animationDuration;
        // +(void)setAnimationDuration:(CFTimeInterval)dur;
        [Static]
        [Export("animationDuration")]
        [Verify(MethodToProperty)]
        double AnimationDuration { get; set; }

        // +(CAMediaTimingFunction * _Nullable)animationTimingFunction;
        [Static]
        [Export("animationTimingFunction")]
        [return: NullAllowed]
        CAMediaTimingFunction AnimationTimingFunction();

        // +(void)setAnimationTimingFunction:(CAMediaTimingFunction * _Nullable)function;
        [Static]
        [Export("setAnimationTimingFunction:")]
        void SetAnimationTimingFunction([NullAllowed] CAMediaTimingFunction function);

        // +(BOOL)disableActions;
        [Static]
        [Export("disableActions")]
        bool DisableActions();

        // +(void)setDisableActions:(BOOL)flag;
        [Static]
        [Export("setDisableActions:")]
        void SetDisableActions(bool flag);

        // +(void (^ _Nullable)(void))completionBlock;
        [Static]
        [Export("completionBlock")]
        [return: NullAllowed]
        Action CompletionBlock();

        // +(void)setCompletionBlock:(void (^ _Nullable)(void))block;
        [Static]
        [Export("setCompletionBlock:")]
        void SetCompletionBlock([NullAllowed] Action block);

        // +(id _Nullable)valueForKey:(NSString * _Nonnull)key;
        [Static]
        [Export("valueForKey:")]
        [return: NullAllowed]
        NSObject ValueForKey(string key);

        // +(void)setValue:(id _Nullable)anObject forKey:(NSString * _Nonnull)key;
        [Static]
        [Export("setValue:forKey:")]
        void SetValue([NullAllowed] NSObject anObject, string key);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull kCATransactionAnimationDuration __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCATransactionAnimationDuration", "__Internal")]
        NSString kCATransactionAnimationDuration { get; }

        // extern NSString *const _Nonnull kCATransactionDisableActions __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(macos, introduced=10.5)));
        [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(2, 0)]
        [Field("kCATransactionDisableActions", "__Internal")]
        NSString kCATransactionDisableActions { get; }

        // extern NSString *const _Nonnull kCATransactionAnimationTimingFunction __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCATransactionAnimationTimingFunction", "__Internal")]
        NSString kCATransactionAnimationTimingFunction { get; }

        // extern NSString *const _Nonnull kCATransactionCompletionBlock __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCATransactionCompletionBlock", "__Internal")]
        NSString kCATransactionCompletionBlock { get; }
    }

    // @interface CATransformLayer : CALayer
    [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
    [BaseType(typeof(CALayer))]
    interface CATransformLayer
    {
    }

    // @interface CAValueFunction : NSObject <NSSecureCoding>
    [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
    [BaseType(typeof(NSObject))]
    interface CAValueFunction : INSSecureCoding
    {
        // +(instancetype _Nullable)functionWithName:(CAValueFunctionName _Nonnull)name;
        [Static]
        [Export("functionWithName:")]
        [return: NullAllowed]
        CAValueFunction FunctionWithName(string name);

        // @property (readonly) CAValueFunctionName _Nonnull name;
        [Export("name")]
        string Name { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CAValueFunctionName _Nonnull kCAValueFunctionRotateX __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAValueFunctionRotateX", "__Internal")]
        NSString kCAValueFunctionRotateX { get; }

        // extern const CAValueFunctionName _Nonnull kCAValueFunctionRotateY __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAValueFunctionRotateY", "__Internal")]
        NSString kCAValueFunctionRotateY { get; }

        // extern const CAValueFunctionName _Nonnull kCAValueFunctionRotateZ __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAValueFunctionRotateZ", "__Internal")]
        NSString kCAValueFunctionRotateZ { get; }

        // extern const CAValueFunctionName _Nonnull kCAValueFunctionScale __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAValueFunctionScale", "__Internal")]
        NSString kCAValueFunctionScale { get; }

        // extern const CAValueFunctionName _Nonnull kCAValueFunctionScaleX __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAValueFunctionScaleX", "__Internal")]
        NSString kCAValueFunctionScaleX { get; }

        // extern const CAValueFunctionName _Nonnull kCAValueFunctionScaleY __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAValueFunctionScaleY", "__Internal")]
        NSString kCAValueFunctionScaleY { get; }

        // extern const CAValueFunctionName _Nonnull kCAValueFunctionScaleZ __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAValueFunctionScaleZ", "__Internal")]
        NSString kCAValueFunctionScaleZ { get; }

        // extern const CAValueFunctionName _Nonnull kCAValueFunctionTranslate __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAValueFunctionTranslate", "__Internal")]
        NSString kCAValueFunctionTranslate { get; }

        // extern const CAValueFunctionName _Nonnull kCAValueFunctionTranslateX __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAValueFunctionTranslateX", "__Internal")]
        NSString kCAValueFunctionTranslateX { get; }

        // extern const CAValueFunctionName _Nonnull kCAValueFunctionTranslateY __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAValueFunctionTranslateY", "__Internal")]
        NSString kCAValueFunctionTranslateY { get; }

        // extern const CAValueFunctionName _Nonnull kCAValueFunctionTranslateZ __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(2, 0), TV(9, 0), Mac(10, 6), iOS(3, 0)]
        [Field("kCAValueFunctionTranslateZ", "__Internal")]
        NSString kCAValueFunctionTranslateZ { get; }
    }

    // @interface UIEvent : NSObject
    [iOS(2, 0)]
    [BaseType(typeof(NSObject))]
    interface UIEvent
    {
        // @property (readonly, nonatomic) UIEventType type __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Export("type")]
        UIEventType Type { get; }

        // @property (readonly, nonatomic) UIEventSubtype subtype __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Export("subtype")]
        UIEventSubtype Subtype { get; }

        // @property (readonly, nonatomic) NSTimeInterval timestamp;
        [Export("timestamp")]
        double Timestamp { get; }

        // @property (readonly, nonatomic) NSSet<UITouch *> * _Nullable allTouches;
        [NullAllowed, Export("allTouches")]
        NSSet<UITouch> AllTouches { get; }

        // -(NSSet<UITouch *> * _Nullable)touchesForWindow:(UIWindow * _Nonnull)window;
        [Export("touchesForWindow:")]
        [return: NullAllowed]
        NSSet<UITouch> TouchesForWindow(UIWindow window);

        // -(NSSet<UITouch *> * _Nullable)touchesForView:(UIView * _Nonnull)view;
        [Export("touchesForView:")]
        [return: NullAllowed]
        NSSet<UITouch> TouchesForView(UIView view);

        // -(NSSet<UITouch *> * _Nullable)touchesForGestureRecognizer:(UIGestureRecognizer * _Nonnull)gesture __attribute__((availability(ios, introduced=3_2)));
        [iOS(3, 2)]
        [Export("touchesForGestureRecognizer:")]
        [return: NullAllowed]
        NSSet<UITouch> TouchesForGestureRecognizer(UIGestureRecognizer gesture);

        // -(NSArray<UITouch *> * _Nullable)coalescedTouchesForTouch:(UITouch * _Nonnull)touch __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("coalescedTouchesForTouch:")]
        [return: NullAllowed]
        UITouch[] CoalescedTouchesForTouch(UITouch touch);

        // -(NSArray<UITouch *> * _Nullable)predictedTouchesForTouch:(UITouch * _Nonnull)touch __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("predictedTouchesForTouch:")]
        [return: NullAllowed]
        UITouch[] PredictedTouchesForTouch(UITouch touch);
    }

    // @protocol UIPasteConfigurationSupporting <NSObject>
    [NoWatch, NoTV, iOS(11, 0)]
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface UIPasteConfigurationSupporting
    {
        // @required @property (copy, nonatomic) UIPasteConfiguration * _Nullable pasteConfiguration;
        [Abstract]
        [NullAllowed, Export("pasteConfiguration", ArgumentSemantic.Copy)]
        UIPasteConfiguration PasteConfiguration { get; set; }

        // @optional -(void)pasteItemProviders:(NSArray<NSItemProvider *> * _Nonnull)itemProviders;
        [Export("pasteItemProviders:")]
        void PasteItemProviders(NSItemProvider[] itemProviders);

        // @optional -(BOOL)canPasteItemProviders:(NSArray<NSItemProvider *> * _Nonnull)itemProviders;
        [Export("canPasteItemProviders:")]
        bool CanPasteItemProviders(NSItemProvider[] itemProviders);
    }

    // @protocol UIUserActivityRestoring <NSObject>
    [iOS(8, 0)]
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface UIUserActivityRestoring
    {
        // @required -(void)restoreUserActivityState:(NSUserActivity * _Nonnull)userActivity;
        [Abstract]
        [Export("restoreUserActivityState:")]
        void RestoreUserActivityState(NSUserActivity userActivity);
    }

    // @protocol UIResponderStandardEditActions <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface UIResponderStandardEditActions
    {
        // @optional -(void)cut:(id _Nullable)sender __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Export("cut:")]
        void Cut([NullAllowed] NSObject sender);

        // @optional -(void)copy:(id _Nullable)sender __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Export("copy:")]
        void Copy([NullAllowed] NSObject sender);

        // @optional -(void)paste:(id _Nullable)sender __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Export("paste:")]
        void Paste([NullAllowed] NSObject sender);

        // @optional -(void)select:(id _Nullable)sender __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Export("select:")]
        void Select([NullAllowed] NSObject sender);

        // @optional -(void)selectAll:(id _Nullable)sender __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Export("selectAll:")]
        void SelectAll([NullAllowed] NSObject sender);

        // @optional -(void)delete:(id _Nullable)sender __attribute__((availability(ios, introduced=3_2)));
        [iOS(3, 2)]
        [Export("delete:")]
        void Delete([NullAllowed] NSObject sender);

        // @optional -(void)makeTextWritingDirectionLeftToRight:(id _Nullable)sender __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("makeTextWritingDirectionLeftToRight:")]
        void MakeTextWritingDirectionLeftToRight([NullAllowed] NSObject sender);

        // @optional -(void)makeTextWritingDirectionRightToLeft:(id _Nullable)sender __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("makeTextWritingDirectionRightToLeft:")]
        void MakeTextWritingDirectionRightToLeft([NullAllowed] NSObject sender);

        // @optional -(void)toggleBoldface:(id _Nullable)sender __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Export("toggleBoldface:")]
        void ToggleBoldface([NullAllowed] NSObject sender);

        // @optional -(void)toggleItalics:(id _Nullable)sender __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Export("toggleItalics:")]
        void ToggleItalics([NullAllowed] NSObject sender);

        // @optional -(void)toggleUnderline:(id _Nullable)sender __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Export("toggleUnderline:")]
        void ToggleUnderline([NullAllowed] NSObject sender);

        // @optional -(void)increaseSize:(id _Nullable)sender __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Export("increaseSize:")]
        void IncreaseSize([NullAllowed] NSObject sender);

        // @optional -(void)decreaseSize:(id _Nullable)sender __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Export("decreaseSize:")]
        void DecreaseSize([NullAllowed] NSObject sender);
    }

    // @interface UIResponder : NSObject <UIResponderStandardEditActions>
    [iOS(2, 0)]
    [BaseType(typeof(NSObject))]
    interface UIResponder : IUIResponderStandardEditActions
    {
        // @property (readonly, nonatomic) UIResponder * _Nullable nextResponder;
        [NullAllowed, Export("nextResponder")]
        UIResponder NextResponder { get; }

        // @property (readonly, nonatomic) BOOL canBecomeFirstResponder;
        [Export("canBecomeFirstResponder")]
        bool CanBecomeFirstResponder { get; }

        // -(BOOL)becomeFirstResponder;
        [Export("becomeFirstResponder")]
        [Verify(MethodToProperty)]
        bool BecomeFirstResponder { get; }

        // @property (readonly, nonatomic) BOOL canResignFirstResponder;
        [Export("canResignFirstResponder")]
        bool CanResignFirstResponder { get; }

        // -(BOOL)resignFirstResponder;
        [Export("resignFirstResponder")]
        [Verify(MethodToProperty)]
        bool ResignFirstResponder { get; }

        // @property (readonly, nonatomic) BOOL isFirstResponder;
        [Export("isFirstResponder")]
        bool IsFirstResponder { get; }

        // -(void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
        [Export("touchesBegan:withEvent:")]
        void TouchesBegan(NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

        // -(void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
        [Export("touchesMoved:withEvent:")]
        void TouchesMoved(NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

        // -(void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
        [Export("touchesEnded:withEvent:")]
        void TouchesEnded(NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

        // -(void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
        [Export("touchesCancelled:withEvent:")]
        void TouchesCancelled(NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

        // -(void)touchesEstimatedPropertiesUpdated:(NSSet<UITouch *> * _Nonnull)touches __attribute__((availability(ios, introduced=9_1)));
        [iOS(9, 1)]
        [Export("touchesEstimatedPropertiesUpdated:")]
        void TouchesEstimatedPropertiesUpdated(NSSet<UITouch> touches);

        // -(void)pressesBegan:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nullable)event __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("pressesBegan:withEvent:")]
        void PressesBegan(NSSet<UIPress> presses, [NullAllowed] UIPressesEvent @event);

        // -(void)pressesChanged:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nullable)event __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("pressesChanged:withEvent:")]
        void PressesChanged(NSSet<UIPress> presses, [NullAllowed] UIPressesEvent @event);

        // -(void)pressesEnded:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nullable)event __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("pressesEnded:withEvent:")]
        void PressesEnded(NSSet<UIPress> presses, [NullAllowed] UIPressesEvent @event);

        // -(void)pressesCancelled:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nullable)event __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("pressesCancelled:withEvent:")]
        void PressesCancelled(NSSet<UIPress> presses, [NullAllowed] UIPressesEvent @event);

        // -(void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent * _Nullable)event __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Export("motionBegan:withEvent:")]
        void MotionBegan(UIEventSubtype motion, [NullAllowed] UIEvent @event);

        // -(void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent * _Nullable)event __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Export("motionEnded:withEvent:")]
        void MotionEnded(UIEventSubtype motion, [NullAllowed] UIEvent @event);

        // -(void)motionCancelled:(UIEventSubtype)motion withEvent:(UIEvent * _Nullable)event __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Export("motionCancelled:withEvent:")]
        void MotionCancelled(UIEventSubtype motion, [NullAllowed] UIEvent @event);

        // -(void)remoteControlReceivedWithEvent:(UIEvent * _Nullable)event __attribute__((availability(ios, introduced=4_0)));
        [iOS(4, 0)]
        [Export("remoteControlReceivedWithEvent:")]
        void RemoteControlReceivedWithEvent([NullAllowed] UIEvent @event);

        // -(BOOL)canPerformAction:(SEL _Nonnull)action withSender:(id _Nullable)sender __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [Export("canPerformAction:withSender:")]
        bool CanPerformAction(Selector action, [NullAllowed] NSObject sender);

        // -(id _Nullable)targetForAction:(SEL _Nonnull)action withSender:(id _Nullable)sender __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Export("targetForAction:withSender:")]
        [return: NullAllowed]
        NSObject TargetForAction(Selector action, [NullAllowed] NSObject sender);

        // @property (readonly, nonatomic) NSUndoManager * _Nullable undoManager __attribute__((availability(ios, introduced=3_0)));
        [iOS(3, 0)]
        [NullAllowed, Export("undoManager")]
        NSUndoManager UndoManager { get; }
    }

    // @interface UIKeyCommand : NSObject <NSCopying, NSSecureCoding>
    [iOS(7, 0)]
    [BaseType(typeof(NSObject))]
    interface UIKeyCommand : INSCopying, INSSecureCoding
    {
        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);

        // @property (readonly, nonatomic) NSString * _Nullable input;
        [NullAllowed, Export("input")]
        string Input { get; }

        // @property (readonly, nonatomic) UIKeyModifierFlags modifierFlags;
        [Export("modifierFlags")]
        UIKeyModifierFlags ModifierFlags { get; }

        // @property (copy, nonatomic) NSString * _Nullable discoverabilityTitle __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [NullAllowed, Export("discoverabilityTitle")]
        string DiscoverabilityTitle { get; set; }

        // +(UIKeyCommand * _Nonnull)keyCommandWithInput:(NSString * _Nonnull)input modifierFlags:(UIKeyModifierFlags)modifierFlags action:(SEL _Nonnull)action;
        [Static]
        [Export("keyCommandWithInput:modifierFlags:action:")]
        UIKeyCommand KeyCommandWithInput(string input, UIKeyModifierFlags modifierFlags, Selector action);

        // +(UIKeyCommand * _Nonnull)keyCommandWithInput:(NSString * _Nonnull)input modifierFlags:(UIKeyModifierFlags)modifierFlags action:(SEL _Nonnull)action discoverabilityTitle:(NSString * _Nonnull)discoverabilityTitle __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("keyCommandWithInput:modifierFlags:action:discoverabilityTitle:")]
        UIKeyCommand KeyCommandWithInput(string input, UIKeyModifierFlags modifierFlags, Selector action, string discoverabilityTitle);
    }

    // @interface UIResponderKeyCommands (UIResponder)
    [Category]
    [BaseType(typeof(UIResponder))]
    interface UIResponder_UIResponderKeyCommands
    {
        // @property (readonly, nonatomic) NSArray<UIKeyCommand *> * _Nullable keyCommands __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [NullAllowed, Export("keyCommands")]
        UIKeyCommand[] KeyCommands { get; }
    }

    // @interface UIResponderInputViewAdditions (UIResponder)
    [Category]
    [BaseType(typeof(UIResponder))]
    interface UIResponder_UIResponderInputViewAdditions
    {
        // @property (readonly, nonatomic, strong) __kindof UIView * _Nullable inputView __attribute__((availability(ios, introduced=3_2)));
        [iOS(3, 2)]
        [Export("inputView", ArgumentSemantic.Strong)]
        UIView InputView { get; }

        // @property (readonly, nonatomic, strong) __kindof UIView * _Nullable inputAccessoryView __attribute__((availability(ios, introduced=3_2)));
        [iOS(3, 2)]
        [Export("inputAccessoryView", ArgumentSemantic.Strong)]
        UIView InputAccessoryView { get; }

        // @property (readonly, nonatomic, strong) UITextInputAssistantItem * _Nonnull inputAssistantItem __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0)));
        [NoWatch, NoTV, iOS(9, 0)]
        [Export("inputAssistantItem", ArgumentSemantic.Strong)]
        UITextInputAssistantItem InputAssistantItem { get; }

        // @property (readonly, nonatomic, strong) UIInputViewController * _Nullable inputViewController __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [NullAllowed, Export("inputViewController", ArgumentSemantic.Strong)]
        UIInputViewController InputViewController { get; }

        // @property (readonly, nonatomic, strong) UIInputViewController * _Nullable inputAccessoryViewController __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [NullAllowed, Export("inputAccessoryViewController", ArgumentSemantic.Strong)]
        UIInputViewController InputAccessoryViewController { get; }

        // @property (readonly, nonatomic, strong) UITextInputMode * _Nullable textInputMode __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [NullAllowed, Export("textInputMode", ArgumentSemantic.Strong)]
        UITextInputMode TextInputMode { get; }

        // @property (readonly, nonatomic, strong) NSString * _Nullable textInputContextIdentifier __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [NullAllowed, Export("textInputContextIdentifier", ArgumentSemantic.Strong)]
        string TextInputContextIdentifier { get; }

        // +(void)clearTextInputContextIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Static]
        [Export("clearTextInputContextIdentifier:")]
        void ClearTextInputContextIdentifier(string identifier);

        // -(void)reloadInputViews __attribute__((availability(ios, introduced=3_2)));
        [iOS(3, 2)]
        [Export("reloadInputViews")]
        void ReloadInputViews();
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull UIKeyInputUpArrow __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIKeyInputUpArrow", "__Internal")]
        NSString UIKeyInputUpArrow { get; }

        // extern NSString *const _Nonnull UIKeyInputDownArrow __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIKeyInputDownArrow", "__Internal")]
        NSString UIKeyInputDownArrow { get; }

        // extern NSString *const _Nonnull UIKeyInputLeftArrow __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIKeyInputLeftArrow", "__Internal")]
        NSString UIKeyInputLeftArrow { get; }

        // extern NSString *const _Nonnull UIKeyInputRightArrow __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIKeyInputRightArrow", "__Internal")]
        NSString UIKeyInputRightArrow { get; }

        // extern NSString *const _Nonnull UIKeyInputEscape __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIKeyInputEscape", "__Internal")]
        NSString UIKeyInputEscape { get; }
    }

    // @interface ActivityContinuation (UIResponder) <UIUserActivityRestoring>
    [Category]
    [BaseType(typeof(UIResponder))]
    interface UIResponder_ActivityContinuation : IUIUserActivityRestoring
    {
        // @property (nonatomic, strong) NSUserActivity * _Nullable userActivity __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [NullAllowed, Export("userActivity", ArgumentSemantic.Strong)]
        NSUserActivity UserActivity { get; set; }

        // -(void)updateUserActivityState:(NSUserActivity * _Nonnull)activity __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Export("updateUserActivityState:")]
        void UpdateUserActivityState(NSUserActivity activity);

        // -(void)restoreUserActivityState:(NSUserActivity * _Nonnull)activity __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Export("restoreUserActivityState:")]
        void RestoreUserActivityState(NSUserActivity activity);
    }

    // @interface UIPasteConfigurationSupporting (UIResponder) <UIPasteConfigurationSupporting>
    [Category]
    [BaseType(typeof(UIResponder))]
    interface UIResponder_UIPasteConfigurationSupporting : IUIPasteConfigurationSupporting
    {
    }

    // @interface CIVector : NSObject <NSCopying, NSSecureCoding>
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface CIVector : INSCopying, INSSecureCoding
    {
        // +(instancetype _Nonnull)vectorWithValues:(const CGFloat * _Nonnull)values count:(size_t)count;
        [Static]
        [Export("vectorWithValues:count:")]
        unsafe CIVector VectorWithValues(nfloat* values, nuint count);

        // +(instancetype _Nonnull)vectorWithX:(CGFloat)x;
        [Static]
        [Export("vectorWithX:")]
        CIVector VectorWithX(nfloat x);

        // +(instancetype _Nonnull)vectorWithX:(CGFloat)x Y:(CGFloat)y;
        [Static]
        [Export("vectorWithX:Y:")]
        CIVector VectorWithX(nfloat x, nfloat y);

        // +(instancetype _Nonnull)vectorWithX:(CGFloat)x Y:(CGFloat)y Z:(CGFloat)z;
        [Static]
        [Export("vectorWithX:Y:Z:")]
        CIVector VectorWithX(nfloat x, nfloat y, nfloat z);

        // +(instancetype _Nonnull)vectorWithX:(CGFloat)x Y:(CGFloat)y Z:(CGFloat)z W:(CGFloat)w;
        [Static]
        [Export("vectorWithX:Y:Z:W:")]
        CIVector VectorWithX(nfloat x, nfloat y, nfloat z, nfloat w);

        // +(instancetype _Nonnull)vectorWithCGPoint:(CGPoint)p __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Static]
        [Export("vectorWithCGPoint:")]
        CIVector VectorWithCGPoint(CGPoint p);

        // +(instancetype _Nonnull)vectorWithCGRect:(CGRect)r __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Static]
        [Export("vectorWithCGRect:")]
        CIVector VectorWithCGRect(CGRect r);

        // +(instancetype _Nonnull)vectorWithCGAffineTransform:(CGAffineTransform)t __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Static]
        [Export("vectorWithCGAffineTransform:")]
        CIVector VectorWithCGAffineTransform(CGAffineTransform t);

        // +(instancetype _Nonnull)vectorWithString:(NSString * _Nonnull)representation;
        [Static]
        [Export("vectorWithString:")]
        CIVector VectorWithString(string representation);

        // -(instancetype _Nonnull)initWithValues:(const CGFloat * _Nonnull)values count:(size_t)count __attribute__((objc_designated_initializer));
        [Export("initWithValues:count:")]
        [DesignatedInitializer]
        unsafe IntPtr Constructor(nfloat* values, nuint count);

        // -(instancetype _Nonnull)initWithX:(CGFloat)x;
        [Export("initWithX:")]
        IntPtr Constructor(nfloat x);

        // -(instancetype _Nonnull)initWithX:(CGFloat)x Y:(CGFloat)y;
        [Export("initWithX:Y:")]
        IntPtr Constructor(nfloat x, nfloat y);

        // -(instancetype _Nonnull)initWithX:(CGFloat)x Y:(CGFloat)y Z:(CGFloat)z;
        [Export("initWithX:Y:Z:")]
        IntPtr Constructor(nfloat x, nfloat y, nfloat z);

        // -(instancetype _Nonnull)initWithX:(CGFloat)x Y:(CGFloat)y Z:(CGFloat)z W:(CGFloat)w;
        [Export("initWithX:Y:Z:W:")]
        IntPtr Constructor(nfloat x, nfloat y, nfloat z, nfloat w);

        // -(instancetype _Nonnull)initWithCGPoint:(CGPoint)p __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("initWithCGPoint:")]
        IntPtr Constructor(CGPoint p);

        // -(instancetype _Nonnull)initWithCGRect:(CGRect)r __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("initWithCGRect:")]
        IntPtr Constructor(CGRect r);

        // -(instancetype _Nonnull)initWithCGAffineTransform:(CGAffineTransform)r __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("initWithCGAffineTransform:")]
        IntPtr Constructor(CGAffineTransform r);

        // -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)representation;
        [Export("initWithString:")]
        IntPtr Constructor(string representation);

        // -(CGFloat)valueAtIndex:(size_t)index;
        [Export("valueAtIndex:")]
        nfloat ValueAtIndex(nuint index);

        // @property (readonly) size_t count;
        [Export("count")]
        nuint Count { get; }

        // @property (readonly) CGFloat X;
        [Export("X")]
        nfloat X { get; }

        // @property (readonly) CGFloat Y;
        [Export("Y")]
        nfloat Y { get; }

        // @property (readonly) CGFloat Z;
        [Export("Z")]
        nfloat Z { get; }

        // @property (readonly) CGFloat W;
        [Export("W")]
        nfloat W { get; }

        // @property (readonly) CGPoint CGPointValue __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("CGPointValue")]
        CGPoint CGPointValue { get; }

        // @property (readonly) CGRect CGRectValue __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("CGRectValue")]
        CGRect CGRectValue { get; }

        // @property (readonly) CGAffineTransform CGAffineTransformValue __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("CGAffineTransformValue")]
        CGAffineTransform CGAffineTransformValue { get; }

        // @property (readonly) NSString * _Nonnull stringRepresentation;
        [Export("stringRepresentation")]
        string StringRepresentation { get; }
    }

    // @interface CIColor : NSObject <NSSecureCoding, NSCopying>
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface CIColor : INSSecureCoding, INSCopying
    {
        // +(instancetype _Nonnull)colorWithCGColor:(CGColorRef _Nonnull)c;
        [Static]
        [Export("colorWithCGColor:")]
        unsafe CIColor ColorWithCGColor(CGColorRef* c);

        // +(instancetype _Nonnull)colorWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b alpha:(CGFloat)a;
        [Static]
        [Export("colorWithRed:green:blue:alpha:")]
        CIColor ColorWithRed(nfloat r, nfloat g, nfloat b, nfloat a);

        // +(instancetype _Nonnull)colorWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b;
        [Static]
        [Export("colorWithRed:green:blue:")]
        CIColor ColorWithRed(nfloat r, nfloat g, nfloat b);

        // +(instancetype _Nullable)colorWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b alpha:(CGFloat)a colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("colorWithRed:green:blue:alpha:colorSpace:")]
        [return: NullAllowed]
        unsafe CIColor ColorWithRed(nfloat r, nfloat g, nfloat b, nfloat a, CGColorSpaceRef* colorSpace);

        // +(instancetype _Nullable)colorWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("colorWithRed:green:blue:colorSpace:")]
        [return: NullAllowed]
        unsafe CIColor ColorWithRed(nfloat r, nfloat g, nfloat b, CGColorSpaceRef* colorSpace);

        // +(instancetype _Nonnull)colorWithString:(NSString * _Nonnull)representation;
        [Static]
        [Export("colorWithString:")]
        CIColor ColorWithString(string representation);

        // -(instancetype _Nonnull)initWithCGColor:(CGColorRef _Nonnull)c __attribute__((objc_designated_initializer));
        [Export("initWithCGColor:")]
        [DesignatedInitializer]
        unsafe IntPtr Constructor(CGColorRef* c);

        // -(instancetype _Nonnull)initWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b alpha:(CGFloat)a;
        [Export("initWithRed:green:blue:alpha:")]
        IntPtr Constructor(nfloat r, nfloat g, nfloat b, nfloat a);

        // -(instancetype _Nonnull)initWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("initWithRed:green:blue:")]
        IntPtr Constructor(nfloat r, nfloat g, nfloat b);

        // -(instancetype _Nullable)initWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b alpha:(CGFloat)a colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("initWithRed:green:blue:alpha:colorSpace:")]
        unsafe IntPtr Constructor(nfloat r, nfloat g, nfloat b, nfloat a, CGColorSpaceRef* colorSpace);

        // -(instancetype _Nullable)initWithRed:(CGFloat)r green:(CGFloat)g blue:(CGFloat)b colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("initWithRed:green:blue:colorSpace:")]
        unsafe IntPtr Constructor(nfloat r, nfloat g, nfloat b, CGColorSpaceRef* colorSpace);

        // @property (readonly) size_t numberOfComponents;
        [Export("numberOfComponents")]
        nuint NumberOfComponents { get; }

        // @property (readonly) const CGFloat * _Nonnull components __attribute__((objc_returns_inner_pointer));
        [Export("components")]
        unsafe nfloat* Components { get; }

        // @property (readonly) CGFloat alpha;
        [Export("alpha")]
        nfloat Alpha { get; }

        // @property (readonly) CGColorSpaceRef _Nonnull colorSpace __attribute__((cf_returns_not_retained));
        [Export("colorSpace")]
        unsafe CGColorSpaceRef* ColorSpace { get; }

        // @property (readonly) CGFloat red;
        [Export("red")]
        nfloat Red { get; }

        // @property (readonly) CGFloat green;
        [Export("green")]
        nfloat Green { get; }

        // @property (readonly) CGFloat blue;
        [Export("blue")]
        nfloat Blue { get; }

        // @property (readonly) NSString * _Nonnull stringRepresentation;
        [Export("stringRepresentation")]
        string StringRepresentation { get; }

        // @property (readonly, strong, class) CIColor * _Nonnull blackColor __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("blackColor", ArgumentSemantic.Strong)]
        CIColor BlackColor { get; }

        // @property (readonly, strong, class) CIColor * _Nonnull whiteColor __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("whiteColor", ArgumentSemantic.Strong)]
        CIColor WhiteColor { get; }

        // @property (readonly, strong, class) CIColor * _Nonnull grayColor __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("grayColor", ArgumentSemantic.Strong)]
        CIColor GrayColor { get; }

        // @property (readonly, strong, class) CIColor * _Nonnull redColor __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("redColor", ArgumentSemantic.Strong)]
        CIColor RedColor { get; }

        // @property (readonly, strong, class) CIColor * _Nonnull greenColor __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("greenColor", ArgumentSemantic.Strong)]
        CIColor GreenColor { get; }

        // @property (readonly, strong, class) CIColor * _Nonnull blueColor __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("blueColor", ArgumentSemantic.Strong)]
        CIColor BlueColor { get; }

        // @property (readonly, strong, class) CIColor * _Nonnull cyanColor __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("cyanColor", ArgumentSemantic.Strong)]
        CIColor CyanColor { get; }

        // @property (readonly, strong, class) CIColor * _Nonnull magentaColor __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("magentaColor", ArgumentSemantic.Strong)]
        CIColor MagentaColor { get; }

        // @property (readonly, strong, class) CIColor * _Nonnull yellowColor __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("yellowColor", ArgumentSemantic.Strong)]
        CIColor YellowColor { get; }

        // @property (readonly, strong, class) CIColor * _Nonnull clearColor __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("clearColor", ArgumentSemantic.Strong)]
        CIColor ClearColor { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CVTime kCVZeroTime __attribute__((visibility("default")));
        [Field("kCVZeroTime", "__Internal")]
        CVTime kCVZeroTime { get; }

        // extern const CVTime kCVIndefiniteTime __attribute__((visibility("default")));
        [Field("kCVIndefiniteTime", "__Internal")]
        CVTime kCVIndefiniteTime { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern CFStringRef  _Nonnull const kCVBufferPropagatedAttachmentsKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVBufferPropagatedAttachmentsKey", "__Internal")]
        unsafe CFStringRef* kCVBufferPropagatedAttachmentsKey { get; }

        // extern CFStringRef  _Nonnull const kCVBufferNonPropagatedAttachmentsKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVBufferNonPropagatedAttachmentsKey", "__Internal")]
        unsafe CFStringRef* kCVBufferNonPropagatedAttachmentsKey { get; }

        // extern CFStringRef  _Nonnull const kCVBufferMovieTimeKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVBufferMovieTimeKey", "__Internal")]
        unsafe CFStringRef* kCVBufferMovieTimeKey { get; }

        // extern CFStringRef  _Nonnull const kCVBufferTimeValueKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVBufferTimeValueKey", "__Internal")]
        unsafe CFStringRef* kCVBufferTimeValueKey { get; }

        // extern CFStringRef  _Nonnull const kCVBufferTimeScaleKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVBufferTimeScaleKey", "__Internal")]
        unsafe CFStringRef* kCVBufferTimeScaleKey { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern CFStringRef  _Nonnull const kCVImageBufferCGColorSpaceKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferCGColorSpaceKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferCGColorSpaceKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferCleanApertureKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferCleanApertureKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferCleanApertureKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferCleanApertureWidthKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferCleanApertureWidthKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferCleanApertureWidthKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferCleanApertureHeightKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferCleanApertureHeightKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferCleanApertureHeightKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferCleanApertureHorizontalOffsetKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferCleanApertureHorizontalOffsetKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferCleanApertureHorizontalOffsetKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferCleanApertureVerticalOffsetKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferCleanApertureVerticalOffsetKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferCleanApertureVerticalOffsetKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferPreferredCleanApertureKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferPreferredCleanApertureKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferPreferredCleanApertureKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferFieldCountKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferFieldCountKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferFieldCountKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferFieldDetailKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferFieldDetailKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferFieldDetailKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferFieldDetailTemporalTopFirst __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferFieldDetailTemporalTopFirst", "__Internal")]
        unsafe CFStringRef* kCVImageBufferFieldDetailTemporalTopFirst { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferFieldDetailTemporalBottomFirst __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferFieldDetailTemporalBottomFirst", "__Internal")]
        unsafe CFStringRef* kCVImageBufferFieldDetailTemporalBottomFirst { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferFieldDetailSpatialFirstLineEarly __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferFieldDetailSpatialFirstLineEarly", "__Internal")]
        unsafe CFStringRef* kCVImageBufferFieldDetailSpatialFirstLineEarly { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferFieldDetailSpatialFirstLineLate __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferFieldDetailSpatialFirstLineLate", "__Internal")]
        unsafe CFStringRef* kCVImageBufferFieldDetailSpatialFirstLineLate { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferPixelAspectRatioKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferPixelAspectRatioKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferPixelAspectRatioKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferPixelAspectRatioHorizontalSpacingKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferPixelAspectRatioHorizontalSpacingKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferPixelAspectRatioHorizontalSpacingKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferPixelAspectRatioVerticalSpacingKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferPixelAspectRatioVerticalSpacingKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferPixelAspectRatioVerticalSpacingKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferDisplayDimensionsKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferDisplayDimensionsKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferDisplayDimensionsKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferDisplayWidthKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferDisplayWidthKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferDisplayWidthKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferDisplayHeightKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferDisplayHeightKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferDisplayHeightKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferGammaLevelKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferGammaLevelKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferGammaLevelKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferICCProfileKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferICCProfileKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferICCProfileKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferYCbCrMatrixKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferYCbCrMatrixKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferYCbCrMatrixKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferYCbCrMatrix_ITU_R_709_2 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferYCbCrMatrix_ITU_R_709_2", "__Internal")]
        unsafe CFStringRef* kCVImageBufferYCbCrMatrix_ITU_R_709_2 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferYCbCrMatrix_ITU_R_601_4 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferYCbCrMatrix_ITU_R_601_4", "__Internal")]
        unsafe CFStringRef* kCVImageBufferYCbCrMatrix_ITU_R_601_4 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferYCbCrMatrix_SMPTE_240M_1995 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferYCbCrMatrix_SMPTE_240M_1995", "__Internal")]
        unsafe CFStringRef* kCVImageBufferYCbCrMatrix_SMPTE_240M_1995 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferYCbCrMatrix_DCI_P3 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kCVImageBufferYCbCrMatrix_DCI_P3", "__Internal")]
        unsafe CFStringRef* kCVImageBufferYCbCrMatrix_DCI_P3 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferYCbCrMatrix_P3_D65 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kCVImageBufferYCbCrMatrix_P3_D65", "__Internal")]
        unsafe CFStringRef* kCVImageBufferYCbCrMatrix_P3_D65 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferYCbCrMatrix_ITU_R_2020 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kCVImageBufferYCbCrMatrix_ITU_R_2020", "__Internal")]
        unsafe CFStringRef* kCVImageBufferYCbCrMatrix_ITU_R_2020 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferColorPrimariesKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferColorPrimariesKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferColorPrimariesKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferColorPrimaries_ITU_R_709_2 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferColorPrimaries_ITU_R_709_2", "__Internal")]
        unsafe CFStringRef* kCVImageBufferColorPrimaries_ITU_R_709_2 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferColorPrimaries_EBU_3213 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferColorPrimaries_EBU_3213", "__Internal")]
        unsafe CFStringRef* kCVImageBufferColorPrimaries_EBU_3213 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferColorPrimaries_SMPTE_C __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferColorPrimaries_SMPTE_C", "__Internal")]
        unsafe CFStringRef* kCVImageBufferColorPrimaries_SMPTE_C { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferColorPrimaries_P22 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6.0)));
        [iOS(6, 0)]
        [Field("kCVImageBufferColorPrimaries_P22", "__Internal")]
        unsafe CFStringRef* kCVImageBufferColorPrimaries_P22 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferColorPrimaries_DCI_P3 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kCVImageBufferColorPrimaries_DCI_P3", "__Internal")]
        unsafe CFStringRef* kCVImageBufferColorPrimaries_DCI_P3 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferColorPrimaries_P3_D65 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kCVImageBufferColorPrimaries_P3_D65", "__Internal")]
        unsafe CFStringRef* kCVImageBufferColorPrimaries_P3_D65 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferColorPrimaries_ITU_R_2020 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kCVImageBufferColorPrimaries_ITU_R_2020", "__Internal")]
        unsafe CFStringRef* kCVImageBufferColorPrimaries_ITU_R_2020 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferTransferFunctionKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferTransferFunctionKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferTransferFunctionKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferTransferFunction_ITU_R_709_2 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferTransferFunction_ITU_R_709_2", "__Internal")]
        unsafe CFStringRef* kCVImageBufferTransferFunction_ITU_R_709_2 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferTransferFunction_SMPTE_240M_1995 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferTransferFunction_SMPTE_240M_1995", "__Internal")]
        unsafe CFStringRef* kCVImageBufferTransferFunction_SMPTE_240M_1995 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferTransferFunction_UseGamma __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferTransferFunction_UseGamma", "__Internal")]
        unsafe CFStringRef* kCVImageBufferTransferFunction_UseGamma { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferTransferFunction_EBU_3213 __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCVImageBufferTransferFunction_EBU_3213", "__Internal")]
        unsafe CFStringRef* kCVImageBufferTransferFunction_EBU_3213 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferTransferFunction_SMPTE_C __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCVImageBufferTransferFunction_SMPTE_C", "__Internal")]
        unsafe CFStringRef* kCVImageBufferTransferFunction_SMPTE_C { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferTransferFunction_sRGB __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Field("kCVImageBufferTransferFunction_sRGB", "__Internal")]
        unsafe CFStringRef* kCVImageBufferTransferFunction_sRGB { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferTransferFunction_ITU_R_2020 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kCVImageBufferTransferFunction_ITU_R_2020", "__Internal")]
        unsafe CFStringRef* kCVImageBufferTransferFunction_ITU_R_2020 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferTransferFunction_SMPTE_ST_428_1 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("kCVImageBufferTransferFunction_SMPTE_ST_428_1", "__Internal")]
        unsafe CFStringRef* kCVImageBufferTransferFunction_SMPTE_ST_428_1 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferTransferFunction_SMPTE_ST_2084_PQ __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Field("kCVImageBufferTransferFunction_SMPTE_ST_2084_PQ", "__Internal")]
        unsafe CFStringRef* kCVImageBufferTransferFunction_SMPTE_ST_2084_PQ { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferTransferFunction_ITU_R_2100_HLG __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Field("kCVImageBufferTransferFunction_ITU_R_2100_HLG", "__Internal")]
        unsafe CFStringRef* kCVImageBufferTransferFunction_ITU_R_2100_HLG { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferTransferFunction_Linear __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=12.0)));
        [iOS(12, 0)]
        [Field("kCVImageBufferTransferFunction_Linear", "__Internal")]
        unsafe CFStringRef* kCVImageBufferTransferFunction_Linear { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaLocationTopFieldKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaLocationTopFieldKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaLocationTopFieldKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaLocationBottomFieldKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaLocationBottomFieldKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaLocationBottomFieldKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaLocation_Left __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaLocation_Left", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaLocation_Left { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaLocation_Center __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaLocation_Center", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaLocation_Center { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaLocation_TopLeft __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaLocation_TopLeft", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaLocation_TopLeft { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaLocation_Top __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaLocation_Top", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaLocation_Top { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaLocation_BottomLeft __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaLocation_BottomLeft", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaLocation_BottomLeft { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaLocation_Bottom __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaLocation_Bottom", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaLocation_Bottom { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaLocation_DV420 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaLocation_DV420", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaLocation_DV420 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaSubsamplingKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaSubsamplingKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaSubsamplingKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaSubsampling_420 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaSubsampling_420", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaSubsampling_420 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaSubsampling_422 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaSubsampling_422", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaSubsampling_422 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferChromaSubsampling_411 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVImageBufferChromaSubsampling_411", "__Internal")]
        unsafe CFStringRef* kCVImageBufferChromaSubsampling_411 { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferAlphaChannelIsOpaque __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0)));
        [iOS(8, 0)]
        [Field("kCVImageBufferAlphaChannelIsOpaque", "__Internal")]
        unsafe CFStringRef* kCVImageBufferAlphaChannelIsOpaque { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferMasteringDisplayColorVolumeKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Field("kCVImageBufferMasteringDisplayColorVolumeKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferMasteringDisplayColorVolumeKey { get; }

        // extern CFStringRef  _Nonnull const kCVImageBufferContentLightLevelInfoKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Field("kCVImageBufferContentLightLevelInfoKey", "__Internal")]
        unsafe CFStringRef* kCVImageBufferContentLightLevelInfoKey { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern CFStringRef  _Nonnull const kCVPixelBufferPixelFormatTypeKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelBufferPixelFormatTypeKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferPixelFormatTypeKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferMemoryAllocatorKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelBufferMemoryAllocatorKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferMemoryAllocatorKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferWidthKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelBufferWidthKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferWidthKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferHeightKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelBufferHeightKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferHeightKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferExtendedPixelsLeftKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelBufferExtendedPixelsLeftKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferExtendedPixelsLeftKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferExtendedPixelsTopKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelBufferExtendedPixelsTopKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferExtendedPixelsTopKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferExtendedPixelsRightKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelBufferExtendedPixelsRightKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferExtendedPixelsRightKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferExtendedPixelsBottomKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelBufferExtendedPixelsBottomKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferExtendedPixelsBottomKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferBytesPerRowAlignmentKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelBufferBytesPerRowAlignmentKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferBytesPerRowAlignmentKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferCGBitmapContextCompatibilityKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelBufferCGBitmapContextCompatibilityKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferCGBitmapContextCompatibilityKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferCGImageCompatibilityKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelBufferCGImageCompatibilityKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferCGImageCompatibilityKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferOpenGLCompatibilityKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelBufferOpenGLCompatibilityKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferOpenGLCompatibilityKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferPlaneAlignmentKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(4, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCVPixelBufferPlaneAlignmentKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferPlaneAlignmentKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferIOSurfacePropertiesKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Watch(4, 0), TV(9, 0), Mac(10, 6), iOS(4, 0)]
        [Field("kCVPixelBufferIOSurfacePropertiesKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferIOSurfacePropertiesKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferOpenGLESCompatibilityKey __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=6.0)));
        [TV(9, 0), NoWatch, NoMac, iOS(6, 0)]
        [Field("kCVPixelBufferOpenGLESCompatibilityKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferOpenGLESCompatibilityKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferMetalCompatibilityKey __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.11)));
        [Watch(4, 0), TV(9, 0), Mac(10, 11), iOS(8, 0)]
        [Field("kCVPixelBufferMetalCompatibilityKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferMetalCompatibilityKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferOpenGLTextureCacheCompatibilityKey __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.11)));
        [NoWatch, NoTV, NoiOS, Mac(10, 11)]
        [Field("kCVPixelBufferOpenGLTextureCacheCompatibilityKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferOpenGLTextureCacheCompatibilityKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferOpenGLESTextureCacheCompatibilityKey __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=9.0)));
        [TV(9, 0), NoWatch, NoMac, iOS(9, 0)]
        [Field("kCVPixelBufferOpenGLESTextureCacheCompatibilityKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferOpenGLESTextureCacheCompatibilityKey { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kIOSurfaceAllocSize __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfaceAllocSize", "__Internal")]
        unsafe CFStringRef* kIOSurfaceAllocSize { get; }

        // extern const CFStringRef _Nonnull kIOSurfaceWidth __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfaceWidth", "__Internal")]
        unsafe CFStringRef* kIOSurfaceWidth { get; }

        // extern const CFStringRef _Nonnull kIOSurfaceHeight __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfaceHeight", "__Internal")]
        unsafe CFStringRef* kIOSurfaceHeight { get; }

        // extern const CFStringRef _Nonnull kIOSurfaceBytesPerRow __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfaceBytesPerRow", "__Internal")]
        unsafe CFStringRef* kIOSurfaceBytesPerRow { get; }

        // extern const CFStringRef _Nonnull kIOSurfaceBytesPerElement __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfaceBytesPerElement", "__Internal")]
        unsafe CFStringRef* kIOSurfaceBytesPerElement { get; }

        // extern const CFStringRef _Nonnull kIOSurfaceElementWidth __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfaceElementWidth", "__Internal")]
        unsafe CFStringRef* kIOSurfaceElementWidth { get; }

        // extern const CFStringRef _Nonnull kIOSurfaceElementHeight __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfaceElementHeight", "__Internal")]
        unsafe CFStringRef* kIOSurfaceElementHeight { get; }

        // extern const CFStringRef _Nonnull kIOSurfaceOffset __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfaceOffset", "__Internal")]
        unsafe CFStringRef* kIOSurfaceOffset { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneInfo __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfacePlaneInfo", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneInfo { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneWidth __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfacePlaneWidth", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneWidth { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneHeight __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfacePlaneHeight", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneHeight { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneBytesPerRow __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfacePlaneBytesPerRow", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneBytesPerRow { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneOffset __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfacePlaneOffset", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneOffset { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneSize __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfacePlaneSize", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneSize { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneBase __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfacePlaneBase", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneBase { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneBitsPerElement __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Field("kIOSurfacePlaneBitsPerElement", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneBitsPerElement { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneBytesPerElement __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfacePlaneBytesPerElement", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneBytesPerElement { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneElementWidth __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfacePlaneElementWidth", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneElementWidth { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneElementHeight __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfacePlaneElementHeight", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneElementHeight { get; }

        // extern const CFStringRef _Nonnull kIOSurfaceCacheMode __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfaceCacheMode", "__Internal")]
        unsafe CFStringRef* kIOSurfaceCacheMode { get; }

        // extern const CFStringRef _Nonnull kIOSurfaceIsGlobal __attribute__((availability(ios, introduced=3.0, deprecated=9.0)));
        [Introduced(PlatformName.iOS, 3, 0)]
        [Deprecated(PlatformName.iOS, 9, 0)]
        [Field("kIOSurfaceIsGlobal", "__Internal")]
        unsafe CFStringRef* kIOSurfaceIsGlobal { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePixelFormat __attribute__((availability(ios, introduced=3.0)));
        [iOS(3, 0)]
        [Field("kIOSurfacePixelFormat", "__Internal")]
        unsafe CFStringRef* kIOSurfacePixelFormat { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePixelSizeCastingAllowed __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("kIOSurfacePixelSizeCastingAllowed", "__Internal")]
        unsafe CFStringRef* kIOSurfacePixelSizeCastingAllowed { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneComponentBitDepths __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Field("kIOSurfacePlaneComponentBitDepths", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneComponentBitDepths { get; }

        // extern const CFStringRef _Nonnull kIOSurfacePlaneComponentBitOffsets __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Field("kIOSurfacePlaneComponentBitOffsets", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneComponentBitOffsets { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kIOSurfacePlaneComponentNames __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Field("kIOSurfacePlaneComponentNames", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneComponentNames { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kIOSurfacePlaneComponentTypes __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Field("kIOSurfacePlaneComponentTypes", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneComponentTypes { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kIOSurfacePlaneComponentRanges __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Field("kIOSurfacePlaneComponentRanges", "__Internal")]
        unsafe CFStringRef* kIOSurfacePlaneComponentRanges { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kIOSurfaceSubsampling __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Field("kIOSurfaceSubsampling", "__Internal")]
        unsafe CFStringRef* kIOSurfaceSubsampling { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferIOSurfaceOpenGLTextureCompatibilityKey __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.6)));
        [NoWatch, NoTV, NoiOS, Mac(10, 6)]
        [Field("kCVPixelBufferIOSurfaceOpenGLTextureCompatibilityKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferIOSurfaceOpenGLTextureCompatibilityKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferIOSurfaceOpenGLFBOCompatibilityKey __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(macos, introduced=10.6)));
        [NoWatch, NoTV, NoiOS, Mac(10, 6)]
        [Field("kCVPixelBufferIOSurfaceOpenGLFBOCompatibilityKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferIOSurfaceOpenGLFBOCompatibilityKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferIOSurfaceCoreAnimationCompatibilityKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelBufferIOSurfaceCoreAnimationCompatibilityKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferIOSurfaceCoreAnimationCompatibilityKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferIOSurfaceOpenGLESTextureCompatibilityKey __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=5.0)));
        [TV(9, 0), NoWatch, NoMac, iOS(5, 0)]
        [Field("kCVPixelBufferIOSurfaceOpenGLESTextureCompatibilityKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferIOSurfaceOpenGLESTextureCompatibilityKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferIOSurfaceOpenGLESFBOCompatibilityKey __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=5.0)));
        [TV(9, 0), NoWatch, NoMac, iOS(5, 0)]
        [Field("kCVPixelBufferIOSurfaceOpenGLESFBOCompatibilityKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferIOSurfaceOpenGLESFBOCompatibilityKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferPoolMinimumBufferCountKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelBufferPoolMinimumBufferCountKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferPoolMinimumBufferCountKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferPoolMaximumBufferAgeKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelBufferPoolMaximumBufferAgeKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferPoolMaximumBufferAgeKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferPoolAllocationThresholdKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelBufferPoolAllocationThresholdKey", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferPoolAllocationThresholdKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelBufferPoolFreeBufferNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelBufferPoolFreeBufferNotification", "__Internal")]
        unsafe CFStringRef* kCVPixelBufferPoolFreeBufferNotification { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern CFStringRef  _Nonnull const kCVOpenGLESTextureCacheMaximumTextureAgeKey __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(ios, introduced=5.0, deprecated=12.0)));
        [Introduced(PlatformName.TvOS, 9, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Deprecated(PlatformName.TvOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Introduced(PlatformName.iOS, 5, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [NoWatch, NoMac]
        [Field("kCVOpenGLESTextureCacheMaximumTextureAgeKey", "__Internal")]
        unsafe CFStringRef* kCVOpenGLESTextureCacheMaximumTextureAgeKey { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatName", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatName { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatConstant __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatConstant", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatConstant { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatCodecType __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatCodecType", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatCodecType { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatFourCC __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatFourCC", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatFourCC { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatContainsAlpha __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.3)));
        [iOS(4, 3)]
        [Field("kCVPixelFormatContainsAlpha", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatContainsAlpha { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatContainsYCbCr __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0)));
        [iOS(8, 0)]
        [Field("kCVPixelFormatContainsYCbCr", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatContainsYCbCr { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatContainsRGB __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0)));
        [iOS(8, 0)]
        [Field("kCVPixelFormatContainsRGB", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatContainsRGB { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatContainsGrayscale __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=12.0)));
        [iOS(12, 0)]
        [Field("kCVPixelFormatContainsGrayscale", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatContainsGrayscale { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatComponentRange __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kCVPixelFormatComponentRange", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatComponentRange { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatComponentRange_VideoRange __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kCVPixelFormatComponentRange_VideoRange", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatComponentRange_VideoRange { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatComponentRange_FullRange __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kCVPixelFormatComponentRange_FullRange", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatComponentRange_FullRange { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatComponentRange_WideRange __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("kCVPixelFormatComponentRange_WideRange", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatComponentRange_WideRange { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatPlanes __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatPlanes", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatPlanes { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatBlockWidth __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatBlockWidth", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatBlockWidth { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatBlockHeight __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatBlockHeight", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatBlockHeight { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatBitsPerBlock __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatBitsPerBlock", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatBitsPerBlock { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatBlockHorizontalAlignment __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatBlockHorizontalAlignment", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatBlockHorizontalAlignment { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatBlockVerticalAlignment __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatBlockVerticalAlignment", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatBlockVerticalAlignment { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatBlackBlock __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatBlackBlock", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatBlackBlock { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatHorizontalSubsampling __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatHorizontalSubsampling", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatHorizontalSubsampling { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatVerticalSubsampling __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatVerticalSubsampling", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatVerticalSubsampling { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatOpenGLFormat __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatOpenGLFormat", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatOpenGLFormat { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatOpenGLType __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatOpenGLType", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatOpenGLType { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatOpenGLInternalFormat __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatOpenGLInternalFormat", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatOpenGLInternalFormat { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatCGBitmapInfo __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatCGBitmapInfo", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatCGBitmapInfo { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatQDCompatibility __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelFormatQDCompatibility", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatQDCompatibility { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatCGBitmapContextCompatibility __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelFormatCGBitmapContextCompatibility", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatCGBitmapContextCompatibility { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatCGImageCompatibility __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelFormatCGImageCompatibility", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatCGImageCompatibility { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatOpenGLCompatibility __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Watch(4, 0), TV(9, 0), Mac(10, 4), iOS(4, 0)]
        [Field("kCVPixelFormatOpenGLCompatibility", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatOpenGLCompatibility { get; }

        // extern CFStringRef  _Nonnull const kCVPixelFormatOpenGLESCompatibility __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=5.0)));
        [TV(9, 0), NoWatch, NoMac, iOS(5, 0)]
        [Field("kCVPixelFormatOpenGLESCompatibility", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatOpenGLESCompatibility { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern CFStringRef  _Nonnull const kCVPixelFormatFillExtendedPixelsCallback __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
        [iOS(4, 0)]
        [Field("kCVPixelFormatFillExtendedPixelsCallback", "__Internal")]
        unsafe CFStringRef* kCVPixelFormatFillExtendedPixelsCallback { get; }

        // extern CFStringRef  _Nonnull const kCVMetalTextureUsage __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [TV(11, 0), NoWatch, Mac(10, 13), iOS(11, 0)]
        [Field("kCVMetalTextureUsage", "__Internal")]
        unsafe CFStringRef* kCVMetalTextureUsage { get; }

        // extern CFStringRef  _Nonnull const kCVMetalTextureCacheMaximumTextureAgeKey __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.11)));
        [TV(9, 0), NoWatch, Mac(10, 11), iOS(8, 0)]
        [Field("kCVMetalTextureCacheMaximumTextureAgeKey", "__Internal")]
        unsafe CFStringRef* kCVMetalTextureCacheMaximumTextureAgeKey { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataNamespaceExif __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataNamespaceExif", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataNamespaceExif { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataNamespaceExifAux __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataNamespaceExifAux", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataNamespaceExifAux { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataNamespaceExifEX __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(7, 0)]
        [Field("kCGImageMetadataNamespaceExifEX", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataNamespaceExifEX { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataNamespaceDublinCore __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataNamespaceDublinCore", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataNamespaceDublinCore { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataNamespaceIPTCCore __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataNamespaceIPTCCore", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataNamespaceIPTCCore { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataNamespaceIPTCExtension __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImageMetadataNamespaceIPTCExtension", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataNamespaceIPTCExtension { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataNamespacePhotoshop __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataNamespacePhotoshop", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataNamespacePhotoshop { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataNamespaceTIFF __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataNamespaceTIFF", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataNamespaceTIFF { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataNamespaceXMPBasic __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataNamespaceXMPBasic", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataNamespaceXMPBasic { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataNamespaceXMPRights __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataNamespaceXMPRights", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataNamespaceXMPRights { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataPrefixExif __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataPrefixExif", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataPrefixExif { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataPrefixExifAux __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataPrefixExifAux", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataPrefixExifAux { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataPrefixExifEX __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(7, 0)]
        [Field("kCGImageMetadataPrefixExifEX", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataPrefixExifEX { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataPrefixDublinCore __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataPrefixDublinCore", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataPrefixDublinCore { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataPrefixIPTCCore __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataPrefixIPTCCore", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataPrefixIPTCCore { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataPrefixIPTCExtension __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImageMetadataPrefixIPTCExtension", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataPrefixIPTCExtension { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataPrefixPhotoshop __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataPrefixPhotoshop", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataPrefixPhotoshop { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataPrefixTIFF __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataPrefixTIFF", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataPrefixTIFF { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataPrefixXMPBasic __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataPrefixXMPBasic", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataPrefixXMPBasic { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataPrefixXMPRights __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataPrefixXMPRights", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataPrefixXMPRights { get; }
    }

    // typedef _Bool (^CGImageMetadataTagBlock)(CFStringRef _Nonnull, CGImageMetadataTagRef _Nonnull);
    unsafe delegate bool CGImageMetadataTagBlock(CFStringRef* arg0, CGImageMetadataTagRef* arg1);

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern CFStringRef  _Nonnull const kCGImageMetadataEnumerateRecursively __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataEnumerateRecursively", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataEnumerateRecursively { get; }

        // extern CFStringRef  _Nonnull const kCFErrorDomainCGImageMetadata;
        [Field("kCFErrorDomainCGImageMetadata", "__Internal")]
        unsafe CFStringRef* kCFErrorDomainCGImageMetadata { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCGImageSourceTypeIdentifierHint __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImageSourceTypeIdentifierHint", "__Internal")]
        unsafe CFStringRef* kCGImageSourceTypeIdentifierHint { get; }

        // extern const CFStringRef _Nonnull kCGImageSourceShouldCache __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImageSourceShouldCache", "__Internal")]
        unsafe CFStringRef* kCGImageSourceShouldCache { get; }

        // extern const CFStringRef _Nonnull kCGImageSourceShouldCacheImmediately __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(7, 0)]
        [Field("kCGImageSourceShouldCacheImmediately", "__Internal")]
        unsafe CFStringRef* kCGImageSourceShouldCacheImmediately { get; }

        // extern const CFStringRef _Nonnull kCGImageSourceShouldAllowFloat __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImageSourceShouldAllowFloat", "__Internal")]
        unsafe CFStringRef* kCGImageSourceShouldAllowFloat { get; }

        // extern const CFStringRef _Nonnull kCGImageSourceCreateThumbnailFromImageIfAbsent __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImageSourceCreateThumbnailFromImageIfAbsent", "__Internal")]
        unsafe CFStringRef* kCGImageSourceCreateThumbnailFromImageIfAbsent { get; }

        // extern const CFStringRef _Nonnull kCGImageSourceCreateThumbnailFromImageAlways __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImageSourceCreateThumbnailFromImageAlways", "__Internal")]
        unsafe CFStringRef* kCGImageSourceCreateThumbnailFromImageAlways { get; }

        // extern const CFStringRef _Nonnull kCGImageSourceThumbnailMaxPixelSize __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImageSourceThumbnailMaxPixelSize", "__Internal")]
        unsafe CFStringRef* kCGImageSourceThumbnailMaxPixelSize { get; }

        // extern const CFStringRef _Nonnull kCGImageSourceCreateThumbnailWithTransform __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImageSourceCreateThumbnailWithTransform", "__Internal")]
        unsafe CFStringRef* kCGImageSourceCreateThumbnailWithTransform { get; }

        // extern const CFStringRef _Nonnull kCGImageSourceSubsampleFactor __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kCGImageSourceSubsampleFactor", "__Internal")]
        unsafe CFStringRef* kCGImageSourceSubsampleFactor { get; }

        // extern const CFStringRef _Nonnull kCGImageDestinationLossyCompressionQuality __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImageDestinationLossyCompressionQuality", "__Internal")]
        unsafe CFStringRef* kCGImageDestinationLossyCompressionQuality { get; }

        // extern const CFStringRef _Nonnull kCGImageDestinationBackgroundColor __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImageDestinationBackgroundColor", "__Internal")]
        unsafe CFStringRef* kCGImageDestinationBackgroundColor { get; }

        // extern const CFStringRef _Nonnull kCGImageDestinationImageMaxPixelSize __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Mac(10, 10), iOS(8, 0)]
        [Field("kCGImageDestinationImageMaxPixelSize", "__Internal")]
        unsafe CFStringRef* kCGImageDestinationImageMaxPixelSize { get; }

        // extern const CFStringRef _Nonnull kCGImageDestinationEmbedThumbnail __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Mac(10, 10), iOS(8, 0)]
        [Field("kCGImageDestinationEmbedThumbnail", "__Internal")]
        unsafe CFStringRef* kCGImageDestinationEmbedThumbnail { get; }

        // extern const CFStringRef _Nonnull kCGImageDestinationOptimizeColorForSharing __attribute__((availability(ios, introduced=9.3))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(9, 3)]
        [Field("kCGImageDestinationOptimizeColorForSharing", "__Internal")]
        unsafe CFStringRef* kCGImageDestinationOptimizeColorForSharing { get; }

        // extern const CFStringRef _Nonnull kCGImageDestinationMetadata __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageDestinationMetadata", "__Internal")]
        unsafe CFStringRef* kCGImageDestinationMetadata { get; }

        // extern const CFStringRef _Nonnull kCGImageDestinationMergeMetadata __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageDestinationMergeMetadata", "__Internal")]
        unsafe CFStringRef* kCGImageDestinationMergeMetadata { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataShouldExcludeXMP __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageMetadataShouldExcludeXMP", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataShouldExcludeXMP { get; }

        // extern const CFStringRef _Nonnull kCGImageMetadataShouldExcludeGPS __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Mac(10, 10), iOS(8, 0)]
        [Field("kCGImageMetadataShouldExcludeGPS", "__Internal")]
        unsafe CFStringRef* kCGImageMetadataShouldExcludeGPS { get; }

        // extern const CFStringRef _Nonnull kCGImageDestinationDateTime __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageDestinationDateTime", "__Internal")]
        unsafe CFStringRef* kCGImageDestinationDateTime { get; }

        // extern const CFStringRef _Nonnull kCGImageDestinationOrientation __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.8)));
        [Mac(10, 8), iOS(7, 0)]
        [Field("kCGImageDestinationOrientation", "__Internal")]
        unsafe CFStringRef* kCGImageDestinationOrientation { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGIFDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGIFDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGIFDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyJFIFDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyJFIFDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyJFIFDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyPNGDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyRawDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyRawDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyRawDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerCanonDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerCanonDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerCanonDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerMinoltaDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerMinoltaDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerMinoltaDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerFujiDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerFujiDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerFujiDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerOlympusDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerOlympusDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerOlympusDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerPentaxDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerPentaxDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerPentaxDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImageProperty8BIMDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImageProperty8BIMDictionary", "__Internal")]
        unsafe CFStringRef* kCGImageProperty8BIMDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyDNGDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifAuxDictionary __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyExifAuxDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifAuxDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyOpenEXRDictionary __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(11, 3)]
        [Field("kCGImagePropertyOpenEXRDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyOpenEXRDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerAppleDictionary __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.10)));
        [Mac(10, 10), iOS(7, 0)]
        [Field("kCGImagePropertyMakerAppleDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerAppleDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyFileContentsDictionary __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImagePropertyFileContentsDictionary", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyFileContentsDictionary { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyFileSize __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyFileSize", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyFileSize { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPixelHeight __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyPixelHeight", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPixelHeight { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPixelWidth __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyPixelWidth", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPixelWidth { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDPIHeight __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyDPIHeight", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDPIHeight { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDPIWidth __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyDPIWidth", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDPIWidth { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDepth __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyDepth", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDepth { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyOrientation __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyOrientation", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyOrientation { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIsFloat __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIsFloat", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIsFloat { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIsIndexed __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIsIndexed", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIsIndexed { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyHasAlpha __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyHasAlpha", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyHasAlpha { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyColorModel __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyColorModel", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyColorModel { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyProfileName __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyProfileName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyProfileName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPrimaryImage __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImagePropertyPrimaryImage", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPrimaryImage { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyColorModelRGB __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyColorModelRGB", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyColorModelRGB { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyColorModelGray __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyColorModelGray", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyColorModelGray { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyColorModelCMYK __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyColorModelCMYK", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyColorModelCMYK { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyColorModelLab __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyColorModelLab", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyColorModelLab { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFCompression __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFCompression", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFCompression { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFPhotometricInterpretation __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFPhotometricInterpretation", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFPhotometricInterpretation { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFDocumentName __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFDocumentName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFDocumentName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFImageDescription __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFImageDescription", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFImageDescription { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFMake __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFMake", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFMake { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFModel __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFModel", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFModel { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFOrientation __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFOrientation", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFOrientation { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFXResolution __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFXResolution", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFXResolution { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFYResolution __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFYResolution", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFYResolution { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFResolutionUnit __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFResolutionUnit", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFResolutionUnit { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFSoftware __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFSoftware", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFSoftware { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFTransferFunction __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFTransferFunction", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFTransferFunction { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFDateTime __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFDateTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFDateTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFArtist __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFArtist", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFArtist { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFHostComputer __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFHostComputer", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFHostComputer { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFCopyright __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFCopyright", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFCopyright { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFWhitePoint __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFWhitePoint", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFWhitePoint { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFPrimaryChromaticities __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyTIFFPrimaryChromaticities", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFPrimaryChromaticities { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFTileWidth __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kCGImagePropertyTIFFTileWidth", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFTileWidth { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyTIFFTileLength __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kCGImagePropertyTIFFTileLength", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyTIFFTileLength { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyJFIFVersion __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyJFIFVersion", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyJFIFVersion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyJFIFXDensity __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyJFIFXDensity", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyJFIFXDensity { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyJFIFYDensity __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyJFIFYDensity", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyJFIFYDensity { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyJFIFDensityUnit __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyJFIFDensityUnit", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyJFIFDensityUnit { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyJFIFIsProgressive __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyJFIFIsProgressive", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyJFIFIsProgressive { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifExposureTime __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifExposureTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifExposureTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifFNumber __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifFNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifFNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifExposureProgram __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifExposureProgram", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifExposureProgram { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSpectralSensitivity __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSpectralSensitivity", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSpectralSensitivity { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifISOSpeedRatings __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifISOSpeedRatings", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifISOSpeedRatings { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifOECF __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifOECF", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifOECF { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSensitivityType __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(7, 0)]
        [Field("kCGImagePropertyExifSensitivityType", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSensitivityType { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifStandardOutputSensitivity __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(7, 0)]
        [Field("kCGImagePropertyExifStandardOutputSensitivity", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifStandardOutputSensitivity { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifRecommendedExposureIndex __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(7, 0)]
        [Field("kCGImagePropertyExifRecommendedExposureIndex", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifRecommendedExposureIndex { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifISOSpeed __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(7, 0)]
        [Field("kCGImagePropertyExifISOSpeed", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifISOSpeed { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifISOSpeedLatitudeyyy __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(7, 0)]
        [Field("kCGImagePropertyExifISOSpeedLatitudeyyy", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifISOSpeedLatitudeyyy { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifISOSpeedLatitudezzz __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(7, 0)]
        [Field("kCGImagePropertyExifISOSpeedLatitudezzz", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifISOSpeedLatitudezzz { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifVersion __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifVersion", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifVersion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifDateTimeOriginal __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifDateTimeOriginal", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifDateTimeOriginal { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifDateTimeDigitized __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifDateTimeDigitized", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifDateTimeDigitized { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifComponentsConfiguration __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifComponentsConfiguration", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifComponentsConfiguration { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifCompressedBitsPerPixel __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifCompressedBitsPerPixel", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifCompressedBitsPerPixel { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifShutterSpeedValue __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifShutterSpeedValue", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifShutterSpeedValue { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifApertureValue __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifApertureValue", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifApertureValue { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifBrightnessValue __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifBrightnessValue", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifBrightnessValue { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifExposureBiasValue __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifExposureBiasValue", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifExposureBiasValue { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifMaxApertureValue __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifMaxApertureValue", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifMaxApertureValue { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSubjectDistance __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSubjectDistance", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSubjectDistance { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifMeteringMode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifMeteringMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifMeteringMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifLightSource __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifLightSource", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifLightSource { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifFlash __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifFlash", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifFlash { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifFocalLength __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifFocalLength", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifFocalLength { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSubjectArea __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSubjectArea", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSubjectArea { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifMakerNote __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifMakerNote", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifMakerNote { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifUserComment __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifUserComment", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifUserComment { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSubsecTime __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSubsecTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSubsecTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSubsecTimeOriginal __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(10, 0)]
        [Field("kCGImagePropertyExifSubsecTimeOriginal", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSubsecTimeOriginal { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSubsecTimeDigitized __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSubsecTimeDigitized", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSubsecTimeDigitized { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifFlashPixVersion __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifFlashPixVersion", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifFlashPixVersion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifColorSpace __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifColorSpace", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifColorSpace { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifPixelXDimension __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifPixelXDimension", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifPixelXDimension { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifPixelYDimension __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifPixelYDimension", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifPixelYDimension { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifRelatedSoundFile __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifRelatedSoundFile", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifRelatedSoundFile { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifFlashEnergy __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifFlashEnergy", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifFlashEnergy { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSpatialFrequencyResponse __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSpatialFrequencyResponse", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSpatialFrequencyResponse { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifFocalPlaneXResolution __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifFocalPlaneXResolution", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifFocalPlaneXResolution { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifFocalPlaneYResolution __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifFocalPlaneYResolution", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifFocalPlaneYResolution { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifFocalPlaneResolutionUnit __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifFocalPlaneResolutionUnit", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifFocalPlaneResolutionUnit { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSubjectLocation __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSubjectLocation", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSubjectLocation { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifExposureIndex __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifExposureIndex", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifExposureIndex { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSensingMethod __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSensingMethod", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSensingMethod { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifFileSource __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifFileSource", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifFileSource { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSceneType __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSceneType", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSceneType { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifCFAPattern __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifCFAPattern", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifCFAPattern { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifCustomRendered __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifCustomRendered", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifCustomRendered { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifExposureMode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifExposureMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifExposureMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifWhiteBalance __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifWhiteBalance", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifWhiteBalance { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifDigitalZoomRatio __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifDigitalZoomRatio", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifDigitalZoomRatio { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifFocalLenIn35mmFilm __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifFocalLenIn35mmFilm", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifFocalLenIn35mmFilm { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSceneCaptureType __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSceneCaptureType", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSceneCaptureType { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifGainControl __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifGainControl", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifGainControl { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifContrast __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifContrast", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifContrast { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSaturation __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSaturation", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSaturation { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSharpness __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSharpness", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSharpness { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifDeviceSettingDescription __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifDeviceSettingDescription", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifDeviceSettingDescription { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSubjectDistRange __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifSubjectDistRange", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSubjectDistRange { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifImageUniqueID __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifImageUniqueID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifImageUniqueID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifCameraOwnerName __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyExifCameraOwnerName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifCameraOwnerName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifBodySerialNumber __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyExifBodySerialNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifBodySerialNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifLensSpecification __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyExifLensSpecification", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifLensSpecification { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifLensMake __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyExifLensMake", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifLensMake { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifLensModel __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyExifLensModel", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifLensModel { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifLensSerialNumber __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyExifLensSerialNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifLensSerialNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifGamma __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyExifGamma", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifGamma { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifSubsecTimeOrginal __attribute__((availability(ios, introduced=4.0, deprecated=10.0))) __attribute__((availability(macos, introduced=10.4, deprecated=10.11)));
        [Introduced(PlatformName.iOS, 4, 0, message: "No longer supported")]
        [Deprecated(PlatformName.iOS, 10, 0, message: "No longer supported")]
        [Introduced(PlatformName.MacOSX, 10, 4, message: "No longer supported")]
        [Deprecated(PlatformName.MacOSX, 10, 11, message: "No longer supported")]
        [Field("kCGImagePropertyExifSubsecTimeOrginal", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifSubsecTimeOrginal { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifAuxLensInfo __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyExifAuxLensInfo", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifAuxLensInfo { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifAuxLensModel __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyExifAuxLensModel", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifAuxLensModel { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifAuxSerialNumber __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyExifAuxSerialNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifAuxSerialNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifAuxLensID __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyExifAuxLensID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifAuxLensID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifAuxLensSerialNumber __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyExifAuxLensSerialNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifAuxLensSerialNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifAuxImageNumber __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyExifAuxImageNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifAuxImageNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifAuxFlashCompensation __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyExifAuxFlashCompensation", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifAuxFlashCompensation { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifAuxOwnerName __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyExifAuxOwnerName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifAuxOwnerName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyExifAuxFirmware __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyExifAuxFirmware", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyExifAuxFirmware { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGIFLoopCount __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGIFLoopCount", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGIFLoopCount { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGIFDelayTime __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGIFDelayTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGIFDelayTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGIFImageColorMap __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGIFImageColorMap", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGIFImageColorMap { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGIFHasGlobalColorMap __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGIFHasGlobalColorMap", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGIFHasGlobalColorMap { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGIFUnclampedDelayTime __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(4, 0)]
        [Field("kCGImagePropertyGIFUnclampedDelayTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGIFUnclampedDelayTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGAuthor __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyPNGAuthor", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGAuthor { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGChromaticities __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyPNGChromaticities", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGChromaticities { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGComment __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyPNGComment", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGComment { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGCopyright __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyPNGCopyright", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGCopyright { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGCreationTime __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyPNGCreationTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGCreationTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGDescription __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyPNGDescription", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGDescription { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGDisclaimer __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyPNGDisclaimer", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGDisclaimer { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGGamma __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyPNGGamma", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGGamma { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGInterlaceType __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyPNGInterlaceType", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGInterlaceType { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGModificationTime __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyPNGModificationTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGModificationTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGSoftware __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyPNGSoftware", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGSoftware { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGSource __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyPNGSource", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGSource { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGsRGBIntent __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyPNGsRGBIntent", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGsRGBIntent { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGTitle __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(macos, introduced=10.7)));
        [Mac(10, 7), iOS(5, 0)]
        [Field("kCGImagePropertyPNGTitle", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGTitle { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGWarning __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyPNGWarning", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGWarning { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGXPixelsPerMeter __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyPNGXPixelsPerMeter", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGXPixelsPerMeter { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPNGYPixelsPerMeter __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyPNGYPixelsPerMeter", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGYPixelsPerMeter { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyAPNGLoopCount __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Mac(10, 10), iOS(8, 0)]
        [Field("kCGImagePropertyAPNGLoopCount", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyAPNGLoopCount { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyAPNGDelayTime __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Mac(10, 10), iOS(8, 0)]
        [Field("kCGImagePropertyAPNGDelayTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyAPNGDelayTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyAPNGUnclampedDelayTime __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Mac(10, 10), iOS(8, 0)]
        [Field("kCGImagePropertyAPNGUnclampedDelayTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyAPNGUnclampedDelayTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSVersion __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSVersion", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSVersion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSLatitudeRef __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSLatitudeRef", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSLatitudeRef { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSLatitude __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSLatitude", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSLatitude { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSLongitudeRef __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSLongitudeRef", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSLongitudeRef { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSLongitude __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSLongitude", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSLongitude { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSAltitudeRef __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSAltitudeRef", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSAltitudeRef { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSAltitude __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSAltitude", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSAltitude { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSTimeStamp __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSTimeStamp", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSTimeStamp { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSSatellites __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSSatellites", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSSatellites { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSStatus __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSStatus", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSStatus { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSMeasureMode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSMeasureMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSMeasureMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSDOP __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSDOP", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSDOP { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSSpeedRef __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSSpeedRef", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSSpeedRef { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSSpeed __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSSpeed", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSSpeed { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSTrackRef __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSTrackRef", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSTrackRef { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSTrack __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSTrack", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSTrack { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSImgDirectionRef __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSImgDirectionRef", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSImgDirectionRef { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSImgDirection __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSImgDirection", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSImgDirection { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSMapDatum __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSMapDatum", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSMapDatum { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSDestLatitudeRef __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSDestLatitudeRef", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSDestLatitudeRef { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSDestLatitude __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSDestLatitude", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSDestLatitude { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSDestLongitudeRef __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSDestLongitudeRef", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSDestLongitudeRef { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSDestLongitude __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSDestLongitude", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSDestLongitude { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSDestBearingRef __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSDestBearingRef", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSDestBearingRef { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSDestBearing __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSDestBearing", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSDestBearing { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSDestDistanceRef __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSDestDistanceRef", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSDestDistanceRef { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSDestDistance __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSDestDistance", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSDestDistance { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSProcessingMethod __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSProcessingMethod", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSProcessingMethod { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSAreaInformation __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSAreaInformation", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSAreaInformation { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSDateStamp __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSDateStamp", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSDateStamp { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSDifferental __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyGPSDifferental", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSDifferental { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyGPSHPositioningError __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Mac(10, 10), iOS(8, 0)]
        [Field("kCGImagePropertyGPSHPositioningError", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyGPSHPositioningError { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCObjectTypeReference __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCObjectTypeReference", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCObjectTypeReference { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCObjectAttributeReference __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCObjectAttributeReference", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCObjectAttributeReference { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCObjectName __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCObjectName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCObjectName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCEditStatus __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCEditStatus", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCEditStatus { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCEditorialUpdate __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCEditorialUpdate", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCEditorialUpdate { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCUrgency __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCUrgency", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCUrgency { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCSubjectReference __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCSubjectReference", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCSubjectReference { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCCategory __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCCategory", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCCategory { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCSupplementalCategory __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCSupplementalCategory", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCSupplementalCategory { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCFixtureIdentifier __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCFixtureIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCFixtureIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCKeywords __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCKeywords", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCKeywords { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCContentLocationCode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCContentLocationCode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCContentLocationCode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCContentLocationName __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCContentLocationName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCContentLocationName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCReleaseDate __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCReleaseDate", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCReleaseDate { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCReleaseTime __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCReleaseTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCReleaseTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExpirationDate __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCExpirationDate", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExpirationDate { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExpirationTime __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCExpirationTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExpirationTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCSpecialInstructions __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCSpecialInstructions", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCSpecialInstructions { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCActionAdvised __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCActionAdvised", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCActionAdvised { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCReferenceService __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCReferenceService", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCReferenceService { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCReferenceDate __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCReferenceDate", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCReferenceDate { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCReferenceNumber __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCReferenceNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCReferenceNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCDateCreated __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCDateCreated", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCDateCreated { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCTimeCreated __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCTimeCreated", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCTimeCreated { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCDigitalCreationDate __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCDigitalCreationDate", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCDigitalCreationDate { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCDigitalCreationTime __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCDigitalCreationTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCDigitalCreationTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCOriginatingProgram __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCOriginatingProgram", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCOriginatingProgram { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCProgramVersion __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCProgramVersion", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCProgramVersion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCObjectCycle __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCObjectCycle", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCObjectCycle { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCByline __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCByline", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCByline { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCBylineTitle __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCBylineTitle", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCBylineTitle { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCCity __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCCity", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCCity { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCSubLocation __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCSubLocation", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCSubLocation { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCProvinceState __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCProvinceState", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCProvinceState { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCCountryPrimaryLocationCode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCCountryPrimaryLocationCode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCCountryPrimaryLocationCode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCCountryPrimaryLocationName __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCCountryPrimaryLocationName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCCountryPrimaryLocationName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCOriginalTransmissionReference __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCOriginalTransmissionReference", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCOriginalTransmissionReference { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCHeadline __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCHeadline", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCHeadline { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCCredit __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCCredit", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCCredit { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCSource __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCSource", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCSource { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCCopyrightNotice __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCCopyrightNotice", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCCopyrightNotice { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCContact __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCContact", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCContact { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCCaptionAbstract __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCCaptionAbstract", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCCaptionAbstract { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCWriterEditor __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCWriterEditor", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCWriterEditor { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCImageType __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCImageType", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCImageType { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCImageOrientation __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCImageOrientation", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCImageOrientation { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCLanguageIdentifier __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCLanguageIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCLanguageIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCStarRating __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCStarRating", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCStarRating { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCCreatorContactInfo __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCCreatorContactInfo", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCCreatorContactInfo { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCRightsUsageTerms __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCRightsUsageTerms", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCRightsUsageTerms { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCScene __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCScene", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCScene { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtAboutCvTerm __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtAboutCvTerm", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtAboutCvTerm { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtAboutCvTermCvId __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtAboutCvTermCvId", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtAboutCvTermCvId { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtAboutCvTermId __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtAboutCvTermId", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtAboutCvTermId { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtAboutCvTermName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtAboutCvTermName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtAboutCvTermName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtAboutCvTermRefinedAbout __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtAboutCvTermRefinedAbout", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtAboutCvTermRefinedAbout { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtAddlModelInfo __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtAddlModelInfo", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtAddlModelInfo { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkOrObject __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkOrObject", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkOrObject { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkCircaDateCreated __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkCircaDateCreated", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkCircaDateCreated { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkContentDescription __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkContentDescription", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkContentDescription { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkContributionDescription __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkContributionDescription", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkContributionDescription { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkCopyrightNotice __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkCopyrightNotice", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkCopyrightNotice { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkCreator __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkCreator", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkCreator { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkCreatorID __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkCreatorID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkCreatorID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkCopyrightOwnerID __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkCopyrightOwnerID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkCopyrightOwnerID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkCopyrightOwnerName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkCopyrightOwnerName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkCopyrightOwnerName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkLicensorID __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkLicensorID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkLicensorID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkLicensorName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkLicensorName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkLicensorName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkDateCreated __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkDateCreated", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkDateCreated { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkPhysicalDescription __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkPhysicalDescription", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkPhysicalDescription { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkSource __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkSource", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkSource { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkSourceInventoryNo __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkSourceInventoryNo", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkSourceInventoryNo { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkSourceInvURL __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkSourceInvURL", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkSourceInvURL { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkStylePeriod __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkStylePeriod", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkStylePeriod { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtArtworkTitle __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtArtworkTitle", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtArtworkTitle { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtAudioBitrate __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtAudioBitrate", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtAudioBitrate { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtAudioBitrateMode __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtAudioBitrateMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtAudioBitrateMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtAudioChannelCount __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtAudioChannelCount", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtAudioChannelCount { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtCircaDateCreated __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtCircaDateCreated", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtCircaDateCreated { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtContainerFormat __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtContainerFormat", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtContainerFormat { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtContainerFormatIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtContainerFormatIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtContainerFormatIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtContainerFormatName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtContainerFormatName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtContainerFormatName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtContributor __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtContributor", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtContributor { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtContributorIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtContributorIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtContributorIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtContributorName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtContributorName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtContributorName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtContributorRole __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtContributorRole", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtContributorRole { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtCopyrightYear __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtCopyrightYear", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtCopyrightYear { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtCreator __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtCreator", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtCreator { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtCreatorIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtCreatorIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtCreatorIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtCreatorName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtCreatorName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtCreatorName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtCreatorRole __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtCreatorRole", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtCreatorRole { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtControlledVocabularyTerm __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtControlledVocabularyTerm", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtControlledVocabularyTerm { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDataOnScreen __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDataOnScreen", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDataOnScreen { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDataOnScreenRegion __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDataOnScreenRegion", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDataOnScreenRegion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDataOnScreenRegionD __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDataOnScreenRegionD", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDataOnScreenRegionD { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDataOnScreenRegionH __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDataOnScreenRegionH", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDataOnScreenRegionH { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDataOnScreenRegionText __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDataOnScreenRegionText", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDataOnScreenRegionText { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDataOnScreenRegionUnit __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDataOnScreenRegionUnit", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDataOnScreenRegionUnit { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDataOnScreenRegionW __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDataOnScreenRegionW", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDataOnScreenRegionW { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDataOnScreenRegionX __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDataOnScreenRegionX", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDataOnScreenRegionX { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDataOnScreenRegionY __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDataOnScreenRegionY", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDataOnScreenRegionY { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDigitalImageGUID __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDigitalImageGUID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDigitalImageGUID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDigitalSourceFileType __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDigitalSourceFileType", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDigitalSourceFileType { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDigitalSourceType __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDigitalSourceType", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDigitalSourceType { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDopesheet __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDopesheet", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDopesheet { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDopesheetLink __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDopesheetLink", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDopesheetLink { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDopesheetLinkLink __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDopesheetLinkLink", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDopesheetLinkLink { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtDopesheetLinkLinkQualifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtDopesheetLinkLinkQualifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtDopesheetLinkLinkQualifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtEmbdEncRightsExpr __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtEmbdEncRightsExpr", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtEmbdEncRightsExpr { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtEmbeddedEncodedRightsExpr __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtEmbeddedEncodedRightsExpr", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtEmbeddedEncodedRightsExpr { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtEmbeddedEncodedRightsExprType __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtEmbeddedEncodedRightsExprType", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtEmbeddedEncodedRightsExprType { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtEmbeddedEncodedRightsExprLangID __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtEmbeddedEncodedRightsExprLangID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtEmbeddedEncodedRightsExprLangID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtEpisode __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtEpisode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtEpisode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtEpisodeIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtEpisodeIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtEpisodeIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtEpisodeName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtEpisodeName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtEpisodeName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtEpisodeNumber __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtEpisodeNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtEpisodeNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtEvent __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtEvent", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtEvent { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtShownEvent __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtShownEvent", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtShownEvent { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtShownEventIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtShownEventIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtShownEventIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtShownEventName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtShownEventName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtShownEventName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtExternalMetadataLink __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtExternalMetadataLink", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtExternalMetadataLink { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtFeedIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtFeedIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtFeedIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtGenre __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtGenre", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtGenre { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtGenreCvId __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtGenreCvId", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtGenreCvId { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtGenreCvTermId __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtGenreCvTermId", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtGenreCvTermId { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtGenreCvTermName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtGenreCvTermName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtGenreCvTermName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtGenreCvTermRefinedAbout __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtGenreCvTermRefinedAbout", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtGenreCvTermRefinedAbout { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtHeadline __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtHeadline", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtHeadline { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtIPTCLastEdited __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtIPTCLastEdited", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtIPTCLastEdited { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLinkedEncRightsExpr __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLinkedEncRightsExpr", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLinkedEncRightsExpr { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLinkedEncodedRightsExpr __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLinkedEncodedRightsExpr", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLinkedEncodedRightsExpr { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLinkedEncodedRightsExprType __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLinkedEncodedRightsExprType", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLinkedEncodedRightsExprType { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLinkedEncodedRightsExprLangID __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLinkedEncodedRightsExprLangID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLinkedEncodedRightsExprLangID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationCreated __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationCreated", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationCreated { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationCity __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationCity", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationCity { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationCountryCode __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationCountryCode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationCountryCode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationCountryName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationCountryName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationCountryName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationGPSAltitude __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationGPSAltitude", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationGPSAltitude { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationGPSLatitude __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationGPSLatitude", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationGPSLatitude { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationGPSLongitude __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationGPSLongitude", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationGPSLongitude { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationLocationId __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationLocationId", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationLocationId { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationLocationName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationLocationName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationLocationName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationProvinceState __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationProvinceState", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationProvinceState { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationSublocation __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationSublocation", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationSublocation { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationWorldRegion __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationWorldRegion", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationWorldRegion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtLocationShown __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtLocationShown", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtLocationShown { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtMaxAvailHeight __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtMaxAvailHeight", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtMaxAvailHeight { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtMaxAvailWidth __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtMaxAvailWidth", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtMaxAvailWidth { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtModelAge __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtModelAge", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtModelAge { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtOrganisationInImageCode __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtOrganisationInImageCode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtOrganisationInImageCode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtOrganisationInImageName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtOrganisationInImageName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtOrganisationInImageName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonHeard __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonHeard", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonHeard { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonHeardIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonHeardIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonHeardIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonHeardName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonHeardName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonHeardName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonInImage __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonInImage", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonInImage { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonInImageWDetails __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonInImageWDetails", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonInImageWDetails { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonInImageCharacteristic __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonInImageCharacteristic", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonInImageCharacteristic { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonInImageCvTermCvId __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonInImageCvTermCvId", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonInImageCvTermCvId { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonInImageCvTermId __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonInImageCvTermId", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonInImageCvTermId { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonInImageCvTermName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonInImageCvTermName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonInImageCvTermName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonInImageCvTermRefinedAbout __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonInImageCvTermRefinedAbout", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonInImageCvTermRefinedAbout { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonInImageDescription __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonInImageDescription", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonInImageDescription { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonInImageId __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonInImageId", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonInImageId { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPersonInImageName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPersonInImageName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPersonInImageName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtProductInImage __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtProductInImage", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtProductInImage { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtProductInImageDescription __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtProductInImageDescription", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtProductInImageDescription { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtProductInImageGTIN __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtProductInImageGTIN", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtProductInImageGTIN { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtProductInImageName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtProductInImageName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtProductInImageName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPublicationEvent __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPublicationEvent", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPublicationEvent { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPublicationEventDate __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPublicationEventDate", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPublicationEventDate { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPublicationEventIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPublicationEventIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPublicationEventIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtPublicationEventName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtPublicationEventName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtPublicationEventName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRating __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRating", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRating { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRatingRegion __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRatingRegion", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRatingRegion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRegionCity __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRegionCity", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRegionCity { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRegionCountryCode __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRegionCountryCode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRegionCountryCode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRegionCountryName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRegionCountryName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRegionCountryName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRegionGPSAltitude __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRegionGPSAltitude", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRegionGPSAltitude { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRegionGPSLatitude __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRegionGPSLatitude", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRegionGPSLatitude { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRegionGPSLongitude __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRegionGPSLongitude", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRegionGPSLongitude { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRegionIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRegionIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRegionIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRegionLocationId __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRegionLocationId", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRegionLocationId { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRegionLocationName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRegionLocationName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRegionLocationName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRegionProvinceState __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRegionProvinceState", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRegionProvinceState { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRegionSublocation __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRegionSublocation", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRegionSublocation { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingRegionWorldRegion __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingRegionWorldRegion", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingRegionWorldRegion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingScaleMaxValue __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingScaleMaxValue", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingScaleMaxValue { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingScaleMinValue __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingScaleMinValue", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingScaleMinValue { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingSourceLink __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingSourceLink", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingSourceLink { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingValue __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingValue", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingValue { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRatingValueLogoLink __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRatingValueLogoLink", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRatingValueLogoLink { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRegistryID __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRegistryID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRegistryID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRegistryEntryRole __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRegistryEntryRole", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRegistryEntryRole { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRegistryItemID __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRegistryItemID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRegistryItemID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtRegistryOrganisationID __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtRegistryOrganisationID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtRegistryOrganisationID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtReleaseReady __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtReleaseReady", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtReleaseReady { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtSeason __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtSeason", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtSeason { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtSeasonIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtSeasonIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtSeasonIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtSeasonName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtSeasonName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtSeasonName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtSeasonNumber __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtSeasonNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtSeasonNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtSeries __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtSeries", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtSeries { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtSeriesIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtSeriesIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtSeriesIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtSeriesName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtSeriesName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtSeriesName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtStorylineIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtStorylineIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtStorylineIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtStreamReady __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtStreamReady", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtStreamReady { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtStylePeriod __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtStylePeriod", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtStylePeriod { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtSupplyChainSource __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtSupplyChainSource", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtSupplyChainSource { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtSupplyChainSourceIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtSupplyChainSourceIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtSupplyChainSourceIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtSupplyChainSourceName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtSupplyChainSourceName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtSupplyChainSourceName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtTemporalCoverage __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtTemporalCoverage", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtTemporalCoverage { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtTemporalCoverageFrom __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtTemporalCoverageFrom", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtTemporalCoverageFrom { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtTemporalCoverageTo __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtTemporalCoverageTo", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtTemporalCoverageTo { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtTranscript __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtTranscript", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtTranscript { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtTranscriptLink __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtTranscriptLink", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtTranscriptLink { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtTranscriptLinkLink __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtTranscriptLinkLink", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtTranscriptLinkLink { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtTranscriptLinkLinkQualifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtTranscriptLinkLinkQualifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtTranscriptLinkLinkQualifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtVideoBitrate __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtVideoBitrate", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtVideoBitrate { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtVideoBitrateMode __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtVideoBitrateMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtVideoBitrateMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtVideoDisplayAspectRatio __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtVideoDisplayAspectRatio", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtVideoDisplayAspectRatio { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtVideoEncodingProfile __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtVideoEncodingProfile", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtVideoEncodingProfile { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtVideoShotType __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtVideoShotType", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtVideoShotType { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtVideoShotTypeIdentifier __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtVideoShotTypeIdentifier", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtVideoShotTypeIdentifier { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtVideoShotTypeName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtVideoShotTypeName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtVideoShotTypeName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtVideoStreamsCount __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtVideoStreamsCount", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtVideoStreamsCount { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtVisualColor __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtVisualColor", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtVisualColor { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtWorkflowTag __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtWorkflowTag", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtWorkflowTag { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtWorkflowTagCvId __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtWorkflowTagCvId", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtWorkflowTagCvId { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtWorkflowTagCvTermId __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtWorkflowTagCvTermId", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtWorkflowTagCvTermId { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtWorkflowTagCvTermName __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtWorkflowTagCvTermName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtWorkflowTagCvTermName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCExtWorkflowTagCvTermRefinedAbout __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [Mac(10, 13, 4), iOS(11, 3)]
        [Field("kCGImagePropertyIPTCExtWorkflowTagCvTermRefinedAbout", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCExtWorkflowTagCvTermRefinedAbout { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCContactInfoCity __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCContactInfoCity", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCContactInfoCity { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCContactInfoCountry __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCContactInfoCountry", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCContactInfoCountry { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCContactInfoAddress __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCContactInfoAddress", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCContactInfoAddress { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCContactInfoPostalCode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCContactInfoPostalCode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCContactInfoPostalCode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCContactInfoStateProvince __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCContactInfoStateProvince", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCContactInfoStateProvince { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCContactInfoEmails __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCContactInfoEmails", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCContactInfoEmails { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCContactInfoPhones __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCContactInfoPhones", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCContactInfoPhones { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyIPTCContactInfoWebURLs __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.6)));
        [Mac(10, 6), iOS(4, 0)]
        [Field("kCGImagePropertyIPTCContactInfoWebURLs", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyIPTCContactInfoWebURLs { get; }

        // extern const CFStringRef _Nonnull kCGImageProperty8BIMLayerNames __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.4)));
        [Mac(10, 4), iOS(4, 0)]
        [Field("kCGImageProperty8BIMLayerNames", "__Internal")]
        unsafe CFStringRef* kCGImageProperty8BIMLayerNames { get; }

        // extern const CFStringRef _Nonnull kCGImageProperty8BIMVersion __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
        [Mac(10, 10), iOS(8, 0)]
        [Field("kCGImageProperty8BIMVersion", "__Internal")]
        unsafe CFStringRef* kCGImageProperty8BIMVersion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGVersion __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyDNGVersion", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGVersion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGBackwardVersion __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyDNGBackwardVersion", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGBackwardVersion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGUniqueCameraModel __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyDNGUniqueCameraModel", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGUniqueCameraModel { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGLocalizedCameraModel __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyDNGLocalizedCameraModel", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGLocalizedCameraModel { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGCameraSerialNumber __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyDNGCameraSerialNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGCameraSerialNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGLensInfo __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyDNGLensInfo", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGLensInfo { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGBlackLevel __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGBlackLevel", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGBlackLevel { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGWhiteLevel __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGWhiteLevel", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGWhiteLevel { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGCalibrationIlluminant1 __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGCalibrationIlluminant1", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGCalibrationIlluminant1 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGCalibrationIlluminant2 __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGCalibrationIlluminant2", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGCalibrationIlluminant2 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGColorMatrix1 __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGColorMatrix1", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGColorMatrix1 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGColorMatrix2 __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGColorMatrix2", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGColorMatrix2 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGCameraCalibration1 __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGCameraCalibration1", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGCameraCalibration1 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGCameraCalibration2 __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGCameraCalibration2", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGCameraCalibration2 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGAsShotNeutral __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGAsShotNeutral", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGAsShotNeutral { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGAsShotWhiteXY __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGAsShotWhiteXY", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGAsShotWhiteXY { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGBaselineExposure __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGBaselineExposure", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGBaselineExposure { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGBaselineNoise __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGBaselineNoise", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGBaselineNoise { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGBaselineSharpness __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGBaselineSharpness", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGBaselineSharpness { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGPrivateData __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGPrivateData", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGPrivateData { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGCameraCalibrationSignature __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGCameraCalibrationSignature", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGCameraCalibrationSignature { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGProfileCalibrationSignature __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGProfileCalibrationSignature", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGProfileCalibrationSignature { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGNoiseProfile __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGNoiseProfile", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGNoiseProfile { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGWarpRectilinear __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGWarpRectilinear", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGWarpRectilinear { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGWarpFisheye __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGWarpFisheye", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGWarpFisheye { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGFixVignetteRadial __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
        [Mac(10, 12), iOS(10, 0)]
        [Field("kCGImagePropertyDNGFixVignetteRadial", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGFixVignetteRadial { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGActiveArea __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGActiveArea", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGActiveArea { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGAnalogBalance __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGAnalogBalance", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGAnalogBalance { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGAntiAliasStrength __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGAntiAliasStrength", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGAntiAliasStrength { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGAsShotICCProfile __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGAsShotICCProfile", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGAsShotICCProfile { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGAsShotPreProfileMatrix __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGAsShotPreProfileMatrix", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGAsShotPreProfileMatrix { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGAsShotProfileName __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGAsShotProfileName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGAsShotProfileName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGBaselineExposureOffset __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGBaselineExposureOffset", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGBaselineExposureOffset { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGBayerGreenSplit __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGBayerGreenSplit", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGBayerGreenSplit { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGBestQualityScale __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGBestQualityScale", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGBestQualityScale { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGBlackLevelDeltaH __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGBlackLevelDeltaH", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGBlackLevelDeltaH { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGBlackLevelDeltaV __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGBlackLevelDeltaV", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGBlackLevelDeltaV { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGBlackLevelRepeatDim __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGBlackLevelRepeatDim", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGBlackLevelRepeatDim { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGCFALayout __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGCFALayout", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGCFALayout { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGCFAPlaneColor __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGCFAPlaneColor", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGCFAPlaneColor { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGChromaBlurRadius __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGChromaBlurRadius", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGChromaBlurRadius { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGColorimetricReference __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGColorimetricReference", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGColorimetricReference { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGCurrentICCProfile __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGCurrentICCProfile", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGCurrentICCProfile { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGCurrentPreProfileMatrix __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGCurrentPreProfileMatrix", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGCurrentPreProfileMatrix { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGDefaultBlackRender __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGDefaultBlackRender", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGDefaultBlackRender { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGDefaultCropOrigin __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGDefaultCropOrigin", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGDefaultCropOrigin { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGDefaultCropSize __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGDefaultCropSize", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGDefaultCropSize { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGDefaultScale __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGDefaultScale", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGDefaultScale { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGDefaultUserCrop __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGDefaultUserCrop", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGDefaultUserCrop { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGExtraCameraProfiles __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGExtraCameraProfiles", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGExtraCameraProfiles { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGForwardMatrix1 __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGForwardMatrix1", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGForwardMatrix1 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGForwardMatrix2 __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGForwardMatrix2", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGForwardMatrix2 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGLinearizationTable __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGLinearizationTable", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGLinearizationTable { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGLinearResponseLimit __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGLinearResponseLimit", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGLinearResponseLimit { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGMakerNoteSafety __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGMakerNoteSafety", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGMakerNoteSafety { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGMaskedAreas __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGMaskedAreas", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGMaskedAreas { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGNewRawImageDigest __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGNewRawImageDigest", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGNewRawImageDigest { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGNoiseReductionApplied __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGNoiseReductionApplied", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGNoiseReductionApplied { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGOpcodeList1 __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGOpcodeList1", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGOpcodeList1 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGOpcodeList2 __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGOpcodeList2", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGOpcodeList2 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGOpcodeList3 __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGOpcodeList3", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGOpcodeList3 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGOriginalBestQualityFinalSize __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGOriginalBestQualityFinalSize", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGOriginalBestQualityFinalSize { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGOriginalDefaultCropSize __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGOriginalDefaultCropSize", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGOriginalDefaultCropSize { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGOriginalDefaultFinalSize __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGOriginalDefaultFinalSize", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGOriginalDefaultFinalSize { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGOriginalRawFileData __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGOriginalRawFileData", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGOriginalRawFileData { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGOriginalRawFileDigest __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGOriginalRawFileDigest", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGOriginalRawFileDigest { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGOriginalRawFileName __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGOriginalRawFileName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGOriginalRawFileName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGPreviewApplicationName __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGPreviewApplicationName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGPreviewApplicationName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGPreviewApplicationVersion __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGPreviewApplicationVersion", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGPreviewApplicationVersion { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGPreviewColorSpace __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGPreviewColorSpace", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGPreviewColorSpace { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGPreviewDateTime __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGPreviewDateTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGPreviewDateTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGPreviewSettingsDigest __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGPreviewSettingsDigest", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGPreviewSettingsDigest { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGPreviewSettingsName __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGPreviewSettingsName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGPreviewSettingsName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGProfileCopyright __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGProfileCopyright", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGProfileCopyright { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGProfileEmbedPolicy __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGProfileEmbedPolicy", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGProfileEmbedPolicy { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGProfileHueSatMapData1 __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGProfileHueSatMapData1", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGProfileHueSatMapData1 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGProfileHueSatMapData2 __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGProfileHueSatMapData2", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGProfileHueSatMapData2 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGProfileHueSatMapDims __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGProfileHueSatMapDims", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGProfileHueSatMapDims { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGProfileHueSatMapEncoding __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGProfileHueSatMapEncoding", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGProfileHueSatMapEncoding { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGProfileLookTableData __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGProfileLookTableData", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGProfileLookTableData { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGProfileLookTableDims __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGProfileLookTableDims", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGProfileLookTableDims { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGProfileLookTableEncoding __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGProfileLookTableEncoding", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGProfileLookTableEncoding { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGProfileName __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGProfileName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGProfileName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGProfileToneCurve __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGProfileToneCurve", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGProfileToneCurve { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGRawDataUniqueID __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGRawDataUniqueID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGRawDataUniqueID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGRawImageDigest __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGRawImageDigest", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGRawImageDigest { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGRawToPreviewGain __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGRawToPreviewGain", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGRawToPreviewGain { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGReductionMatrix1 __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGReductionMatrix1", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGReductionMatrix1 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGReductionMatrix2 __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGReductionMatrix2", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGReductionMatrix2 { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGRowInterleaveFactor __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGRowInterleaveFactor", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGRowInterleaveFactor { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGShadowScale __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGShadowScale", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGShadowScale { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyDNGSubTileBlockSize __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImagePropertyDNGSubTileBlockSize", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyDNGSubTileBlockSize { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFDescription __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFDescription", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFDescription { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFFirmware __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFFirmware", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFFirmware { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFOwnerName __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFOwnerName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFOwnerName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFImageName __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFImageName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFImageName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFImageFileName __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFImageFileName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFImageFileName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFReleaseMethod __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFReleaseMethod", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFReleaseMethod { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFReleaseTiming __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFReleaseTiming", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFReleaseTiming { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFRecordID __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFRecordID", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFRecordID { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFSelfTimingTime __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFSelfTimingTime", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFSelfTimingTime { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFCameraSerialNumber __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFCameraSerialNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFCameraSerialNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFImageSerialNumber __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFImageSerialNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFImageSerialNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFContinuousDrive __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFContinuousDrive", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFContinuousDrive { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFFocusMode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFFocusMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFFocusMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFMeteringMode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFMeteringMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFMeteringMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFShootingMode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFShootingMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFShootingMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFLensModel __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFLensModel", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFLensModel { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFLensMaxMM __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFLensMaxMM", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFLensMaxMM { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFLensMinMM __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFLensMinMM", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFLensMinMM { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFWhiteBalanceIndex __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFWhiteBalanceIndex", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFWhiteBalanceIndex { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFFlashExposureComp __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFFlashExposureComp", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFFlashExposureComp { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyCIFFMeasuredEV __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyCIFFMeasuredEV", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyCIFFMeasuredEV { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonISOSetting __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonISOSetting", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonISOSetting { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonColorMode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonColorMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonColorMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonQuality __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonQuality", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonQuality { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonWhiteBalanceMode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonWhiteBalanceMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonWhiteBalanceMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonSharpenMode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonSharpenMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonSharpenMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonFocusMode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonFocusMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonFocusMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonFlashSetting __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonFlashSetting", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonFlashSetting { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonISOSelection __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonISOSelection", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonISOSelection { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonFlashExposureComp __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonFlashExposureComp", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonFlashExposureComp { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonImageAdjustment __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonImageAdjustment", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonImageAdjustment { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonLensAdapter __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonLensAdapter", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonLensAdapter { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonLensType __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonLensType", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonLensType { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonLensInfo __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonLensInfo", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonLensInfo { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonFocusDistance __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonFocusDistance", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonFocusDistance { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonDigitalZoom __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonDigitalZoom", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonDigitalZoom { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonShootingMode __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonShootingMode", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonShootingMode { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonCameraSerialNumber __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonCameraSerialNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonCameraSerialNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerNikonShutterCount __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerNikonShutterCount", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerNikonShutterCount { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerCanonOwnerName __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerCanonOwnerName", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerCanonOwnerName { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerCanonCameraSerialNumber __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerCanonCameraSerialNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerCanonCameraSerialNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerCanonImageSerialNumber __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerCanonImageSerialNumber", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerCanonImageSerialNumber { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerCanonFlashExposureComp __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerCanonFlashExposureComp", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerCanonFlashExposureComp { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerCanonContinuousDrive __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerCanonContinuousDrive", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerCanonContinuousDrive { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerCanonLensModel __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerCanonLensModel", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerCanonLensModel { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerCanonFirmware __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerCanonFirmware", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerCanonFirmware { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyMakerCanonAspectRatioInfo __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(macos, introduced=10.5)));
        [Mac(10, 5), iOS(4, 0)]
        [Field("kCGImagePropertyMakerCanonAspectRatioInfo", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyMakerCanonAspectRatioInfo { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyOpenEXRAspectRatio __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.9)));
        [Mac(10, 9), iOS(11, 3)]
        [Field("kCGImagePropertyOpenEXRAspectRatio", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyOpenEXRAspectRatio { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CFStringRef _Nonnull kCGImagePropertyPNGCompressionFilter __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
        [Mac(10, 11), iOS(9, 0)]
        [Field("kCGImagePropertyPNGCompressionFilter", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPNGCompressionFilter { get; }

        // extern const CFStringRef _Nonnull kCGImageAuxiliaryDataTypeDepth __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImageAuxiliaryDataTypeDepth", "__Internal")]
        unsafe CFStringRef* kCGImageAuxiliaryDataTypeDepth { get; }

        // extern const CFStringRef _Nonnull kCGImageAuxiliaryDataTypeDisparity __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImageAuxiliaryDataTypeDisparity", "__Internal")]
        unsafe CFStringRef* kCGImageAuxiliaryDataTypeDisparity { get; }

        // extern const CFStringRef _Nonnull kCGImageAuxiliaryDataTypePortraitEffectsMatte __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
        [Mac(10, 14), iOS(12, 0)]
        [Field("kCGImageAuxiliaryDataTypePortraitEffectsMatte", "__Internal")]
        unsafe CFStringRef* kCGImageAuxiliaryDataTypePortraitEffectsMatte { get; }

        // extern const CFStringRef _Nonnull kCGImageAuxiliaryDataInfoData __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImageAuxiliaryDataInfoData", "__Internal")]
        unsafe CFStringRef* kCGImageAuxiliaryDataInfoData { get; }

        // extern const CFStringRef _Nonnull kCGImageAuxiliaryDataInfoDataDescription __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImageAuxiliaryDataInfoDataDescription", "__Internal")]
        unsafe CFStringRef* kCGImageAuxiliaryDataInfoDataDescription { get; }

        // extern const CFStringRef _Nonnull kCGImageAuxiliaryDataInfoMetadata __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImageAuxiliaryDataInfoMetadata", "__Internal")]
        unsafe CFStringRef* kCGImageAuxiliaryDataInfoMetadata { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyImageCount __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImagePropertyImageCount", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyImageCount { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyWidth __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImagePropertyWidth", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyWidth { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyHeight __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImagePropertyHeight", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyHeight { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyBytesPerRow __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImagePropertyBytesPerRow", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyBytesPerRow { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyNamedColorSpace __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImagePropertyNamedColorSpace", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyNamedColorSpace { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyPixelFormat __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImagePropertyPixelFormat", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyPixelFormat { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyImages __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImagePropertyImages", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyImages { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyThumbnailImages __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImagePropertyThumbnailImages", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyThumbnailImages { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyAuxiliaryData __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImagePropertyAuxiliaryData", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyAuxiliaryData { get; }

        // extern const CFStringRef _Nonnull kCGImagePropertyAuxiliaryDataType __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
        [Mac(10, 13), iOS(11, 0)]
        [Field("kCGImagePropertyAuxiliaryDataType", "__Internal")]
        unsafe CFStringRef* kCGImagePropertyAuxiliaryDataType { get; }
    }

    // @interface CIImage : NSObject <NSSecureCoding, NSCopying>
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface CIImage : INSSecureCoding, INSCopying
    {
        // +(CIImage * _Nonnull)imageWithCGImage:(CGImageRef _Nonnull)image;
        [Static]
        [Export("imageWithCGImage:")]
        unsafe CIImage ImageWithCGImage(CGImageRef* image);

        // +(CIImage * _Nonnull)imageWithCGImage:(CGImageRef _Nonnull)image options:(NSDictionary<CIImageOption,id> * _Nullable)options;
        [Static]
        [Export("imageWithCGImage:options:")]
        unsafe CIImage ImageWithCGImage(CGImageRef* image, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIImage * _Nonnull)imageWithCGLayer:(CGLayerRef _Nonnull)layer __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Static]
        [Export("imageWithCGLayer:")]
        unsafe CIImage ImageWithCGLayer(CGLayerRef* layer);

        // +(CIImage * _Nonnull)imageWithCGLayer:(CGLayerRef _Nonnull)layer options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Static]
        [Export("imageWithCGLayer:options:")]
        unsafe CIImage ImageWithCGLayer(CGLayerRef* layer, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIImage * _Nonnull)imageWithBitmapData:(NSData * _Nonnull)data bytesPerRow:(size_t)bytesPerRow size:(CGSize)size format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nullable)colorSpace;
        [Static]
        [Export("imageWithBitmapData:bytesPerRow:size:format:colorSpace:")]
        unsafe CIImage ImageWithBitmapData(NSData data, nuint bytesPerRow, CGSize size, int format, [NullAllowed] CGColorSpaceRef* colorSpace);

        // +(CIImage * _Nonnull)imageWithTexture:(unsigned int)name size:(CGSize)size flipped:(BOOL)flipped colorSpace:(CGColorSpaceRef _Nullable)colorSpace __attribute__((availability(ios, introduced=6_0, deprecated=12_0)));
        [Introduced(PlatformName.iOS, 6, 0, message: "Core Image OpenGL API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Core Image OpenGL API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Static]
        [Export("imageWithTexture:size:flipped:colorSpace:")]
        unsafe CIImage ImageWithTexture(uint name, CGSize size, bool flipped, [NullAllowed] CGColorSpaceRef* colorSpace);

        // +(CIImage * _Nonnull)imageWithTexture:(unsigned int)name size:(CGSize)size flipped:(BOOL)flipped options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Static]
        [Export("imageWithTexture:size:flipped:options:")]
        CIImage ImageWithTexture(uint name, CGSize size, bool flipped, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIImage * _Nullable)imageWithMTLTexture:(id<MTLTexture> _Nonnull)texture options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("imageWithMTLTexture:options:")]
        [return: NullAllowed]
        CIImage ImageWithMTLTexture(MTLTexture texture, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIImage * _Nullable)imageWithContentsOfURL:(NSURL * _Nonnull)url;
        [Static]
        [Export("imageWithContentsOfURL:")]
        [return: NullAllowed]
        CIImage ImageWithContentsOfURL(NSUrl url);

        // +(CIImage * _Nullable)imageWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDictionary<CIImageOption,id> * _Nullable)options;
        [Static]
        [Export("imageWithContentsOfURL:options:")]
        [return: NullAllowed]
        CIImage ImageWithContentsOfURL(NSUrl url, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIImage * _Nullable)imageWithData:(NSData * _Nonnull)data;
        [Static]
        [Export("imageWithData:")]
        [return: NullAllowed]
        CIImage ImageWithData(NSData data);

        // +(CIImage * _Nullable)imageWithData:(NSData * _Nonnull)data options:(NSDictionary<CIImageOption,id> * _Nullable)options;
        [Static]
        [Export("imageWithData:options:")]
        [return: NullAllowed]
        CIImage ImageWithData(NSData data, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIImage * _Nonnull)imageWithCVImageBuffer:(CVImageBufferRef _Nonnull)imageBuffer __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("imageWithCVImageBuffer:")]
        unsafe CIImage ImageWithCVImageBuffer(CVImageBufferRef* imageBuffer);

        // +(CIImage * _Nonnull)imageWithCVImageBuffer:(CVImageBufferRef _Nonnull)imageBuffer options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("imageWithCVImageBuffer:options:")]
        unsafe CIImage ImageWithCVImageBuffer(CVImageBufferRef* imageBuffer, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIImage * _Nonnull)imageWithCVPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Static]
        [Export("imageWithCVPixelBuffer:")]
        unsafe CIImage ImageWithCVPixelBuffer(CVPixelBufferRef* pixelBuffer);

        // +(CIImage * _Nonnull)imageWithCVPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Static]
        [Export("imageWithCVPixelBuffer:options:")]
        unsafe CIImage ImageWithCVPixelBuffer(CVPixelBufferRef* pixelBuffer, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIImage * _Nonnull)imageWithIOSurface:(IOSurfaceRef _Nonnull)surface __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Static]
        [Export("imageWithIOSurface:")]
        unsafe CIImage ImageWithIOSurface(IOSurfaceRef* surface);

        // +(CIImage * _Nonnull)imageWithIOSurface:(IOSurfaceRef _Nonnull)surface options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Static]
        [Export("imageWithIOSurface:options:")]
        unsafe CIImage ImageWithIOSurface(IOSurfaceRef* surface, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIImage * _Nonnull)imageWithColor:(CIColor * _Nonnull)color;
        [Static]
        [Export("imageWithColor:")]
        CIImage ImageWithColor(CIColor color);

        // +(CIImage * _Nonnull)emptyImage;
        [Static]
        [Export("emptyImage")]
        [Verify(MethodToProperty)]
        CIImage EmptyImage { get; }

        // -(instancetype _Nonnull)initWithCGImage:(CGImageRef _Nonnull)image;
        [Export("initWithCGImage:")]
        unsafe IntPtr Constructor(CGImageRef* image);

        // -(instancetype _Nonnull)initWithCGImage:(CGImageRef _Nonnull)image options:(NSDictionary<CIImageOption,id> * _Nullable)options;
        [Export("initWithCGImage:options:")]
        unsafe IntPtr Constructor(CGImageRef* image, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(instancetype _Nonnull)initWithCGLayer:(CGLayerRef _Nonnull)layer __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Export("initWithCGLayer:")]
        unsafe IntPtr Constructor(CGLayerRef* layer);

        // -(instancetype _Nonnull)initWithCGLayer:(CGLayerRef _Nonnull)layer options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Export("initWithCGLayer:options:")]
        unsafe IntPtr Constructor(CGLayerRef* layer, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data;
        [Export("initWithData:")]
        IntPtr Constructor(NSData data);

        // -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data options:(NSDictionary<CIImageOption,id> * _Nullable)options;
        [Export("initWithData:options:")]
        IntPtr Constructor(NSData data, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(instancetype _Nonnull)initWithBitmapData:(NSData * _Nonnull)data bytesPerRow:(size_t)bytesPerRow size:(CGSize)size format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nullable)colorSpace;
        [Export("initWithBitmapData:bytesPerRow:size:format:colorSpace:")]
        unsafe IntPtr Constructor(NSData data, nuint bytesPerRow, CGSize size, int format, [NullAllowed] CGColorSpaceRef* colorSpace);

        // -(instancetype _Nonnull)initWithTexture:(unsigned int)name size:(CGSize)size flipped:(BOOL)flipped colorSpace:(CGColorSpaceRef _Nullable)colorSpace __attribute__((availability(ios, introduced=6_0, deprecated=12_0)));
        [Introduced(PlatformName.iOS, 6, 0, message: "Core Image OpenGL API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Core Image OpenGL API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Export("initWithTexture:size:flipped:colorSpace:")]
        unsafe IntPtr Constructor(uint name, CGSize size, bool flipped, [NullAllowed] CGColorSpaceRef* colorSpace);

        // -(instancetype _Nonnull)initWithTexture:(unsigned int)name size:(CGSize)size flipped:(BOOL)flipped options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Export("initWithTexture:size:flipped:options:")]
        IntPtr Constructor(uint name, CGSize size, bool flipped, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(instancetype _Nullable)initWithMTLTexture:(id<MTLTexture> _Nonnull)texture options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("initWithMTLTexture:options:")]
        IntPtr Constructor(MTLTexture texture, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
        [Export("initWithContentsOfURL:")]
        IntPtr Constructor(NSUrl url);

        // -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDictionary<CIImageOption,id> * _Nullable)options;
        [Export("initWithContentsOfURL:options:")]
        IntPtr Constructor(NSUrl url, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(instancetype _Nonnull)initWithIOSurface:(IOSurfaceRef _Nonnull)surface __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("initWithIOSurface:")]
        unsafe IntPtr Constructor(IOSurfaceRef* surface);

        // -(instancetype _Nonnull)initWithIOSurface:(IOSurfaceRef _Nonnull)surface options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("initWithIOSurface:options:")]
        unsafe IntPtr Constructor(IOSurfaceRef* surface, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(instancetype _Nonnull)initWithCVImageBuffer:(CVImageBufferRef _Nonnull)imageBuffer __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("initWithCVImageBuffer:")]
        unsafe IntPtr Constructor(CVImageBufferRef* imageBuffer);

        // -(instancetype _Nonnull)initWithCVImageBuffer:(CVImageBufferRef _Nonnull)imageBuffer options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("initWithCVImageBuffer:options:")]
        unsafe IntPtr Constructor(CVImageBufferRef* imageBuffer, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(instancetype _Nonnull)initWithCVPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("initWithCVPixelBuffer:")]
        unsafe IntPtr Constructor(CVPixelBufferRef* pixelBuffer);

        // -(instancetype _Nonnull)initWithCVPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("initWithCVPixelBuffer:options:")]
        unsafe IntPtr Constructor(CVPixelBufferRef* pixelBuffer, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(instancetype _Nonnull)initWithColor:(CIColor * _Nonnull)color;
        [Export("initWithColor:")]
        IntPtr Constructor(CIColor color);

        // -(CIImage * _Nonnull)imageByApplyingTransform:(CGAffineTransform)matrix;
        [Export("imageByApplyingTransform:")]
        CIImage ImageByApplyingTransform(CGAffineTransform matrix);

        // -(CIImage * _Nonnull)imageByApplyingOrientation:(int)orientation __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Export("imageByApplyingOrientation:")]
        CIImage ImageByApplyingOrientation(int orientation);

        // -(CGAffineTransform)imageTransformForOrientation:(int)orientation __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Export("imageTransformForOrientation:")]
        CGAffineTransform ImageTransformForOrientation(int orientation);

        // -(CIImage * _Nonnull)imageByApplyingCGOrientation:(CGImagePropertyOrientation)orientation __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("imageByApplyingCGOrientation:")]
        CIImage ImageByApplyingCGOrientation(CGImagePropertyOrientation orientation);

        // -(CGAffineTransform)imageTransformForCGOrientation:(CGImagePropertyOrientation)orientation __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("imageTransformForCGOrientation:")]
        CGAffineTransform ImageTransformForCGOrientation(CGImagePropertyOrientation orientation);

        // -(CIImage * _Nonnull)imageByCompositingOverImage:(CIImage * _Nonnull)dest __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Export("imageByCompositingOverImage:")]
        CIImage ImageByCompositingOverImage(CIImage dest);

        // -(CIImage * _Nonnull)imageByCroppingToRect:(CGRect)rect;
        [Export("imageByCroppingToRect:")]
        CIImage ImageByCroppingToRect(CGRect rect);

        // -(CIImage * _Nonnull)imageByClampingToExtent __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Export("imageByClampingToExtent")]
        [Verify(MethodToProperty)]
        CIImage ImageByClampingToExtent { get; }

        // -(CIImage * _Nonnull)imageByClampingToRect:(CGRect)rect __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("imageByClampingToRect:")]
        CIImage ImageByClampingToRect(CGRect rect);

        // -(CIImage * _Nonnull)imageByApplyingFilter:(NSString * _Nonnull)filterName withInputParameters:(NSDictionary<NSString *,id> * _Nullable)params __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Export("imageByApplyingFilter:withInputParameters:")]
        CIImage ImageByApplyingFilter(string filterName, [NullAllowed] NSDictionary<NSString, NSObject> @params);

        // -(CIImage * _Nonnull)imageByApplyingFilter:(NSString * _Nonnull)filterName __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("imageByApplyingFilter:")]
        CIImage ImageByApplyingFilter(string filterName);

        // -(CIImage * _Nullable)imageByColorMatchingColorSpaceToWorkingSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("imageByColorMatchingColorSpaceToWorkingSpace:")]
        [return: NullAllowed]
        unsafe CIImage ImageByColorMatchingColorSpaceToWorkingSpace(CGColorSpaceRef* colorSpace);

        // -(CIImage * _Nullable)imageByColorMatchingWorkingSpaceToColorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("imageByColorMatchingWorkingSpaceToColorSpace:")]
        [return: NullAllowed]
        unsafe CIImage ImageByColorMatchingWorkingSpaceToColorSpace(CGColorSpaceRef* colorSpace);

        // -(CIImage * _Nonnull)imageByPremultiplyingAlpha __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("imageByPremultiplyingAlpha")]
        [Verify(MethodToProperty)]
        CIImage ImageByPremultiplyingAlpha { get; }

        // -(CIImage * _Nonnull)imageByUnpremultiplyingAlpha __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("imageByUnpremultiplyingAlpha")]
        [Verify(MethodToProperty)]
        CIImage ImageByUnpremultiplyingAlpha { get; }

        // -(CIImage * _Nonnull)imageBySettingAlphaOneInExtent:(CGRect)extent __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("imageBySettingAlphaOneInExtent:")]
        CIImage ImageBySettingAlphaOneInExtent(CGRect extent);

        // -(CIImage * _Nonnull)imageByApplyingGaussianBlurWithSigma:(double)sigma __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("imageByApplyingGaussianBlurWithSigma:")]
        CIImage ImageByApplyingGaussianBlurWithSigma(double sigma);

        // -(CIImage * _Nonnull)imageBySettingProperties:(NSDictionary * _Nonnull)properties __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("imageBySettingProperties:")]
        CIImage ImageBySettingProperties(NSDictionary properties);

        // -(CIImage * _Nonnull)imageBySamplingLinear __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("imageBySamplingLinear")]
        [Verify(MethodToProperty)]
        CIImage ImageBySamplingLinear { get; }

        // -(CIImage * _Nonnull)imageBySamplingNearest __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("imageBySamplingNearest")]
        [Verify(MethodToProperty)]
        CIImage ImageBySamplingNearest { get; }

        // -(CIImage * _Nonnull)imageByInsertingIntermediate __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Export("imageByInsertingIntermediate")]
        [Verify(MethodToProperty)]
        CIImage ImageByInsertingIntermediate { get; }

        // -(CIImage * _Nonnull)imageByInsertingIntermediate:(BOOL)cache __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Export("imageByInsertingIntermediate:")]
        CIImage ImageByInsertingIntermediate(bool cache);

        // @property (readonly, nonatomic) CGRect extent;
        [Export("extent")]
        CGRect Extent { get; }

        // @property (readonly, atomic) NSDictionary<NSString *,id> * _Nonnull properties __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("properties")]
        NSDictionary<NSString, NSObject> Properties { get; }

        // @property (readonly, atomic) CIFilterShape * _Nonnull definition __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Export("definition")]
        CIFilterShape Definition { get; }

        // @property (readonly, atomic) NSURL * _Nullable url __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [NullAllowed, Export("url")]
        NSUrl Url { get; }

        // @property (readonly, atomic) CGColorSpaceRef _Nullable colorSpace __attribute__((cf_returns_not_retained)) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [NullAllowed, Export("colorSpace")]
        unsafe CGColorSpaceRef* ColorSpace { get; }

        // @property (readonly, nonatomic) CVPixelBufferRef _Nullable pixelBuffer __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [NullAllowed, Export("pixelBuffer")]
        unsafe CVPixelBufferRef* PixelBuffer { get; }

        // @property (readonly, nonatomic) CGImageRef _Nullable CGImage __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [NullAllowed, Export("CGImage")]
        unsafe CGImageRef* CGImage { get; }

        // -(CGRect)regionOfInterestForImage:(CIImage * _Nonnull)image inRect:(CGRect)rect __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Export("regionOfInterestForImage:inRect:")]
        CGRect RegionOfInterestForImage(CIImage image, CGRect rect);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern CIFormat kCIFormatARGB8 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Field("kCIFormatARGB8", "__Internal")]
        int kCIFormatARGB8 { get; }

        // extern CIFormat kCIFormatBGRA8 __attribute__((visibility("default")));
        [Field("kCIFormatBGRA8", "__Internal")]
        int kCIFormatBGRA8 { get; }

        // extern CIFormat kCIFormatRGBA8 __attribute__((visibility("default")));
        [Field("kCIFormatRGBA8", "__Internal")]
        int kCIFormatRGBA8 { get; }

        // extern CIFormat kCIFormatABGR8 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatABGR8", "__Internal")]
        int kCIFormatABGR8 { get; }

        // extern CIFormat kCIFormatRGBAh __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Field("kCIFormatRGBAh", "__Internal")]
        int kCIFormatRGBAh { get; }

        // extern CIFormat kCIFormatRGBA16 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIFormatRGBA16", "__Internal")]
        int kCIFormatRGBA16 { get; }

        // extern CIFormat kCIFormatRGBAf __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIFormatRGBAf", "__Internal")]
        int kCIFormatRGBAf { get; }

        // extern CIFormat kCIFormatA8 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatA8", "__Internal")]
        int kCIFormatA8 { get; }

        // extern CIFormat kCIFormatA16 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatA16", "__Internal")]
        int kCIFormatA16 { get; }

        // extern CIFormat kCIFormatAh __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatAh", "__Internal")]
        int kCIFormatAh { get; }

        // extern CIFormat kCIFormatAf __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatAf", "__Internal")]
        int kCIFormatAf { get; }

        // extern CIFormat kCIFormatR8 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatR8", "__Internal")]
        int kCIFormatR8 { get; }

        // extern CIFormat kCIFormatR16 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatR16", "__Internal")]
        int kCIFormatR16 { get; }

        // extern CIFormat kCIFormatRh __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatRh", "__Internal")]
        int kCIFormatRh { get; }

        // extern CIFormat kCIFormatRf __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatRf", "__Internal")]
        int kCIFormatRf { get; }

        // extern CIFormat kCIFormatRG8 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatRG8", "__Internal")]
        int kCIFormatRG8 { get; }

        // extern CIFormat kCIFormatRG16 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatRG16", "__Internal")]
        int kCIFormatRG16 { get; }

        // extern CIFormat kCIFormatRGh __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatRGh", "__Internal")]
        int kCIFormatRGh { get; }

        // extern CIFormat kCIFormatRGf __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIFormatRGf", "__Internal")]
        int kCIFormatRGf { get; }

        // extern CIFormat kCIFormatL8 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIFormatL8", "__Internal")]
        int kCIFormatL8 { get; }

        // extern CIFormat kCIFormatL16 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIFormatL16", "__Internal")]
        int kCIFormatL16 { get; }

        // extern CIFormat kCIFormatLh __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIFormatLh", "__Internal")]
        int kCIFormatLh { get; }

        // extern CIFormat kCIFormatLf __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIFormatLf", "__Internal")]
        int kCIFormatLf { get; }

        // extern CIFormat kCIFormatLA8 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIFormatLA8", "__Internal")]
        int kCIFormatLA8 { get; }

        // extern CIFormat kCIFormatLA16 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIFormatLA16", "__Internal")]
        int kCIFormatLA16 { get; }

        // extern CIFormat kCIFormatLAh __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIFormatLAh", "__Internal")]
        int kCIFormatLAh { get; }

        // extern CIFormat kCIFormatLAf __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIFormatLAf", "__Internal")]
        int kCIFormatLAf { get; }

        // extern const CIImageOption _Nonnull kCIImageColorSpace __attribute__((visibility("default")));
        [Field("kCIImageColorSpace", "__Internal")]
        NSString kCIImageColorSpace { get; }

        // extern const CIImageOption _Nonnull kCIImageNearestSampling __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Field("kCIImageNearestSampling", "__Internal")]
        NSString kCIImageNearestSampling { get; }

        // extern const CIImageOption _Nonnull kCIImageProperties __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCIImageProperties", "__Internal")]
        NSString kCIImageProperties { get; }

        // extern const CIImageOption _Nonnull kCIImageApplyOrientationProperty __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Field("kCIImageApplyOrientationProperty", "__Internal")]
        NSString kCIImageApplyOrientationProperty { get; }

        // extern const CIImageOption _Nonnull kCIImageTextureTarget __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCIImageTextureTarget", "__Internal")]
        NSString kCIImageTextureTarget { get; }

        // extern const CIImageOption _Nonnull kCIImageTextureFormat __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCIImageTextureFormat", "__Internal")]
        NSString kCIImageTextureFormat { get; }

        // extern const CIImageOption _Nonnull kCIImageAuxiliaryDepth __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Field("kCIImageAuxiliaryDepth", "__Internal")]
        NSString kCIImageAuxiliaryDepth { get; }

        // extern const CIImageOption _Nonnull kCIImageAuxiliaryDisparity __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Field("kCIImageAuxiliaryDisparity", "__Internal")]
        NSString kCIImageAuxiliaryDisparity { get; }

        // extern const CIImageOption _Nonnull kCIImageAuxiliaryPortraitEffectsMatte __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Field("kCIImageAuxiliaryPortraitEffectsMatte", "__Internal")]
        NSString kCIImageAuxiliaryPortraitEffectsMatte { get; }
    }

    // @interface AutoAdjustment (CIImage)
    [Category]
    [BaseType(typeof(CIImage))]
    interface CIImage_AutoAdjustment
    {
        // -(NSArray<CIFilter *> * _Nonnull)autoAdjustmentFilters __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("autoAdjustmentFilters")]
        [Verify(MethodToProperty)]
        CIFilter[] AutoAdjustmentFilters { get; }

        // -(NSArray<CIFilter *> * _Nonnull)autoAdjustmentFiltersWithOptions:(NSDictionary<CIImageAutoAdjustmentOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("autoAdjustmentFiltersWithOptions:")]
        CIFilter[] AutoAdjustmentFiltersWithOptions([NullAllowed] NSDictionary<NSString, NSObject> options);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CIImageAutoAdjustmentOption _Nonnull kCIImageAutoAdjustEnhance __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCIImageAutoAdjustEnhance", "__Internal")]
        NSString kCIImageAutoAdjustEnhance { get; }

        // extern const CIImageAutoAdjustmentOption _Nonnull kCIImageAutoAdjustRedEye __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCIImageAutoAdjustRedEye", "__Internal")]
        NSString kCIImageAutoAdjustRedEye { get; }

        // extern const CIImageAutoAdjustmentOption _Nonnull kCIImageAutoAdjustFeatures __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCIImageAutoAdjustFeatures", "__Internal")]
        NSString kCIImageAutoAdjustFeatures { get; }

        // extern const CIImageAutoAdjustmentOption _Nonnull kCIImageAutoAdjustCrop __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Field("kCIImageAutoAdjustCrop", "__Internal")]
        NSString kCIImageAutoAdjustCrop { get; }

        // extern const CIImageAutoAdjustmentOption _Nonnull kCIImageAutoAdjustLevel __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Field("kCIImageAutoAdjustLevel", "__Internal")]
        NSString kCIImageAutoAdjustLevel { get; }
    }

    // @interface AVDepthData (CIImage)
    [Category]
    [BaseType(typeof(CIImage))]
    interface CIImage_AVDepthData
    {
        // @property (readonly, nonatomic) AVDepthData * _Nullable depthData __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [NullAllowed, Export("depthData")]
        AVDepthData DepthData { get; }

        // -(instancetype _Nullable)initWithDepthData:(AVDepthData * _Nonnull)data options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("initWithDepthData:options:")]
        IntPtr Constructor(AVDepthData data, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(instancetype _Nullable)initWithDepthData:(AVDepthData * _Nonnull)data __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("initWithDepthData:")]
        IntPtr Constructor(AVDepthData data);

        // +(instancetype _Nullable)imageWithDepthData:(AVDepthData * _Nonnull)data options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Static]
        [Export("imageWithDepthData:options:")]
        [return: NullAllowed]
        CIImage ImageWithDepthData(AVDepthData data, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(instancetype _Nullable)imageWithDepthData:(AVDepthData * _Nonnull)data __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Static]
        [Export("imageWithDepthData:")]
        [return: NullAllowed]
        CIImage ImageWithDepthData(AVDepthData data);
    }

    // @interface AVPortraitEffectsMatte (CIImage)
    [Category]
    [BaseType(typeof(CIImage))]
    interface CIImage_AVPortraitEffectsMatte
    {
        // @property (readonly, nonatomic) AVPortraitEffectsMatte * _Nullable portraitEffectsMatte __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [NullAllowed, Export("portraitEffectsMatte")]
        AVPortraitEffectsMatte PortraitEffectsMatte { get; }

        // -(instancetype _Nullable)initWithPortaitEffectsMatte:(AVPortraitEffectsMatte * _Nonnull)matte options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Export("initWithPortaitEffectsMatte:options:")]
        IntPtr Constructor(AVPortraitEffectsMatte matte, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(instancetype _Nullable)initWithPortaitEffectsMatte:(AVPortraitEffectsMatte * _Nonnull)matte __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("initWithPortaitEffectsMatte:")]
        IntPtr Constructor(AVPortraitEffectsMatte matte);

        // +(instancetype _Nullable)imageWithPortaitEffectsMatte:(AVPortraitEffectsMatte * _Nonnull)matte options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Static]
        [Export("imageWithPortaitEffectsMatte:options:")]
        [return: NullAllowed]
        CIImage ImageWithPortaitEffectsMatte(AVPortraitEffectsMatte matte, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(instancetype _Nullable)imageWithPortaitEffectsMatte:(AVPortraitEffectsMatte * _Nonnull)matte __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Static]
        [Export("imageWithPortaitEffectsMatte:")]
        [return: NullAllowed]
        CIImage ImageWithPortaitEffectsMatte(AVPortraitEffectsMatte matte);
    }

    // @interface CIContext : NSObject
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface CIContext
    {
        // +(CIContext * _Nonnull)contextWithCGContext:(CGContextRef _Nonnull)cgctx options:(NSDictionary<CIContextOption,id> * _Nullable)options __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("contextWithCGContext:options:")]
        unsafe CIContext ContextWithCGContext(CGContextRef* cgctx, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIContext * _Nonnull)contextWithOptions:(NSDictionary<CIContextOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Static]
        [Export("contextWithOptions:")]
        CIContext ContextWithOptions([NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIContext * _Nonnull)context __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Static]
        [Export("context")]
        [Verify(MethodToProperty)]
        CIContext Context { get; }

        // -(instancetype _Nonnull)initWithOptions:(NSDictionary<CIContextOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("initWithOptions:")]
        IntPtr Constructor([NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIContext * _Nonnull)contextWithEAGLContext:(EAGLContext * _Nonnull)eaglContext __attribute__((availability(ios, introduced=5_0, deprecated=12_0)));
        [Introduced(PlatformName.iOS, 5, 0, message: "Core Image OpenGLES API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Core Image OpenGLES API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Static]
        [Export("contextWithEAGLContext:")]
        CIContext ContextWithEAGLContext(EAGLContext eaglContext);

        // +(CIContext * _Nonnull)contextWithEAGLContext:(EAGLContext * _Nonnull)eaglContext options:(NSDictionary<CIContextOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5_0, deprecated=12_0)));
        [Introduced(PlatformName.iOS, 5, 0, message: "Core Image OpenGLES API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Core Image OpenGLES API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Static]
        [Export("contextWithEAGLContext:options:")]
        CIContext ContextWithEAGLContext(EAGLContext eaglContext, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // +(CIContext * _Nonnull)contextWithMTLDevice:(id<MTLDevice> _Nonnull)device __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("contextWithMTLDevice:")]
        CIContext ContextWithMTLDevice(MTLDevice device);

        // +(CIContext * _Nonnull)contextWithMTLDevice:(id<MTLDevice> _Nonnull)device options:(NSDictionary<CIContextOption,id> * _Nullable)options __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("contextWithMTLDevice:options:")]
        CIContext ContextWithMTLDevice(MTLDevice device, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // @property (readonly, nonatomic) CGColorSpaceRef _Nullable workingColorSpace __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [NullAllowed, Export("workingColorSpace")]
        unsafe CGColorSpaceRef* WorkingColorSpace { get; }

        // @property (readonly, nonatomic) CIFormat workingFormat __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("workingFormat")]
        int WorkingFormat { get; }

        // -(void)drawImage:(CIImage * _Nonnull)image atPoint:(CGPoint)atPoint fromRect:(CGRect)fromRect __attribute__((availability(ios, introduced=5_0, deprecated=6_0)));
        [Introduced(PlatformName.iOS, 5, 0)]
        [Deprecated(PlatformName.iOS, 6, 0)]
        [Export("drawImage:atPoint:fromRect:")]
        void DrawImage(CIImage image, CGPoint atPoint, CGRect fromRect);

        // -(void)drawImage:(CIImage * _Nonnull)image inRect:(CGRect)inRect fromRect:(CGRect)fromRect;
        [Export("drawImage:inRect:fromRect:")]
        void DrawImage(CIImage image, CGRect inRect, CGRect fromRect);

        // -(CGImageRef _Nullable)createCGImage:(CIImage * _Nonnull)image fromRect:(CGRect)fromRect __attribute__((cf_returns_retained));
        [Export("createCGImage:fromRect:")]
        [return: NullAllowed]
        unsafe CGImageRef* CreateCGImage(CIImage image, CGRect fromRect);

        // -(CGImageRef _Nullable)createCGImage:(CIImage * _Nonnull)image fromRect:(CGRect)fromRect format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nullable)colorSpace __attribute__((cf_returns_retained));
        [Export("createCGImage:fromRect:format:colorSpace:")]
        [return: NullAllowed]
        unsafe CGImageRef* CreateCGImage(CIImage image, CGRect fromRect, int format, [NullAllowed] CGColorSpaceRef* colorSpace);

        // -(CGImageRef _Nullable)createCGImage:(CIImage * _Nonnull)image fromRect:(CGRect)fromRect format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nullable)colorSpace deferred:(BOOL)deferred __attribute__((availability(ios, introduced=10_0))) __attribute__((cf_returns_retained));
        [iOS(10, 0)]
        [Export("createCGImage:fromRect:format:colorSpace:deferred:")]
        [return: NullAllowed]
        unsafe CGImageRef* CreateCGImage(CIImage image, CGRect fromRect, int format, [NullAllowed] CGColorSpaceRef* colorSpace, bool deferred);

        // -(CGLayerRef _Nullable)createCGLayerWithSize:(CGSize)size info:(CFDictionaryRef _Nullable)info __attribute__((availability(ios, unavailable))) __attribute__((cf_returns_retained));
        [NoiOS]
        [Export("createCGLayerWithSize:info:")]
        [return: NullAllowed]
        unsafe CGLayerRef* CreateCGLayerWithSize(CGSize size, [NullAllowed] CFDictionaryRef* info);

        // -(void)render:(CIImage * _Nonnull)image toBitmap:(void * _Nonnull)data rowBytes:(ptrdiff_t)rowBytes bounds:(CGRect)bounds format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nullable)colorSpace;
        [Export("render:toBitmap:rowBytes:bounds:format:colorSpace:")]
        unsafe void Render(CIImage image, void* data, IntPtr rowBytes, CGRect bounds, int format, [NullAllowed] CGColorSpaceRef* colorSpace);

        // -(void)render:(CIImage * _Nonnull)image toIOSurface:(IOSurfaceRef _Nonnull)surface bounds:(CGRect)bounds colorSpace:(CGColorSpaceRef _Nullable)colorSpace __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("render:toIOSurface:bounds:colorSpace:")]
        unsafe void Render(CIImage image, IOSurfaceRef* surface, CGRect bounds, [NullAllowed] CGColorSpaceRef* colorSpace);

        // -(void)render:(CIImage * _Nonnull)image toCVPixelBuffer:(CVPixelBufferRef _Nonnull)buffer __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("render:toCVPixelBuffer:")]
        unsafe void Render(CIImage image, CVPixelBufferRef* buffer);

        // -(void)render:(CIImage * _Nonnull)image toCVPixelBuffer:(CVPixelBufferRef _Nonnull)buffer bounds:(CGRect)bounds colorSpace:(CGColorSpaceRef _Nullable)colorSpace __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("render:toCVPixelBuffer:bounds:colorSpace:")]
        unsafe void Render(CIImage image, CVPixelBufferRef* buffer, CGRect bounds, [NullAllowed] CGColorSpaceRef* colorSpace);

        // -(void)render:(CIImage * _Nonnull)image toMTLTexture:(id<MTLTexture> _Nonnull)texture commandBuffer:(id<MTLCommandBuffer> _Nullable)commandBuffer bounds:(CGRect)bounds colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("render:toMTLTexture:commandBuffer:bounds:colorSpace:")]
        unsafe void Render(CIImage image, MTLTexture texture, [NullAllowed] MTLCommandBuffer commandBuffer, CGRect bounds, CGColorSpaceRef* colorSpace);

        // -(void)reclaimResources __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Export("reclaimResources")]
        void ReclaimResources();

        // -(void)clearCaches __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("clearCaches")]
        void ClearCaches();

        // -(CGSize)inputImageMaximumSize __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("inputImageMaximumSize")]
        [Verify(MethodToProperty)]
        CGSize InputImageMaximumSize { get; }

        // -(CGSize)outputImageMaximumSize __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("outputImageMaximumSize")]
        [Verify(MethodToProperty)]
        CGSize OutputImageMaximumSize { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CIContextOption _Nonnull kCIContextOutputColorSpace __attribute__((visibility("default")));
        [Field("kCIContextOutputColorSpace", "__Internal")]
        NSString kCIContextOutputColorSpace { get; }

        // extern const CIContextOption _Nonnull kCIContextWorkingColorSpace __attribute__((visibility("default")));
        [Field("kCIContextWorkingColorSpace", "__Internal")]
        NSString kCIContextWorkingColorSpace { get; }

        // extern const CIContextOption _Nonnull kCIContextWorkingFormat __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Field("kCIContextWorkingFormat", "__Internal")]
        NSString kCIContextWorkingFormat { get; }

        // extern const CIContextOption _Nonnull kCIContextHighQualityDownsample __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIContextHighQualityDownsample", "__Internal")]
        NSString kCIContextHighQualityDownsample { get; }

        // extern const CIContextOption _Nonnull kCIContextOutputPremultiplied __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIContextOutputPremultiplied", "__Internal")]
        NSString kCIContextOutputPremultiplied { get; }

        // extern const CIContextOption _Nonnull kCIContextCacheIntermediates __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIContextCacheIntermediates", "__Internal")]
        NSString kCIContextCacheIntermediates { get; }

        // extern const CIContextOption _Nonnull kCIContextUseSoftwareRenderer __attribute__((visibility("default")));
        [Field("kCIContextUseSoftwareRenderer", "__Internal")]
        NSString kCIContextUseSoftwareRenderer { get; }

        // extern const CIContextOption _Nonnull kCIContextPriorityRequestLow __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Field("kCIContextPriorityRequestLow", "__Internal")]
        NSString kCIContextPriorityRequestLow { get; }
    }

    // @interface OfflineGPUSupport (CIContext)
    [Category]
    [BaseType(typeof(CIContext))]
    interface CIContext_OfflineGPUSupport
    {
        // +(unsigned int)offlineGPUCount __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Static]
        [Export("offlineGPUCount")]
        [Verify(MethodToProperty)]
        uint OfflineGPUCount { get; }
    }

    // @interface ImageRepresentation (CIContext)
    [Category]
    [BaseType(typeof(CIContext))]
    interface CIContext_ImageRepresentation
    {
        // -(NSData * _Nullable)TIFFRepresentationOfImage:(CIImage * _Nonnull)image format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("TIFFRepresentationOfImage:format:colorSpace:options:")]
        [return: NullAllowed]
        unsafe NSData TIFFRepresentationOfImage(CIImage image, int format, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options);

        // -(NSData * _Nullable)JPEGRepresentationOfImage:(CIImage * _Nonnull)image colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("JPEGRepresentationOfImage:colorSpace:options:")]
        [return: NullAllowed]
        unsafe NSData JPEGRepresentationOfImage(CIImage image, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options);

        // -(NSData * _Nullable)HEIFRepresentationOfImage:(CIImage * _Nonnull)image format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("HEIFRepresentationOfImage:format:colorSpace:options:")]
        [return: NullAllowed]
        unsafe NSData HEIFRepresentationOfImage(CIImage image, int format, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options);

        // -(NSData * _Nullable)PNGRepresentationOfImage:(CIImage * _Nonnull)image format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("PNGRepresentationOfImage:format:colorSpace:options:")]
        [return: NullAllowed]
        unsafe NSData PNGRepresentationOfImage(CIImage image, int format, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options);

        // -(BOOL)writeTIFFRepresentationOfImage:(CIImage * _Nonnull)image toURL:(NSURL * _Nonnull)url format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options error:(NSError * _Nullable * _Nullable)errorPtr __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("writeTIFFRepresentationOfImage:toURL:format:colorSpace:options:error:")]
        unsafe bool WriteTIFFRepresentationOfImage(CIImage image, NSUrl url, int format, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError errorPtr);

        // -(BOOL)writePNGRepresentationOfImage:(CIImage * _Nonnull)image toURL:(NSURL * _Nonnull)url format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options error:(NSError * _Nullable * _Nullable)errorPtr __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("writePNGRepresentationOfImage:toURL:format:colorSpace:options:error:")]
        unsafe bool WritePNGRepresentationOfImage(CIImage image, NSUrl url, int format, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError errorPtr);

        // -(BOOL)writeJPEGRepresentationOfImage:(CIImage * _Nonnull)image toURL:(NSURL * _Nonnull)url colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options error:(NSError * _Nullable * _Nullable)errorPtr __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("writeJPEGRepresentationOfImage:toURL:colorSpace:options:error:")]
        unsafe bool WriteJPEGRepresentationOfImage(CIImage image, NSUrl url, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError errorPtr);

        // -(BOOL)writeHEIFRepresentationOfImage:(CIImage * _Nonnull)image toURL:(NSURL * _Nonnull)url format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace options:(NSDictionary<CIImageRepresentationOption,id> * _Nonnull)options error:(NSError * _Nullable * _Nullable)errorPtr __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("writeHEIFRepresentationOfImage:toURL:format:colorSpace:options:error:")]
        unsafe bool WriteHEIFRepresentationOfImage(CIImage image, NSUrl url, int format, CGColorSpaceRef* colorSpace, NSDictionary<NSString, NSObject> options, [NullAllowed] out NSError errorPtr);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CIImageRepresentationOption _Nonnull kCIImageRepresentationAVDepthData __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Field("kCIImageRepresentationAVDepthData", "__Internal")]
        NSString kCIImageRepresentationAVDepthData { get; }

        // extern const CIImageRepresentationOption _Nonnull kCIImageRepresentationDepthImage __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Field("kCIImageRepresentationDepthImage", "__Internal")]
        NSString kCIImageRepresentationDepthImage { get; }

        // extern const CIImageRepresentationOption _Nonnull kCIImageRepresentationDisparityImage __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Field("kCIImageRepresentationDisparityImage", "__Internal")]
        NSString kCIImageRepresentationDisparityImage { get; }

        // extern const CIImageRepresentationOption _Nonnull kCIImageRepresentationAVPortraitEffectsMatte __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Field("kCIImageRepresentationAVPortraitEffectsMatte", "__Internal")]
        NSString kCIImageRepresentationAVPortraitEffectsMatte { get; }

        // extern const CIImageRepresentationOption _Nonnull kCIImageRepresentationPortraitEffectsMatteImage __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Field("kCIImageRepresentationPortraitEffectsMatteImage", "__Internal")]
        NSString kCIImageRepresentationPortraitEffectsMatteImage { get; }
    }

    // @interface CIDepthBlurEffect (CIContext)
    [Category]
    [BaseType(typeof(CIContext))]
    interface CIContext_CIDepthBlurEffect
    {
        // -(CIFilter * _Nullable)depthBlurEffectFilterForImageURL:(NSURL * _Nonnull)url options:(NSDictionary * _Nullable)options __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Export("depthBlurEffectFilterForImageURL:options:")]
        [return: NullAllowed]
        CIFilter DepthBlurEffectFilterForImageURL(NSUrl url, [NullAllowed] NSDictionary options);

        // -(CIFilter * _Nullable)depthBlurEffectFilterForImageData:(NSData * _Nonnull)data options:(NSDictionary * _Nullable)options __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Export("depthBlurEffectFilterForImageData:options:")]
        [return: NullAllowed]
        CIFilter DepthBlurEffectFilterForImageData(NSData data, [NullAllowed] NSDictionary options);

        // -(CIFilter * _Nullable)depthBlurEffectFilterForImage:(CIImage * _Nonnull)image disparityImage:(CIImage * _Nonnull)disparityImage portraitEffectsMatte:(CIImage * _Nullable)portraitEffectsMatte orientation:(CGImagePropertyOrientation)orientation options:(NSDictionary * _Nullable)options __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Export("depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:orientation:options:")]
        [return: NullAllowed]
        CIFilter DepthBlurEffectFilterForImage(CIImage image, CIImage disparityImage, [NullAllowed] CIImage portraitEffectsMatte, CGImagePropertyOrientation orientation, [NullAllowed] NSDictionary options);
    }

    // @protocol CIFilterConstructor
    [Protocol, Model]
    interface CIFilterConstructor
    {
        // @required -(CIFilter * _Nullable)filterWithName:(NSString * _Nonnull)name;
        [Abstract]
        [Export("filterWithName:")]
        [return: NullAllowed]
        CIFilter FilterWithName(string name);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull kCIAttributeFilterName __attribute__((visibility("default")));
        [Field("kCIAttributeFilterName", "__Internal")]
        NSString kCIAttributeFilterName { get; }

        // extern NSString *const _Nonnull kCIAttributeFilterDisplayName __attribute__((visibility("default")));
        [Field("kCIAttributeFilterDisplayName", "__Internal")]
        NSString kCIAttributeFilterDisplayName { get; }

        // extern NSString *const _Nonnull kCIAttributeDescription __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIAttributeDescription", "__Internal")]
        NSString kCIAttributeDescription { get; }

        // extern NSString *const _Nonnull kCIAttributeFilterAvailable_Mac __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIAttributeFilterAvailable_Mac", "__Internal")]
        NSString kCIAttributeFilterAvailable_Mac { get; }

        // extern NSString *const _Nonnull kCIAttributeFilterAvailable_iOS __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIAttributeFilterAvailable_iOS", "__Internal")]
        NSString kCIAttributeFilterAvailable_iOS { get; }

        // extern NSString *const _Nonnull kCIAttributeReferenceDocumentation __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIAttributeReferenceDocumentation", "__Internal")]
        NSString kCIAttributeReferenceDocumentation { get; }

        // extern NSString *const _Nonnull kCIAttributeFilterCategories __attribute__((visibility("default")));
        [Field("kCIAttributeFilterCategories", "__Internal")]
        NSString kCIAttributeFilterCategories { get; }

        // extern NSString *const _Nonnull kCIAttributeClass __attribute__((visibility("default")));
        [Field("kCIAttributeClass", "__Internal")]
        NSString kCIAttributeClass { get; }

        // extern NSString *const _Nonnull kCIAttributeType __attribute__((visibility("default")));
        [Field("kCIAttributeType", "__Internal")]
        NSString kCIAttributeType { get; }

        // extern NSString *const _Nonnull kCIAttributeMin __attribute__((visibility("default")));
        [Field("kCIAttributeMin", "__Internal")]
        NSString kCIAttributeMin { get; }

        // extern NSString *const _Nonnull kCIAttributeMax __attribute__((visibility("default")));
        [Field("kCIAttributeMax", "__Internal")]
        NSString kCIAttributeMax { get; }

        // extern NSString *const _Nonnull kCIAttributeSliderMin __attribute__((visibility("default")));
        [Field("kCIAttributeSliderMin", "__Internal")]
        NSString kCIAttributeSliderMin { get; }

        // extern NSString *const _Nonnull kCIAttributeSliderMax __attribute__((visibility("default")));
        [Field("kCIAttributeSliderMax", "__Internal")]
        NSString kCIAttributeSliderMax { get; }

        // extern NSString *const _Nonnull kCIAttributeDefault __attribute__((visibility("default")));
        [Field("kCIAttributeDefault", "__Internal")]
        NSString kCIAttributeDefault { get; }

        // extern NSString *const _Nonnull kCIAttributeIdentity __attribute__((visibility("default")));
        [Field("kCIAttributeIdentity", "__Internal")]
        NSString kCIAttributeIdentity { get; }

        // extern NSString *const _Nonnull kCIAttributeName __attribute__((visibility("default")));
        [Field("kCIAttributeName", "__Internal")]
        NSString kCIAttributeName { get; }

        // extern NSString *const _Nonnull kCIAttributeDisplayName __attribute__((visibility("default")));
        [Field("kCIAttributeDisplayName", "__Internal")]
        NSString kCIAttributeDisplayName { get; }

        // extern NSString *const _Nonnull kCIUIParameterSet __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIUIParameterSet", "__Internal")]
        NSString kCIUIParameterSet { get; }

        // extern NSString *const _Nonnull kCIUISetBasic __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIUISetBasic", "__Internal")]
        NSString kCIUISetBasic { get; }

        // extern NSString *const _Nonnull kCIUISetIntermediate __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIUISetIntermediate", "__Internal")]
        NSString kCIUISetIntermediate { get; }

        // extern NSString *const _Nonnull kCIUISetAdvanced __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIUISetAdvanced", "__Internal")]
        NSString kCIUISetAdvanced { get; }

        // extern NSString *const _Nonnull kCIUISetDevelopment __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIUISetDevelopment", "__Internal")]
        NSString kCIUISetDevelopment { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeTime __attribute__((visibility("default")));
        [Field("kCIAttributeTypeTime", "__Internal")]
        NSString kCIAttributeTypeTime { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeScalar __attribute__((visibility("default")));
        [Field("kCIAttributeTypeScalar", "__Internal")]
        NSString kCIAttributeTypeScalar { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeDistance __attribute__((visibility("default")));
        [Field("kCIAttributeTypeDistance", "__Internal")]
        NSString kCIAttributeTypeDistance { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeAngle __attribute__((visibility("default")));
        [Field("kCIAttributeTypeAngle", "__Internal")]
        NSString kCIAttributeTypeAngle { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeBoolean __attribute__((visibility("default")));
        [Field("kCIAttributeTypeBoolean", "__Internal")]
        NSString kCIAttributeTypeBoolean { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeInteger __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCIAttributeTypeInteger", "__Internal")]
        NSString kCIAttributeTypeInteger { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeCount __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCIAttributeTypeCount", "__Internal")]
        NSString kCIAttributeTypeCount { get; }

        // extern NSString *const _Nonnull kCIAttributeTypePosition __attribute__((visibility("default")));
        [Field("kCIAttributeTypePosition", "__Internal")]
        NSString kCIAttributeTypePosition { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeOffset __attribute__((visibility("default")));
        [Field("kCIAttributeTypeOffset", "__Internal")]
        NSString kCIAttributeTypeOffset { get; }

        // extern NSString *const _Nonnull kCIAttributeTypePosition3 __attribute__((visibility("default")));
        [Field("kCIAttributeTypePosition3", "__Internal")]
        NSString kCIAttributeTypePosition3 { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeRectangle __attribute__((visibility("default")));
        [Field("kCIAttributeTypeRectangle", "__Internal")]
        NSString kCIAttributeTypeRectangle { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeOpaqueColor __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIAttributeTypeOpaqueColor", "__Internal")]
        NSString kCIAttributeTypeOpaqueColor { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeColor __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCIAttributeTypeColor", "__Internal")]
        NSString kCIAttributeTypeColor { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeGradient __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIAttributeTypeGradient", "__Internal")]
        NSString kCIAttributeTypeGradient { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeImage __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCIAttributeTypeImage", "__Internal")]
        NSString kCIAttributeTypeImage { get; }

        // extern NSString *const _Nonnull kCIAttributeTypeTransform __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCIAttributeTypeTransform", "__Internal")]
        NSString kCIAttributeTypeTransform { get; }

        // extern NSString *const _Nonnull kCICategoryDistortionEffect __attribute__((visibility("default")));
        [Field("kCICategoryDistortionEffect", "__Internal")]
        NSString kCICategoryDistortionEffect { get; }

        // extern NSString *const _Nonnull kCICategoryGeometryAdjustment __attribute__((visibility("default")));
        [Field("kCICategoryGeometryAdjustment", "__Internal")]
        NSString kCICategoryGeometryAdjustment { get; }

        // extern NSString *const _Nonnull kCICategoryCompositeOperation __attribute__((visibility("default")));
        [Field("kCICategoryCompositeOperation", "__Internal")]
        NSString kCICategoryCompositeOperation { get; }

        // extern NSString *const _Nonnull kCICategoryHalftoneEffect __attribute__((visibility("default")));
        [Field("kCICategoryHalftoneEffect", "__Internal")]
        NSString kCICategoryHalftoneEffect { get; }

        // extern NSString *const _Nonnull kCICategoryColorAdjustment __attribute__((visibility("default")));
        [Field("kCICategoryColorAdjustment", "__Internal")]
        NSString kCICategoryColorAdjustment { get; }

        // extern NSString *const _Nonnull kCICategoryColorEffect __attribute__((visibility("default")));
        [Field("kCICategoryColorEffect", "__Internal")]
        NSString kCICategoryColorEffect { get; }

        // extern NSString *const _Nonnull kCICategoryTransition __attribute__((visibility("default")));
        [Field("kCICategoryTransition", "__Internal")]
        NSString kCICategoryTransition { get; }

        // extern NSString *const _Nonnull kCICategoryTileEffect __attribute__((visibility("default")));
        [Field("kCICategoryTileEffect", "__Internal")]
        NSString kCICategoryTileEffect { get; }

        // extern NSString *const _Nonnull kCICategoryGenerator __attribute__((visibility("default")));
        [Field("kCICategoryGenerator", "__Internal")]
        NSString kCICategoryGenerator { get; }

        // extern NSString *const _Nonnull kCICategoryReduction __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCICategoryReduction", "__Internal")]
        NSString kCICategoryReduction { get; }

        // extern NSString *const _Nonnull kCICategoryGradient __attribute__((visibility("default")));
        [Field("kCICategoryGradient", "__Internal")]
        NSString kCICategoryGradient { get; }

        // extern NSString *const _Nonnull kCICategoryStylize __attribute__((visibility("default")));
        [Field("kCICategoryStylize", "__Internal")]
        NSString kCICategoryStylize { get; }

        // extern NSString *const _Nonnull kCICategorySharpen __attribute__((visibility("default")));
        [Field("kCICategorySharpen", "__Internal")]
        NSString kCICategorySharpen { get; }

        // extern NSString *const _Nonnull kCICategoryBlur __attribute__((visibility("default")));
        [Field("kCICategoryBlur", "__Internal")]
        NSString kCICategoryBlur { get; }

        // extern NSString *const _Nonnull kCICategoryVideo __attribute__((visibility("default")));
        [Field("kCICategoryVideo", "__Internal")]
        NSString kCICategoryVideo { get; }

        // extern NSString *const _Nonnull kCICategoryStillImage __attribute__((visibility("default")));
        [Field("kCICategoryStillImage", "__Internal")]
        NSString kCICategoryStillImage { get; }

        // extern NSString *const _Nonnull kCICategoryInterlaced __attribute__((visibility("default")));
        [Field("kCICategoryInterlaced", "__Internal")]
        NSString kCICategoryInterlaced { get; }

        // extern NSString *const _Nonnull kCICategoryNonSquarePixels __attribute__((visibility("default")));
        [Field("kCICategoryNonSquarePixels", "__Internal")]
        NSString kCICategoryNonSquarePixels { get; }

        // extern NSString *const _Nonnull kCICategoryHighDynamicRange __attribute__((visibility("default")));
        [Field("kCICategoryHighDynamicRange", "__Internal")]
        NSString kCICategoryHighDynamicRange { get; }

        // extern NSString *const _Nonnull kCICategoryBuiltIn __attribute__((visibility("default")));
        [Field("kCICategoryBuiltIn", "__Internal")]
        NSString kCICategoryBuiltIn { get; }

        // extern NSString *const _Nonnull kCICategoryFilterGenerator __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCICategoryFilterGenerator", "__Internal")]
        NSString kCICategoryFilterGenerator { get; }

        // extern NSString *const _Nonnull kCIApplyOptionExtent __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCIApplyOptionExtent", "__Internal")]
        NSString kCIApplyOptionExtent { get; }

        // extern NSString *const _Nonnull kCIApplyOptionDefinition __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCIApplyOptionDefinition", "__Internal")]
        NSString kCIApplyOptionDefinition { get; }

        // extern NSString *const _Nonnull kCIApplyOptionUserInfo __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCIApplyOptionUserInfo", "__Internal")]
        NSString kCIApplyOptionUserInfo { get; }

        // extern NSString *const _Nonnull kCIApplyOptionColorSpace __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Field("kCIApplyOptionColorSpace", "__Internal")]
        NSString kCIApplyOptionColorSpace { get; }

        // extern NSString *const _Nonnull kCIOutputImageKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCIOutputImageKey", "__Internal")]
        NSString kCIOutputImageKey { get; }

        // extern NSString *const _Nonnull kCIInputBackgroundImageKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCIInputBackgroundImageKey", "__Internal")]
        NSString kCIInputBackgroundImageKey { get; }

        // extern NSString *const _Nonnull kCIInputImageKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("kCIInputImageKey", "__Internal")]
        NSString kCIInputImageKey { get; }

        // extern NSString *const _Nonnull kCIInputDepthImageKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Field("kCIInputDepthImageKey", "__Internal")]
        NSString kCIInputDepthImageKey { get; }

        // extern NSString *const _Nonnull kCIInputDisparityImageKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Field("kCIInputDisparityImageKey", "__Internal")]
        NSString kCIInputDisparityImageKey { get; }

        // extern NSString *const _Nonnull kCIInputAmountKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Field("kCIInputAmountKey", "__Internal")]
        NSString kCIInputAmountKey { get; }

        // extern NSString *const _Nonnull kCIInputTimeKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputTimeKey", "__Internal")]
        NSString kCIInputTimeKey { get; }

        // extern NSString *const _Nonnull kCIInputTransformKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputTransformKey", "__Internal")]
        NSString kCIInputTransformKey { get; }

        // extern NSString *const _Nonnull kCIInputScaleKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputScaleKey", "__Internal")]
        NSString kCIInputScaleKey { get; }

        // extern NSString *const _Nonnull kCIInputAspectRatioKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputAspectRatioKey", "__Internal")]
        NSString kCIInputAspectRatioKey { get; }

        // extern NSString *const _Nonnull kCIInputCenterKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputCenterKey", "__Internal")]
        NSString kCIInputCenterKey { get; }

        // extern NSString *const _Nonnull kCIInputRadiusKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputRadiusKey", "__Internal")]
        NSString kCIInputRadiusKey { get; }

        // extern NSString *const _Nonnull kCIInputAngleKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputAngleKey", "__Internal")]
        NSString kCIInputAngleKey { get; }

        // extern NSString *const _Nonnull kCIInputRefractionKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIInputRefractionKey", "__Internal")]
        NSString kCIInputRefractionKey { get; }

        // extern NSString *const _Nonnull kCIInputWidthKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputWidthKey", "__Internal")]
        NSString kCIInputWidthKey { get; }

        // extern NSString *const _Nonnull kCIInputSharpnessKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputSharpnessKey", "__Internal")]
        NSString kCIInputSharpnessKey { get; }

        // extern NSString *const _Nonnull kCIInputIntensityKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputIntensityKey", "__Internal")]
        NSString kCIInputIntensityKey { get; }

        // extern NSString *const _Nonnull kCIInputEVKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputEVKey", "__Internal")]
        NSString kCIInputEVKey { get; }

        // extern NSString *const _Nonnull kCIInputSaturationKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputSaturationKey", "__Internal")]
        NSString kCIInputSaturationKey { get; }

        // extern NSString *const _Nonnull kCIInputColorKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputColorKey", "__Internal")]
        NSString kCIInputColorKey { get; }

        // extern NSString *const _Nonnull kCIInputBrightnessKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputBrightnessKey", "__Internal")]
        NSString kCIInputBrightnessKey { get; }

        // extern NSString *const _Nonnull kCIInputContrastKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputContrastKey", "__Internal")]
        NSString kCIInputContrastKey { get; }

        // extern NSString *const _Nonnull kCIInputBiasKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIInputBiasKey", "__Internal")]
        NSString kCIInputBiasKey { get; }

        // extern NSString *const _Nonnull kCIInputWeightsKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIInputWeightsKey", "__Internal")]
        NSString kCIInputWeightsKey { get; }

        // extern NSString *const _Nonnull kCIInputGradientImageKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIInputGradientImageKey", "__Internal")]
        NSString kCIInputGradientImageKey { get; }

        // extern NSString *const _Nonnull kCIInputMaskImageKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputMaskImageKey", "__Internal")]
        NSString kCIInputMaskImageKey { get; }

        // extern NSString *const _Nonnull kCIInputMatteImageKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=12_0)));
        [iOS(12, 0)]
        [Field("kCIInputMatteImageKey", "__Internal")]
        NSString kCIInputMatteImageKey { get; }

        // extern NSString *const _Nonnull kCIInputShadingImageKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIInputShadingImageKey", "__Internal")]
        NSString kCIInputShadingImageKey { get; }

        // extern NSString *const _Nonnull kCIInputTargetImageKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputTargetImageKey", "__Internal")]
        NSString kCIInputTargetImageKey { get; }

        // extern NSString *const _Nonnull kCIInputExtentKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("kCIInputExtentKey", "__Internal")]
        NSString kCIInputExtentKey { get; }

        // extern NSString *const _Nonnull kCIInputVersionKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Field("kCIInputVersionKey", "__Internal")]
        NSString kCIInputVersionKey { get; }
    }

    // @interface CIFilter : NSObject <NSSecureCoding, NSCopying>
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface CIFilter : INSSecureCoding, INSCopying
    {
        // @property (readonly, nonatomic) CIImage * _Nullable outputImage __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [NullAllowed, Export("outputImage")]
        CIImage OutputImage { get; }

        // @property (copy, nonatomic) NSString * _Nonnull name;
        [Export("name")]
        string Name { get; set; }

        // @property (getter = isEnabled) BOOL enabled __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Export("enabled")]
        bool Enabled { [Bind("isEnabled")] get; set; }

        // @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull inputKeys;
        [Export("inputKeys")]
        string[] InputKeys { get; }

        // @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull outputKeys;
        [Export("outputKeys")]
        string[] OutputKeys { get; }

        // -(void)setDefaults;
        [Export("setDefaults")]
        void SetDefaults();

        // @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nonnull attributes;
        [Export("attributes")]
        NSDictionary<NSString, NSObject> Attributes { get; }

        // -(CIImage * _Nullable)apply:(CIKernel * _Nonnull)k arguments:(NSArray * _Nullable)args options:(NSDictionary<NSString *,id> * _Nullable)dict __attribute__((availability(ios, unavailable)));
        [NoiOS]
        [Export("apply:arguments:options:")]
        [Verify(StronglyTypedNSArray)]
        [return: NullAllowed]
        CIImage Apply(CIKernel k, [NullAllowed] NSObject[] args, [NullAllowed] NSDictionary<NSString, NSObject> dict);

        // -(CIImage * _Nullable)apply:(CIKernel * _Nonnull)k, ... __attribute__((availability(ios, unavailable))) __attribute__((sentinel(0, 1)));
        [NoiOS]
        [Internal]
        [Export("apply:", IsVariadic = true)]
        [return: NullAllowed]
        CIImage Apply(CIKernel k, IntPtr varArgs);
    }

    // @interface CIFilterRegistry (CIFilter)
    [Category]
    [BaseType(typeof(CIFilter))]
    interface CIFilter_CIFilterRegistry
    {
        // +(CIFilter * _Nullable)filterWithName:(NSString * _Nonnull)name;
        [Static]
        [Export("filterWithName:")]
        [return: NullAllowed]
        CIFilter FilterWithName(string name);

        // +(CIFilter * _Nullable)filterWithName:(NSString * _Nonnull)name keysAndValues:(id)key0, ... __attribute__((sentinel(0, 1)));
        [Static, Internal]
        [Export("filterWithName:keysAndValues:", IsVariadic = true)]
        [return: NullAllowed]
        CIFilter FilterWithName(string name, NSObject key0, IntPtr varArgs);

        // +(CIFilter * _Nullable)filterWithName:(NSString * _Nonnull)name withInputParameters:(NSDictionary<NSString *,id> * _Nullable)params __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Static]
        [Export("filterWithName:withInputParameters:")]
        [return: NullAllowed]
        CIFilter FilterWithName(string name, [NullAllowed] NSDictionary<NSString, NSObject> @params);

        // +(NSArray<NSString *> * _Nonnull)filterNamesInCategory:(NSString * _Nullable)category;
        [Static]
        [Export("filterNamesInCategory:")]
        string[] FilterNamesInCategory([NullAllowed] string category);

        // +(NSArray<NSString *> * _Nonnull)filterNamesInCategories:(NSArray<NSString *> * _Nullable)categories;
        [Static]
        [Export("filterNamesInCategories:")]
        string[] FilterNamesInCategories([NullAllowed] string[] categories);

        // +(void)registerFilterName:(NSString * _Nonnull)name constructor:(id<CIFilterConstructor> _Nonnull)anObject classAttributes:(NSDictionary<NSString *,id> * _Nonnull)attributes __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("registerFilterName:constructor:classAttributes:")]
        void RegisterFilterName(string name, CIFilterConstructor anObject, NSDictionary<NSString, NSObject> attributes);

        // +(NSString * _Nullable)localizedNameForFilterName:(NSString * _Nonnull)filterName __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("localizedNameForFilterName:")]
        [return: NullAllowed]
        string LocalizedNameForFilterName(string filterName);

        // +(NSString * _Nonnull)localizedNameForCategory:(NSString * _Nonnull)category __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("localizedNameForCategory:")]
        string LocalizedNameForCategory(string category);

        // +(NSString * _Nullable)localizedDescriptionForFilterName:(NSString * _Nonnull)filterName __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("localizedDescriptionForFilterName:")]
        [return: NullAllowed]
        string LocalizedDescriptionForFilterName(string filterName);

        // +(NSURL * _Nullable)localizedReferenceDocumentationForFilterName:(NSString * _Nonnull)filterName __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("localizedReferenceDocumentationForFilterName:")]
        [return: NullAllowed]
        NSUrl LocalizedReferenceDocumentationForFilterName(string filterName);
    }

    // @interface CIFilterXMPSerialization (CIFilter)
    [Category]
    [BaseType(typeof(CIFilter))]
    interface CIFilter_CIFilterXMPSerialization
    {
        // +(NSData * _Nullable)serializedXMPFromFilters:(NSArray<CIFilter *> * _Nonnull)filters inputImageExtent:(CGRect)extent __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Static]
        [Export("serializedXMPFromFilters:inputImageExtent:")]
        [return: NullAllowed]
        NSData SerializedXMPFromFilters(CIFilter[] filters, CGRect extent);

        // +(NSArray<CIFilter *> * _Nonnull)filterArrayFromSerializedXMP:(NSData * _Nonnull)xmpData inputImageExtent:(CGRect)extent error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Static]
        [Export("filterArrayFromSerializedXMP:inputImageExtent:error:")]
        CIFilter[] FilterArrayFromSerializedXMP(NSData xmpData, CGRect extent, [NullAllowed] out NSError outError);
    }

    // typedef CGRect (^CIKernelROICallback)(int, CGRect);
    delegate CGRect CIKernelROICallback(int arg0, CGRect arg1);

    // @interface CIKernel : NSObject
    [iOS(8, 0)]
    [BaseType(typeof(NSObject))]
    interface CIKernel
    {
        // +(NSArray<CIKernel *> * _Nullable)kernelsWithString:(NSString * _Nonnull)string __attribute__((availability(ios, introduced=8_0, deprecated=12_0)));
        [Introduced(PlatformName.iOS, 8, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Static]
        [Export("kernelsWithString:")]
        [return: NullAllowed]
        CIKernel[] KernelsWithString(string @string);

        // +(instancetype _Nullable)kernelWithString:(NSString * _Nonnull)string __attribute__((availability(ios, introduced=8_0, deprecated=12_0)));
        [Introduced(PlatformName.iOS, 8, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Static]
        [Export("kernelWithString:")]
        [return: NullAllowed]
        CIKernel KernelWithString(string @string);

        // +(instancetype _Nullable)kernelWithFunctionName:(NSString * _Nonnull)name fromMetalLibraryData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Static]
        [Export("kernelWithFunctionName:fromMetalLibraryData:error:")]
        [return: NullAllowed]
        CIKernel KernelWithFunctionName(string name, NSData data, [NullAllowed] out NSError error);

        // +(instancetype _Nullable)kernelWithFunctionName:(NSString * _Nonnull)name fromMetalLibraryData:(NSData * _Nonnull)data outputPixelFormat:(CIFormat)format error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Static]
        [Export("kernelWithFunctionName:fromMetalLibraryData:outputPixelFormat:error:")]
        [return: NullAllowed]
        CIKernel KernelWithFunctionName(string name, NSData data, int format, [NullAllowed] out NSError error);

        // @property (readonly, atomic) NSString * _Nonnull name __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Export("name")]
        string Name { get; }

        // -(void)setROISelector:(SEL _Nonnull)method __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("setROISelector:")]
        void SetROISelector(Selector method);

        // -(CIImage * _Nullable)applyWithExtent:(CGRect)extent roiCallback:(CIKernelROICallback _Nonnull)callback arguments:(NSArray<id> * _Nullable)args __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Export("applyWithExtent:roiCallback:arguments:")]
        [return: NullAllowed]
        CIImage ApplyWithExtent(CGRect extent, CIKernelROICallback callback, [NullAllowed] NSObject[] args);
    }

    // @interface CIColorKernel : CIKernel
    [iOS(8, 0)]
    [BaseType(typeof(CIKernel))]
    interface CIColorKernel
    {
        // +(instancetype _Nullable)kernelWithString:(NSString * _Nonnull)string __attribute__((availability(ios, introduced=8_0, deprecated=12_0)));
        [Introduced(PlatformName.iOS, 8, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Static]
        [Export("kernelWithString:")]
        [return: NullAllowed]
        CIColorKernel KernelWithString(string @string);

        // -(CIImage * _Nullable)applyWithExtent:(CGRect)extent arguments:(NSArray<id> * _Nullable)args;
        [Export("applyWithExtent:arguments:")]
        [return: NullAllowed]
        CIImage ApplyWithExtent(CGRect extent, [NullAllowed] NSObject[] args);
    }

    // @interface CIWarpKernel : CIKernel
    [iOS(8, 0)]
    [BaseType(typeof(CIKernel))]
    interface CIWarpKernel
    {
        // +(instancetype _Nullable)kernelWithString:(NSString * _Nonnull)string __attribute__((availability(ios, introduced=8_0, deprecated=12_0)));
        [Introduced(PlatformName.iOS, 8, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Static]
        [Export("kernelWithString:")]
        [return: NullAllowed]
        CIWarpKernel KernelWithString(string @string);

        // -(CIImage * _Nullable)applyWithExtent:(CGRect)extent roiCallback:(CIKernelROICallback _Nonnull)callback inputImage:(CIImage * _Nonnull)image arguments:(NSArray<id> * _Nullable)args;
        [Export("applyWithExtent:roiCallback:inputImage:arguments:")]
        [return: NullAllowed]
        CIImage ApplyWithExtent(CGRect extent, CIKernelROICallback callback, CIImage image, [NullAllowed] NSObject[] args);
    }

    // @interface CIBlendKernel : CIColorKernel
    [iOS(11, 0)]
    [BaseType(typeof(CIColorKernel))]
    interface CIBlendKernel
    {
        // +(instancetype _Nullable)kernelWithString:(NSString * _Nonnull)string __attribute__((availability(ios, introduced=8_0, deprecated=12_0)));
        [Introduced(PlatformName.iOS, 8, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Deprecated(PlatformName.iOS, 12, 0, message: "Core Image Kernel Language API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)")]
        [Static]
        [Export("kernelWithString:")]
        [return: NullAllowed]
        CIBlendKernel KernelWithString(string @string);

        // -(CIImage * _Nullable)applyWithForeground:(CIImage * _Nonnull)foreground background:(CIImage * _Nonnull)background;
        [Export("applyWithForeground:background:")]
        [return: NullAllowed]
        CIImage ApplyWithForeground(CIImage foreground, CIImage background);
    }

    // @interface BuiltIn (CIBlendKernel)
    [Category]
    [BaseType(typeof(CIBlendKernel))]
    interface CIBlendKernel_BuiltIn
    {
        // @property (readonly, strong, class) CIBlendKernel * _Nonnull componentAdd;
        [Static]
        [Export("componentAdd", ArgumentSemantic.Strong)]
        CIBlendKernel ComponentAdd { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull componentMultiply;
        [Static]
        [Export("componentMultiply", ArgumentSemantic.Strong)]
        CIBlendKernel ComponentMultiply { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull componentMin;
        [Static]
        [Export("componentMin", ArgumentSemantic.Strong)]
        CIBlendKernel ComponentMin { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull componentMax;
        [Static]
        [Export("componentMax", ArgumentSemantic.Strong)]
        CIBlendKernel ComponentMax { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull clear;
        [Static]
        [Export("clear", ArgumentSemantic.Strong)]
        CIBlendKernel Clear { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull source;
        [Static]
        [Export("source", ArgumentSemantic.Strong)]
        CIBlendKernel Source { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull destination;
        [Static]
        [Export("destination", ArgumentSemantic.Strong)]
        CIBlendKernel Destination { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull sourceOver;
        [Static]
        [Export("sourceOver", ArgumentSemantic.Strong)]
        CIBlendKernel SourceOver { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull destinationOver;
        [Static]
        [Export("destinationOver", ArgumentSemantic.Strong)]
        CIBlendKernel DestinationOver { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull sourceIn;
        [Static]
        [Export("sourceIn", ArgumentSemantic.Strong)]
        CIBlendKernel SourceIn { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull destinationIn;
        [Static]
        [Export("destinationIn", ArgumentSemantic.Strong)]
        CIBlendKernel DestinationIn { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull sourceOut;
        [Static]
        [Export("sourceOut", ArgumentSemantic.Strong)]
        CIBlendKernel SourceOut { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull destinationOut;
        [Static]
        [Export("destinationOut", ArgumentSemantic.Strong)]
        CIBlendKernel DestinationOut { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull sourceAtop;
        [Static]
        [Export("sourceAtop", ArgumentSemantic.Strong)]
        CIBlendKernel SourceAtop { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull destinationAtop;
        [Static]
        [Export("destinationAtop", ArgumentSemantic.Strong)]
        CIBlendKernel DestinationAtop { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull exclusiveOr;
        [Static]
        [Export("exclusiveOr", ArgumentSemantic.Strong)]
        CIBlendKernel ExclusiveOr { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull multiply;
        [Static]
        [Export("multiply", ArgumentSemantic.Strong)]
        CIBlendKernel Multiply { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull screen;
        [Static]
        [Export("screen", ArgumentSemantic.Strong)]
        CIBlendKernel Screen { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull overlay;
        [Static]
        [Export("overlay", ArgumentSemantic.Strong)]
        CIBlendKernel Overlay { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull darken;
        [Static]
        [Export("darken", ArgumentSemantic.Strong)]
        CIBlendKernel Darken { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull lighten;
        [Static]
        [Export("lighten", ArgumentSemantic.Strong)]
        CIBlendKernel Lighten { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull colorDodge;
        [Static]
        [Export("colorDodge", ArgumentSemantic.Strong)]
        CIBlendKernel ColorDodge { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull colorBurn;
        [Static]
        [Export("colorBurn", ArgumentSemantic.Strong)]
        CIBlendKernel ColorBurn { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull hardLight;
        [Static]
        [Export("hardLight", ArgumentSemantic.Strong)]
        CIBlendKernel HardLight { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull softLight;
        [Static]
        [Export("softLight", ArgumentSemantic.Strong)]
        CIBlendKernel SoftLight { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull difference;
        [Static]
        [Export("difference", ArgumentSemantic.Strong)]
        CIBlendKernel Difference { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull exclusion;
        [Static]
        [Export("exclusion", ArgumentSemantic.Strong)]
        CIBlendKernel Exclusion { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull hue;
        [Static]
        [Export("hue", ArgumentSemantic.Strong)]
        CIBlendKernel Hue { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull saturation;
        [Static]
        [Export("saturation", ArgumentSemantic.Strong)]
        CIBlendKernel Saturation { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull color;
        [Static]
        [Export("color", ArgumentSemantic.Strong)]
        CIBlendKernel Color { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull luminosity;
        [Static]
        [Export("luminosity", ArgumentSemantic.Strong)]
        CIBlendKernel Luminosity { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull subtract;
        [Static]
        [Export("subtract", ArgumentSemantic.Strong)]
        CIBlendKernel Subtract { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull divide;
        [Static]
        [Export("divide", ArgumentSemantic.Strong)]
        CIBlendKernel Divide { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull linearBurn;
        [Static]
        [Export("linearBurn", ArgumentSemantic.Strong)]
        CIBlendKernel LinearBurn { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull linearDodge;
        [Static]
        [Export("linearDodge", ArgumentSemantic.Strong)]
        CIBlendKernel LinearDodge { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull vividLight;
        [Static]
        [Export("vividLight", ArgumentSemantic.Strong)]
        CIBlendKernel VividLight { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull linearLight;
        [Static]
        [Export("linearLight", ArgumentSemantic.Strong)]
        CIBlendKernel LinearLight { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull pinLight;
        [Static]
        [Export("pinLight", ArgumentSemantic.Strong)]
        CIBlendKernel PinLight { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull hardMix;
        [Static]
        [Export("hardMix", ArgumentSemantic.Strong)]
        CIBlendKernel HardMix { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull darkerColor;
        [Static]
        [Export("darkerColor", ArgumentSemantic.Strong)]
        CIBlendKernel DarkerColor { get; }

        // @property (readonly, strong, class) CIBlendKernel * _Nonnull lighterColor;
        [Static]
        [Export("lighterColor", ArgumentSemantic.Strong)]
        CIBlendKernel LighterColor { get; }
    }

    // @interface CIDetector : NSObject
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface CIDetector
    {
        // +(CIDetector * _Nullable)detectorOfType:(NSString * _Nonnull)type context:(CIContext * _Nullable)context options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Static]
        [Export("detectorOfType:context:options:")]
        [return: NullAllowed]
        CIDetector DetectorOfType(string type, [NullAllowed] CIContext context, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(NSArray<CIFeature *> * _Nonnull)featuresInImage:(CIImage * _Nonnull)image __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("featuresInImage:")]
        CIFeature[] FeaturesInImage(CIImage image);

        // -(NSArray<CIFeature *> * _Nonnull)featuresInImage:(CIImage * _Nonnull)image options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("featuresInImage:options:")]
        CIFeature[] FeaturesInImage(CIImage image, [NullAllowed] NSDictionary<NSString, NSObject> options);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull CIDetectorTypeFace __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("CIDetectorTypeFace", "__Internal")]
        NSString CIDetectorTypeFace { get; }

        // extern NSString *const _Nonnull CIDetectorTypeRectangle __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Field("CIDetectorTypeRectangle", "__Internal")]
        NSString CIDetectorTypeRectangle { get; }

        // extern NSString *const _Nonnull CIDetectorTypeQRCode __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Field("CIDetectorTypeQRCode", "__Internal")]
        NSString CIDetectorTypeQRCode { get; }

        // extern NSString *const _Nonnull CIDetectorTypeText __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("CIDetectorTypeText", "__Internal")]
        NSString CIDetectorTypeText { get; }

        // extern NSString *const _Nonnull CIDetectorAccuracy __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("CIDetectorAccuracy", "__Internal")]
        NSString CIDetectorAccuracy { get; }

        // extern NSString *const _Nonnull CIDetectorAccuracyLow __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("CIDetectorAccuracyLow", "__Internal")]
        NSString CIDetectorAccuracyLow { get; }

        // extern NSString *const _Nonnull CIDetectorAccuracyHigh __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("CIDetectorAccuracyHigh", "__Internal")]
        NSString CIDetectorAccuracyHigh { get; }

        // extern NSString *const _Nonnull CIDetectorTracking __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Field("CIDetectorTracking", "__Internal")]
        NSString CIDetectorTracking { get; }

        // extern NSString *const _Nonnull CIDetectorMinFeatureSize __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
        [iOS(6, 0)]
        [Field("CIDetectorMinFeatureSize", "__Internal")]
        NSString CIDetectorMinFeatureSize { get; }

        // extern NSString *const _Nonnull CIDetectorMaxFeatureCount __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("CIDetectorMaxFeatureCount", "__Internal")]
        NSString CIDetectorMaxFeatureCount { get; }

        // extern NSString *const _Nonnull CIDetectorNumberOfAngles __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("CIDetectorNumberOfAngles", "__Internal")]
        NSString CIDetectorNumberOfAngles { get; }

        // extern NSString *const _Nonnull CIDetectorImageOrientation __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Field("CIDetectorImageOrientation", "__Internal")]
        NSString CIDetectorImageOrientation { get; }

        // extern NSString *const _Nonnull CIDetectorEyeBlink __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("CIDetectorEyeBlink", "__Internal")]
        NSString CIDetectorEyeBlink { get; }

        // extern NSString *const _Nonnull CIDetectorSmile __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("CIDetectorSmile", "__Internal")]
        NSString CIDetectorSmile { get; }

        // extern NSString *const _Nonnull CIDetectorFocalLength __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Field("CIDetectorFocalLength", "__Internal")]
        NSString CIDetectorFocalLength { get; }

        // extern NSString *const _Nonnull CIDetectorAspectRatio __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Field("CIDetectorAspectRatio", "__Internal")]
        NSString CIDetectorAspectRatio { get; }

        // extern NSString *const _Nonnull CIDetectorReturnSubFeatures __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
        [iOS(9, 0)]
        [Field("CIDetectorReturnSubFeatures", "__Internal")]
        NSString CIDetectorReturnSubFeatures { get; }
    }

    // @interface CIFeature : NSObject
    [iOS(5, 0)]
    [BaseType(typeof(NSObject))]
    interface CIFeature
    {
        // @property (readonly, retain) NSString * _Nonnull type;
        [Export("type", ArgumentSemantic.Retain)]
        string Type { get; }

        // @property (readonly, assign) CGRect bounds;
        [Export("bounds", ArgumentSemantic.Assign)]
        CGRect Bounds { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull CIFeatureTypeFace __attribute__((visibility("default")));
        [Field("CIFeatureTypeFace", "__Internal")]
        NSString CIFeatureTypeFace { get; }

        // extern NSString *const _Nonnull CIFeatureTypeRectangle __attribute__((visibility("default")));
        [Field("CIFeatureTypeRectangle", "__Internal")]
        NSString CIFeatureTypeRectangle { get; }

        // extern NSString *const _Nonnull CIFeatureTypeQRCode __attribute__((visibility("default")));
        [Field("CIFeatureTypeQRCode", "__Internal")]
        NSString CIFeatureTypeQRCode { get; }

        // extern NSString *const _Nonnull CIFeatureTypeText __attribute__((visibility("default")));
        [Field("CIFeatureTypeText", "__Internal")]
        NSString CIFeatureTypeText { get; }
    }

    // @interface CIFaceFeature : CIFeature
    [iOS(5, 0)]
    [BaseType(typeof(CIFeature))]
    interface CIFaceFeature
    {
        // @property (readonly, assign) CGRect bounds;
        [Export("bounds", ArgumentSemantic.Assign)]
        CGRect Bounds { get; }

        // @property (readonly, assign) BOOL hasLeftEyePosition;
        [Export("hasLeftEyePosition")]
        bool HasLeftEyePosition { get; }

        // @property (readonly, assign) CGPoint leftEyePosition;
        [Export("leftEyePosition", ArgumentSemantic.Assign)]
        CGPoint LeftEyePosition { get; }

        // @property (readonly, assign) BOOL hasRightEyePosition;
        [Export("hasRightEyePosition")]
        bool HasRightEyePosition { get; }

        // @property (readonly, assign) CGPoint rightEyePosition;
        [Export("rightEyePosition", ArgumentSemantic.Assign)]
        CGPoint RightEyePosition { get; }

        // @property (readonly, assign) BOOL hasMouthPosition;
        [Export("hasMouthPosition")]
        bool HasMouthPosition { get; }

        // @property (readonly, assign) CGPoint mouthPosition;
        [Export("mouthPosition", ArgumentSemantic.Assign)]
        CGPoint MouthPosition { get; }

        // @property (readonly, assign) BOOL hasTrackingID;
        [Export("hasTrackingID")]
        bool HasTrackingID { get; }

        // @property (readonly, assign) int trackingID;
        [Export("trackingID")]
        int TrackingID { get; }

        // @property (readonly, assign) BOOL hasTrackingFrameCount;
        [Export("hasTrackingFrameCount")]
        bool HasTrackingFrameCount { get; }

        // @property (readonly, assign) int trackingFrameCount;
        [Export("trackingFrameCount")]
        int TrackingFrameCount { get; }

        // @property (readonly, assign) BOOL hasFaceAngle;
        [Export("hasFaceAngle")]
        bool HasFaceAngle { get; }

        // @property (readonly, assign) float faceAngle;
        [Export("faceAngle")]
        float FaceAngle { get; }

        // @property (readonly, assign) BOOL hasSmile;
        [Export("hasSmile")]
        bool HasSmile { get; }

        // @property (readonly, assign) BOOL leftEyeClosed;
        [Export("leftEyeClosed")]
        bool LeftEyeClosed { get; }

        // @property (readonly, assign) BOOL rightEyeClosed;
        [Export("rightEyeClosed")]
        bool RightEyeClosed { get; }
    }

    // @interface CIRectangleFeature : CIFeature
    [iOS(8, 0)]
    [BaseType(typeof(CIFeature))]
    interface CIRectangleFeature
    {
        // @property (readonly) CGRect bounds;
        [Export("bounds")]
        CGRect Bounds { get; }

        // @property (readonly) CGPoint topLeft;
        [Export("topLeft")]
        CGPoint TopLeft { get; }

        // @property (readonly) CGPoint topRight;
        [Export("topRight")]
        CGPoint TopRight { get; }

        // @property (readonly) CGPoint bottomLeft;
        [Export("bottomLeft")]
        CGPoint BottomLeft { get; }

        // @property (readonly) CGPoint bottomRight;
        [Export("bottomRight")]
        CGPoint BottomRight { get; }
    }

    // @interface CIQRCodeFeature : CIFeature <NSSecureCoding, NSCopying>
    [iOS(8, 0)]
    [BaseType(typeof(CIFeature))]
    interface CIQRCodeFeature : INSSecureCoding, INSCopying
    {
        // @property (readonly) CGRect bounds;
        [Export("bounds")]
        CGRect Bounds { get; }

        // @property (readonly) CGPoint topLeft;
        [Export("topLeft")]
        CGPoint TopLeft { get; }

        // @property (readonly) CGPoint topRight;
        [Export("topRight")]
        CGPoint TopRight { get; }

        // @property (readonly) CGPoint bottomLeft;
        [Export("bottomLeft")]
        CGPoint BottomLeft { get; }

        // @property (readonly) CGPoint bottomRight;
        [Export("bottomRight")]
        CGPoint BottomRight { get; }

        // @property (readonly) NSString * _Nullable messageString;
        [NullAllowed, Export("messageString")]
        string MessageString { get; }

        // @property (readonly) CIQRCodeDescriptor * _Nullable symbolDescriptor __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [NullAllowed, Export("symbolDescriptor")]
        CIQRCodeDescriptor SymbolDescriptor { get; }
    }

    // @interface CITextFeature : CIFeature
    [iOS(9, 0)]
    [BaseType(typeof(CIFeature))]
    interface CITextFeature
    {
        // @property (readonly) CGRect bounds;
        [Export("bounds")]
        CGRect Bounds { get; }

        // @property (readonly) CGPoint topLeft;
        [Export("topLeft")]
        CGPoint TopLeft { get; }

        // @property (readonly) CGPoint topRight;
        [Export("topRight")]
        CGPoint TopRight { get; }

        // @property (readonly) CGPoint bottomLeft;
        [Export("bottomLeft")]
        CGPoint BottomLeft { get; }

        // @property (readonly) CGPoint bottomRight;
        [Export("bottomRight")]
        CGPoint BottomRight { get; }

        // @property (readonly) NSArray * _Nullable subFeatures;
        [NullAllowed, Export("subFeatures")]
        [Verify(StronglyTypedNSArray)]
        NSObject[] SubFeatures { get; }
    }

    // @interface CIImageProvider (CIImage)
    [Category]
    [BaseType(typeof(CIImage))]
    interface CIImage_CIImageProvider
    {
        // +(CIImage * _Nonnull)imageWithImageProvider:(id _Nonnull)p size:(size_t)width :(size_t)height format:(CIFormat)f colorSpace:(CGColorSpaceRef _Nullable)cs options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("imageWithImageProvider:size::format:colorSpace:options:")]
        unsafe CIImage ImageWithImageProvider(NSObject p, nuint width, nuint height, int f, [NullAllowed] CGColorSpaceRef* cs, [NullAllowed] NSDictionary<NSString, NSObject> options);

        // -(instancetype _Nonnull)initWithImageProvider:(id _Nonnull)p size:(size_t)width :(size_t)height format:(CIFormat)f colorSpace:(CGColorSpaceRef _Nullable)cs options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("initWithImageProvider:size::format:colorSpace:options:")]
        unsafe IntPtr Constructor(NSObject p, nuint width, nuint height, int f, [NullAllowed] CGColorSpaceRef* cs, [NullAllowed] NSDictionary<NSString, NSObject> options);
    }

    // @interface CIImageProvider (NSObject)
    [Category]
    [BaseType(typeof(NSObject))]
    interface NSObject_CIImageProvider
    {
        // -(void)provideImageData:(void * _Nonnull)data bytesPerRow:(size_t)rowbytes origin:(size_t)x :(size_t)y size:(size_t)width :(size_t)height userInfo:(id _Nullable)info;
        [Export("provideImageData:bytesPerRow:origin::size::userInfo:")]
        unsafe void ProvideImageData(void* data, nuint rowbytes, nuint x, nuint y, nuint width, nuint height, [NullAllowed] NSObject info);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull kCIImageProviderTileSize __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIImageProviderTileSize", "__Internal")]
        NSString kCIImageProviderTileSize { get; }

        // extern NSString *const _Nonnull kCIImageProviderUserInfo __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCIImageProviderUserInfo", "__Internal")]
        NSString kCIImageProviderUserInfo { get; }
    }

    // @interface CIImageProcessorKernel : NSObject
    [iOS(10, 0)]
    [BaseType(typeof(NSObject))]
    interface CIImageProcessorKernel
    {
        // +(BOOL)processWithInputs:(NSArray<id<CIImageProcessorInput>> * _Nullable)inputs arguments:(NSDictionary<NSString *,id> * _Nullable)arguments output:(id<CIImageProcessorOutput> _Nonnull)output error:(NSError * _Nullable * _Nullable)error;
        [Static]
        [Export("processWithInputs:arguments:output:error:")]
        bool ProcessWithInputs([NullAllowed] CIImageProcessorInput[] inputs, [NullAllowed] NSDictionary<NSString, NSObject> arguments, CIImageProcessorOutput output, [NullAllowed] out NSError error);

        // +(CGRect)roiForInput:(int)input arguments:(NSDictionary<NSString *,id> * _Nullable)arguments outputRect:(CGRect)outputRect;
        [Static]
        [Export("roiForInput:arguments:outputRect:")]
        CGRect RoiForInput(int input, [NullAllowed] NSDictionary<NSString, NSObject> arguments, CGRect outputRect);

        // +(CIFormat)formatForInputAtIndex:(int)input;
        [Static]
        [Export("formatForInputAtIndex:")]
        int FormatForInputAtIndex(int input);

        // @property (readonly, class) CIFormat outputFormat;
        [Static]
        [Export("outputFormat")]
        int OutputFormat { get; }

        // @property (readonly, class) _Bool outputIsOpaque __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Static]
        [Export("outputIsOpaque")]
        bool OutputIsOpaque { get; }

        // @property (readonly, class) _Bool synchronizeInputs;
        [Static]
        [Export("synchronizeInputs")]
        bool SynchronizeInputs { get; }

        // +(CIImage * _Nullable)applyWithExtent:(CGRect)extent inputs:(NSArray<CIImage *> * _Nullable)inputs arguments:(NSDictionary<NSString *,id> * _Nullable)args error:(NSError * _Nullable * _Nullable)error;
        [Static]
        [Export("applyWithExtent:inputs:arguments:error:")]
        [return: NullAllowed]
        CIImage ApplyWithExtent(CGRect extent, [NullAllowed] CIImage[] inputs, [NullAllowed] NSDictionary<NSString, NSObject> args, [NullAllowed] out NSError error);
    }

    // @protocol CIImageProcessorInput
    [iOS(10, 0)]
    [Protocol, Model]
    interface CIImageProcessorInput
    {
        // @required @property (readonly, nonatomic) CGRect region;
        [Abstract]
        [Export("region")]
        CGRect Region { get; }

        // @required @property (readonly, nonatomic) size_t bytesPerRow;
        [Abstract]
        [Export("bytesPerRow")]
        nuint BytesPerRow { get; }

        // @required @property (readonly, nonatomic) CIFormat format;
        [Abstract]
        [Export("format")]
        int Format { get; }

        // @required @property (readonly, nonatomic) const void * _Nonnull baseAddress __attribute__((objc_returns_inner_pointer));
        [Abstract]
        [Export("baseAddress")]
        unsafe void* BaseAddress { get; }

        // @required @property (readonly, nonatomic) IOSurfaceRef _Nonnull surface;
        [Abstract]
        [Export("surface")]
        unsafe IOSurfaceRef* Surface { get; }

        // @required @property (readonly, nonatomic) CVPixelBufferRef _Nullable pixelBuffer;
        [Abstract]
        [NullAllowed, Export("pixelBuffer")]
        unsafe CVPixelBufferRef* PixelBuffer { get; }

        // @required @property (readonly, nonatomic) id<MTLTexture> _Nullable metalTexture;
        [Abstract]
        [NullAllowed, Export("metalTexture")]
        MTLTexture MetalTexture { get; }
    }

    // @protocol CIImageProcessorOutput
    [iOS(10, 0)]
    [Protocol, Model]
    interface CIImageProcessorOutput
    {
        // @required @property (readonly, nonatomic) CGRect region;
        [Abstract]
        [Export("region")]
        CGRect Region { get; }

        // @required @property (readonly, nonatomic) size_t bytesPerRow;
        [Abstract]
        [Export("bytesPerRow")]
        nuint BytesPerRow { get; }

        // @required @property (readonly, nonatomic) CIFormat format;
        [Abstract]
        [Export("format")]
        int Format { get; }

        // @required @property (readonly, nonatomic) void * _Nonnull baseAddress __attribute__((objc_returns_inner_pointer));
        [Abstract]
        [Export("baseAddress")]
        unsafe void* BaseAddress { get; }

        // @required @property (readonly, nonatomic) IOSurfaceRef _Nonnull surface;
        [Abstract]
        [Export("surface")]
        unsafe IOSurfaceRef* Surface { get; }

        // @required @property (readonly, nonatomic) CVPixelBufferRef _Nullable pixelBuffer;
        [Abstract]
        [NullAllowed, Export("pixelBuffer")]
        unsafe CVPixelBufferRef* PixelBuffer { get; }

        // @required @property (readonly, nonatomic) id<MTLTexture> _Nullable metalTexture;
        [Abstract]
        [NullAllowed, Export("metalTexture")]
        MTLTexture MetalTexture { get; }

        // @required @property (readonly, nonatomic) id<MTLCommandBuffer> _Nullable metalCommandBuffer;
        [Abstract]
        [NullAllowed, Export("metalCommandBuffer")]
        MTLCommandBuffer MetalCommandBuffer { get; }
    }

    // @interface CIImageAccumulator : NSObject
    [iOS(9, 0)]
    [BaseType(typeof(NSObject))]
    interface CIImageAccumulator
    {
        // +(instancetype _Nullable)imageAccumulatorWithExtent:(CGRect)extent format:(CIFormat)format;
        [Static]
        [Export("imageAccumulatorWithExtent:format:")]
        [return: NullAllowed]
        CIImageAccumulator ImageAccumulatorWithExtent(CGRect extent, int format);

        // +(instancetype _Nullable)imageAccumulatorWithExtent:(CGRect)extent format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("imageAccumulatorWithExtent:format:colorSpace:")]
        [return: NullAllowed]
        unsafe CIImageAccumulator ImageAccumulatorWithExtent(CGRect extent, int format, CGColorSpaceRef* colorSpace);

        // -(instancetype _Nullable)initWithExtent:(CGRect)extent format:(CIFormat)format;
        [Export("initWithExtent:format:")]
        IntPtr Constructor(CGRect extent, int format);

        // -(instancetype _Nullable)initWithExtent:(CGRect)extent format:(CIFormat)format colorSpace:(CGColorSpaceRef _Nonnull)colorSpace __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("initWithExtent:format:colorSpace:")]
        unsafe IntPtr Constructor(CGRect extent, int format, CGColorSpaceRef* colorSpace);

        // @property (readonly) CGRect extent;
        [Export("extent")]
        CGRect Extent { get; }

        // @property (readonly) CIFormat format;
        [Export("format")]
        int Format { get; }

        // -(CIImage * _Nonnull)image;
        // -(void)setImage:(CIImage * _Nonnull)image;
        [Export("image")]
        [Verify(MethodToProperty)]
        CIImage Image { get; set; }

        // -(void)setImage:(CIImage * _Nonnull)image dirtyRect:(CGRect)dirtyRect;
        [Export("setImage:dirtyRect:")]
        void SetImage(CIImage image, CGRect dirtyRect);

        // -(void)clear;
        [Export("clear")]
        void Clear();
    }

    // @interface CIFilterShape : NSObject <NSCopying>
    [iOS(9, 0)]
    [BaseType(typeof(NSObject))]
    interface CIFilterShape : INSCopying
    {
        // +(instancetype _Nonnull)shapeWithRect:(CGRect)r;
        [Static]
        [Export("shapeWithRect:")]
        CIFilterShape ShapeWithRect(CGRect r);

        // -(instancetype _Nonnull)initWithRect:(CGRect)r;
        [Export("initWithRect:")]
        IntPtr Constructor(CGRect r);

        // -(CIFilterShape * _Nonnull)transformBy:(CGAffineTransform)m interior:(BOOL)flag;
        [Export("transformBy:interior:")]
        CIFilterShape TransformBy(CGAffineTransform m, bool flag);

        // -(CIFilterShape * _Nonnull)insetByX:(int)dx Y:(int)dy;
        [Export("insetByX:Y:")]
        CIFilterShape InsetByX(int dx, int dy);

        // -(CIFilterShape * _Nonnull)unionWith:(CIFilterShape * _Nonnull)s2;
        [Export("unionWith:")]
        CIFilterShape UnionWith(CIFilterShape s2);

        // -(CIFilterShape * _Nonnull)unionWithRect:(CGRect)r;
        [Export("unionWithRect:")]
        CIFilterShape UnionWithRect(CGRect r);

        // -(CIFilterShape * _Nonnull)intersectWith:(CIFilterShape * _Nonnull)s2;
        [Export("intersectWith:")]
        CIFilterShape IntersectWith(CIFilterShape s2);

        // -(CIFilterShape * _Nonnull)intersectWithRect:(CGRect)r;
        [Export("intersectWithRect:")]
        CIFilterShape IntersectWithRect(CGRect r);

        // @property (readonly) CGRect extent;
        [Export("extent")]
        CGRect Extent { get; }
    }

    // @interface CISampler : NSObject <NSCopying>
    [iOS(9, 0)]
    [BaseType(typeof(NSObject))]
    interface CISampler : INSCopying
    {
        // +(instancetype _Nonnull)samplerWithImage:(CIImage * _Nonnull)im;
        [Static]
        [Export("samplerWithImage:")]
        CISampler SamplerWithImage(CIImage im);

        // +(instancetype _Nonnull)samplerWithImage:(CIImage * _Nonnull)im keysAndValues:(id)key0, ... __attribute__((sentinel(0, 1)));
        [Static, Internal]
        [Export("samplerWithImage:keysAndValues:", IsVariadic = true)]
        CISampler SamplerWithImage(CIImage im, NSObject key0, IntPtr varArgs);

        // +(instancetype _Nonnull)samplerWithImage:(CIImage * _Nonnull)im options:(NSDictionary * _Nullable)dict;
        [Static]
        [Export("samplerWithImage:options:")]
        CISampler SamplerWithImage(CIImage im, [NullAllowed] NSDictionary dict);

        // -(instancetype _Nonnull)initWithImage:(CIImage * _Nonnull)im;
        [Export("initWithImage:")]
        IntPtr Constructor(CIImage im);

        // -(instancetype _Nonnull)initWithImage:(CIImage * _Nonnull)im keysAndValues:(id)key0, ...;
        [Internal]
        [Export("initWithImage:keysAndValues:", IsVariadic = true)]
        IntPtr Constructor(CIImage im, NSObject key0, IntPtr varArgs);

        // -(instancetype _Nonnull)initWithImage:(CIImage * _Nonnull)im options:(NSDictionary * _Nullable)dict __attribute__((objc_designated_initializer));
        [Export("initWithImage:options:")]
        [DesignatedInitializer]
        IntPtr Constructor(CIImage im, [NullAllowed] NSDictionary dict);

        // @property (readonly) CIFilterShape * _Nonnull definition;
        [Export("definition")]
        CIFilterShape Definition { get; }

        // @property (readonly) CGRect extent;
        [Export("extent")]
        CGRect Extent { get; }
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern NSString *const _Nonnull kCISamplerAffineMatrix __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCISamplerAffineMatrix", "__Internal")]
        NSString kCISamplerAffineMatrix { get; }

        // extern NSString *const _Nonnull kCISamplerWrapMode __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCISamplerWrapMode", "__Internal")]
        NSString kCISamplerWrapMode { get; }

        // extern NSString *const _Nonnull kCISamplerFilterMode __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCISamplerFilterMode", "__Internal")]
        NSString kCISamplerFilterMode { get; }

        // extern NSString *const _Nonnull kCISamplerWrapBlack __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCISamplerWrapBlack", "__Internal")]
        NSString kCISamplerWrapBlack { get; }

        // extern NSString *const _Nonnull kCISamplerWrapClamp __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCISamplerWrapClamp", "__Internal")]
        NSString kCISamplerWrapClamp { get; }

        // extern NSString *const _Nonnull kCISamplerFilterNearest __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCISamplerFilterNearest", "__Internal")]
        NSString kCISamplerFilterNearest { get; }

        // extern NSString *const _Nonnull kCISamplerFilterLinear __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCISamplerFilterLinear", "__Internal")]
        NSString kCISamplerFilterLinear { get; }

        // extern NSString *const _Nonnull kCISamplerColorSpace __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("kCISamplerColorSpace", "__Internal")]
        NSString kCISamplerColorSpace { get; }
    }

    // @interface CIRAWFilter (CIFilter)
    [Category]
    [BaseType(typeof(CIFilter))]
    interface CIFilter_CIRAWFilter
    {
        // +(CIFilter *)filterWithImageURL:(NSURL *)url options:(NSDictionary<CIRAWFilterOption,id> *)options __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("filterWithImageURL:options:")]
        CIFilter FilterWithImageURL(NSUrl url, NSDictionary<NSString, NSObject> options);

        // +(CIFilter *)filterWithImageData:(NSData *)data options:(NSDictionary<CIRAWFilterOption,id> *)options __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("filterWithImageData:options:")]
        CIFilter FilterWithImageData(NSData data, NSDictionary<NSString, NSObject> options);

        // +(CIFilter *)filterWithCVPixelBuffer:(CVPixelBufferRef)pixelBuffer properties:(NSDictionary *)properties options:(NSDictionary<CIRAWFilterOption,id> *)options __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("filterWithCVPixelBuffer:properties:options:")]
        unsafe CIFilter FilterWithCVPixelBuffer(CVPixelBufferRef* pixelBuffer, NSDictionary properties, NSDictionary<NSString, NSObject> options);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const CIRAWFilterOption kCIInputAllowDraftModeKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputAllowDraftModeKey", "__Internal")]
        NSString kCIInputAllowDraftModeKey { get; }

        // extern const CIRAWFilterOption kCIInputDecoderVersionKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputDecoderVersionKey", "__Internal")]
        NSString kCIInputDecoderVersionKey { get; }

        // extern const CIRAWFilterOption kCISupportedDecoderVersionsKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCISupportedDecoderVersionsKey", "__Internal")]
        NSString kCISupportedDecoderVersionsKey { get; }

        // extern const CIRAWFilterOption kCIInputBaselineExposureKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputBaselineExposureKey", "__Internal")]
        NSString kCIInputBaselineExposureKey { get; }

        // extern const CIRAWFilterOption kCIInputBoostKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputBoostKey", "__Internal")]
        NSString kCIInputBoostKey { get; }

        // extern const CIRAWFilterOption kCIInputBoostShadowAmountKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputBoostShadowAmountKey", "__Internal")]
        NSString kCIInputBoostShadowAmountKey { get; }

        // extern const CIRAWFilterOption kCIInputDisableGamutMapKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputDisableGamutMapKey", "__Internal")]
        NSString kCIInputDisableGamutMapKey { get; }

        // extern const CIRAWFilterOption kCIInputNeutralChromaticityXKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputNeutralChromaticityXKey", "__Internal")]
        NSString kCIInputNeutralChromaticityXKey { get; }

        // extern const CIRAWFilterOption kCIInputNeutralChromaticityYKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputNeutralChromaticityYKey", "__Internal")]
        NSString kCIInputNeutralChromaticityYKey { get; }

        // extern const CIRAWFilterOption kCIInputNeutralTemperatureKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputNeutralTemperatureKey", "__Internal")]
        NSString kCIInputNeutralTemperatureKey { get; }

        // extern const CIRAWFilterOption kCIInputNeutralTintKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputNeutralTintKey", "__Internal")]
        NSString kCIInputNeutralTintKey { get; }

        // extern const CIRAWFilterOption kCIInputNeutralLocationKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputNeutralLocationKey", "__Internal")]
        NSString kCIInputNeutralLocationKey { get; }

        // extern const CIRAWFilterOption kCIInputScaleFactorKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputScaleFactorKey", "__Internal")]
        NSString kCIInputScaleFactorKey { get; }

        // extern const CIRAWFilterOption kCIInputIgnoreImageOrientationKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputIgnoreImageOrientationKey", "__Internal")]
        NSString kCIInputIgnoreImageOrientationKey { get; }

        // extern const CIRAWFilterOption kCIInputImageOrientationKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputImageOrientationKey", "__Internal")]
        NSString kCIInputImageOrientationKey { get; }

        // extern const CIRAWFilterOption kCIInputEnableSharpeningKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputEnableSharpeningKey", "__Internal")]
        NSString kCIInputEnableSharpeningKey { get; }

        // extern const CIRAWFilterOption kCIInputEnableChromaticNoiseTrackingKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputEnableChromaticNoiseTrackingKey", "__Internal")]
        NSString kCIInputEnableChromaticNoiseTrackingKey { get; }

        // extern const CIRAWFilterOption kCIInputNoiseReductionAmountKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputNoiseReductionAmountKey", "__Internal")]
        NSString kCIInputNoiseReductionAmountKey { get; }

        // extern const CIRAWFilterOption kCIInputMoireAmountKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Field("kCIInputMoireAmountKey", "__Internal")]
        NSString kCIInputMoireAmountKey { get; }

        // extern const CIRAWFilterOption kCIInputEnableVendorLensCorrectionKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputEnableVendorLensCorrectionKey", "__Internal")]
        NSString kCIInputEnableVendorLensCorrectionKey { get; }

        // extern const CIRAWFilterOption kCIInputLuminanceNoiseReductionAmountKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputLuminanceNoiseReductionAmountKey", "__Internal")]
        NSString kCIInputLuminanceNoiseReductionAmountKey { get; }

        // extern const CIRAWFilterOption kCIInputColorNoiseReductionAmountKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputColorNoiseReductionAmountKey", "__Internal")]
        NSString kCIInputColorNoiseReductionAmountKey { get; }

        // extern const CIRAWFilterOption kCIInputNoiseReductionSharpnessAmountKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputNoiseReductionSharpnessAmountKey", "__Internal")]
        NSString kCIInputNoiseReductionSharpnessAmountKey { get; }

        // extern const CIRAWFilterOption kCIInputNoiseReductionContrastAmountKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputNoiseReductionContrastAmountKey", "__Internal")]
        NSString kCIInputNoiseReductionContrastAmountKey { get; }

        // extern const CIRAWFilterOption kCIInputNoiseReductionDetailAmountKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputNoiseReductionDetailAmountKey", "__Internal")]
        NSString kCIInputNoiseReductionDetailAmountKey { get; }

        // extern const CIRAWFilterOption kCIInputLinearSpaceFilter __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIInputLinearSpaceFilter", "__Internal")]
        NSString kCIInputLinearSpaceFilter { get; }

        // extern const CIRAWFilterOption kCIOutputNativeSizeKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIOutputNativeSizeKey", "__Internal")]
        NSString kCIOutputNativeSizeKey { get; }

        // extern const CIRAWFilterOption kCIActiveKeys __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Field("kCIActiveKeys", "__Internal")]
        NSString kCIActiveKeys { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyAllocSize __attribute__((availability(ios, introduced=12.0)));
        [iOS(12, 0)]
        [Field("IOSurfacePropertyKeyAllocSize", "__Internal")]
        NSString IOSurfacePropertyKeyAllocSize { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyWidth __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyWidth", "__Internal")]
        NSString IOSurfacePropertyKeyWidth { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyHeight __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyHeight", "__Internal")]
        NSString IOSurfacePropertyKeyHeight { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyBytesPerRow __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyBytesPerRow", "__Internal")]
        NSString IOSurfacePropertyKeyBytesPerRow { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyBytesPerElement __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyBytesPerElement", "__Internal")]
        NSString IOSurfacePropertyKeyBytesPerElement { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyElementWidth __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyElementWidth", "__Internal")]
        NSString IOSurfacePropertyKeyElementWidth { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyElementHeight __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyElementHeight", "__Internal")]
        NSString IOSurfacePropertyKeyElementHeight { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyOffset __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyOffset", "__Internal")]
        NSString IOSurfacePropertyKeyOffset { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyPlaneInfo __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyPlaneInfo", "__Internal")]
        NSString IOSurfacePropertyKeyPlaneInfo { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyPlaneWidth __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyPlaneWidth", "__Internal")]
        NSString IOSurfacePropertyKeyPlaneWidth { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyPlaneHeight __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyPlaneHeight", "__Internal")]
        NSString IOSurfacePropertyKeyPlaneHeight { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyPlaneBytesPerRow __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyPlaneBytesPerRow", "__Internal")]
        NSString IOSurfacePropertyKeyPlaneBytesPerRow { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyPlaneOffset __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyPlaneOffset", "__Internal")]
        NSString IOSurfacePropertyKeyPlaneOffset { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyPlaneSize __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyPlaneSize", "__Internal")]
        NSString IOSurfacePropertyKeyPlaneSize { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyPlaneBase __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyPlaneBase", "__Internal")]
        NSString IOSurfacePropertyKeyPlaneBase { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyPlaneBytesPerElement __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyPlaneBytesPerElement", "__Internal")]
        NSString IOSurfacePropertyKeyPlaneBytesPerElement { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyPlaneElementWidth __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyPlaneElementWidth", "__Internal")]
        NSString IOSurfacePropertyKeyPlaneElementWidth { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyPlaneElementHeight __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyPlaneElementHeight", "__Internal")]
        NSString IOSurfacePropertyKeyPlaneElementHeight { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyCacheMode __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyCacheMode", "__Internal")]
        NSString IOSurfacePropertyKeyCacheMode { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyPixelFormat __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyPixelFormat", "__Internal")]
        NSString IOSurfacePropertyKeyPixelFormat { get; }

        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyKeyPixelSizeCastingAllowed __attribute__((availability(ios, introduced=10.0)));
        [iOS(10, 0)]
        [Field("IOSurfacePropertyKeyPixelSizeCastingAllowed", "__Internal")]
        NSString IOSurfacePropertyKeyPixelSizeCastingAllowed { get; }
    }

    // @interface IOSurface : NSObject <NSSecureCoding>
    [iOS(10, 0)]
    [BaseType(typeof(NSObject))]
    interface IOSurface : INSSecureCoding
    {
        // -(instancetype _Nullable)initWithProperties:(NSDictionary<IOSurfacePropertyKey,id> * _Nonnull)properties;
        [Export("initWithProperties:")]
        IntPtr Constructor(NSDictionary<NSString, NSObject> properties);

        // -(kern_return_t)lockWithOptions:(IOSurfaceLockOptions)options seed:(uint32_t * _Nullable)seed;
        [Export("lockWithOptions:seed:")]
        unsafe int LockWithOptions(IOSurfaceLockOptions options, [NullAllowed] uint* seed);

        // -(kern_return_t)unlockWithOptions:(IOSurfaceLockOptions)options seed:(uint32_t * _Nullable)seed;
        [Export("unlockWithOptions:seed:")]
        unsafe int UnlockWithOptions(IOSurfaceLockOptions options, [NullAllowed] uint* seed);

        // @property (readonly) NSInteger allocationSize;
        [Export("allocationSize")]
        nint AllocationSize { get; }

        // @property (readonly) NSInteger width;
        [Export("width")]
        nint Width { get; }

        // @property (readonly) NSInteger height;
        [Export("height")]
        nint Height { get; }

        // @property (readonly) void * _Nonnull baseAddress __attribute__((objc_returns_inner_pointer));
        [Export("baseAddress")]
        unsafe void* BaseAddress { get; }

        // @property (readonly) OSType pixelFormat;
        [Export("pixelFormat")]
        uint PixelFormat { get; }

        // @property (readonly) NSInteger bytesPerRow;
        [Export("bytesPerRow")]
        nint BytesPerRow { get; }

        // @property (readonly) NSInteger bytesPerElement;
        [Export("bytesPerElement")]
        nint BytesPerElement { get; }

        // @property (readonly) NSInteger elementWidth;
        [Export("elementWidth")]
        nint ElementWidth { get; }

        // @property (readonly) NSInteger elementHeight;
        [Export("elementHeight")]
        nint ElementHeight { get; }

        // @property (readonly) uint32_t seed;
        [Export("seed")]
        uint Seed { get; }

        // @property (readonly) NSUInteger planeCount;
        [Export("planeCount")]
        nuint PlaneCount { get; }

        // -(NSInteger)widthOfPlaneAtIndex:(NSUInteger)planeIndex;
        [Export("widthOfPlaneAtIndex:")]
        nint WidthOfPlaneAtIndex(nuint planeIndex);

        // -(NSInteger)heightOfPlaneAtIndex:(NSUInteger)planeIndex;
        [Export("heightOfPlaneAtIndex:")]
        nint HeightOfPlaneAtIndex(nuint planeIndex);

        // -(NSInteger)bytesPerRowOfPlaneAtIndex:(NSUInteger)planeIndex;
        [Export("bytesPerRowOfPlaneAtIndex:")]
        nint BytesPerRowOfPlaneAtIndex(nuint planeIndex);

        // -(NSInteger)bytesPerElementOfPlaneAtIndex:(NSUInteger)planeIndex;
        [Export("bytesPerElementOfPlaneAtIndex:")]
        nint BytesPerElementOfPlaneAtIndex(nuint planeIndex);

        // -(NSInteger)elementWidthOfPlaneAtIndex:(NSUInteger)planeIndex;
        [Export("elementWidthOfPlaneAtIndex:")]
        nint ElementWidthOfPlaneAtIndex(nuint planeIndex);

        // -(NSInteger)elementHeightOfPlaneAtIndex:(NSUInteger)planeIndex;
        [Export("elementHeightOfPlaneAtIndex:")]
        nint ElementHeightOfPlaneAtIndex(nuint planeIndex);

        // -(void * _Nonnull)baseAddressOfPlaneAtIndex:(NSUInteger)planeIndex __attribute__((objc_returns_inner_pointer));
        [Export("baseAddressOfPlaneAtIndex:")]
        unsafe void* BaseAddressOfPlaneAtIndex(nuint planeIndex);

        // -(void)setAttachment:(id _Nonnull)anObject forKey:(NSString * _Nonnull)key;
        [Export("setAttachment:forKey:")]
        void SetAttachment(NSObject anObject, string key);

        // -(id _Nullable)attachmentForKey:(NSString * _Nonnull)key;
        [Export("attachmentForKey:")]
        [return: NullAllowed]
        NSObject AttachmentForKey(string key);

        // -(void)removeAttachmentForKey:(NSString * _Nonnull)key;
        [Export("removeAttachmentForKey:")]
        void RemoveAttachmentForKey(string key);

        // -(NSDictionary<NSString *,id> * _Nullable)allAttachments;
        // -(void)setAllAttachments:(NSDictionary<NSString *,id> * _Nonnull)dict;
        [NullAllowed, Export("allAttachments")]
        [Verify(MethodToProperty)]
        NSDictionary<NSString, NSObject> AllAttachments { get; set; }

        // -(void)removeAllAttachments;
        [Export("removeAllAttachments")]
        void RemoveAllAttachments();

        // @property (readonly, getter = isInUse) BOOL inUse;
        [Export("inUse")]
        bool InUse { [Bind("isInUse")] get; }

        // -(void)incrementUseCount;
        [Export("incrementUseCount")]
        void IncrementUseCount();

        // -(void)decrementUseCount;
        [Export("decrementUseCount")]
        void DecrementUseCount();

        // @property (readonly) int32_t localUseCount;
        [Export("localUseCount")]
        int LocalUseCount { get; }

        // @property (readonly) BOOL allowsPixelSizeCasting;
        [Export("allowsPixelSizeCasting")]
        bool AllowsPixelSizeCasting { get; }

        // -(kern_return_t)setPurgeable:(IOSurfacePurgeabilityState)newState oldState:(IOSurfacePurgeabilityState * _Nullable)oldState __attribute__((availability(ios, introduced=11.0)));
        [iOS(11, 0)]
        [Export("setPurgeable:oldState:")]
        unsafe int SetPurgeable(IOSurfacePurgeabilityState newState, [NullAllowed] IOSurfacePurgeabilityState* oldState);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern IOSurfacePropertyKey _Nonnull IOSurfacePropertyAllocSizeKey __attribute__((availability(ios, introduced=10.0, deprecated=12.0)));
        [Introduced(PlatformName.iOS, 10, 0)]
        [Deprecated(PlatformName.iOS, 12, 0)]
        [Field("IOSurfacePropertyAllocSizeKey", "__Internal")]
        NSString IOSurfacePropertyAllocSizeKey { get; }
    }

    // @interface CIRenderDestination : NSObject
    [iOS(11, 0)]
    [BaseType(typeof(NSObject))]
    interface CIRenderDestination
    {
        // -(instancetype _Nonnull)initWithPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer;
        [Export("initWithPixelBuffer:")]
        unsafe IntPtr Constructor(CVPixelBufferRef* pixelBuffer);

        // -(instancetype _Nonnull)initWithIOSurface:(IOSurface * _Nonnull)surface;
        [Export("initWithIOSurface:")]
        IntPtr Constructor(IOSurface surface);

        // -(instancetype _Nonnull)initWithMTLTexture:(id<MTLTexture> _Nonnull)texture commandBuffer:(id<MTLCommandBuffer> _Nullable)commandBuffer;
        [Export("initWithMTLTexture:commandBuffer:")]
        IntPtr Constructor(MTLTexture texture, [NullAllowed] MTLCommandBuffer commandBuffer);

        // -(instancetype _Nonnull)initWithWidth:(NSUInteger)width height:(NSUInteger)height pixelFormat:(MTLPixelFormat)pixelFormat commandBuffer:(id<MTLCommandBuffer> _Nullable)commandBuffer mtlTextureProvider:(id<MTLTexture>  _Nonnull (^ _Nullable)(void))block;
        [Export("initWithWidth:height:pixelFormat:commandBuffer:mtlTextureProvider:")]
        IntPtr Constructor(nuint width, nuint height, MTLPixelFormat pixelFormat, [NullAllowed] MTLCommandBuffer commandBuffer, [NullAllowed] Func<MTLTexture> block);

        // -(instancetype _Nonnull)initWithGLTexture:(unsigned int)texture target:(unsigned int)target width:(NSUInteger)width height:(NSUInteger)height;
        [Export("initWithGLTexture:target:width:height:")]
        IntPtr Constructor(uint texture, uint target, nuint width, nuint height);

        // -(instancetype _Nonnull)initWithBitmapData:(void * _Nonnull)data width:(NSUInteger)width height:(NSUInteger)height bytesPerRow:(NSUInteger)bytesPerRow format:(CIFormat)format;
        [Export("initWithBitmapData:width:height:bytesPerRow:format:")]
        unsafe IntPtr Constructor(void* data, nuint width, nuint height, nuint bytesPerRow, int format);

        // @property (readonly) NSUInteger width;
        [Export("width")]
        nuint Width { get; }

        // @property (readonly) NSUInteger height;
        [Export("height")]
        nuint Height { get; }

        // @property CIRenderDestinationAlphaMode alphaMode;
        [Export("alphaMode", ArgumentSemantic.Assign)]
        CIRenderDestinationAlphaMode AlphaMode { get; set; }

        // @property (getter = isFlipped) BOOL flipped;
        [Export("flipped")]
        bool Flipped { [Bind("isFlipped")] get; set; }

        // @property (getter = isDithered) BOOL dithered;
        [Export("dithered")]
        bool Dithered { [Bind("isDithered")] get; set; }

        // @property (getter = isClamped) BOOL clamped;
        [Export("clamped")]
        bool Clamped { [Bind("isClamped")] get; set; }

        // @property (nonatomic) CGColorSpaceRef _Nullable colorSpace;
        [NullAllowed, Export("colorSpace", ArgumentSemantic.Assign)]
        unsafe CGColorSpaceRef* ColorSpace { get; set; }

        // @property (retain, nonatomic) CIBlendKernel * _Nullable blendKernel;
        [NullAllowed, Export("blendKernel", ArgumentSemantic.Retain)]
        CIBlendKernel BlendKernel { get; set; }

        // @property BOOL blendsInDestinationColorSpace;
        [Export("blendsInDestinationColorSpace")]
        bool BlendsInDestinationColorSpace { get; set; }
    }

    // @interface CIRenderInfo : NSObject
    [iOS(11, 0)]
    [BaseType(typeof(NSObject))]
    interface CIRenderInfo
    {
        // @property (readonly) NSTimeInterval kernelExecutionTime;
        [Export("kernelExecutionTime")]
        double KernelExecutionTime { get; }

        // @property (readonly) NSInteger passCount;
        [Export("passCount")]
        nint PassCount { get; }

        // @property (readonly) NSInteger pixelsProcessed;
        [Export("pixelsProcessed")]
        nint PixelsProcessed { get; }
    }

    // @interface CIRenderTask : NSObject
    [iOS(11, 0)]
    [BaseType(typeof(NSObject))]
    interface CIRenderTask
    {
        // -(CIRenderInfo * _Nullable)waitUntilCompletedAndReturnError:(NSError * _Nullable * _Nullable)error;
        [Export("waitUntilCompletedAndReturnError:")]
        [return: NullAllowed]
        CIRenderInfo WaitUntilCompletedAndReturnError([NullAllowed] out NSError error);
    }

    // @interface CIRenderDestination (CIContext)
    [Category]
    [BaseType(typeof(CIContext))]
    interface CIContext_CIRenderDestination
    {
        // -(CIRenderTask * _Nullable)startTaskToRender:(CIImage * _Nonnull)image fromRect:(CGRect)fromRect toDestination:(CIRenderDestination * _Nonnull)destination atPoint:(CGPoint)atPoint error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("startTaskToRender:fromRect:toDestination:atPoint:error:")]
        [return: NullAllowed]
        CIRenderTask StartTaskToRender(CIImage image, CGRect fromRect, CIRenderDestination destination, CGPoint atPoint, [NullAllowed] out NSError error);

        // -(CIRenderTask * _Nullable)startTaskToRender:(CIImage * _Nonnull)image toDestination:(CIRenderDestination * _Nonnull)destination error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("startTaskToRender:toDestination:error:")]
        [return: NullAllowed]
        CIRenderTask StartTaskToRender(CIImage image, CIRenderDestination destination, [NullAllowed] out NSError error);

        // -(BOOL)prepareRender:(CIImage * _Nonnull)image fromRect:(CGRect)fromRect toDestination:(CIRenderDestination * _Nonnull)destination atPoint:(CGPoint)atPoint error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("prepareRender:fromRect:toDestination:atPoint:error:")]
        bool PrepareRender(CIImage image, CGRect fromRect, CIRenderDestination destination, CGPoint atPoint, [NullAllowed] out NSError error);

        // -(CIRenderTask * _Nullable)startTaskToClear:(CIRenderDestination * _Nonnull)destination error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Export("startTaskToClear:error:")]
        [return: NullAllowed]
        CIRenderTask StartTaskToClear(CIRenderDestination destination, [NullAllowed] out NSError error);
    }

    // @interface CIBarcodeDescriptor : NSObject <NSSecureCoding, NSCopying>
    [iOS(11, 0)]
    [BaseType(typeof(NSObject))]
    interface CIBarcodeDescriptor : INSSecureCoding, INSCopying
    {
    }

    // @interface CIQRCodeDescriptor : CIBarcodeDescriptor
    [iOS(11, 0)]
    [BaseType(typeof(CIBarcodeDescriptor))]
    interface CIQRCodeDescriptor
    {
        // @property (readonly) NSData * _Nonnull errorCorrectedPayload;
        [Export("errorCorrectedPayload")]
        NSData ErrorCorrectedPayload { get; }

        // @property (readonly) NSInteger symbolVersion;
        [Export("symbolVersion")]
        nint SymbolVersion { get; }

        // @property (readonly) uint8_t maskPattern;
        [Export("maskPattern")]
        byte MaskPattern { get; }

        // @property (readonly) CIQRCodeErrorCorrectionLevel errorCorrectionLevel;
        [Export("errorCorrectionLevel")]
        CIQRCodeErrorCorrectionLevel ErrorCorrectionLevel { get; }

        // -(instancetype _Nullable)initWithPayload:(NSData * _Nonnull)errorCorrectedPayload symbolVersion:(NSInteger)symbolVersion maskPattern:(uint8_t)maskPattern errorCorrectionLevel:(CIQRCodeErrorCorrectionLevel)errorCorrectionLevel;
        [Export("initWithPayload:symbolVersion:maskPattern:errorCorrectionLevel:")]
        IntPtr Constructor(NSData errorCorrectedPayload, nint symbolVersion, byte maskPattern, CIQRCodeErrorCorrectionLevel errorCorrectionLevel);

        // +(instancetype _Nullable)descriptorWithPayload:(NSData * _Nonnull)errorCorrectedPayload symbolVersion:(NSInteger)symbolVersion maskPattern:(uint8_t)maskPattern errorCorrectionLevel:(CIQRCodeErrorCorrectionLevel)errorCorrectionLevel;
        [Static]
        [Export("descriptorWithPayload:symbolVersion:maskPattern:errorCorrectionLevel:")]
        [return: NullAllowed]
        CIQRCodeDescriptor DescriptorWithPayload(NSData errorCorrectedPayload, nint symbolVersion, byte maskPattern, CIQRCodeErrorCorrectionLevel errorCorrectionLevel);
    }

    // @interface CIAztecCodeDescriptor : CIBarcodeDescriptor
    [iOS(11, 0)]
    [BaseType(typeof(CIBarcodeDescriptor))]
    interface CIAztecCodeDescriptor
    {
        // @property (readonly) NSData * _Nonnull errorCorrectedPayload;
        [Export("errorCorrectedPayload")]
        NSData ErrorCorrectedPayload { get; }

        // @property (readonly) BOOL isCompact;
        [Export("isCompact")]
        bool IsCompact { get; }

        // @property (readonly) NSInteger layerCount;
        [Export("layerCount")]
        nint LayerCount { get; }

        // @property (readonly) NSInteger dataCodewordCount;
        [Export("dataCodewordCount")]
        nint DataCodewordCount { get; }

        // -(instancetype _Nullable)initWithPayload:(NSData * _Nonnull)errorCorrectedPayload isCompact:(BOOL)isCompact layerCount:(NSInteger)layerCount dataCodewordCount:(NSInteger)dataCodewordCount;
        [Export("initWithPayload:isCompact:layerCount:dataCodewordCount:")]
        IntPtr Constructor(NSData errorCorrectedPayload, bool isCompact, nint layerCount, nint dataCodewordCount);

        // +(instancetype _Nullable)descriptorWithPayload:(NSData * _Nonnull)errorCorrectedPayload isCompact:(BOOL)isCompact layerCount:(NSInteger)layerCount dataCodewordCount:(NSInteger)dataCodewordCount;
        [Static]
        [Export("descriptorWithPayload:isCompact:layerCount:dataCodewordCount:")]
        [return: NullAllowed]
        CIAztecCodeDescriptor DescriptorWithPayload(NSData errorCorrectedPayload, bool isCompact, nint layerCount, nint dataCodewordCount);
    }

    // @interface CIPDF417CodeDescriptor : CIBarcodeDescriptor
    [iOS(11, 0)]
    [BaseType(typeof(CIBarcodeDescriptor))]
    interface CIPDF417CodeDescriptor
    {
        // @property (readonly) NSData * _Nonnull errorCorrectedPayload;
        [Export("errorCorrectedPayload")]
        NSData ErrorCorrectedPayload { get; }

        // @property (readonly) BOOL isCompact;
        [Export("isCompact")]
        bool IsCompact { get; }

        // @property (readonly) NSInteger rowCount;
        [Export("rowCount")]
        nint RowCount { get; }

        // @property (readonly) NSInteger columnCount;
        [Export("columnCount")]
        nint ColumnCount { get; }

        // -(instancetype _Nullable)initWithPayload:(NSData * _Nonnull)errorCorrectedPayload isCompact:(BOOL)isCompact rowCount:(NSInteger)rowCount columnCount:(NSInteger)columnCount;
        [Export("initWithPayload:isCompact:rowCount:columnCount:")]
        IntPtr Constructor(NSData errorCorrectedPayload, bool isCompact, nint rowCount, nint columnCount);

        // +(instancetype _Nullable)descriptorWithPayload:(NSData * _Nonnull)errorCorrectedPayload isCompact:(BOOL)isCompact rowCount:(NSInteger)rowCount columnCount:(NSInteger)columnCount;
        [Static]
        [Export("descriptorWithPayload:isCompact:rowCount:columnCount:")]
        [return: NullAllowed]
        CIPdf417CodeDescriptor DescriptorWithPayload(NSData errorCorrectedPayload, bool isCompact, nint rowCount, nint columnCount);
    }

    // @interface CIDataMatrixCodeDescriptor : CIBarcodeDescriptor
    [iOS(11, 0)]
    [BaseType(typeof(CIBarcodeDescriptor))]
    interface CIDataMatrixCodeDescriptor
    {
        // @property (readonly) NSData * _Nonnull errorCorrectedPayload;
        [Export("errorCorrectedPayload")]
        NSData ErrorCorrectedPayload { get; }

        // @property (readonly) NSInteger rowCount;
        [Export("rowCount")]
        nint RowCount { get; }

        // @property (readonly) NSInteger columnCount;
        [Export("columnCount")]
        nint ColumnCount { get; }

        // @property (readonly) CIDataMatrixCodeECCVersion eccVersion;
        [Export("eccVersion")]
        CIDataMatrixCodeECCVersion EccVersion { get; }

        // -(instancetype _Nullable)initWithPayload:(NSData * _Nonnull)errorCorrectedPayload rowCount:(NSInteger)rowCount columnCount:(NSInteger)columnCount eccVersion:(CIDataMatrixCodeECCVersion)eccVersion;
        [Export("initWithPayload:rowCount:columnCount:eccVersion:")]
        IntPtr Constructor(NSData errorCorrectedPayload, nint rowCount, nint columnCount, CIDataMatrixCodeECCVersion eccVersion);

        // +(instancetype _Nullable)descriptorWithPayload:(NSData * _Nonnull)errorCorrectedPayload rowCount:(NSInteger)rowCount columnCount:(NSInteger)columnCount eccVersion:(CIDataMatrixCodeECCVersion)eccVersion;
        [Static]
        [Export("descriptorWithPayload:rowCount:columnCount:eccVersion:")]
        [return: NullAllowed]
        CIDataMatrixCodeDescriptor DescriptorWithPayload(NSData errorCorrectedPayload, nint rowCount, nint columnCount, CIDataMatrixCodeECCVersion eccVersion);
    }

    // @interface CIBarcodeDescriptor (NSUserActivity)
    [Category]
    [BaseType(typeof(NSUserActivity))]
    interface NSUserActivity_CIBarcodeDescriptor
    {
        // @property (readonly, copy, nonatomic) CIBarcodeDescriptor * _Nullable detectedBarcodeDescriptor __attribute__((availability(tvos, introduced=11.3))) __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
        [TV(11, 3), Mac(10, 13, 4), iOS(11, 3)]
        [NullAllowed, Export("detectedBarcodeDescriptor", ArgumentSemantic.Copy)]
        CIBarcodeDescriptor DetectedBarcodeDescriptor { get; }
    }

    // @interface UIColor : NSObject <NSSecureCoding, NSCopying>
    [iOS(2, 0)]
    [BaseType(typeof(NSObject))]
    interface UIColor : INSSecureCoding, INSCopying
    {
        // +(UIColor * _Nonnull)colorWithWhite:(CGFloat)white alpha:(CGFloat)alpha;
        [Static]
        [Export("colorWithWhite:alpha:")]
        UIColor ColorWithWhite(nfloat white, nfloat alpha);

        // +(UIColor * _Nonnull)colorWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness alpha:(CGFloat)alpha;
        [Static]
        [Export("colorWithHue:saturation:brightness:alpha:")]
        UIColor ColorWithHue(nfloat hue, nfloat saturation, nfloat brightness, nfloat alpha);

        // +(UIColor * _Nonnull)colorWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha;
        [Static]
        [Export("colorWithRed:green:blue:alpha:")]
        UIColor ColorWithRed(nfloat red, nfloat green, nfloat blue, nfloat alpha);

        // +(UIColor * _Nonnull)colorWithDisplayP3Red:(CGFloat)displayP3Red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Static]
        [Export("colorWithDisplayP3Red:green:blue:alpha:")]
        UIColor ColorWithDisplayP3Red(nfloat displayP3Red, nfloat green, nfloat blue, nfloat alpha);

        // +(UIColor * _Nonnull)colorWithCGColor:(CGColorRef _Nonnull)cgColor;
        [Static]
        [Export("colorWithCGColor:")]
        unsafe UIColor ColorWithCGColor(CGColorRef* cgColor);

        // +(UIColor * _Nonnull)colorWithPatternImage:(UIImage * _Nonnull)image;
        [Static]
        [Export("colorWithPatternImage:")]
        UIColor ColorWithPatternImage(UIImage image);

        // +(UIColor * _Nonnull)colorWithCIColor:(CIColor * _Nonnull)ciColor __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Static]
        [Export("colorWithCIColor:")]
        UIColor ColorWithCIColor(CIColor ciColor);

        // -(UIColor * _Nonnull)initWithWhite:(CGFloat)white alpha:(CGFloat)alpha;
        [Export("initWithWhite:alpha:")]
        IntPtr Constructor(nfloat white, nfloat alpha);

        // -(UIColor * _Nonnull)initWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness alpha:(CGFloat)alpha;
        [Export("initWithHue:saturation:brightness:alpha:")]
        IntPtr Constructor(nfloat hue, nfloat saturation, nfloat brightness, nfloat alpha);

        // -(UIColor * _Nonnull)initWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha;
        [Export("initWithRed:green:blue:alpha:")]
        IntPtr Constructor(nfloat red, nfloat green, nfloat blue, nfloat alpha);

        // -(UIColor * _Nonnull)initWithDisplayP3Red:(CGFloat)displayP3Red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("initWithDisplayP3Red:green:blue:alpha:")]
        IntPtr Constructor(nfloat displayP3Red, nfloat green, nfloat blue, nfloat alpha);

        // -(UIColor * _Nonnull)initWithCGColor:(CGColorRef _Nonnull)cgColor;
        [Export("initWithCGColor:")]
        unsafe IntPtr Constructor(CGColorRef* cgColor);

        // -(UIColor * _Nonnull)initWithPatternImage:(UIImage * _Nonnull)image;
        [Export("initWithPatternImage:")]
        IntPtr Constructor(UIImage image);

        // -(UIColor * _Nonnull)initWithCIColor:(CIColor * _Nonnull)ciColor __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("initWithCIColor:")]
        IntPtr Constructor(CIColor ciColor);

        // @property (readonly, nonatomic, class) UIColor * _Nonnull blackColor;
        [Static]
        [Export("blackColor")]
        UIColor BlackColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull darkGrayColor;
        [Static]
        [Export("darkGrayColor")]
        UIColor DarkGrayColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull lightGrayColor;
        [Static]
        [Export("lightGrayColor")]
        UIColor LightGrayColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull whiteColor;
        [Static]
        [Export("whiteColor")]
        UIColor WhiteColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull grayColor;
        [Static]
        [Export("grayColor")]
        UIColor GrayColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull redColor;
        [Static]
        [Export("redColor")]
        UIColor RedColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull greenColor;
        [Static]
        [Export("greenColor")]
        UIColor GreenColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull blueColor;
        [Static]
        [Export("blueColor")]
        UIColor BlueColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull cyanColor;
        [Static]
        [Export("cyanColor")]
        UIColor CyanColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull yellowColor;
        [Static]
        [Export("yellowColor")]
        UIColor YellowColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull magentaColor;
        [Static]
        [Export("magentaColor")]
        UIColor MagentaColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull orangeColor;
        [Static]
        [Export("orangeColor")]
        UIColor OrangeColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull purpleColor;
        [Static]
        [Export("purpleColor")]
        UIColor PurpleColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull brownColor;
        [Static]
        [Export("brownColor")]
        UIColor BrownColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull clearColor;
        [Static]
        [Export("clearColor")]
        UIColor ClearColor { get; }

        // -(void)set;
        [Export("set")]
        void Set();

        // -(void)setFill;
        [Export("setFill")]
        void SetFill();

        // -(void)setStroke;
        [Export("setStroke")]
        void SetStroke();

        // -(BOOL)getWhite:(CGFloat * _Nullable)white alpha:(CGFloat * _Nullable)alpha __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("getWhite:alpha:")]
        unsafe bool GetWhite([NullAllowed] nfloat* white, [NullAllowed] nfloat* alpha);

        // -(BOOL)getHue:(CGFloat * _Nullable)hue saturation:(CGFloat * _Nullable)saturation brightness:(CGFloat * _Nullable)brightness alpha:(CGFloat * _Nullable)alpha __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("getHue:saturation:brightness:alpha:")]
        unsafe bool GetHue([NullAllowed] nfloat* hue, [NullAllowed] nfloat* saturation, [NullAllowed] nfloat* brightness, [NullAllowed] nfloat* alpha);

        // -(BOOL)getRed:(CGFloat * _Nullable)red green:(CGFloat * _Nullable)green blue:(CGFloat * _Nullable)blue alpha:(CGFloat * _Nullable)alpha __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("getRed:green:blue:alpha:")]
        unsafe bool GetRed([NullAllowed] nfloat* red, [NullAllowed] nfloat* green, [NullAllowed] nfloat* blue, [NullAllowed] nfloat* alpha);

        // -(UIColor * _Nonnull)colorWithAlphaComponent:(CGFloat)alpha;
        [Export("colorWithAlphaComponent:")]
        UIColor ColorWithAlphaComponent(nfloat alpha);

        // @property (readonly, nonatomic) CGColorRef _Nonnull CGColor;
        [Export("CGColor")]
        unsafe CGColorRef* CGColor { get; }

        // @property (readonly, nonatomic) CIColor * _Nonnull CIColor __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("CIColor")]
        CIColor CIColor { get; }
    }

    // @interface UINSItemProvider (UIColor) <NSItemProviderReading, NSItemProviderWriting>
    [Category]
    [BaseType(typeof(UIColor))]
    interface UIColor_UINSItemProvider : INSItemProviderReading, INSItemProviderWriting
    {
    }

    // @interface UIKitAdditions (CIColor)
    [Category]
    [BaseType(typeof(CIColor))]
    interface CIColor_UIKitAdditions
    {
        // -(instancetype _Nonnull)initWithColor:(UIColor * _Nonnull)color __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("initWithColor:")]
        IntPtr Constructor(UIColor color);
    }

    // @interface UIColorNamedColors (UIColor)
    [Category]
    [BaseType(typeof(UIColor))]
    interface UIColor_UIColorNamedColors
    {
        // +(UIColor * _Nullable)colorNamed:(NSString * _Nonnull)name __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Static]
        [Export("colorNamed:")]
        [return: NullAllowed]
        UIColor ColorNamed(string name);

        // +(UIColor * _Nullable)colorNamed:(NSString * _Nonnull)name inBundle:(NSBundle * _Nullable)bundle compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(ios, introduced=11_0)));
        [iOS(11, 0)]
        [Static]
        [Export("colorNamed:inBundle:compatibleWithTraitCollection:")]
        [return: NullAllowed]
        UIColor ColorNamed(string name, [NullAllowed] NSBundle bundle, [NullAllowed] UITraitCollection traitCollection);
    }

    // @interface UIFontDescriptor : NSObject <NSCopying, NSSecureCoding>
    [iOS(7, 0)]
    [BaseType(typeof(NSObject))]
    interface UIFontDescriptor : INSCopying, INSSecureCoding
    {
        // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
        [Export("initWithCoder:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSCoder aDecoder);

        // @property (readonly, nonatomic) NSString * _Nonnull postscriptName;
        [Export("postscriptName")]
        string PostscriptName { get; }

        // @property (readonly, nonatomic) CGFloat pointSize;
        [Export("pointSize")]
        nfloat PointSize { get; }

        // @property (readonly, nonatomic) CGAffineTransform matrix;
        [Export("matrix")]
        CGAffineTransform Matrix { get; }

        // @property (readonly, nonatomic) UIFontDescriptorSymbolicTraits symbolicTraits;
        [Export("symbolicTraits")]
        UIFontDescriptorSymbolicTraits SymbolicTraits { get; }

        // -(id _Nullable)objectForKey:(UIFontDescriptorAttributeName _Nonnull)anAttribute;
        [Export("objectForKey:")]
        [return: NullAllowed]
        NSObject ObjectForKey(string anAttribute);

        // @property (readonly, nonatomic) NSDictionary<UIFontDescriptorAttributeName,id> * _Nonnull fontAttributes;
        [Export("fontAttributes")]
        NSDictionary<NSString, NSObject> FontAttributes { get; }

        // -(NSArray<UIFontDescriptor *> * _Nonnull)matchingFontDescriptorsWithMandatoryKeys:(NSSet<UIFontDescriptorAttributeName> * _Nullable)mandatoryKeys;
        [Export("matchingFontDescriptorsWithMandatoryKeys:")]
        UIFontDescriptor[] MatchingFontDescriptorsWithMandatoryKeys([NullAllowed] NSSet<NSString> mandatoryKeys);

        // +(UIFontDescriptor * _Nonnull)fontDescriptorWithFontAttributes:(NSDictionary<UIFontDescriptorAttributeName,id> * _Nonnull)attributes;
        [Static]
        [Export("fontDescriptorWithFontAttributes:")]
        UIFontDescriptor FontDescriptorWithFontAttributes(NSDictionary<NSString, NSObject> attributes);

        // +(UIFontDescriptor * _Nonnull)fontDescriptorWithName:(NSString * _Nonnull)fontName size:(CGFloat)size;
        [Static]
        [Export("fontDescriptorWithName:size:")]
        UIFontDescriptor FontDescriptorWithName(string fontName, nfloat size);

        // +(UIFontDescriptor * _Nonnull)fontDescriptorWithName:(NSString * _Nonnull)fontName matrix:(CGAffineTransform)matrix;
        [Static]
        [Export("fontDescriptorWithName:matrix:")]
        UIFontDescriptor FontDescriptorWithName(string fontName, CGAffineTransform matrix);

        // +(UIFontDescriptor * _Nonnull)preferredFontDescriptorWithTextStyle:(UIFontTextStyle _Nonnull)style;
        [Static]
        [Export("preferredFontDescriptorWithTextStyle:")]
        UIFontDescriptor PreferredFontDescriptorWithTextStyle(string style);

        // +(UIFontDescriptor * _Nonnull)preferredFontDescriptorWithTextStyle:(UIFontTextStyle _Nonnull)style compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=10_0)));
        [NoWatch, iOS(10, 0)]
        [Static]
        [Export("preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:")]
        UIFontDescriptor PreferredFontDescriptorWithTextStyle(string style, [NullAllowed] UITraitCollection traitCollection);

        // -(instancetype _Nonnull)initWithFontAttributes:(NSDictionary<UIFontDescriptorAttributeName,id> * _Nonnull)attributes __attribute__((objc_designated_initializer));
        [Export("initWithFontAttributes:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSDictionary<NSString, NSObject> attributes);

        // -(UIFontDescriptor * _Nonnull)fontDescriptorByAddingAttributes:(NSDictionary<UIFontDescriptorAttributeName,id> * _Nonnull)attributes;
        [Export("fontDescriptorByAddingAttributes:")]
        UIFontDescriptor FontDescriptorByAddingAttributes(NSDictionary<NSString, NSObject> attributes);

        // -(UIFontDescriptor * _Nonnull)fontDescriptorWithSize:(CGFloat)newPointSize;
        [Export("fontDescriptorWithSize:")]
        UIFontDescriptor FontDescriptorWithSize(nfloat newPointSize);

        // -(UIFontDescriptor * _Nonnull)fontDescriptorWithMatrix:(CGAffineTransform)matrix;
        [Export("fontDescriptorWithMatrix:")]
        UIFontDescriptor FontDescriptorWithMatrix(CGAffineTransform matrix);

        // -(UIFontDescriptor * _Nonnull)fontDescriptorWithFace:(NSString * _Nonnull)newFace;
        [Export("fontDescriptorWithFace:")]
        UIFontDescriptor FontDescriptorWithFace(string newFace);

        // -(UIFontDescriptor * _Nonnull)fontDescriptorWithFamily:(NSString * _Nonnull)newFamily;
        [Export("fontDescriptorWithFamily:")]
        UIFontDescriptor FontDescriptorWithFamily(string newFamily);

        // -(UIFontDescriptor * _Nullable)fontDescriptorWithSymbolicTraits:(UIFontDescriptorSymbolicTraits)symbolicTraits;
        [Export("fontDescriptorWithSymbolicTraits:")]
        [return: NullAllowed]
        UIFontDescriptor FontDescriptorWithSymbolicTraits(UIFontDescriptorSymbolicTraits symbolicTraits);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const UIFontDescriptorAttributeName _Nonnull UIFontDescriptorFamilyAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontDescriptorFamilyAttribute", "__Internal")]
        NSString UIFontDescriptorFamilyAttribute { get; }

        // extern const UIFontDescriptorAttributeName _Nonnull UIFontDescriptorNameAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontDescriptorNameAttribute", "__Internal")]
        NSString UIFontDescriptorNameAttribute { get; }

        // extern const UIFontDescriptorAttributeName _Nonnull UIFontDescriptorFaceAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontDescriptorFaceAttribute", "__Internal")]
        NSString UIFontDescriptorFaceAttribute { get; }

        // extern const UIFontDescriptorAttributeName _Nonnull UIFontDescriptorSizeAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontDescriptorSizeAttribute", "__Internal")]
        NSString UIFontDescriptorSizeAttribute { get; }

        // extern const UIFontDescriptorAttributeName _Nonnull UIFontDescriptorVisibleNameAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontDescriptorVisibleNameAttribute", "__Internal")]
        NSString UIFontDescriptorVisibleNameAttribute { get; }

        // extern const UIFontDescriptorAttributeName _Nonnull UIFontDescriptorMatrixAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontDescriptorMatrixAttribute", "__Internal")]
        NSString UIFontDescriptorMatrixAttribute { get; }

        // extern const UIFontDescriptorAttributeName _Nonnull UIFontDescriptorCharacterSetAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontDescriptorCharacterSetAttribute", "__Internal")]
        NSString UIFontDescriptorCharacterSetAttribute { get; }

        // extern const UIFontDescriptorAttributeName _Nonnull UIFontDescriptorCascadeListAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontDescriptorCascadeListAttribute", "__Internal")]
        NSString UIFontDescriptorCascadeListAttribute { get; }

        // extern const UIFontDescriptorAttributeName _Nonnull UIFontDescriptorTraitsAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontDescriptorTraitsAttribute", "__Internal")]
        NSString UIFontDescriptorTraitsAttribute { get; }

        // extern const UIFontDescriptorAttributeName _Nonnull UIFontDescriptorFixedAdvanceAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontDescriptorFixedAdvanceAttribute", "__Internal")]
        NSString UIFontDescriptorFixedAdvanceAttribute { get; }

        // extern const UIFontDescriptorAttributeName _Nonnull UIFontDescriptorFeatureSettingsAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontDescriptorFeatureSettingsAttribute", "__Internal")]
        NSString UIFontDescriptorFeatureSettingsAttribute { get; }

        // extern const UIFontDescriptorAttributeName _Nonnull UIFontDescriptorTextStyleAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontDescriptorTextStyleAttribute", "__Internal")]
        NSString UIFontDescriptorTextStyleAttribute { get; }

        // extern const UIFontDescriptorTraitKey _Nonnull UIFontSymbolicTrait __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontSymbolicTrait", "__Internal")]
        NSString UIFontSymbolicTrait { get; }

        // extern const UIFontDescriptorTraitKey _Nonnull UIFontWeightTrait __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontWeightTrait", "__Internal")]
        NSString UIFontWeightTrait { get; }

        // extern const UIFontDescriptorTraitKey _Nonnull UIFontWidthTrait __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontWidthTrait", "__Internal")]
        NSString UIFontWidthTrait { get; }

        // extern const UIFontDescriptorTraitKey _Nonnull UIFontSlantTrait __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontSlantTrait", "__Internal")]
        NSString UIFontSlantTrait { get; }

        // extern const UIFontWeight UIFontWeightUltraLight __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_2)));
        [iOS(8, 2)]
        [Field("UIFontWeightUltraLight", "__Internal")]
        double UIFontWeightUltraLight { get; }

        // extern const UIFontWeight UIFontWeightThin __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_2)));
        [iOS(8, 2)]
        [Field("UIFontWeightThin", "__Internal")]
        double UIFontWeightThin { get; }

        // extern const UIFontWeight UIFontWeightLight __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_2)));
        [iOS(8, 2)]
        [Field("UIFontWeightLight", "__Internal")]
        double UIFontWeightLight { get; }

        // extern const UIFontWeight UIFontWeightRegular __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_2)));
        [iOS(8, 2)]
        [Field("UIFontWeightRegular", "__Internal")]
        double UIFontWeightRegular { get; }

        // extern const UIFontWeight UIFontWeightMedium __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_2)));
        [iOS(8, 2)]
        [Field("UIFontWeightMedium", "__Internal")]
        double UIFontWeightMedium { get; }

        // extern const UIFontWeight UIFontWeightSemibold __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_2)));
        [iOS(8, 2)]
        [Field("UIFontWeightSemibold", "__Internal")]
        double UIFontWeightSemibold { get; }

        // extern const UIFontWeight UIFontWeightBold __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_2)));
        [iOS(8, 2)]
        [Field("UIFontWeightBold", "__Internal")]
        double UIFontWeightBold { get; }

        // extern const UIFontWeight UIFontWeightHeavy __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_2)));
        [iOS(8, 2)]
        [Field("UIFontWeightHeavy", "__Internal")]
        double UIFontWeightHeavy { get; }

        // extern const UIFontWeight UIFontWeightBlack __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_2)));
        [iOS(8, 2)]
        [Field("UIFontWeightBlack", "__Internal")]
        double UIFontWeightBlack { get; }

        // extern const UIFontDescriptorFeatureKey _Nonnull UIFontFeatureTypeIdentifierKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontFeatureTypeIdentifierKey", "__Internal")]
        NSString UIFontFeatureTypeIdentifierKey { get; }

        // extern const UIFontDescriptorFeatureKey _Nonnull UIFontFeatureSelectorIdentifierKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontFeatureSelectorIdentifierKey", "__Internal")]
        NSString UIFontFeatureSelectorIdentifierKey { get; }

        // extern const UIFontTextStyle _Nonnull UIFontTextStyleLargeTitle __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=11.0)));
        [Watch(5, 0), NoTV, iOS(11, 0)]
        [Field("UIFontTextStyleLargeTitle", "__Internal")]
        NSString UIFontTextStyleLargeTitle { get; }

        // extern const UIFontTextStyle _Nonnull UIFontTextStyleTitle1 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("UIFontTextStyleTitle1", "__Internal")]
        NSString UIFontTextStyleTitle1 { get; }

        // extern const UIFontTextStyle _Nonnull UIFontTextStyleTitle2 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("UIFontTextStyleTitle2", "__Internal")]
        NSString UIFontTextStyleTitle2 { get; }

        // extern const UIFontTextStyle _Nonnull UIFontTextStyleTitle3 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("UIFontTextStyleTitle3", "__Internal")]
        NSString UIFontTextStyleTitle3 { get; }

        // extern const UIFontTextStyle _Nonnull UIFontTextStyleHeadline __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontTextStyleHeadline", "__Internal")]
        NSString UIFontTextStyleHeadline { get; }

        // extern const UIFontTextStyle _Nonnull UIFontTextStyleSubheadline __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontTextStyleSubheadline", "__Internal")]
        NSString UIFontTextStyleSubheadline { get; }

        // extern const UIFontTextStyle _Nonnull UIFontTextStyleBody __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontTextStyleBody", "__Internal")]
        NSString UIFontTextStyleBody { get; }

        // extern const UIFontTextStyle _Nonnull UIFontTextStyleCallout __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Field("UIFontTextStyleCallout", "__Internal")]
        NSString UIFontTextStyleCallout { get; }

        // extern const UIFontTextStyle _Nonnull UIFontTextStyleFootnote __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontTextStyleFootnote", "__Internal")]
        NSString UIFontTextStyleFootnote { get; }

        // extern const UIFontTextStyle _Nonnull UIFontTextStyleCaption1 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontTextStyleCaption1", "__Internal")]
        NSString UIFontTextStyleCaption1 { get; }

        // extern const UIFontTextStyle _Nonnull UIFontTextStyleCaption2 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Field("UIFontTextStyleCaption2", "__Internal")]
        NSString UIFontTextStyleCaption2 { get; }
    }

    // @interface UIFont : NSObject <NSCopying>
    [iOS(2, 0)]
    [BaseType(typeof(NSObject))]
    interface UIFont : INSCopying
    {
        // +(UIFont * _Nonnull)preferredFontForTextStyle:(UIFontTextStyle _Nonnull)style __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Static]
        [Export("preferredFontForTextStyle:")]
        UIFont PreferredFontForTextStyle(string style);

        // +(UIFont * _Nonnull)preferredFontForTextStyle:(UIFontTextStyle _Nonnull)style compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=10_0)));
        [NoWatch, iOS(10, 0)]
        [Static]
        [Export("preferredFontForTextStyle:compatibleWithTraitCollection:")]
        UIFont PreferredFontForTextStyle(string style, [NullAllowed] UITraitCollection traitCollection);

        // +(UIFont * _Nullable)fontWithName:(NSString * _Nonnull)fontName size:(CGFloat)fontSize;
        [Static]
        [Export("fontWithName:size:")]
        [return: NullAllowed]
        UIFont FontWithName(string fontName, nfloat fontSize);

        // @property (readonly, nonatomic, class) NSArray<NSString *> * _Nonnull familyNames;
        [Static]
        [Export("familyNames")]
        string[] FamilyNames { get; }

        // +(NSArray<NSString *> * _Nonnull)fontNamesForFamilyName:(NSString * _Nonnull)familyName;
        [Static]
        [Export("fontNamesForFamilyName:")]
        string[] FontNamesForFamilyName(string familyName);

        // +(UIFont * _Nonnull)systemFontOfSize:(CGFloat)fontSize;
        [Static]
        [Export("systemFontOfSize:")]
        UIFont SystemFontOfSize(nfloat fontSize);

        // +(UIFont * _Nonnull)boldSystemFontOfSize:(CGFloat)fontSize;
        [Static]
        [Export("boldSystemFontOfSize:")]
        UIFont BoldSystemFontOfSize(nfloat fontSize);

        // +(UIFont * _Nonnull)italicSystemFontOfSize:(CGFloat)fontSize;
        [Static]
        [Export("italicSystemFontOfSize:")]
        UIFont ItalicSystemFontOfSize(nfloat fontSize);

        // +(UIFont * _Nonnull)systemFontOfSize:(CGFloat)fontSize weight:(UIFontWeight)weight __attribute__((availability(ios, introduced=8_2)));
        [iOS(8, 2)]
        [Static]
        [Export("systemFontOfSize:weight:")]
        UIFont SystemFontOfSize(nfloat fontSize, double weight);

        // +(UIFont * _Nonnull)monospacedDigitSystemFontOfSize:(CGFloat)fontSize weight:(UIFontWeight)weight __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static]
        [Export("monospacedDigitSystemFontOfSize:weight:")]
        UIFont MonospacedDigitSystemFontOfSize(nfloat fontSize, double weight);

        // @property (readonly, nonatomic, strong) NSString * _Nonnull familyName;
        [Export("familyName", ArgumentSemantic.Strong)]
        string FamilyName { get; }

        // @property (readonly, nonatomic, strong) NSString * _Nonnull fontName;
        [Export("fontName", ArgumentSemantic.Strong)]
        string FontName { get; }

        // @property (readonly, nonatomic) CGFloat pointSize;
        [Export("pointSize")]
        nfloat PointSize { get; }

        // @property (readonly, nonatomic) CGFloat ascender;
        [Export("ascender")]
        nfloat Ascender { get; }

        // @property (readonly, nonatomic) CGFloat descender;
        [Export("descender")]
        nfloat Descender { get; }

        // @property (readonly, nonatomic) CGFloat capHeight;
        [Export("capHeight")]
        nfloat CapHeight { get; }

        // @property (readonly, nonatomic) CGFloat xHeight;
        [Export("xHeight")]
        nfloat XHeight { get; }

        // @property (readonly, nonatomic) CGFloat lineHeight __attribute__((availability(ios, introduced=4_0)));
        [iOS(4, 0)]
        [Export("lineHeight")]
        nfloat LineHeight { get; }

        // @property (readonly, nonatomic) CGFloat leading;
        [Export("leading")]
        nfloat Leading { get; }

        // -(UIFont * _Nonnull)fontWithSize:(CGFloat)fontSize;
        [Export("fontWithSize:")]
        UIFont FontWithSize(nfloat fontSize);

        // +(UIFont * _Nonnull)fontWithDescriptor:(UIFontDescriptor * _Nonnull)descriptor size:(CGFloat)pointSize __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Static]
        [Export("fontWithDescriptor:size:")]
        UIFont FontWithDescriptor(UIFontDescriptor descriptor, nfloat pointSize);

        // @property (readonly, nonatomic) UIFontDescriptor * _Nonnull fontDescriptor __attribute__((availability(ios, introduced=7_0)));
        [iOS(7, 0)]
        [Export("fontDescriptor")]
        UIFontDescriptor FontDescriptor { get; }
    }

    // @interface UIColorSystemColors (UIColor)
    [Category]
    [BaseType(typeof(UIColor))]
    interface UIColor_UIColorSystemColors
    {
        // @property (readonly, nonatomic, class) UIColor * _Nonnull lightTextColor __attribute__((availability(tvos, unavailable)));
        [NoTV]
        [Static]
        [Export("lightTextColor")]
        UIColor LightTextColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull darkTextColor __attribute__((availability(tvos, unavailable)));
        [NoTV]
        [Static]
        [Export("darkTextColor")]
        UIColor DarkTextColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull groupTableViewBackgroundColor __attribute__((availability(tvos, unavailable)));
        [NoTV]
        [Static]
        [Export("groupTableViewBackgroundColor")]
        UIColor GroupTableViewBackgroundColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull viewFlipsideBackgroundColor __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
        [Introduced(PlatformName.iOS, 2, 0)]
        [Deprecated(PlatformName.iOS, 7, 0)]
        [NoTV]
        [Static]
        [Export("viewFlipsideBackgroundColor")]
        UIColor ViewFlipsideBackgroundColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull scrollViewTexturedBackgroundColor __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_2, deprecated=7_0)));
        [Introduced(PlatformName.iOS, 3, 2)]
        [Deprecated(PlatformName.iOS, 7, 0)]
        [NoTV]
        [Static]
        [Export("scrollViewTexturedBackgroundColor")]
        UIColor ScrollViewTexturedBackgroundColor { get; }

        // @property (readonly, nonatomic, class) UIColor * _Nonnull underPageBackgroundColor __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=7_0)));
        [Introduced(PlatformName.iOS, 5, 0)]
        [Deprecated(PlatformName.iOS, 7, 0)]
        [NoTV]
        [Static]
        [Export("underPageBackgroundColor")]
        UIColor UnderPageBackgroundColor { get; }
    }

    // @interface UIFontSystemFonts (UIFont)
    [Category]
    [BaseType(typeof(UIFont))]
    interface UIFont_UIFontSystemFonts
    {
        // @property (readonly, nonatomic, class) CGFloat labelFontSize __attribute__((availability(tvos, unavailable)));
        [NoTV]
        [Static]
        [Export("labelFontSize")]
        nfloat LabelFontSize { get; }

        // @property (readonly, nonatomic, class) CGFloat buttonFontSize __attribute__((availability(tvos, unavailable)));
        [NoTV]
        [Static]
        [Export("buttonFontSize")]
        nfloat ButtonFontSize { get; }

        // @property (readonly, nonatomic, class) CGFloat smallSystemFontSize __attribute__((availability(tvos, unavailable)));
        [NoTV]
        [Static]
        [Export("smallSystemFontSize")]
        nfloat SmallSystemFontSize { get; }

        // @property (readonly, nonatomic, class) CGFloat systemFontSize __attribute__((availability(tvos, unavailable)));
        [NoTV]
        [Static]
        [Export("systemFontSize")]
        nfloat SystemFontSize { get; }
    }

    // @protocol UIAppearanceContainer <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface UIAppearanceContainer
    {
    }

    // @protocol UIAppearance <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface UIAppearance
    {
        // @required +(instancetype _Nonnull)appearance;
        [Static, Abstract]
        [Export("appearance")]
        UIAppearance Appearance();

        // @required +(instancetype _Nonnull)appearanceWhenContainedIn:(Class<UIAppearanceContainer> _Nullable)ContainerClass, ... __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=9_0))) __attribute__((sentinel(0, 1)));
        [Introduced(PlatformName.iOS, 5, 0, message: "Use +appearanceWhenContainedInInstancesOfClasses: instead")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use +appearanceWhenContainedInInstancesOfClasses: instead")]
        [NoTV]
        [Static, Internal, Abstract]
        [Export("appearanceWhenContainedIn:", IsVariadic = true)]
        UIAppearance AppearanceWhenContainedIn([NullAllowed] UIAppearanceContainer ContainerClass, IntPtr varArgs);

        // @required +(instancetype _Nonnull)appearanceWhenContainedInInstancesOfClasses:(NSArray<Class<UIAppearanceContainer>> * _Nonnull)containerTypes __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static, Abstract]
        [Export("appearanceWhenContainedInInstancesOfClasses:")]
        UIAppearance AppearanceWhenContainedInInstancesOfClasses(UIAppearanceContainer[] containerTypes);

        // @required +(instancetype _Nonnull)appearanceForTraitCollection:(UITraitCollection * _Nonnull)trait __attribute__((availability(ios, introduced=8_0)));
        [iOS(8, 0)]
        [Static, Abstract]
        [Export("appearanceForTraitCollection:")]
        UIAppearance AppearanceForTraitCollection(UITraitCollection trait);

        // @required +(instancetype _Nonnull)appearanceForTraitCollection:(UITraitCollection * _Nonnull)trait whenContainedIn:(Class<UIAppearanceContainer> _Nullable)ContainerClass, ... __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0, deprecated=9_0))) __attribute__((sentinel(0, 1)));
        [Introduced(PlatformName.iOS, 8, 0, message: "Use +appearanceForTraitCollection:whenContainedInInstancesOfClasses: instead")]
        [Deprecated(PlatformName.iOS, 9, 0, message: "Use +appearanceForTraitCollection:whenContainedInInstancesOfClasses: instead")]
        [NoTV]
        [Static, Internal, Abstract]
        [Export("appearanceForTraitCollection:whenContainedIn:", IsVariadic = true)]
        UIAppearance AppearanceForTraitCollection(UITraitCollection trait, [NullAllowed] UIAppearanceContainer ContainerClass, IntPtr varArgs);

        // @required +(instancetype _Nonnull)appearanceForTraitCollection:(UITraitCollection * _Nonnull)trait whenContainedInInstancesOfClasses:(NSArray<Class<UIAppearanceContainer>> * _Nonnull)containerTypes __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Static, Abstract]
        [Export("appearanceForTraitCollection:whenContainedInInstancesOfClasses:")]
        UIAppearance AppearanceForTraitCollection(UITraitCollection trait, UIAppearanceContainer[] containerTypes);
    }

    [Static]
    [Verify(ConstantsInterfaceAssociation)]
    partial interface Constants
    {
        // extern const UIEdgeInsets UIEdgeInsetsZero __attribute__((visibility("default")));
        [Field("UIEdgeInsetsZero", "__Internal")]
        UIEdgeInsets UIEdgeInsetsZero { get; }

        // extern const NSDirectionalEdgeInsets NSDirectionalEdgeInsetsZero __attribute__((visibility("default"))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
        [Watch(4, 0), TV(11, 0), iOS(11, 0)]
        [Field("NSDirectionalEdgeInsetsZero", "__Internal")]
        NSDirectionalEdgeInsets NSDirectionalEdgeInsetsZero { get; }

        // extern const UIOffset UIOffsetZero __attribute__((visibility("default")));
        [Field("UIOffsetZero", "__Internal")]
        UIOffset UIOffsetZero { get; }
    }

    // @interface NSValueUIGeometryExtensions (NSValue)
    [Category]
    [BaseType(typeof(NSValue))]
    interface NSValue_NSValueUIGeometryExtensions
    {
        // +(NSValue * _Nonnull)valueWithCGPoint:(CGPoint)point;
        [Static]
        [Export("valueWithCGPoint:")]
        NSValue ValueWithCGPoint(CGPoint point);

        // +(NSValue * _Nonnull)valueWithCGVector:(CGVector)vector;
        [Static]
        [Export("valueWithCGVector:")]
        NSValue ValueWithCGVector(CGVector vector);

        // +(NSValue * _Nonnull)valueWithCGSize:(CGSize)size;
        [Static]
        [Export("valueWithCGSize:")]
        NSValue ValueWithCGSize(CGSize size);

        // +(NSValue * _Nonnull)valueWithCGRect:(CGRect)rect;
        [Static]
        [Export("valueWithCGRect:")]
        NSValue ValueWithCGRect(CGRect rect);

        // +(NSValue * _Nonnull)valueWithCGAffineTransform:(CGAffineTransform)transform;
        [Static]
        [Export("valueWithCGAffineTransform:")]
        NSValue ValueWithCGAffineTransform(CGAffineTransform transform);

        // +(NSValue * _Nonnull)valueWithUIEdgeInsets:(UIEdgeInsets)insets;
        [Static]
        [Export("valueWithUIEdgeInsets:")]
        NSValue ValueWithUIEdgeInsets(UIEdgeInsets insets);

        // +(NSValue * _Nonnull)valueWithDirectionalEdgeInsets:(NSDirectionalEdgeInsets)insets __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
        [Watch(4, 0), TV(11, 0), iOS(11, 0)]
        [Static]
        [Export("valueWithDirectionalEdgeInsets:")]
        NSValue ValueWithDirectionalEdgeInsets(NSDirectionalEdgeInsets insets);

        // +(NSValue * _Nonnull)valueWithUIOffset:(UIOffset)insets __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Static]
        [Export("valueWithUIOffset:")]
        NSValue ValueWithUIOffset(UIOffset insets);

        // @property (readonly, nonatomic) CGPoint CGPointValue;
        [Export("CGPointValue")]
        CGPoint CGPointValue { get; }

        // @property (readonly, nonatomic) CGVector CGVectorValue;
        [Export("CGVectorValue")]
        CGVector CGVectorValue { get; }

        // @property (readonly, nonatomic) CGSize CGSizeValue;
        [Export("CGSizeValue")]
        CGSize CGSizeValue { get; }

        // @property (readonly, nonatomic) CGRect CGRectValue;
        [Export("CGRectValue")]
        CGRect CGRectValue { get; }

        // @property (readonly, nonatomic) CGAffineTransform CGAffineTransformValue;
        [Export("CGAffineTransformValue")]
        CGAffineTransform CGAffineTransformValue { get; }

        // @property (readonly, nonatomic) UIEdgeInsets UIEdgeInsetsValue;
        [Export("UIEdgeInsetsValue")]
        UIEdgeInsets UIEdgeInsetsValue { get; }

        // @property (readonly, nonatomic) NSDirectionalEdgeInsets directionalEdgeInsetsValue __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
        [Watch(4, 0), TV(11, 0), iOS(11, 0)]
        [Export("directionalEdgeInsetsValue")]
        NSDirectionalEdgeInsets DirectionalEdgeInsetsValue { get; }

        // @property (readonly, nonatomic) UIOffset UIOffsetValue __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("UIOffsetValue")]
        UIOffset UIOffsetValue { get; }
    }

    // @interface UIGeometryKeyedCoding (NSCoder)
    [Category]
    [BaseType(typeof(NSCoder))]
    interface NSCoder_UIGeometryKeyedCoding
    {
        // -(void)encodeCGPoint:(CGPoint)point forKey:(NSString * _Nonnull)key;
        [Export("encodeCGPoint:forKey:")]
        void EncodeCGPoint(CGPoint point, string key);

        // -(void)encodeCGVector:(CGVector)vector forKey:(NSString * _Nonnull)key;
        [Export("encodeCGVector:forKey:")]
        void EncodeCGVector(CGVector vector, string key);

        // -(void)encodeCGSize:(CGSize)size forKey:(NSString * _Nonnull)key;
        [Export("encodeCGSize:forKey:")]
        void EncodeCGSize(CGSize size, string key);

        // -(void)encodeCGRect:(CGRect)rect forKey:(NSString * _Nonnull)key;
        [Export("encodeCGRect:forKey:")]
        void EncodeCGRect(CGRect rect, string key);

        // -(void)encodeCGAffineTransform:(CGAffineTransform)transform forKey:(NSString * _Nonnull)key;
        [Export("encodeCGAffineTransform:forKey:")]
        void EncodeCGAffineTransform(CGAffineTransform transform, string key);

        // -(void)encodeUIEdgeInsets:(UIEdgeInsets)insets forKey:(NSString * _Nonnull)key;
        [Export("encodeUIEdgeInsets:forKey:")]
        void EncodeUIEdgeInsets(UIEdgeInsets insets, string key);

        // -(void)encodeDirectionalEdgeInsets:(NSDirectionalEdgeInsets)insets forKey:(NSString * _Nonnull)key __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
        [Watch(4, 0), TV(11, 0), iOS(11, 0)]
        [Export("encodeDirectionalEdgeInsets:forKey:")]
        void EncodeDirectionalEdgeInsets(NSDirectionalEdgeInsets insets, string key);

        // -(void)encodeUIOffset:(UIOffset)offset forKey:(NSString * _Nonnull)key __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("encodeUIOffset:forKey:")]
        void EncodeUIOffset(UIOffset offset, string key);

        // -(CGPoint)decodeCGPointForKey:(NSString * _Nonnull)key;
        [Export("decodeCGPointForKey:")]
        CGPoint DecodeCGPointForKey(string key);

        // -(CGVector)decodeCGVectorForKey:(NSString * _Nonnull)key;
        [Export("decodeCGVectorForKey:")]
        CGVector DecodeCGVectorForKey(string key);

        // -(CGSize)decodeCGSizeForKey:(NSString * _Nonnull)key;
        [Export("decodeCGSizeForKey:")]
        CGSize DecodeCGSizeForKey(string key);

        // -(CGRect)decodeCGRectForKey:(NSString * _Nonnull)key;
        [Export("decodeCGRectForKey:")]
        CGRect DecodeCGRectForKey(string key);

        // -(CGAffineTransform)decodeCGAffineTransformForKey:(NSString * _Nonnull)key;
        [Export("decodeCGAffineTransformForKey:")]
        CGAffineTransform DecodeCGAffineTransformForKey(string key);

        // -(UIEdgeInsets)decodeUIEdgeInsetsForKey:(NSString * _Nonnull)key;
        [Export("decodeUIEdgeInsetsForKey:")]
        UIEdgeInsets DecodeUIEdgeInsetsForKey(string key);

        // -(NSDirectionalEdgeInsets)decodeDirectionalEdgeInsetsForKey:(NSString * _Nonnull)key __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
        [Watch(4, 0), TV(11, 0), iOS(11, 0)]
        [Export("decodeDirectionalEdgeInsetsForKey:")]
        NSDirectionalEdgeInsets DecodeDirectionalEdgeInsetsForKey(string key);

        // -(UIOffset)decodeUIOffsetForKey:(NSString * _Nonnull)key __attribute__((availability(ios, introduced=5_0)));
        [iOS(5, 0)]
        [Export("decodeUIOffsetForKey:")]
        UIOffset DecodeUIOffsetForKey(string key);
    }

    // @protocol UIDynamicItem <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface UIDynamicItem
    {
        // @required @property (readwrite, nonatomic) CGPoint center;
        [Abstract]
        [Export("center", ArgumentSemantic.Assign)]
        CGPoint Center { get; set; }

        // @required @property (readonly, nonatomic) CGRect bounds;
        [Abstract]
        [Export("bounds")]
        CGRect Bounds { get; }

        // @required @property (readwrite, nonatomic) CGAffineTransform transform;
        [Abstract]
        [Export("transform", ArgumentSemantic.Assign)]
        CGAffineTransform Transform { get; set; }

        // @optional @property (readonly, nonatomic) UIDynamicItemCollisionBoundsType collisionBoundsType __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("collisionBoundsType")]
        UIDynamicItemCollisionBoundsType CollisionBoundsType { get; }

        // @optional @property (readonly, nonatomic) UIBezierPath * _Nonnull collisionBoundingPath __attribute__((availability(ios, introduced=9_0)));
        [iOS(9, 0)]
        [Export("collisionBoundingPath")]
        UIBezierPath CollisionBoundingPath { get; }
    }

    // @interface UIDynamicItemGroup : NSObject <UIDynamicItem>
    [iOS(9, 0)]
    [BaseType(typeof(NSObject))]
    interface UIDynamicItemGroup : IUIDynamicItem
    {
        // -(instancetype _Nonnull)initWithItems:(NSArray<id<UIDynamicItem>> * _Nonnull)items;
        [Export("initWithItems:")]
        IntPtr Constructor(UIDynamicItem[] items);

        // @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
        [Export("items", ArgumentSemantic.Copy)]
        UIDynamicItem[] Items { get; }
    }

    // @interface UIDynamicBehavior : NSObject
    [iOS(7, 0)]
    [BaseType(typeof(NSObject))]
    interface UIDynamicBehavior
    {
        // -(void)addChildBehavior:(UIDynamicBehavior * _Nonnull)behavior;
        [Export("addChildBehavior:")]
        void AddChildBehavior(UIDynamicBehavior behavior);

        // -(void)removeChildBehavior:(UIDynamicBehavior * _Nonnull)behavior;
        [Export("removeChildBehavior:")]
        void RemoveChildBehavior(UIDynamicBehavior behavior);

        // @property (readonly, copy, nonatomic) NSArray<__kindof UIDynamicBehavior *> * _Nonnull childBehaviors;
        [Export("childBehaviors", ArgumentSemantic.Copy)]
        UIDynamicBehavior[] ChildBehaviors { get; }

        // @property (copy, nonatomic) void (^ _Nullable)(void) action;
        [NullAllowed, Export("action", ArgumentSemantic.Copy)]
        Action Action { get; set; }

        // -(void)willMoveToAnimator:(UIDynamicAnimator * _Nullable)dynamicAnimator;
        [Export("willMoveToAnimator:")]
        void WillMoveToAnimator([NullAllowed] UIDynamicAnimator dynamicAnimator);

        // @property (readonly, nonatomic) UIDynamicAnimator * _Nullable dynamicAnimator;
        [NullAllowed, Export("dynamicAnimator")]
        UIDynamicAnimator DynamicAnimator { get; }
    }

    // @interface NSLayoutConstraint : NSObject
    [iOS(6, 0)]
    [BaseType(typeof(NSObject))]
    interface NSLayoutConstraint
    {
        // +(NSArray<__kindof NSLayoutConstraint *> * _Nonnull)constraintsWithVisualFormat:(NSString * _Nonnull)format options:(NSLayoutFormatOptions)opts metrics:(NSDictionary<NSString *,id> * _Nullable)metrics views:(NSDictionary<NSString *,id> * _Nonnull)views;
        [Static]
        [Export("constraintsWithVisualFormat:options:metrics:views:")]
        NSLayoutConstraint[] ConstraintsWithVisualFormat(string format, NSLayoutFormatOptions opts, [NullAllowed] NSDictionary<NSString, NSObject> metrics, NSDictionary<NSString, NSObject> views);

        // +(instancetype _Nonnull)constraintWithItem:(id _Nonnull)view1 attribute:(NSLayoutAttribute)attr1 relatedBy:(NSLayoutRelation)relation toItem:(id _Nullable)view2 attribute:(NSLayoutAttribute)attr2 multiplier:(CGFloat)multiplier constant:(CGFloat)c;
        [Static]
        [Export("constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:")]
        NSLayoutConstraint ConstraintWithItem(NSObject view1, NSLayoutAttribute attr1, NSLayoutRelation relation, [NullAllowed] NSObject view2, NSLayoutAttribute attr2, nfloat multiplier, nfloat c);

        // @property UILayoutPriority priority;
        [Export("priority")]
        float Priority { get; set; }

        // @property BOOL shouldBeArchived;
        [Export("shouldBeArchived")]
        bool ShouldBeArchived { get; set; }

        // @property (readonly, assign) id _Nullable firstItem;
        [NullAllowed, Export("firstItem", ArgumentSemantic.Assign)]
        NSObject FirstItem { get; }

        // @property (readonly) NSLayoutAttribute firstAttribute;
        [Export("firstAttribute")]
        NSLayoutAttribute FirstAttribute { get; }

        // @property (readonly, assign) id _Nullable secondItem;
        [NullAllowed, Export("secondItem", ArgumentSemantic.Assign)]
        NSObject SecondItem { get; }

        // @property (readonly) NSLayoutAttribute secondAttribute;
        [Export("secondAttribute")]
        NSLayoutAttribute SecondAttribute { get; }

        // @property (readonly, copy) NSLayoutAnchor * _Nonnull firstAnchor __attribute__((availability(ios, introduced=10_0)));
        [iOS(10, 0)]
        [Export("firstAnchor", ArgumentSemantic.Copy)]
        NSLayoutAnchor`1 FirstAnchor { get; }

    // @property (readonly, copy) NSLayoutAnchor * _Nullable secondAnchor __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [NullAllowed, Export("secondAnchor", ArgumentSemantic.Copy)]
    NSLayoutAnchor`1 SecondAnchor { get; }

// @property (readonly) NSLayoutRelation relation;
[Export("relation")]
NSLayoutRelation Relation { get; }

// @property (readonly) CGFloat multiplier;
[Export("multiplier")]
nfloat Multiplier { get; }

// @property CGFloat constant;
[Export("constant")]
nfloat Constant { get; set; }

// @property (getter = isActive) BOOL active __attribute__((availability(ios, introduced=8_0)));
[iOS(8, 0)]
[Export("active")]
bool Active { [Bind("isActive")] get; set; }

// +(void)activateConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints __attribute__((availability(ios, introduced=8_0)));
[iOS(8, 0)]
[Static]
[Export("activateConstraints:")]
void ActivateConstraints(NSLayoutConstraint[] constraints);

// +(void)deactivateConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints __attribute__((availability(ios, introduced=8_0)));
[iOS(8, 0)]
[Static]
[Export("deactivateConstraints:")]
void DeactivateConstraints(NSLayoutConstraint[] constraints);
}

// @interface NSIdentifier (NSLayoutConstraint)
[Category]
[BaseType(typeof(NSLayoutConstraint))]
interface NSLayoutConstraint_NSIdentifier
{
    // @property (copy) NSString * _Nullable identifier __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("identifier")]
    string Identifier { get; set; }
}

// @protocol UILayoutSupport <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UILayoutSupport
{
    // @required @property (readonly, nonatomic) CGFloat length;
    [Abstract]
    [Export("length")]
    nfloat Length { get; }

    // @required @property (readonly, strong) NSLayoutYAxisAnchor * _Nonnull topAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Abstract]
    [Export("topAnchor", ArgumentSemantic.Strong)]
    NSLayoutYAxisAnchor TopAnchor { get; }

    // @required @property (readonly, strong) NSLayoutYAxisAnchor * _Nonnull bottomAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Abstract]
    [Export("bottomAnchor", ArgumentSemantic.Strong)]
    NSLayoutYAxisAnchor BottomAnchor { get; }

    // @required @property (readonly, strong) NSLayoutDimension * _Nonnull heightAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Abstract]
    [Export("heightAnchor", ArgumentSemantic.Strong)]
    NSLayoutDimension HeightAnchor { get; }
}

// @interface UIDevice : NSObject
[iOS(2, 0)]
[BaseType(typeof(NSObject))]
interface UIDevice
{
    // @property (readonly, nonatomic, class) UIDevice * _Nonnull currentDevice;
    [Static]
    [Export("currentDevice")]
    UIDevice CurrentDevice { get; }

    // @property (readonly, nonatomic, strong) NSString * _Nonnull name;
    [Export("name", ArgumentSemantic.Strong)]
    string Name { get; }

    // @property (readonly, nonatomic, strong) NSString * _Nonnull model;
    [Export("model", ArgumentSemantic.Strong)]
    string Model { get; }

    // @property (readonly, nonatomic, strong) NSString * _Nonnull localizedModel;
    [Export("localizedModel", ArgumentSemantic.Strong)]
    string LocalizedModel { get; }

    // @property (readonly, nonatomic, strong) NSString * _Nonnull systemName;
    [Export("systemName", ArgumentSemantic.Strong)]
    string SystemName { get; }

    // @property (readonly, nonatomic, strong) NSString * _Nonnull systemVersion;
    [Export("systemVersion", ArgumentSemantic.Strong)]
    string SystemVersion { get; }

    // @property (readonly, nonatomic) UIDeviceOrientation orientation __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("orientation")]
    UIDeviceOrientation Orientation { get; }

    // @property (readonly, nonatomic, strong) NSUUID * _Nullable identifierForVendor __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("identifierForVendor", ArgumentSemantic.Strong)]
    NSUuid IdentifierForVendor { get; }

    // @property (readonly, getter = isGeneratingDeviceOrientationNotifications, nonatomic) BOOL generatesDeviceOrientationNotifications __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("generatesDeviceOrientationNotifications")]
    bool GeneratesDeviceOrientationNotifications { [Bind("isGeneratingDeviceOrientationNotifications")] get; }

    // -(void)beginGeneratingDeviceOrientationNotifications __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("beginGeneratingDeviceOrientationNotifications")]
    void BeginGeneratingDeviceOrientationNotifications();

    // -(void)endGeneratingDeviceOrientationNotifications __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("endGeneratingDeviceOrientationNotifications")]
    void EndGeneratingDeviceOrientationNotifications();

    // @property (getter = isBatteryMonitoringEnabled, nonatomic) BOOL batteryMonitoringEnabled __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("batteryMonitoringEnabled")]
    bool BatteryMonitoringEnabled { [Bind("isBatteryMonitoringEnabled")] get; set; }

    // @property (readonly, nonatomic) UIDeviceBatteryState batteryState __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("batteryState")]
    UIDeviceBatteryState BatteryState { get; }

    // @property (readonly, nonatomic) float batteryLevel __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("batteryLevel")]
    float BatteryLevel { get; }

    // @property (getter = isProximityMonitoringEnabled, nonatomic) BOOL proximityMonitoringEnabled __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("proximityMonitoringEnabled")]
    bool ProximityMonitoringEnabled { [Bind("isProximityMonitoringEnabled")] get; set; }

    // @property (readonly, nonatomic) BOOL proximityState __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("proximityState")]
    bool ProximityState { get; }

    // @property (readonly, getter = isMultitaskingSupported, nonatomic) BOOL multitaskingSupported __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("multitaskingSupported")]
    bool MultitaskingSupported { [Bind("isMultitaskingSupported")] get; }

    // @property (readonly, nonatomic) UIUserInterfaceIdiom userInterfaceIdiom __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Export("userInterfaceIdiom")]
    UIUserInterfaceIdiom UserInterfaceIdiom { get; }

    // -(void)playInputClick __attribute__((availability(ios, introduced=4_2)));
    [iOS(4, 2)]
    [Export("playInputClick")]
    void PlayInputClick();
}

// @protocol UIInputViewAudioFeedback <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIInputViewAudioFeedback
{
    // @optional @property (readonly, nonatomic) BOOL enableInputClicksWhenVisible;
    [Export("enableInputClicksWhenVisible")]
    bool EnableInputClicksWhenVisible { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSNotificationName _Nonnull UIDeviceOrientationDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIDeviceOrientationDidChangeNotification", "__Internal")]
    NSString UIDeviceOrientationDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIDeviceBatteryStateDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Field("UIDeviceBatteryStateDidChangeNotification", "__Internal")]
    NSString UIDeviceBatteryStateDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIDeviceBatteryLevelDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Field("UIDeviceBatteryLevelDidChangeNotification", "__Internal")]
    NSString UIDeviceBatteryLevelDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIDeviceProximityStateDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Field("UIDeviceProximityStateDidChangeNotification", "__Internal")]
    NSString UIDeviceProximityStateDidChangeNotification { get; }
}

// @interface UITouch : NSObject
[iOS(2, 0)]
[BaseType(typeof(NSObject))]
interface UITouch
{
    // @property (readonly, nonatomic) NSTimeInterval timestamp;
    [Export("timestamp")]
    double Timestamp { get; }

    // @property (readonly, nonatomic) UITouchPhase phase;
    [Export("phase")]
    UITouchPhase Phase { get; }

    // @property (readonly, nonatomic) NSUInteger tapCount;
    [Export("tapCount")]
    nuint TapCount { get; }

    // @property (readonly, nonatomic) UITouchType type __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("type")]
    UITouchType Type { get; }

    // @property (readonly, nonatomic) CGFloat majorRadius __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("majorRadius")]
    nfloat MajorRadius { get; }

    // @property (readonly, nonatomic) CGFloat majorRadiusTolerance __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("majorRadiusTolerance")]
    nfloat MajorRadiusTolerance { get; }

    // @property (readonly, nonatomic, strong) UIWindow * _Nullable window;
    [NullAllowed, Export("window", ArgumentSemantic.Strong)]
    UIWindow Window { get; }

    // @property (readonly, nonatomic, strong) UIView * _Nullable view;
    [NullAllowed, Export("view", ArgumentSemantic.Strong)]
    UIView View { get; }

    // @property (readonly, copy, nonatomic) NSArray<UIGestureRecognizer *> * _Nullable gestureRecognizers __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [NullAllowed, Export("gestureRecognizers", ArgumentSemantic.Copy)]
    UIGestureRecognizer[] GestureRecognizers { get; }

    // -(CGPoint)locationInView:(UIView * _Nullable)view;
    [Export("locationInView:")]
    CGPoint LocationInView([NullAllowed] UIView view);

    // -(CGPoint)previousLocationInView:(UIView * _Nullable)view;
    [Export("previousLocationInView:")]
    CGPoint PreviousLocationInView([NullAllowed] UIView view);

    // -(CGPoint)preciseLocationInView:(UIView * _Nullable)view __attribute__((availability(ios, introduced=9_1)));
    [iOS(9, 1)]
    [Export("preciseLocationInView:")]
    CGPoint PreciseLocationInView([NullAllowed] UIView view);

    // -(CGPoint)precisePreviousLocationInView:(UIView * _Nullable)view __attribute__((availability(ios, introduced=9_1)));
    [iOS(9, 1)]
    [Export("precisePreviousLocationInView:")]
    CGPoint PrecisePreviousLocationInView([NullAllowed] UIView view);

    // @property (readonly, nonatomic) CGFloat force __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("force")]
    nfloat Force { get; }

    // @property (readonly, nonatomic) CGFloat maximumPossibleForce __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("maximumPossibleForce")]
    nfloat MaximumPossibleForce { get; }

    // -(CGFloat)azimuthAngleInView:(UIView * _Nullable)view __attribute__((availability(ios, introduced=9_1)));
    [iOS(9, 1)]
    [Export("azimuthAngleInView:")]
    nfloat AzimuthAngleInView([NullAllowed] UIView view);

    // -(CGVector)azimuthUnitVectorInView:(UIView * _Nullable)view __attribute__((availability(ios, introduced=9_1)));
    [iOS(9, 1)]
    [Export("azimuthUnitVectorInView:")]
    CGVector AzimuthUnitVectorInView([NullAllowed] UIView view);

    // @property (readonly, nonatomic) CGFloat altitudeAngle __attribute__((availability(ios, introduced=9_1)));
    [iOS(9, 1)]
    [Export("altitudeAngle")]
    nfloat AltitudeAngle { get; }

    // @property (readonly, nonatomic) NSNumber * _Nullable estimationUpdateIndex __attribute__((availability(ios, introduced=9_1)));
    [iOS(9, 1)]
    [NullAllowed, Export("estimationUpdateIndex")]
    NSNumber EstimationUpdateIndex { get; }

    // @property (readonly, nonatomic) UITouchProperties estimatedProperties __attribute__((availability(ios, introduced=9_1)));
    [iOS(9, 1)]
    [Export("estimatedProperties")]
    UITouchProperties EstimatedProperties { get; }

    // @property (readonly, nonatomic) UITouchProperties estimatedPropertiesExpectingUpdates __attribute__((availability(ios, introduced=9_1)));
    [iOS(9, 1)]
    [Export("estimatedPropertiesExpectingUpdates")]
    UITouchProperties EstimatedPropertiesExpectingUpdates { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategoryUnspecified __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UIContentSizeCategoryUnspecified", "__Internal")]
    NSString UIContentSizeCategoryUnspecified { get; }

    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategoryExtraSmall __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryExtraSmall", "__Internal")]
    NSString UIContentSizeCategoryExtraSmall { get; }

    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategorySmall __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategorySmall", "__Internal")]
    NSString UIContentSizeCategorySmall { get; }

    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategoryMedium __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryMedium", "__Internal")]
    NSString UIContentSizeCategoryMedium { get; }

    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategoryLarge __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryLarge", "__Internal")]
    NSString UIContentSizeCategoryLarge { get; }

    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategoryExtraLarge __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryExtraLarge", "__Internal")]
    NSString UIContentSizeCategoryExtraLarge { get; }

    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategoryExtraExtraLarge __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryExtraExtraLarge", "__Internal")]
    NSString UIContentSizeCategoryExtraExtraLarge { get; }

    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategoryExtraExtraExtraLarge __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryExtraExtraExtraLarge", "__Internal")]
    NSString UIContentSizeCategoryExtraExtraExtraLarge { get; }

    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategoryAccessibilityMedium __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryAccessibilityMedium", "__Internal")]
    NSString UIContentSizeCategoryAccessibilityMedium { get; }

    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategoryAccessibilityLarge __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryAccessibilityLarge", "__Internal")]
    NSString UIContentSizeCategoryAccessibilityLarge { get; }

    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategoryAccessibilityExtraLarge __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryAccessibilityExtraLarge", "__Internal")]
    NSString UIContentSizeCategoryAccessibilityExtraLarge { get; }

    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategoryAccessibilityExtraExtraLarge __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryAccessibilityExtraExtraLarge", "__Internal")]
    NSString UIContentSizeCategoryAccessibilityExtraExtraLarge { get; }

    // extern const UIContentSizeCategory _Nonnull UIContentSizeCategoryAccessibilityExtraExtraExtraLarge __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryAccessibilityExtraExtraExtraLarge", "__Internal")]
    NSString UIContentSizeCategoryAccessibilityExtraExtraExtraLarge { get; }

    // extern const NSNotificationName _Nonnull UIContentSizeCategoryDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryDidChangeNotification", "__Internal")]
    NSString UIContentSizeCategoryDidChangeNotification { get; }

    // extern NSString *const _Nonnull UIContentSizeCategoryNewValueKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIContentSizeCategoryNewValueKey", "__Internal")]
    NSString UIContentSizeCategoryNewValueKey { get; }
}

// @interface UITraitCollection : NSObject <NSCopying, NSSecureCoding>
[iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface UITraitCollection : INSCopying, INSSecureCoding
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // -(BOOL)containsTraitsInCollection:(UITraitCollection * _Nullable)trait;
    [Export("containsTraitsInCollection:")]
    bool ContainsTraitsInCollection([NullAllowed] UITraitCollection trait);

    // +(UITraitCollection * _Nonnull)traitCollectionWithTraitsFromCollections:(NSArray<UITraitCollection *> * _Nonnull)traitCollections;
    [Static]
    [Export("traitCollectionWithTraitsFromCollections:")]
    UITraitCollection TraitCollectionWithTraitsFromCollections(UITraitCollection[] traitCollections);

    // +(UITraitCollection * _Nonnull)traitCollectionWithUserInterfaceIdiom:(UIUserInterfaceIdiom)idiom;
    [Static]
    [Export("traitCollectionWithUserInterfaceIdiom:")]
    UITraitCollection TraitCollectionWithUserInterfaceIdiom(UIUserInterfaceIdiom idiom);

    // @property (readonly, nonatomic) UIUserInterfaceIdiom userInterfaceIdiom;
    [Export("userInterfaceIdiom")]
    UIUserInterfaceIdiom UserInterfaceIdiom { get; }

    // +(UITraitCollection * _Nonnull)traitCollectionWithUserInterfaceStyle:(UIUserInterfaceStyle)userInterfaceStyle __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=12_0))) __attribute__((availability(tvos, introduced=10_0)));
    [TV(10, 0), NoWatch, iOS(12, 0)]
    [Static]
    [Export("traitCollectionWithUserInterfaceStyle:")]
    UITraitCollection TraitCollectionWithUserInterfaceStyle(UIUserInterfaceStyle userInterfaceStyle);

    // @property (readonly, nonatomic) UIUserInterfaceStyle userInterfaceStyle __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=12_0))) __attribute__((availability(tvos, introduced=10_0)));
    [TV(10, 0), NoWatch, iOS(12, 0)]
    [Export("userInterfaceStyle")]
    UIUserInterfaceStyle UserInterfaceStyle { get; }

    // +(UITraitCollection * _Nonnull)traitCollectionWithLayoutDirection:(UITraitEnvironmentLayoutDirection)layoutDirection __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Static]
    [Export("traitCollectionWithLayoutDirection:")]
    UITraitCollection TraitCollectionWithLayoutDirection(UITraitEnvironmentLayoutDirection layoutDirection);

    // @property (readonly, nonatomic) UITraitEnvironmentLayoutDirection layoutDirection __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("layoutDirection")]
    UITraitEnvironmentLayoutDirection LayoutDirection { get; }

    // +(UITraitCollection * _Nonnull)traitCollectionWithDisplayScale:(CGFloat)scale;
    [Static]
    [Export("traitCollectionWithDisplayScale:")]
    UITraitCollection TraitCollectionWithDisplayScale(nfloat scale);

    // @property (readonly, nonatomic) CGFloat displayScale;
    [Export("displayScale")]
    nfloat DisplayScale { get; }

    // +(UITraitCollection * _Nonnull)traitCollectionWithHorizontalSizeClass:(UIUserInterfaceSizeClass)horizontalSizeClass;
    [Static]
    [Export("traitCollectionWithHorizontalSizeClass:")]
    UITraitCollection TraitCollectionWithHorizontalSizeClass(UIUserInterfaceSizeClass horizontalSizeClass);

    // @property (readonly, nonatomic) UIUserInterfaceSizeClass horizontalSizeClass;
    [Export("horizontalSizeClass")]
    UIUserInterfaceSizeClass HorizontalSizeClass { get; }

    // +(UITraitCollection * _Nonnull)traitCollectionWithVerticalSizeClass:(UIUserInterfaceSizeClass)verticalSizeClass;
    [Static]
    [Export("traitCollectionWithVerticalSizeClass:")]
    UITraitCollection TraitCollectionWithVerticalSizeClass(UIUserInterfaceSizeClass verticalSizeClass);

    // @property (readonly, nonatomic) UIUserInterfaceSizeClass verticalSizeClass;
    [Export("verticalSizeClass")]
    UIUserInterfaceSizeClass VerticalSizeClass { get; }

    // +(UITraitCollection * _Nonnull)traitCollectionWithForceTouchCapability:(UIForceTouchCapability)capability __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Static]
    [Export("traitCollectionWithForceTouchCapability:")]
    UITraitCollection TraitCollectionWithForceTouchCapability(UIForceTouchCapability capability);

    // @property (readonly, nonatomic) UIForceTouchCapability forceTouchCapability __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("forceTouchCapability")]
    UIForceTouchCapability ForceTouchCapability { get; }

    // +(UITraitCollection * _Nonnull)traitCollectionWithPreferredContentSizeCategory:(UIContentSizeCategory _Nonnull)preferredContentSizeCategory __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Static]
    [Export("traitCollectionWithPreferredContentSizeCategory:")]
    UITraitCollection TraitCollectionWithPreferredContentSizeCategory(string preferredContentSizeCategory);

    // @property (readonly, copy, nonatomic) UIContentSizeCategory _Nonnull preferredContentSizeCategory __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("preferredContentSizeCategory")]
    string PreferredContentSizeCategory { get; }

    // +(UITraitCollection * _Nonnull)traitCollectionWithDisplayGamut:(UIDisplayGamut)displayGamut __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Static]
    [Export("traitCollectionWithDisplayGamut:")]
    UITraitCollection TraitCollectionWithDisplayGamut(UIDisplayGamut displayGamut);

    // @property (readonly, nonatomic) UIDisplayGamut displayGamut __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("displayGamut")]
    UIDisplayGamut DisplayGamut { get; }
}

// @protocol UITraitEnvironment <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITraitEnvironment
{
    // @required @property (readonly, nonatomic) UITraitCollection * _Nonnull traitCollection __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("traitCollection")]
    UITraitCollection TraitCollection { get; }

    // @required -(void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("traitCollectionDidChange:")]
    void TraitCollectionDidChange([NullAllowed] UITraitCollection previousTraitCollection);
}

// @interface UILayoutGuide : NSObject <NSCoding>
[iOS(9, 0)]
[BaseType(typeof(NSObject))]
interface UILayoutGuide : INSCoding
{
    // @property (readonly, nonatomic) CGRect layoutFrame;
    [Export("layoutFrame")]
    CGRect LayoutFrame { get; }

    // @property (nonatomic, weak) UIView * _Nullable owningView;
    [NullAllowed, Export("owningView", ArgumentSemantic.Weak)]
    UIView OwningView { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull identifier;
    [Export("identifier")]
    string Identifier { get; set; }

    // @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull leadingAnchor;
    [Export("leadingAnchor", ArgumentSemantic.Strong)]
    NSLayoutXAxisAnchor LeadingAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull trailingAnchor;
    [Export("trailingAnchor", ArgumentSemantic.Strong)]
    NSLayoutXAxisAnchor TrailingAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull leftAnchor;
    [Export("leftAnchor", ArgumentSemantic.Strong)]
    NSLayoutXAxisAnchor LeftAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull rightAnchor;
    [Export("rightAnchor", ArgumentSemantic.Strong)]
    NSLayoutXAxisAnchor RightAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull topAnchor;
    [Export("topAnchor", ArgumentSemantic.Strong)]
    NSLayoutYAxisAnchor TopAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull bottomAnchor;
    [Export("bottomAnchor", ArgumentSemantic.Strong)]
    NSLayoutYAxisAnchor BottomAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutDimension * _Nonnull widthAnchor;
    [Export("widthAnchor", ArgumentSemantic.Strong)]
    NSLayoutDimension WidthAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutDimension * _Nonnull heightAnchor;
    [Export("heightAnchor", ArgumentSemantic.Strong)]
    NSLayoutDimension HeightAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull centerXAnchor;
    [Export("centerXAnchor", ArgumentSemantic.Strong)]
    NSLayoutXAxisAnchor CenterXAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull centerYAnchor;
    [Export("centerYAnchor", ArgumentSemantic.Strong)]
    NSLayoutYAxisAnchor CenterYAnchor { get; }
}

// @interface UIFocusGuide : UILayoutGuide
[iOS(9, 0)]
[BaseType(typeof(UILayoutGuide))]
interface UIFocusGuide
{
    // @property (getter = isEnabled, nonatomic) BOOL enabled;
    [Export("enabled")]
    bool Enabled { [Bind("isEnabled")] get; set; }

    // @property (copy, nonatomic) NSArray<id<UIFocusEnvironment>> * _Null_unspecified preferredFocusEnvironments __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("preferredFocusEnvironments", ArgumentSemantic.Copy)]
    UIFocusEnvironment[] PreferredFocusEnvironments { get; set; }

    // @property (nonatomic, weak) UIView * _Nullable preferredFocusedView __attribute__((availability(ios, introduced=9_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 9, 0, message: "Use -preferredFocusEnvironments instead.")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use -preferredFocusEnvironments instead.")]
    [NullAllowed, Export("preferredFocusedView", ArgumentSemantic.Weak)]
    UIView PreferredFocusedView { get; set; }
}

// @protocol UIFocusAnimationContext <NSObject>
[iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIFocusAnimationContext
{
    // @required @property (readonly, nonatomic) NSTimeInterval duration;
    [Abstract]
    [Export("duration")]
    double Duration { get; }
}

// @interface UIFocusAnimationCoordinator : NSObject
[iOS(9, 0)]
[BaseType(typeof(NSObject))]
interface UIFocusAnimationCoordinator
{
    // -(void)addCoordinatedAnimations:(void (^ _Nullable)(void))animations completion:(void (^ _Nullable)(void))completion;
    [Export("addCoordinatedAnimations:completion:")]
    void AddCoordinatedAnimations([NullAllowed] Action animations, [NullAllowed] Action completion);

    // -(void)addCoordinatedFocusingAnimations:(void (^ _Nullable)(id<UIFocusAnimationContext> _Nonnull))animations completion:(void (^ _Nullable)(void))completion __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("addCoordinatedFocusingAnimations:completion:")]
    void AddCoordinatedFocusingAnimations([NullAllowed] Action<UIFocusAnimationContext> animations, [NullAllowed] Action completion);

    // -(void)addCoordinatedUnfocusingAnimations:(void (^ _Nullable)(id<UIFocusAnimationContext> _Nonnull))animations completion:(void (^ _Nullable)(void))completion __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("addCoordinatedUnfocusingAnimations:completion:")]
    void AddCoordinatedUnfocusingAnimations([NullAllowed] Action<UIFocusAnimationContext> animations, [NullAllowed] Action completion);
}

// @protocol UIFocusEnvironment <NSObject>
[iOS(9, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIFocusEnvironment
{
    // @required @property (readonly, copy, nonatomic) NSArray<id<UIFocusEnvironment>> * _Nonnull preferredFocusEnvironments;
    [Abstract]
    [Export("preferredFocusEnvironments", ArgumentSemantic.Copy)]
    UIFocusEnvironment[] PreferredFocusEnvironments { get; }

    // @required @property (readonly, nonatomic, weak) id<UIFocusEnvironment> _Nullable parentFocusEnvironment __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
    [TV(12, 0), iOS(12, 0)]
    [Abstract]
    [NullAllowed, Export("parentFocusEnvironment", ArgumentSemantic.Weak)]
    UIFocusEnvironment ParentFocusEnvironment { get; }

    // @required @property (readonly, nonatomic) id<UIFocusItemContainer> _Nullable focusItemContainer __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
    [TV(12, 0), iOS(12, 0)]
    [Abstract]
    [NullAllowed, Export("focusItemContainer")]
    UIFocusItemContainer FocusItemContainer { get; }

    // @required -(void)setNeedsFocusUpdate;
    [Abstract]
    [Export("setNeedsFocusUpdate")]
    void SetNeedsFocusUpdate();

    // @required -(void)updateFocusIfNeeded;
    [Abstract]
    [Export("updateFocusIfNeeded")]
    void UpdateFocusIfNeeded();

    // @required -(BOOL)shouldUpdateFocusInContext:(UIFocusUpdateContext * _Nonnull)context;
    [Abstract]
    [Export("shouldUpdateFocusInContext:")]
    bool ShouldUpdateFocusInContext(UIFocusUpdateContext context);

    // @required -(void)didUpdateFocusInContext:(UIFocusUpdateContext * _Nonnull)context withAnimationCoordinator:(UIFocusAnimationCoordinator * _Nonnull)coordinator;
    [Abstract]
    [Export("didUpdateFocusInContext:withAnimationCoordinator:")]
    void DidUpdateFocusInContext(UIFocusUpdateContext context, UIFocusAnimationCoordinator coordinator);

    // @optional -(UIFocusSoundIdentifier _Nullable)soundIdentifierForFocusUpdateInContext:(UIFocusUpdateContext * _Nonnull)context __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.0)));
    [TV(11, 0), NoWatch, NoiOS]
    [Export("soundIdentifierForFocusUpdateInContext:")]
    [return: NullAllowed]
    string SoundIdentifierForFocusUpdateInContext(UIFocusUpdateContext context);

    // @optional @property (readonly, nonatomic, weak) UIView * _Nullable preferredFocusedView __attribute__((availability(ios, introduced=9_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 9, 0, message: "Use -preferredFocusEnvironments instead.")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use -preferredFocusEnvironments instead.")]
    [NullAllowed, Export("preferredFocusedView", ArgumentSemantic.Weak)]
    UIView PreferredFocusedView { get; }
}

// @protocol UIFocusItem <UIFocusEnvironment>
[iOS(10, 0)]
[Protocol, Model]
interface UIFocusItem : IUIFocusEnvironment
{
    // @required @property (readonly, nonatomic) BOOL canBecomeFocused;
    [Abstract]
    [Export("canBecomeFocused")]
    bool CanBecomeFocused { get; }

    // @required @property (readonly, nonatomic) CGRect frame __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
    [TV(12, 0), iOS(12, 0)]
    [Abstract]
    [Export("frame")]
    CGRect Frame { get; }

    // @optional -(void)didHintFocusMovement:(UIFocusMovementHint * _Nonnull)hint;
    [Export("didHintFocusMovement:")]
    void DidHintFocusMovement(UIFocusMovementHint hint);
}

// @protocol UIFocusItemContainer <NSObject>
[iOS(12, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIFocusItemContainer
{
    // @required @property (readonly, nonatomic) id<UICoordinateSpace> _Nonnull coordinateSpace;
    [Abstract]
    [Export("coordinateSpace")]
    UICoordinateSpace CoordinateSpace { get; }

    // @required -(NSArray<id<UIFocusItem>> * _Nonnull)focusItemsInRect:(CGRect)rect;
    [Abstract]
    [Export("focusItemsInRect:")]
    UIFocusItem[] FocusItemsInRect(CGRect rect);
}

// @protocol UIFocusItemScrollableContainer <UIFocusItemContainer>
[iOS(12, 0)]
[Protocol, Model]
interface UIFocusItemScrollableContainer : IUIFocusItemContainer
{
    // @required @property (readwrite, nonatomic) CGPoint contentOffset;
    [Abstract]
    [Export("contentOffset", ArgumentSemantic.Assign)]
    CGPoint ContentOffset { get; set; }

    // @required @property (readonly, nonatomic) CGSize contentSize;
    [Abstract]
    [Export("contentSize")]
    CGSize ContentSize { get; }

    // @required @property (readonly, nonatomic) CGSize visibleSize;
    [Abstract]
    [Export("visibleSize")]
    CGSize VisibleSize { get; }
}

// @interface UIFocusUpdateContext : NSObject
[iOS(9, 0)]
[BaseType(typeof(NSObject))]
interface UIFocusUpdateContext
{
    // @property (readonly, nonatomic, weak) id<UIFocusItem> _Nullable previouslyFocusedItem __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [NullAllowed, Export("previouslyFocusedItem", ArgumentSemantic.Weak)]
    UIFocusItem PreviouslyFocusedItem { get; }

    // @property (readonly, nonatomic, weak) id<UIFocusItem> _Nullable nextFocusedItem __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [NullAllowed, Export("nextFocusedItem", ArgumentSemantic.Weak)]
    UIFocusItem NextFocusedItem { get; }

    // @property (readonly, nonatomic, weak) UIView * _Nullable previouslyFocusedView;
    [NullAllowed, Export("previouslyFocusedView", ArgumentSemantic.Weak)]
    UIView PreviouslyFocusedView { get; }

    // @property (readonly, nonatomic, weak) UIView * _Nullable nextFocusedView;
    [NullAllowed, Export("nextFocusedView", ArgumentSemantic.Weak)]
    UIView NextFocusedView { get; }

    // @property (readonly, assign, nonatomic) UIFocusHeading focusHeading;
    [Export("focusHeading", ArgumentSemantic.Assign)]
    UIFocusHeading FocusHeading { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSNotificationName _Nonnull UIFocusDidUpdateNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Field("UIFocusDidUpdateNotification", "__Internal")]
    NSString UIFocusDidUpdateNotification { get; }

    // extern const NSNotificationName _Nonnull UIFocusMovementDidFailNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Field("UIFocusMovementDidFailNotification", "__Internal")]
    NSString UIFocusMovementDidFailNotification { get; }

    // extern NSString *const _Nonnull UIFocusUpdateContextKey __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Field("UIFocusUpdateContextKey", "__Internal")]
    NSString UIFocusUpdateContextKey { get; }

    // extern NSString *const _Nonnull UIFocusUpdateAnimationCoordinatorKey __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Field("UIFocusUpdateAnimationCoordinatorKey", "__Internal")]
    NSString UIFocusUpdateAnimationCoordinatorKey { get; }

    // extern const UIFocusSoundIdentifier _Nonnull UIFocusSoundIdentifierNone __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.0)));
    [TV(11, 0), NoWatch, NoiOS]
    [Field("UIFocusSoundIdentifierNone", "__Internal")]
    NSString UIFocusSoundIdentifierNone { get; }

    // extern const UIFocusSoundIdentifier _Nonnull UIFocusSoundIdentifierDefault __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.0)));
    [TV(11, 0), NoWatch, NoiOS]
    [Field("UIFocusSoundIdentifierDefault", "__Internal")]
    NSString UIFocusSoundIdentifierDefault { get; }
}

// @protocol UICoordinateSpace <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UICoordinateSpace
{
    // @required -(CGPoint)convertPoint:(CGPoint)point toCoordinateSpace:(id<UICoordinateSpace> _Nonnull)coordinateSpace __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("convertPoint:toCoordinateSpace:")]
    CGPoint ConvertPoint(CGPoint point, UICoordinateSpace coordinateSpace);

    // @required -(CGPoint)convertPoint:(CGPoint)point fromCoordinateSpace:(id<UICoordinateSpace> _Nonnull)coordinateSpace __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("convertPoint:fromCoordinateSpace:")]
    CGPoint ConvertPoint(CGPoint point, UICoordinateSpace coordinateSpace);

    // @required -(CGRect)convertRect:(CGRect)rect toCoordinateSpace:(id<UICoordinateSpace> _Nonnull)coordinateSpace __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("convertRect:toCoordinateSpace:")]
    CGRect ConvertRect(CGRect rect, UICoordinateSpace coordinateSpace);

    // @required -(CGRect)convertRect:(CGRect)rect fromCoordinateSpace:(id<UICoordinateSpace> _Nonnull)coordinateSpace __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("convertRect:fromCoordinateSpace:")]
    CGRect ConvertRect(CGRect rect, UICoordinateSpace coordinateSpace);

    // @required @property (readonly, nonatomic) CGRect bounds __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("bounds")]
    CGRect Bounds { get; }
}

// @interface UIView : UIResponder <NSCoding, UIAppearance, UIAppearanceContainer, UIDynamicItem, UITraitEnvironment, UICoordinateSpace, UIFocusItem, UIFocusItemContainer, CALayerDelegate>
[iOS(2, 0)]
[BaseType(typeof(UIResponder))]
interface UIView : INSCoding, IUIAppearance, IUIAppearanceContainer, IUIDynamicItem, IUITraitEnvironment, IUICoordinateSpace, IUIFocusItem, IUIFocusItemContainer, ICALayerDelegate
{
    // @property (readonly, nonatomic, class) Class _Nonnull layerClass;
    [Static]
    [Export("layerClass")]
    Class LayerClass { get; }

    // -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
    [Export("initWithFrame:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect frame);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (getter = isUserInteractionEnabled, nonatomic) BOOL userInteractionEnabled;
    [Export("userInteractionEnabled")]
    bool UserInteractionEnabled { [Bind("isUserInteractionEnabled")] get; set; }

    // @property (nonatomic) NSInteger tag;
    [Export("tag")]
    nint Tag { get; set; }

    // @property (readonly, nonatomic, strong) CALayer * _Nonnull layer;
    [Export("layer", ArgumentSemantic.Strong)]
    CALayer Layer { get; }

    // @property (readonly, nonatomic) BOOL canBecomeFocused __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("canBecomeFocused")]
    bool CanBecomeFocused { get; }

    // @property (readonly, getter = isFocused, nonatomic) BOOL focused __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("focused")]
    bool Focused { [Bind("isFocused")] get; }

    // @property (nonatomic) UISemanticContentAttribute semanticContentAttribute __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("semanticContentAttribute", ArgumentSemantic.Assign)]
    UISemanticContentAttribute SemanticContentAttribute { get; set; }

    // +(UIUserInterfaceLayoutDirection)userInterfaceLayoutDirectionForSemanticContentAttribute:(UISemanticContentAttribute)attribute __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Static]
    [Export("userInterfaceLayoutDirectionForSemanticContentAttribute:")]
    UIUserInterfaceLayoutDirection UserInterfaceLayoutDirectionForSemanticContentAttribute(UISemanticContentAttribute attribute);

    // +(UIUserInterfaceLayoutDirection)userInterfaceLayoutDirectionForSemanticContentAttribute:(UISemanticContentAttribute)semanticContentAttribute relativeToLayoutDirection:(UIUserInterfaceLayoutDirection)layoutDirection __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Static]
    [Export("userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:")]
    UIUserInterfaceLayoutDirection UserInterfaceLayoutDirectionForSemanticContentAttribute(UISemanticContentAttribute semanticContentAttribute, UIUserInterfaceLayoutDirection layoutDirection);

    // @property (readonly, nonatomic) UIUserInterfaceLayoutDirection effectiveUserInterfaceLayoutDirection __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("effectiveUserInterfaceLayoutDirection")]
    UIUserInterfaceLayoutDirection EffectiveUserInterfaceLayoutDirection { get; }
}

// @interface UIViewGeometry (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIViewGeometry
{
    // @property (nonatomic) CGRect frame;
    [Export("frame", ArgumentSemantic.Assign)]
    CGRect Frame { get; set; }

    // @property (nonatomic) CGRect bounds;
    [Export("bounds", ArgumentSemantic.Assign)]
    CGRect Bounds { get; set; }

    // @property (nonatomic) CGPoint center;
    [Export("center", ArgumentSemantic.Assign)]
    CGPoint Center { get; set; }

    // @property (nonatomic) CGAffineTransform transform;
    [Export("transform", ArgumentSemantic.Assign)]
    CGAffineTransform Transform { get; set; }

    // @property (nonatomic) CGFloat contentScaleFactor __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("contentScaleFactor")]
    nfloat ContentScaleFactor { get; set; }

    // @property (getter = isMultipleTouchEnabled, nonatomic) BOOL multipleTouchEnabled __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("multipleTouchEnabled")]
    bool MultipleTouchEnabled { [Bind("isMultipleTouchEnabled")] get; set; }

    // @property (getter = isExclusiveTouch, nonatomic) BOOL exclusiveTouch __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("exclusiveTouch")]
    bool ExclusiveTouch { [Bind("isExclusiveTouch")] get; set; }

    // -(UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
    [Export("hitTest:withEvent:")]
    [return: NullAllowed]
    UIView HitTest(CGPoint point, [NullAllowed] UIEvent @event);

    // -(BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
    [Export("pointInside:withEvent:")]
    bool PointInside(CGPoint point, [NullAllowed] UIEvent @event);

    // -(CGPoint)convertPoint:(CGPoint)point toView:(UIView * _Nullable)view;
    [Export("convertPoint:toView:")]
    CGPoint ConvertPoint(CGPoint point, [NullAllowed] UIView view);

    // -(CGPoint)convertPoint:(CGPoint)point fromView:(UIView * _Nullable)view;
    [Export("convertPoint:fromView:")]
    CGPoint ConvertPoint(CGPoint point, [NullAllowed] UIView view);

    // -(CGRect)convertRect:(CGRect)rect toView:(UIView * _Nullable)view;
    [Export("convertRect:toView:")]
    CGRect ConvertRect(CGRect rect, [NullAllowed] UIView view);

    // -(CGRect)convertRect:(CGRect)rect fromView:(UIView * _Nullable)view;
    [Export("convertRect:fromView:")]
    CGRect ConvertRect(CGRect rect, [NullAllowed] UIView view);

    // @property (nonatomic) BOOL autoresizesSubviews;
    [Export("autoresizesSubviews")]
    bool AutoresizesSubviews { get; set; }

    // @property (nonatomic) UIViewAutoresizing autoresizingMask;
    [Export("autoresizingMask", ArgumentSemantic.Assign)]
    UIViewAutoresizing AutoresizingMask { get; set; }

    // -(CGSize)sizeThatFits:(CGSize)size;
    [Export("sizeThatFits:")]
    CGSize SizeThatFits(CGSize size);

    // -(void)sizeToFit;
    [Export("sizeToFit")]
    void SizeToFit();
}

// @interface UIViewHierarchy (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIViewHierarchy
{
    // @property (readonly, nonatomic) UIView * _Nullable superview;
    [NullAllowed, Export("superview")]
    UIView Superview { get; }

    // @property (readonly, copy, nonatomic) NSArray<__kindof UIView *> * _Nonnull subviews;
    [Export("subviews", ArgumentSemantic.Copy)]
    UIView[] Subviews { get; }

    // @property (readonly, nonatomic) UIWindow * _Nullable window;
    [NullAllowed, Export("window")]
    UIWindow Window { get; }

    // -(void)removeFromSuperview;
    [Export("removeFromSuperview")]
    void RemoveFromSuperview();

    // -(void)insertSubview:(UIView * _Nonnull)view atIndex:(NSInteger)index;
    [Export("insertSubview:atIndex:")]
    void InsertSubview(UIView view, nint index);

    // -(void)exchangeSubviewAtIndex:(NSInteger)index1 withSubviewAtIndex:(NSInteger)index2;
    [Export("exchangeSubviewAtIndex:withSubviewAtIndex:")]
    void ExchangeSubviewAtIndex(nint index1, nint index2);

    // -(void)addSubview:(UIView * _Nonnull)view;
    [Export("addSubview:")]
    void AddSubview(UIView view);

    // -(void)insertSubview:(UIView * _Nonnull)view belowSubview:(UIView * _Nonnull)siblingSubview;
    [Export("insertSubview:belowSubview:")]
    void InsertSubview(UIView view, UIView siblingSubview);

    // -(void)insertSubview:(UIView * _Nonnull)view aboveSubview:(UIView * _Nonnull)siblingSubview;
    [Export("insertSubview:aboveSubview:")]
    void InsertSubview(UIView view, UIView siblingSubview);

    // -(void)bringSubviewToFront:(UIView * _Nonnull)view;
    [Export("bringSubviewToFront:")]
    void BringSubviewToFront(UIView view);

    // -(void)sendSubviewToBack:(UIView * _Nonnull)view;
    [Export("sendSubviewToBack:")]
    void SendSubviewToBack(UIView view);

    // -(void)didAddSubview:(UIView * _Nonnull)subview;
    [Export("didAddSubview:")]
    void DidAddSubview(UIView subview);

    // -(void)willRemoveSubview:(UIView * _Nonnull)subview;
    [Export("willRemoveSubview:")]
    void WillRemoveSubview(UIView subview);

    // -(void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
    [Export("willMoveToSuperview:")]
    void WillMoveToSuperview([NullAllowed] UIView newSuperview);

    // -(void)didMoveToSuperview;
    [Export("didMoveToSuperview")]
    void DidMoveToSuperview();

    // -(void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
    [Export("willMoveToWindow:")]
    void WillMoveToWindow([NullAllowed] UIWindow newWindow);

    // -(void)didMoveToWindow;
    [Export("didMoveToWindow")]
    void DidMoveToWindow();

    // -(BOOL)isDescendantOfView:(UIView * _Nonnull)view;
    [Export("isDescendantOfView:")]
    bool IsDescendantOfView(UIView view);

    // -(__kindof UIView * _Nullable)viewWithTag:(NSInteger)tag;
    [Export("viewWithTag:")]
    UIView ViewWithTag(nint tag);

    // -(void)setNeedsLayout;
    [Export("setNeedsLayout")]
    void SetNeedsLayout();

    // -(void)layoutIfNeeded;
    [Export("layoutIfNeeded")]
    void LayoutIfNeeded();

    // -(void)layoutSubviews;
    [Export("layoutSubviews")]
    void LayoutSubviews();

    // @property (nonatomic) UIEdgeInsets layoutMargins __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("layoutMargins", ArgumentSemantic.Assign)]
    UIEdgeInsets LayoutMargins { get; set; }

    // @property (nonatomic) NSDirectionalEdgeInsets directionalLayoutMargins __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("directionalLayoutMargins", ArgumentSemantic.Assign)]
    NSDirectionalEdgeInsets DirectionalLayoutMargins { get; set; }

    // @property (nonatomic) BOOL preservesSuperviewLayoutMargins __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("preservesSuperviewLayoutMargins")]
    bool PreservesSuperviewLayoutMargins { get; set; }

    // @property (nonatomic) BOOL insetsLayoutMarginsFromSafeArea __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("insetsLayoutMarginsFromSafeArea")]
    bool InsetsLayoutMarginsFromSafeArea { get; set; }

    // -(void)layoutMarginsDidChange __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("layoutMarginsDidChange")]
    void LayoutMarginsDidChange();

    // @property (readonly, nonatomic) UIEdgeInsets safeAreaInsets __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("safeAreaInsets")]
    UIEdgeInsets SafeAreaInsets { get; }

    // -(void)safeAreaInsetsDidChange __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("safeAreaInsetsDidChange")]
    void SafeAreaInsetsDidChange();

    // @property (readonly, strong) UILayoutGuide * _Nonnull layoutMarginsGuide __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("layoutMarginsGuide", ArgumentSemantic.Strong)]
    UILayoutGuide LayoutMarginsGuide { get; }

    // @property (readonly, nonatomic, strong) UILayoutGuide * _Nonnull readableContentGuide __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("readableContentGuide", ArgumentSemantic.Strong)]
    UILayoutGuide ReadableContentGuide { get; }

    // @property (readonly, nonatomic, strong) UILayoutGuide * _Nonnull safeAreaLayoutGuide __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("safeAreaLayoutGuide", ArgumentSemantic.Strong)]
    UILayoutGuide SafeAreaLayoutGuide { get; }
}

// @interface UIViewRendering (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIViewRendering
{
    // -(void)drawRect:(CGRect)rect;
    [Export("drawRect:")]
    void DrawRect(CGRect rect);

    // -(void)setNeedsDisplay;
    [Export("setNeedsDisplay")]
    void SetNeedsDisplay();

    // -(void)setNeedsDisplayInRect:(CGRect)rect;
    [Export("setNeedsDisplayInRect:")]
    void SetNeedsDisplayInRect(CGRect rect);

    // @property (nonatomic) BOOL clipsToBounds;
    [Export("clipsToBounds")]
    bool ClipsToBounds { get; set; }

    // @property (copy, nonatomic) UIColor * _Nullable backgroundColor __attribute__((annotate("ui_appearance_selector")));
    [NullAllowed, Export("backgroundColor", ArgumentSemantic.Copy)]
    UIColor BackgroundColor { get; set; }

    // @property (nonatomic) CGFloat alpha;
    [Export("alpha")]
    nfloat Alpha { get; set; }

    // @property (getter = isOpaque, nonatomic) BOOL opaque;
    [Export("opaque")]
    bool Opaque { [Bind("isOpaque")] get; set; }

    // @property (nonatomic) BOOL clearsContextBeforeDrawing;
    [Export("clearsContextBeforeDrawing")]
    bool ClearsContextBeforeDrawing { get; set; }

    // @property (getter = isHidden, nonatomic) BOOL hidden;
    [Export("hidden")]
    bool Hidden { [Bind("isHidden")] get; set; }

    // @property (nonatomic) UIViewContentMode contentMode;
    [Export("contentMode", ArgumentSemantic.Assign)]
    UIViewContentMode ContentMode { get; set; }

    // @property (nonatomic) CGRect contentStretch __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0, deprecated=6_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 6, 0)]
    [NoTV]
    [Export("contentStretch", ArgumentSemantic.Assign)]
    CGRect ContentStretch { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable maskView __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("maskView", ArgumentSemantic.Strong)]
    UIView MaskView { get; set; }

    // @property (nonatomic, strong) UIColor * _Null_unspecified tintColor __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("tintColor", ArgumentSemantic.Strong)]
    UIColor TintColor { get; set; }

    // @property (nonatomic) UIViewTintAdjustmentMode tintAdjustmentMode __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("tintAdjustmentMode", ArgumentSemantic.Assign)]
    UIViewTintAdjustmentMode TintAdjustmentMode { get; set; }

    // -(void)tintColorDidChange __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("tintColorDidChange")]
    void TintColorDidChange();
}

// @interface UIViewAnimation (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIViewAnimation
{
    // +(void)beginAnimations:(NSString * _Nullable)animationID context:(void * _Nullable)context;
    [Static]
    [Export("beginAnimations:context:")]
    unsafe void BeginAnimations([NullAllowed] string animationID, [NullAllowed] void* context);

    // +(void)commitAnimations;
    [Static]
    [Export("commitAnimations")]
    void CommitAnimations();

    // +(void)setAnimationDelegate:(id _Nullable)delegate;
    [Static]
    [Export("setAnimationDelegate:")]
    void SetAnimationDelegate([NullAllowed] NSObject @delegate);

    // +(void)setAnimationWillStartSelector:(SEL _Nullable)selector;
    [Static]
    [Export("setAnimationWillStartSelector:")]
    void SetAnimationWillStartSelector([NullAllowed] Selector selector);

    // +(void)setAnimationDidStopSelector:(SEL _Nullable)selector;
    [Static]
    [Export("setAnimationDidStopSelector:")]
    void SetAnimationDidStopSelector([NullAllowed] Selector selector);

    // +(void)setAnimationDuration:(NSTimeInterval)duration;
    [Static]
    [Export("setAnimationDuration:")]
    void SetAnimationDuration(double duration);

    // +(void)setAnimationDelay:(NSTimeInterval)delay;
    [Static]
    [Export("setAnimationDelay:")]
    void SetAnimationDelay(double delay);

    // +(void)setAnimationStartDate:(NSDate * _Nonnull)startDate;
    [Static]
    [Export("setAnimationStartDate:")]
    void SetAnimationStartDate(NSDate startDate);

    // +(void)setAnimationCurve:(UIViewAnimationCurve)curve;
    [Static]
    [Export("setAnimationCurve:")]
    void SetAnimationCurve(UIViewAnimationCurve curve);

    // +(void)setAnimationRepeatCount:(float)repeatCount;
    [Static]
    [Export("setAnimationRepeatCount:")]
    void SetAnimationRepeatCount(float repeatCount);

    // +(void)setAnimationRepeatAutoreverses:(BOOL)repeatAutoreverses;
    [Static]
    [Export("setAnimationRepeatAutoreverses:")]
    void SetAnimationRepeatAutoreverses(bool repeatAutoreverses);

    // +(void)setAnimationBeginsFromCurrentState:(BOOL)fromCurrentState;
    [Static]
    [Export("setAnimationBeginsFromCurrentState:")]
    void SetAnimationBeginsFromCurrentState(bool fromCurrentState);

    // +(void)setAnimationTransition:(UIViewAnimationTransition)transition forView:(UIView * _Nonnull)view cache:(BOOL)cache;
    [Static]
    [Export("setAnimationTransition:forView:cache:")]
    void SetAnimationTransition(UIViewAnimationTransition transition, UIView view, bool cache);

    // +(void)setAnimationsEnabled:(BOOL)enabled;
    [Static]
    [Export("setAnimationsEnabled:")]
    void SetAnimationsEnabled(bool enabled);

    // @property (readonly, nonatomic, class) BOOL areAnimationsEnabled;
    [Static]
    [Export("areAnimationsEnabled")]
    bool AreAnimationsEnabled { get; }

    // +(void)performWithoutAnimation:(void (^ _Nonnull)(void))actionsWithoutAnimation __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Static]
    [Export("performWithoutAnimation:")]
    void PerformWithoutAnimation(Action actionsWithoutAnimation);

    // @property (readonly, nonatomic, class) NSTimeInterval inheritedAnimationDuration __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Static]
    [Export("inheritedAnimationDuration")]
    double InheritedAnimationDuration { get; }
}

// @interface UIViewAnimationWithBlocks (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIViewAnimationWithBlocks
{
    // +(void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Static]
    [Export("animateWithDuration:delay:options:animations:completion:")]
    void AnimateWithDuration(double duration, double delay, UIViewAnimationOptions options, Action animations, [NullAllowed] Action<bool> completion);

    // +(void)animateWithDuration:(NSTimeInterval)duration animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Static]
    [Export("animateWithDuration:animations:completion:")]
    void AnimateWithDuration(double duration, Action animations, [NullAllowed] Action<bool> completion);

    // +(void)animateWithDuration:(NSTimeInterval)duration animations:(void (^ _Nonnull)(void))animations __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Static]
    [Export("animateWithDuration:animations:")]
    void AnimateWithDuration(double duration, Action animations);

    // +(void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)dampingRatio initialSpringVelocity:(CGFloat)velocity options:(UIViewAnimationOptions)options animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Static]
    [Export("animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:")]
    void AnimateWithDuration(double duration, double delay, nfloat dampingRatio, nfloat velocity, UIViewAnimationOptions options, Action animations, [NullAllowed] Action<bool> completion);

    // +(void)transitionWithView:(UIView * _Nonnull)view duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(void))animations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Static]
    [Export("transitionWithView:duration:options:animations:completion:")]
    void TransitionWithView(UIView view, double duration, UIViewAnimationOptions options, [NullAllowed] Action animations, [NullAllowed] Action<bool> completion);

    // +(void)transitionFromView:(UIView * _Nonnull)fromView toView:(UIView * _Nonnull)toView duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Static]
    [Export("transitionFromView:toView:duration:options:completion:")]
    void TransitionFromView(UIView fromView, UIView toView, double duration, UIViewAnimationOptions options, [NullAllowed] Action<bool> completion);

    // +(void)performSystemAnimation:(UISystemAnimation)animation onViews:(NSArray<__kindof UIView *> * _Nonnull)views options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(void))parallelAnimations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Static]
    [Export("performSystemAnimation:onViews:options:animations:completion:")]
    void PerformSystemAnimation(UISystemAnimation animation, UIView[] views, UIViewAnimationOptions options, [NullAllowed] Action parallelAnimations, [NullAllowed] Action<bool> completion);
}

// @interface UIViewKeyframeAnimations (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIViewKeyframeAnimations
{
    // +(void)animateKeyframesWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewKeyframeAnimationOptions)options animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Static]
    [Export("animateKeyframesWithDuration:delay:options:animations:completion:")]
    void AnimateKeyframesWithDuration(double duration, double delay, UIViewKeyframeAnimationOptions options, Action animations, [NullAllowed] Action<bool> completion);

    // +(void)addKeyframeWithRelativeStartTime:(double)frameStartTime relativeDuration:(double)frameDuration animations:(void (^ _Nonnull)(void))animations __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Static]
    [Export("addKeyframeWithRelativeStartTime:relativeDuration:animations:")]
    void AddKeyframeWithRelativeStartTime(double frameStartTime, double frameDuration, Action animations);
}

// @interface UIViewGestureRecognizers (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIViewGestureRecognizers
{
    // @property (copy, nonatomic) NSArray<__kindof UIGestureRecognizer *> * _Nullable gestureRecognizers __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [NullAllowed, Export("gestureRecognizers", ArgumentSemantic.Copy)]
    UIGestureRecognizer[] GestureRecognizers { get; set; }

    // -(void)addGestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Export("addGestureRecognizer:")]
    void AddGestureRecognizer(UIGestureRecognizer gestureRecognizer);

    // -(void)removeGestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Export("removeGestureRecognizer:")]
    void RemoveGestureRecognizer(UIGestureRecognizer gestureRecognizer);

    // -(BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("gestureRecognizerShouldBegin:")]
    bool GestureRecognizerShouldBegin(UIGestureRecognizer gestureRecognizer);
}

// @interface UIViewMotionEffects (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIViewMotionEffects
{
    // -(void)addMotionEffect:(UIMotionEffect * _Nonnull)effect __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("addMotionEffect:")]
    void AddMotionEffect(UIMotionEffect effect);

    // -(void)removeMotionEffect:(UIMotionEffect * _Nonnull)effect __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("removeMotionEffect:")]
    void RemoveMotionEffect(UIMotionEffect effect);

    // @property (copy, nonatomic) NSArray<__kindof UIMotionEffect *> * _Nonnull motionEffects __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("motionEffects", ArgumentSemantic.Copy)]
    UIMotionEffect[] MotionEffects { get; set; }
}

// @interface UIConstraintBasedLayoutInstallingConstraints (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIConstraintBasedLayoutInstallingConstraints
{
    // @property (readonly, nonatomic) NSArray<__kindof NSLayoutConstraint *> * _Nonnull constraints __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("constraints")]
    NSLayoutConstraint[] Constraints { get; }

    // -(void)addConstraint:(NSLayoutConstraint * _Nonnull)constraint __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("addConstraint:")]
    void AddConstraint(NSLayoutConstraint constraint);

    // -(void)addConstraints:(NSArray<__kindof NSLayoutConstraint *> * _Nonnull)constraints __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("addConstraints:")]
    void AddConstraints(NSLayoutConstraint[] constraints);

    // -(void)removeConstraint:(NSLayoutConstraint * _Nonnull)constraint __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("removeConstraint:")]
    void RemoveConstraint(NSLayoutConstraint constraint);

    // -(void)removeConstraints:(NSArray<__kindof NSLayoutConstraint *> * _Nonnull)constraints __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("removeConstraints:")]
    void RemoveConstraints(NSLayoutConstraint[] constraints);
}

// @interface UIConstraintBasedLayoutCoreMethods (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIConstraintBasedLayoutCoreMethods
{
    // -(void)updateConstraintsIfNeeded __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("updateConstraintsIfNeeded")]
    void UpdateConstraintsIfNeeded();

    // -(void)updateConstraints __attribute__((objc_requires_super)) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("updateConstraints")]
    [RequiresSuper]
    void UpdateConstraints();

    // -(BOOL)needsUpdateConstraints __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("needsUpdateConstraints")]
    [Verify(MethodToProperty)]
    bool NeedsUpdateConstraints { get; }

    // -(void)setNeedsUpdateConstraints __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("setNeedsUpdateConstraints")]
    void SetNeedsUpdateConstraints();
}

// @interface UIConstraintBasedCompatibility (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIConstraintBasedCompatibility
{
    // @property (nonatomic) BOOL translatesAutoresizingMaskIntoConstraints __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("translatesAutoresizingMaskIntoConstraints")]
    bool TranslatesAutoresizingMaskIntoConstraints { get; set; }

    // @property (readonly, nonatomic, class) BOOL requiresConstraintBasedLayout __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Static]
    [Export("requiresConstraintBasedLayout")]
    bool RequiresConstraintBasedLayout { get; }
}

// @interface UIConstraintBasedLayoutLayering (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIConstraintBasedLayoutLayering
{
    // -(CGRect)alignmentRectForFrame:(CGRect)frame __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("alignmentRectForFrame:")]
    CGRect AlignmentRectForFrame(CGRect frame);

    // -(CGRect)frameForAlignmentRect:(CGRect)alignmentRect __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("frameForAlignmentRect:")]
    CGRect FrameForAlignmentRect(CGRect alignmentRect);

    // @property (readonly, nonatomic) UIEdgeInsets alignmentRectInsets __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("alignmentRectInsets")]
    UIEdgeInsets AlignmentRectInsets { get; }

    // -(UIView * _Nonnull)viewForBaselineLayout __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 6, 0, message: "Override -viewForFirstBaselineLayout or -viewForLastBaselineLayout as appropriate, instead")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Override -viewForFirstBaselineLayout or -viewForLastBaselineLayout as appropriate, instead")]
    [NoTV]
    [Export("viewForBaselineLayout")]
    [Verify(MethodToProperty)]
    UIView ViewForBaselineLayout { get; }

    // @property (readonly, strong) UIView * _Nonnull viewForFirstBaselineLayout __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("viewForFirstBaselineLayout", ArgumentSemantic.Strong)]
    UIView ViewForFirstBaselineLayout { get; }

    // @property (readonly, strong) UIView * _Nonnull viewForLastBaselineLayout __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("viewForLastBaselineLayout", ArgumentSemantic.Strong)]
    UIView ViewForLastBaselineLayout { get; }

    // @property (readonly, nonatomic) CGSize intrinsicContentSize __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("intrinsicContentSize")]
    CGSize IntrinsicContentSize { get; }

    // -(void)invalidateIntrinsicContentSize __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("invalidateIntrinsicContentSize")]
    void InvalidateIntrinsicContentSize();

    // -(UILayoutPriority)contentHuggingPriorityForAxis:(UILayoutConstraintAxis)axis __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("contentHuggingPriorityForAxis:")]
    float ContentHuggingPriorityForAxis(UILayoutConstraintAxis axis);

    // -(void)setContentHuggingPriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("setContentHuggingPriority:forAxis:")]
    void SetContentHuggingPriority(float priority, UILayoutConstraintAxis axis);

    // -(UILayoutPriority)contentCompressionResistancePriorityForAxis:(UILayoutConstraintAxis)axis __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("contentCompressionResistancePriorityForAxis:")]
    float ContentCompressionResistancePriorityForAxis(UILayoutConstraintAxis axis);

    // -(void)setContentCompressionResistancePriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("setContentCompressionResistancePriority:forAxis:")]
    void SetContentCompressionResistancePriority(float priority, UILayoutConstraintAxis axis);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const CGFloat UIViewNoIntrinsicMetric __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UIViewNoIntrinsicMetric", "__Internal")]
    nfloat UIViewNoIntrinsicMetric { get; }

    // extern const CGSize UILayoutFittingCompressedSize __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UILayoutFittingCompressedSize", "__Internal")]
    CGSize UILayoutFittingCompressedSize { get; }

    // extern const CGSize UILayoutFittingExpandedSize __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UILayoutFittingExpandedSize", "__Internal")]
    CGSize UILayoutFittingExpandedSize { get; }
}

// @interface UIConstraintBasedLayoutFittingSize (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIConstraintBasedLayoutFittingSize
{
    // -(CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("systemLayoutSizeFittingSize:")]
    CGSize SystemLayoutSizeFittingSize(CGSize targetSize);

    // -(CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:")]
    CGSize SystemLayoutSizeFittingSize(CGSize targetSize, float horizontalFittingPriority, float verticalFittingPriority);
}

// @interface UILayoutGuideSupport (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UILayoutGuideSupport
{
    // @property (readonly, copy, nonatomic) NSArray<__kindof UILayoutGuide *> * _Nonnull layoutGuides __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("layoutGuides", ArgumentSemantic.Copy)]
    UILayoutGuide[] LayoutGuides { get; }

    // -(void)addLayoutGuide:(UILayoutGuide * _Nonnull)layoutGuide __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("addLayoutGuide:")]
    void AddLayoutGuide(UILayoutGuide layoutGuide);

    // -(void)removeLayoutGuide:(UILayoutGuide * _Nonnull)layoutGuide __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("removeLayoutGuide:")]
    void RemoveLayoutGuide(UILayoutGuide layoutGuide);
}

// @interface UIViewLayoutConstraintCreation (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIViewLayoutConstraintCreation
{
    // @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull leadingAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("leadingAnchor", ArgumentSemantic.Strong)]
    NSLayoutXAxisAnchor LeadingAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull trailingAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("trailingAnchor", ArgumentSemantic.Strong)]
    NSLayoutXAxisAnchor TrailingAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull leftAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("leftAnchor", ArgumentSemantic.Strong)]
    NSLayoutXAxisAnchor LeftAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull rightAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("rightAnchor", ArgumentSemantic.Strong)]
    NSLayoutXAxisAnchor RightAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull topAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("topAnchor", ArgumentSemantic.Strong)]
    NSLayoutYAxisAnchor TopAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull bottomAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("bottomAnchor", ArgumentSemantic.Strong)]
    NSLayoutYAxisAnchor BottomAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutDimension * _Nonnull widthAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("widthAnchor", ArgumentSemantic.Strong)]
    NSLayoutDimension WidthAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutDimension * _Nonnull heightAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("heightAnchor", ArgumentSemantic.Strong)]
    NSLayoutDimension HeightAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutXAxisAnchor * _Nonnull centerXAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("centerXAnchor", ArgumentSemantic.Strong)]
    NSLayoutXAxisAnchor CenterXAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull centerYAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("centerYAnchor", ArgumentSemantic.Strong)]
    NSLayoutYAxisAnchor CenterYAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull firstBaselineAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("firstBaselineAnchor", ArgumentSemantic.Strong)]
    NSLayoutYAxisAnchor FirstBaselineAnchor { get; }

    // @property (readonly, nonatomic, strong) NSLayoutYAxisAnchor * _Nonnull lastBaselineAnchor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("lastBaselineAnchor", ArgumentSemantic.Strong)]
    NSLayoutYAxisAnchor LastBaselineAnchor { get; }
}

// @interface UIConstraintBasedLayoutDebugging (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIConstraintBasedLayoutDebugging
{
    // -(NSArray<__kindof NSLayoutConstraint *> * _Nonnull)constraintsAffectingLayoutForAxis:(UILayoutConstraintAxis)axis __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("constraintsAffectingLayoutForAxis:")]
    NSLayoutConstraint[] ConstraintsAffectingLayoutForAxis(UILayoutConstraintAxis axis);

    // @property (readonly, nonatomic) BOOL hasAmbiguousLayout __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("hasAmbiguousLayout")]
    bool HasAmbiguousLayout { get; }

    // -(void)exerciseAmbiguityInLayout __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("exerciseAmbiguityInLayout")]
    void ExerciseAmbiguityInLayout();
}

// @interface UIConstraintBasedLayoutDebugging (UILayoutGuide)
[Category]
[BaseType(typeof(UILayoutGuide))]
interface UILayoutGuide_UIConstraintBasedLayoutDebugging
{
    // -(NSArray<__kindof NSLayoutConstraint *> * _Nonnull)constraintsAffectingLayoutForAxis:(UILayoutConstraintAxis)axis __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("constraintsAffectingLayoutForAxis:")]
    NSLayoutConstraint[] ConstraintsAffectingLayoutForAxis(UILayoutConstraintAxis axis);

    // @property (readonly, nonatomic) BOOL hasAmbiguousLayout __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("hasAmbiguousLayout")]
    bool HasAmbiguousLayout { get; }
}

// @interface UIStateRestoration (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIStateRestoration
{
    // @property (copy, nonatomic) NSString * _Nullable restorationIdentifier __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("restorationIdentifier")]
    string RestorationIdentifier { get; set; }

    // -(void)encodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("encodeRestorableStateWithCoder:")]
    void EncodeRestorableStateWithCoder(NSCoder coder);

    // -(void)decodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("decodeRestorableStateWithCoder:")]
    void DecodeRestorableStateWithCoder(NSCoder coder);
}

// @interface UISnapshotting (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UISnapshotting
{
    // -(UIView * _Nullable)snapshotViewAfterScreenUpdates:(BOOL)afterUpdates __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("snapshotViewAfterScreenUpdates:")]
    [return: NullAllowed]
    UIView SnapshotViewAfterScreenUpdates(bool afterUpdates);

    // -(UIView * _Nullable)resizableSnapshotViewFromRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates withCapInsets:(UIEdgeInsets)capInsets __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:")]
    [return: NullAllowed]
    UIView ResizableSnapshotViewFromRect(CGRect rect, bool afterUpdates, UIEdgeInsets capInsets);

    // -(BOOL)drawViewHierarchyInRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("drawViewHierarchyInRect:afterScreenUpdates:")]
    bool DrawViewHierarchyInRect(CGRect rect, bool afterUpdates);
}

// @interface UIPickerView : UIView <NSCoding>
[NoTV, iOS(2, 0)]
[BaseType(typeof(UIView))]
interface UIPickerView : INSCoding
{
    // @property (nonatomic, weak) id<UIPickerViewDataSource> _Nullable dataSource;
    [NullAllowed, Export("dataSource", ArgumentSemantic.Weak)]
    UIPickerViewDataSource DataSource { get; set; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIPickerViewDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIPickerViewDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (nonatomic) BOOL showsSelectionIndicator;
    [Export("showsSelectionIndicator")]
    bool ShowsSelectionIndicator { get; set; }

    // @property (readonly, nonatomic) NSInteger numberOfComponents;
    [Export("numberOfComponents")]
    nint NumberOfComponents { get; }

    // -(NSInteger)numberOfRowsInComponent:(NSInteger)component;
    [Export("numberOfRowsInComponent:")]
    nint NumberOfRowsInComponent(nint component);

    // -(CGSize)rowSizeForComponent:(NSInteger)component;
    [Export("rowSizeForComponent:")]
    CGSize RowSizeForComponent(nint component);

    // -(UIView * _Nullable)viewForRow:(NSInteger)row forComponent:(NSInteger)component;
    [Export("viewForRow:forComponent:")]
    [return: NullAllowed]
    UIView ViewForRow(nint row, nint component);

    // -(void)reloadAllComponents;
    [Export("reloadAllComponents")]
    void ReloadAllComponents();

    // -(void)reloadComponent:(NSInteger)component;
    [Export("reloadComponent:")]
    void ReloadComponent(nint component);

    // -(void)selectRow:(NSInteger)row inComponent:(NSInteger)component animated:(BOOL)animated;
    [Export("selectRow:inComponent:animated:")]
    void SelectRow(nint row, nint component, bool animated);

    // -(NSInteger)selectedRowInComponent:(NSInteger)component;
    [Export("selectedRowInComponent:")]
    nint SelectedRowInComponent(nint component);
}

// @protocol UIPickerViewDataSource <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIPickerViewDataSource
{
    // @required -(NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView;
    [Abstract]
    [Export("numberOfComponentsInPickerView:")]
    nint NumberOfComponentsInPickerView(UIPickerView pickerView);

    // @required -(NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component;
    [Abstract]
    [Export("pickerView:numberOfRowsInComponent:")]
    nint PickerView(UIPickerView pickerView, nint component);
}

// @protocol UIPickerViewDelegate <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIPickerViewDelegate
{
    // @optional -(CGFloat)pickerView:(UIPickerView * _Nonnull)pickerView widthForComponent:(NSInteger)component __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("pickerView:widthForComponent:")]
    nfloat PickerView(UIPickerView pickerView, nint component);

    // @optional -(CGFloat)pickerView:(UIPickerView * _Nonnull)pickerView rowHeightForComponent:(NSInteger)component __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("pickerView:rowHeightForComponent:")]
    nfloat PickerView(UIPickerView pickerView, nint component);

    // @optional -(NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("pickerView:titleForRow:forComponent:")]
    [return: NullAllowed]
    string PickerView(UIPickerView pickerView, nint row, nint component);

    // @optional -(NSAttributedString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView attributedTitleForRow:(NSInteger)row forComponent:(NSInteger)component __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Export("pickerView:attributedTitleForRow:forComponent:")]
    [return: NullAllowed]
    NSAttributedString PickerView(UIPickerView pickerView, nint row, nint component);

    // @optional -(UIView * _Nonnull)pickerView:(UIPickerView * _Nonnull)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView * _Nullable)view __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("pickerView:viewForRow:forComponent:reusingView:")]
    UIView PickerView(UIPickerView pickerView, nint row, nint component, [NullAllowed] UIView view);

    // @optional -(void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("pickerView:didSelectRow:inComponent:")]
    void PickerView(UIPickerView pickerView, nint row, nint component);
}

// @interface UIControl : UIView
[iOS(2, 0)]
[BaseType(typeof(UIView))]
interface UIControl
{
    // @property (getter = isEnabled, nonatomic) BOOL enabled;
    [Export("enabled")]
    bool Enabled { [Bind("isEnabled")] get; set; }

    // @property (getter = isSelected, nonatomic) BOOL selected;
    [Export("selected")]
    bool Selected { [Bind("isSelected")] get; set; }

    // @property (getter = isHighlighted, nonatomic) BOOL highlighted;
    [Export("highlighted")]
    bool Highlighted { [Bind("isHighlighted")] get; set; }

    // @property (nonatomic) UIControlContentVerticalAlignment contentVerticalAlignment;
    [Export("contentVerticalAlignment", ArgumentSemantic.Assign)]
    UIControlContentVerticalAlignment ContentVerticalAlignment { get; set; }

    // @property (nonatomic) UIControlContentHorizontalAlignment contentHorizontalAlignment;
    [Export("contentHorizontalAlignment", ArgumentSemantic.Assign)]
    UIControlContentHorizontalAlignment ContentHorizontalAlignment { get; set; }

    // @property (readonly, nonatomic) UIControlContentHorizontalAlignment effectiveContentHorizontalAlignment;
    [Export("effectiveContentHorizontalAlignment")]
    UIControlContentHorizontalAlignment EffectiveContentHorizontalAlignment { get; }

    // @property (readonly, nonatomic) UIControlState state;
    [Export("state")]
    UIControlState State { get; }

    // @property (readonly, getter = isTracking, nonatomic) BOOL tracking;
    [Export("tracking")]
    bool Tracking { [Bind("isTracking")] get; }

    // @property (readonly, getter = isTouchInside, nonatomic) BOOL touchInside;
    [Export("touchInside")]
    bool TouchInside { [Bind("isTouchInside")] get; }

    // -(BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;
    [Export("beginTrackingWithTouch:withEvent:")]
    bool BeginTrackingWithTouch(UITouch touch, [NullAllowed] UIEvent @event);

    // -(BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;
    [Export("continueTrackingWithTouch:withEvent:")]
    bool ContinueTrackingWithTouch(UITouch touch, [NullAllowed] UIEvent @event);

    // -(void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
    [Export("endTrackingWithTouch:withEvent:")]
    void EndTrackingWithTouch([NullAllowed] UITouch touch, [NullAllowed] UIEvent @event);

    // -(void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
    [Export("cancelTrackingWithEvent:")]
    void CancelTrackingWithEvent([NullAllowed] UIEvent @event);

    // -(void)addTarget:(id _Nullable)target action:(SEL _Nonnull)action forControlEvents:(UIControlEvents)controlEvents;
    [Export("addTarget:action:forControlEvents:")]
    void AddTarget([NullAllowed] NSObject target, Selector action, UIControlEvents controlEvents);

    // -(void)removeTarget:(id _Nullable)target action:(SEL _Nullable)action forControlEvents:(UIControlEvents)controlEvents;
    [Export("removeTarget:action:forControlEvents:")]
    void RemoveTarget([NullAllowed] NSObject target, [NullAllowed] Selector action, UIControlEvents controlEvents);

    // @property (readonly, nonatomic) NSSet * _Nonnull allTargets;
    [Export("allTargets")]
    NSSet AllTargets { get; }

    // @property (readonly, nonatomic) UIControlEvents allControlEvents;
    [Export("allControlEvents")]
    UIControlEvents AllControlEvents { get; }

    // -(NSArray<NSString *> * _Nullable)actionsForTarget:(id _Nullable)target forControlEvent:(UIControlEvents)controlEvent;
    [Export("actionsForTarget:forControlEvent:")]
    [return: NullAllowed]
    string[] ActionsForTarget([NullAllowed] NSObject target, UIControlEvents controlEvent);

    // -(void)sendAction:(SEL _Nonnull)action to:(id _Nullable)target forEvent:(UIEvent * _Nullable)event;
    [Export("sendAction:to:forEvent:")]
    void SendAction(Selector action, [NullAllowed] NSObject target, [NullAllowed] UIEvent @event);

    // -(void)sendActionsForControlEvents:(UIControlEvents)controlEvents;
    [Export("sendActionsForControlEvents:")]
    void SendActionsForControlEvents(UIControlEvents controlEvents);
}

// @interface UIRefreshControl : UIControl
[NoTV, iOS(6, 0)]
[BaseType(typeof(UIControl))]
interface UIRefreshControl
{
    // @property (readonly, getter = isRefreshing, nonatomic) BOOL refreshing;
    [Export("refreshing")]
    bool Refreshing { [Bind("isRefreshing")] get; }

    // @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
    [Export("tintColor", ArgumentSemantic.Strong)]
    UIColor TintColor { get; set; }

    // @property (nonatomic, strong) NSAttributedString * _Nullable attributedTitle __attribute__((annotate("ui_appearance_selector")));
    [NullAllowed, Export("attributedTitle", ArgumentSemantic.Strong)]
    NSAttributedString AttributedTitle { get; set; }

    // -(void)beginRefreshing __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("beginRefreshing")]
    void BeginRefreshing();

    // -(void)endRefreshing __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("endRefreshing")]
    void EndRefreshing();
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UIScrollViewDecelerationRate UIScrollViewDecelerationRateNormal __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Field("UIScrollViewDecelerationRateNormal", "__Internal")]
    double UIScrollViewDecelerationRateNormal { get; }

    // extern const UIScrollViewDecelerationRate UIScrollViewDecelerationRateFast __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Field("UIScrollViewDecelerationRateFast", "__Internal")]
    double UIScrollViewDecelerationRateFast { get; }
}

// @interface UIScrollView : UIView <NSCoding, UIFocusItemScrollableContainer>
[iOS(2, 0)]
[BaseType(typeof(UIView))]
interface UIScrollView : INSCoding, IUIFocusItemScrollableContainer
{
    // @property (nonatomic) CGPoint contentOffset;
    [Export("contentOffset", ArgumentSemantic.Assign)]
    CGPoint ContentOffset { get; set; }

    // @property (nonatomic) CGSize contentSize;
    [Export("contentSize", ArgumentSemantic.Assign)]
    CGSize ContentSize { get; set; }

    // @property (nonatomic) UIEdgeInsets contentInset;
    [Export("contentInset", ArgumentSemantic.Assign)]
    UIEdgeInsets ContentInset { get; set; }

    // @property (readonly, nonatomic) UIEdgeInsets adjustedContentInset __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("adjustedContentInset")]
    UIEdgeInsets AdjustedContentInset { get; }

    // -(void)adjustedContentInsetDidChange __attribute__((objc_requires_super)) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("adjustedContentInsetDidChange")]
    [RequiresSuper]
    void AdjustedContentInsetDidChange();

    // @property (nonatomic) UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("contentInsetAdjustmentBehavior", ArgumentSemantic.Assign)]
    UIScrollViewContentInsetAdjustmentBehavior ContentInsetAdjustmentBehavior { get; set; }

    // @property (readonly, nonatomic, strong) UILayoutGuide * _Nonnull contentLayoutGuide __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("contentLayoutGuide", ArgumentSemantic.Strong)]
    UILayoutGuide ContentLayoutGuide { get; }

    // @property (readonly, nonatomic, strong) UILayoutGuide * _Nonnull frameLayoutGuide __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("frameLayoutGuide", ArgumentSemantic.Strong)]
    UILayoutGuide FrameLayoutGuide { get; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIScrollViewDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIScrollViewDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (getter = isDirectionalLockEnabled, nonatomic) BOOL directionalLockEnabled;
    [Export("directionalLockEnabled")]
    bool DirectionalLockEnabled { [Bind("isDirectionalLockEnabled")] get; set; }

    // @property (nonatomic) BOOL bounces;
    [Export("bounces")]
    bool Bounces { get; set; }

    // @property (nonatomic) BOOL alwaysBounceVertical;
    [Export("alwaysBounceVertical")]
    bool AlwaysBounceVertical { get; set; }

    // @property (nonatomic) BOOL alwaysBounceHorizontal;
    [Export("alwaysBounceHorizontal")]
    bool AlwaysBounceHorizontal { get; set; }

    // @property (getter = isPagingEnabled, nonatomic) BOOL pagingEnabled __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("pagingEnabled")]
    bool PagingEnabled { [Bind("isPagingEnabled")] get; set; }

    // @property (getter = isScrollEnabled, nonatomic) BOOL scrollEnabled;
    [Export("scrollEnabled")]
    bool ScrollEnabled { [Bind("isScrollEnabled")] get; set; }

    // @property (nonatomic) BOOL showsHorizontalScrollIndicator;
    [Export("showsHorizontalScrollIndicator")]
    bool ShowsHorizontalScrollIndicator { get; set; }

    // @property (nonatomic) BOOL showsVerticalScrollIndicator;
    [Export("showsVerticalScrollIndicator")]
    bool ShowsVerticalScrollIndicator { get; set; }

    // @property (nonatomic) UIEdgeInsets scrollIndicatorInsets;
    [Export("scrollIndicatorInsets", ArgumentSemantic.Assign)]
    UIEdgeInsets ScrollIndicatorInsets { get; set; }

    // @property (nonatomic) UIScrollViewIndicatorStyle indicatorStyle;
    [Export("indicatorStyle", ArgumentSemantic.Assign)]
    UIScrollViewIndicatorStyle IndicatorStyle { get; set; }

    // @property (nonatomic) UIScrollViewDecelerationRate decelerationRate __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("decelerationRate")]
    double DecelerationRate { get; set; }

    // @property (nonatomic) UIScrollViewIndexDisplayMode indexDisplayMode __attribute__((availability(tvos, introduced=10.2)));
    [TV(10, 2)]
    [Export("indexDisplayMode", ArgumentSemantic.Assign)]
    UIScrollViewIndexDisplayMode IndexDisplayMode { get; set; }

    // -(void)setContentOffset:(CGPoint)contentOffset animated:(BOOL)animated;
    [Export("setContentOffset:animated:")]
    void SetContentOffset(CGPoint contentOffset, bool animated);

    // -(void)scrollRectToVisible:(CGRect)rect animated:(BOOL)animated;
    [Export("scrollRectToVisible:animated:")]
    void ScrollRectToVisible(CGRect rect, bool animated);

    // -(void)flashScrollIndicators;
    [Export("flashScrollIndicators")]
    void FlashScrollIndicators();

    // @property (readonly, getter = isTracking, nonatomic) BOOL tracking;
    [Export("tracking")]
    bool Tracking { [Bind("isTracking")] get; }

    // @property (readonly, getter = isDragging, nonatomic) BOOL dragging;
    [Export("dragging")]
    bool Dragging { [Bind("isDragging")] get; }

    // @property (readonly, getter = isDecelerating, nonatomic) BOOL decelerating;
    [Export("decelerating")]
    bool Decelerating { [Bind("isDecelerating")] get; }

    // @property (nonatomic) BOOL delaysContentTouches;
    [Export("delaysContentTouches")]
    bool DelaysContentTouches { get; set; }

    // @property (nonatomic) BOOL canCancelContentTouches;
    [Export("canCancelContentTouches")]
    bool CanCancelContentTouches { get; set; }

    // -(BOOL)touchesShouldBegin:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event inContentView:(UIView * _Nonnull)view;
    [Export("touchesShouldBegin:withEvent:inContentView:")]
    bool TouchesShouldBegin(NSSet<UITouch> touches, [NullAllowed] UIEvent @event, UIView view);

    // -(BOOL)touchesShouldCancelInContentView:(UIView * _Nonnull)view;
    [Export("touchesShouldCancelInContentView:")]
    bool TouchesShouldCancelInContentView(UIView view);

    // @property (nonatomic) CGFloat minimumZoomScale;
    [Export("minimumZoomScale")]
    nfloat MinimumZoomScale { get; set; }

    // @property (nonatomic) CGFloat maximumZoomScale;
    [Export("maximumZoomScale")]
    nfloat MaximumZoomScale { get; set; }

    // @property (nonatomic) CGFloat zoomScale __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("zoomScale")]
    nfloat ZoomScale { get; set; }

    // -(void)setZoomScale:(CGFloat)scale animated:(BOOL)animated __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("setZoomScale:animated:")]
    void SetZoomScale(nfloat scale, bool animated);

    // -(void)zoomToRect:(CGRect)rect animated:(BOOL)animated __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("zoomToRect:animated:")]
    void ZoomToRect(CGRect rect, bool animated);

    // @property (nonatomic) BOOL bouncesZoom;
    [Export("bouncesZoom")]
    bool BouncesZoom { get; set; }

    // @property (readonly, getter = isZooming, nonatomic) BOOL zooming;
    [Export("zooming")]
    bool Zooming { [Bind("isZooming")] get; }

    // @property (readonly, getter = isZoomBouncing, nonatomic) BOOL zoomBouncing;
    [Export("zoomBouncing")]
    bool ZoomBouncing { [Bind("isZoomBouncing")] get; }

    // @property (nonatomic) BOOL scrollsToTop __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("scrollsToTop")]
    bool ScrollsToTop { get; set; }

    // @property (readonly, nonatomic) UIPanGestureRecognizer * _Nonnull panGestureRecognizer __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("panGestureRecognizer")]
    UIPanGestureRecognizer PanGestureRecognizer { get; }

    // @property (readonly, nonatomic) UIPinchGestureRecognizer * _Nullable pinchGestureRecognizer __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("pinchGestureRecognizer")]
    UIPinchGestureRecognizer PinchGestureRecognizer { get; }

    // @property (readonly, nonatomic) UIGestureRecognizer * _Nonnull directionalPressGestureRecognizer __attribute__((availability(tvos, introduced=9.0, deprecated=11.0)));
    [Introduced(PlatformName.TvOS, 9, 0, message: "Configuring the panGestureRecognizer for indirect scrolling automatically supports directional presses now, so this property is no longer useful.")]
    [Deprecated(PlatformName.TvOS, 11, 0, message: "Configuring the panGestureRecognizer for indirect scrolling automatically supports directional presses now, so this property is no longer useful.")]
    [Export("directionalPressGestureRecognizer")]
    UIGestureRecognizer DirectionalPressGestureRecognizer { get; }

    // @property (nonatomic) UIScrollViewKeyboardDismissMode keyboardDismissMode __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("keyboardDismissMode", ArgumentSemantic.Assign)]
    UIScrollViewKeyboardDismissMode KeyboardDismissMode { get; set; }

    // @property (nonatomic, strong) UIRefreshControl * _Nullable refreshControl __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10_0)));
    [NoTV, iOS(10, 0)]
    [NullAllowed, Export("refreshControl", ArgumentSemantic.Strong)]
    UIRefreshControl RefreshControl { get; set; }
}

// @protocol UIScrollViewDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIScrollViewDelegate
{
    // @optional -(void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
    [Export("scrollViewDidScroll:")]
    void ScrollViewDidScroll(UIScrollView scrollView);

    // @optional -(void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Export("scrollViewDidZoom:")]
    void ScrollViewDidZoom(UIScrollView scrollView);

    // @optional -(void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
    [Export("scrollViewWillBeginDragging:")]
    void ScrollViewWillBeginDragging(UIScrollView scrollView);

    // @optional -(void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("scrollViewWillEndDragging:withVelocity:targetContentOffset:")]
    unsafe void ScrollViewWillEndDragging(UIScrollView scrollView, CGPoint velocity, CGPoint* targetContentOffset);

    // @optional -(void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
    [Export("scrollViewDidEndDragging:willDecelerate:")]
    void ScrollViewDidEndDragging(UIScrollView scrollView, bool decelerate);

    // @optional -(void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)scrollView;
    [Export("scrollViewWillBeginDecelerating:")]
    void ScrollViewWillBeginDecelerating(UIScrollView scrollView);

    // @optional -(void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
    [Export("scrollViewDidEndDecelerating:")]
    void ScrollViewDidEndDecelerating(UIScrollView scrollView);

    // @optional -(void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
    [Export("scrollViewDidEndScrollingAnimation:")]
    void ScrollViewDidEndScrollingAnimation(UIScrollView scrollView);

    // @optional -(UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView;
    [Export("viewForZoomingInScrollView:")]
    [return: NullAllowed]
    UIView ViewForZoomingInScrollView(UIScrollView scrollView);

    // @optional -(void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Export("scrollViewWillBeginZooming:withView:")]
    void ScrollViewWillBeginZooming(UIScrollView scrollView, [NullAllowed] UIView view);

    // @optional -(void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
    [Export("scrollViewDidEndZooming:withView:atScale:")]
    void ScrollViewDidEndZooming(UIScrollView scrollView, [NullAllowed] UIView view, nfloat scale);

    // @optional -(BOOL)scrollViewShouldScrollToTop:(UIScrollView * _Nonnull)scrollView;
    [Export("scrollViewShouldScrollToTop:")]
    bool ScrollViewShouldScrollToTop(UIScrollView scrollView);

    // @optional -(void)scrollViewDidScrollToTop:(UIScrollView * _Nonnull)scrollView;
    [Export("scrollViewDidScrollToTop:")]
    void ScrollViewDidScrollToTop(UIScrollView scrollView);

    // @optional -(void)scrollViewDidChangeAdjustedContentInset:(UIScrollView * _Nonnull)scrollView __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("scrollViewDidChangeAdjustedContentInset:")]
    void ScrollViewDidChangeAdjustedContentInset(UIScrollView scrollView);
}

// @protocol UIPickerViewAccessibilityDelegate <UIPickerViewDelegate>
[NoTV]
[Protocol, Model]
interface UIPickerViewAccessibilityDelegate : IUIPickerViewDelegate
{
    // @optional -(NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView accessibilityLabelForComponent:(NSInteger)component;
    [Export("pickerView:accessibilityLabelForComponent:")]
    [return: NullAllowed]
    string PickerView(UIPickerView pickerView, nint component);

    // @optional -(NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView accessibilityHintForComponent:(NSInteger)component;
    [Export("pickerView:accessibilityHintForComponent:")]
    [return: NullAllowed]
    string PickerView(UIPickerView pickerView, nint component);

    // @optional -(NSAttributedString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView accessibilityAttributedLabelForComponent:(NSInteger)component __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("pickerView:accessibilityAttributedLabelForComponent:")]
    [return: NullAllowed]
    NSAttributedString PickerView(UIPickerView pickerView, nint component);

    // @optional -(NSAttributedString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView accessibilityAttributedHintForComponent:(NSInteger)component __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("pickerView:accessibilityAttributedHintForComponent:")]
    [return: NullAllowed]
    NSAttributedString PickerView(UIPickerView pickerView, nint component);
}

// @protocol UIScrollViewAccessibilityDelegate <UIScrollViewDelegate>
[Protocol, Model]
interface UIScrollViewAccessibilityDelegate : IUIScrollViewDelegate
{
    // @optional -(NSString * _Nullable)accessibilityScrollStatusForScrollView:(UIScrollView * _Nonnull)scrollView;
    [Export("accessibilityScrollStatusForScrollView:")]
    [return: NullAllowed]
    string AccessibilityScrollStatusForScrollView(UIScrollView scrollView);

    // @optional -(NSAttributedString * _Nullable)accessibilityAttributedScrollStatusForScrollView:(UIScrollView * _Nonnull)scrollView __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("accessibilityAttributedScrollStatusForScrollView:")]
    [return: NullAllowed]
    NSAttributedString AccessibilityAttributedScrollStatusForScrollView(UIScrollView scrollView);
}

// @interface UIAccessibilityInvertColors (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIAccessibilityInvertColors
{
    // @property (nonatomic) BOOL accessibilityIgnoresInvertColors __attribute__((availability(tvos, introduced=11_0))) __attribute__((availability(ios, introduced=11_0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("accessibilityIgnoresInvertColors")]
    bool AccessibilityIgnoresInvertColors { get; set; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern UIAccessibilityTraits UIAccessibilityTraitNone __attribute__((visibility("default")));
    [Field("UIAccessibilityTraitNone", "__Internal")]
    ulong UIAccessibilityTraitNone { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitButton __attribute__((visibility("default")));
    [Field("UIAccessibilityTraitButton", "__Internal")]
    ulong UIAccessibilityTraitButton { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitLink __attribute__((visibility("default")));
    [Field("UIAccessibilityTraitLink", "__Internal")]
    ulong UIAccessibilityTraitLink { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitHeader __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UIAccessibilityTraitHeader", "__Internal")]
    ulong UIAccessibilityTraitHeader { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitSearchField __attribute__((visibility("default")));
    [Field("UIAccessibilityTraitSearchField", "__Internal")]
    ulong UIAccessibilityTraitSearchField { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitImage __attribute__((visibility("default")));
    [Field("UIAccessibilityTraitImage", "__Internal")]
    ulong UIAccessibilityTraitImage { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitSelected __attribute__((visibility("default")));
    [Field("UIAccessibilityTraitSelected", "__Internal")]
    ulong UIAccessibilityTraitSelected { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitPlaysSound __attribute__((visibility("default")));
    [Field("UIAccessibilityTraitPlaysSound", "__Internal")]
    ulong UIAccessibilityTraitPlaysSound { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitKeyboardKey __attribute__((visibility("default")));
    [Field("UIAccessibilityTraitKeyboardKey", "__Internal")]
    ulong UIAccessibilityTraitKeyboardKey { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitStaticText __attribute__((visibility("default")));
    [Field("UIAccessibilityTraitStaticText", "__Internal")]
    ulong UIAccessibilityTraitStaticText { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitSummaryElement __attribute__((visibility("default")));
    [Field("UIAccessibilityTraitSummaryElement", "__Internal")]
    ulong UIAccessibilityTraitSummaryElement { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitNotEnabled __attribute__((visibility("default")));
    [Field("UIAccessibilityTraitNotEnabled", "__Internal")]
    ulong UIAccessibilityTraitNotEnabled { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitUpdatesFrequently __attribute__((visibility("default")));
    [Field("UIAccessibilityTraitUpdatesFrequently", "__Internal")]
    ulong UIAccessibilityTraitUpdatesFrequently { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitStartsMediaSession __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Field("UIAccessibilityTraitStartsMediaSession", "__Internal")]
    ulong UIAccessibilityTraitStartsMediaSession { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitAdjustable __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Field("UIAccessibilityTraitAdjustable", "__Internal")]
    ulong UIAccessibilityTraitAdjustable { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitAllowsDirectInteraction __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Field("UIAccessibilityTraitAllowsDirectInteraction", "__Internal")]
    ulong UIAccessibilityTraitAllowsDirectInteraction { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitCausesPageTurn __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Field("UIAccessibilityTraitCausesPageTurn", "__Internal")]
    ulong UIAccessibilityTraitCausesPageTurn { get; }

    // extern UIAccessibilityTraits UIAccessibilityTraitTabBar __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UIAccessibilityTraitTabBar", "__Internal")]
    ulong UIAccessibilityTraitTabBar { get; }

    // extern UIAccessibilityNotifications UIAccessibilityScreenChangedNotification __attribute__((visibility("default")));
    [Field("UIAccessibilityScreenChangedNotification", "__Internal")]
    uint UIAccessibilityScreenChangedNotification { get; }

    // extern UIAccessibilityNotifications UIAccessibilityLayoutChangedNotification __attribute__((visibility("default")));
    [Field("UIAccessibilityLayoutChangedNotification", "__Internal")]
    uint UIAccessibilityLayoutChangedNotification { get; }

    // extern UIAccessibilityNotifications UIAccessibilityAnnouncementNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Field("UIAccessibilityAnnouncementNotification", "__Internal")]
    uint UIAccessibilityAnnouncementNotification { get; }

    // extern UIAccessibilityNotifications UIAccessibilityPageScrolledNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4_2)));
    [iOS(4, 2)]
    [Field("UIAccessibilityPageScrolledNotification", "__Internal")]
    uint UIAccessibilityPageScrolledNotification { get; }

    // extern UIAccessibilityNotifications UIAccessibilityPauseAssistiveTechnologyNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIAccessibilityPauseAssistiveTechnologyNotification", "__Internal")]
    uint UIAccessibilityPauseAssistiveTechnologyNotification { get; }

    // extern UIAccessibilityNotifications UIAccessibilityResumeAssistiveTechnologyNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIAccessibilityResumeAssistiveTechnologyNotification", "__Internal")]
    uint UIAccessibilityResumeAssistiveTechnologyNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityAnnouncementDidFinishNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UIAccessibilityAnnouncementDidFinishNotification", "__Internal")]
    NSString UIAccessibilityAnnouncementDidFinishNotification { get; }

    // extern NSString *const _Nonnull UIAccessibilityAnnouncementKeyStringValue __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UIAccessibilityAnnouncementKeyStringValue", "__Internal")]
    NSString UIAccessibilityAnnouncementKeyStringValue { get; }

    // extern NSString *const _Nonnull UIAccessibilityAnnouncementKeyWasSuccessful __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UIAccessibilityAnnouncementKeyWasSuccessful", "__Internal")]
    NSString UIAccessibilityAnnouncementKeyWasSuccessful { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityElementFocusedNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Field("UIAccessibilityElementFocusedNotification", "__Internal")]
    NSString UIAccessibilityElementFocusedNotification { get; }

    // extern NSString *const _Nonnull UIAccessibilityFocusedElementKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Field("UIAccessibilityFocusedElementKey", "__Internal")]
    NSString UIAccessibilityFocusedElementKey { get; }

    // extern NSString *const _Nonnull UIAccessibilityUnfocusedElementKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Field("UIAccessibilityUnfocusedElementKey", "__Internal")]
    NSString UIAccessibilityUnfocusedElementKey { get; }

    // extern NSString *const _Nonnull UIAccessibilityAssistiveTechnologyKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Field("UIAccessibilityAssistiveTechnologyKey", "__Internal")]
    NSString UIAccessibilityAssistiveTechnologyKey { get; }

    // extern const UIAccessibilityAssistiveTechnologyIdentifier _Nonnull UIAccessibilityNotificationSwitchControlIdentifier __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIAccessibilityNotificationSwitchControlIdentifier", "__Internal")]
    NSString UIAccessibilityNotificationSwitchControlIdentifier { get; }

    // extern const UIAccessibilityAssistiveTechnologyIdentifier _Nonnull UIAccessibilityNotificationVoiceOverIdentifier __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Field("UIAccessibilityNotificationVoiceOverIdentifier", "__Internal")]
    NSString UIAccessibilityNotificationVoiceOverIdentifier { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSAttributedStringKey _Nonnull UIAccessibilitySpeechAttributePunctuation __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIAccessibilitySpeechAttributePunctuation", "__Internal")]
    NSString UIAccessibilitySpeechAttributePunctuation { get; }

    // extern const NSAttributedStringKey _Nonnull UIAccessibilitySpeechAttributeLanguage __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIAccessibilitySpeechAttributeLanguage", "__Internal")]
    NSString UIAccessibilitySpeechAttributeLanguage { get; }

    // extern const NSAttributedStringKey _Nonnull UIAccessibilitySpeechAttributePitch __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIAccessibilitySpeechAttributePitch", "__Internal")]
    NSString UIAccessibilitySpeechAttributePitch { get; }

    // extern const NSAttributedStringKey _Nonnull UIAccessibilitySpeechAttributeQueueAnnouncement __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Field("UIAccessibilitySpeechAttributeQueueAnnouncement", "__Internal")]
    NSString UIAccessibilitySpeechAttributeQueueAnnouncement { get; }

    // extern const NSAttributedStringKey _Nonnull UIAccessibilitySpeechAttributeIPANotation __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Field("UIAccessibilitySpeechAttributeIPANotation", "__Internal")]
    NSString UIAccessibilitySpeechAttributeIPANotation { get; }

    // extern const NSAttributedStringKey _Nonnull UIAccessibilityTextAttributeHeadingLevel __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Field("UIAccessibilityTextAttributeHeadingLevel", "__Internal")]
    NSString UIAccessibilityTextAttributeHeadingLevel { get; }

    // extern const NSAttributedStringKey _Nonnull UIAccessibilityTextAttributeCustom __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Field("UIAccessibilityTextAttributeCustom", "__Internal")]
    NSString UIAccessibilityTextAttributeCustom { get; }
}

// @interface UIAccessibilityContainer (NSObject)
[Category]
[BaseType(typeof(NSObject))]
interface NSObject_UIAccessibilityContainer
{
    // -(NSInteger)accessibilityElementCount;
    [Export("accessibilityElementCount")]
    [Verify(MethodToProperty)]
    nint AccessibilityElementCount { get; }

    // -(id _Nullable)accessibilityElementAtIndex:(NSInteger)index;
    [Export("accessibilityElementAtIndex:")]
    [return: NullAllowed]
    NSObject AccessibilityElementAtIndex(nint index);

    // -(NSInteger)indexOfAccessibilityElement:(id _Nonnull)element;
    [Export("indexOfAccessibilityElement:")]
    nint IndexOfAccessibilityElement(NSObject element);

    // @property (nonatomic, strong) NSArray * _Nullable accessibilityElements __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("accessibilityElements", ArgumentSemantic.Strong)]
    [Verify(StronglyTypedNSArray)]
    NSObject[] AccessibilityElements { get; set; }

    // @property (nonatomic) UIAccessibilityContainerType accessibilityContainerType __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("accessibilityContainerType", ArgumentSemantic.Assign)]
    UIAccessibilityContainerType AccessibilityContainerType { get; set; }
}

// @protocol UIAccessibilityContainerDataTableCell <NSObject>
[iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIAccessibilityContainerDataTableCell
{
    // @required -(NSRange)accessibilityRowRange;
    [Abstract]
    [Export("accessibilityRowRange")]
    [Verify(MethodToProperty)]
    NSRange AccessibilityRowRange { get; }

    // @required -(NSRange)accessibilityColumnRange;
    [Abstract]
    [Export("accessibilityColumnRange")]
    [Verify(MethodToProperty)]
    NSRange AccessibilityColumnRange { get; }
}

// @protocol UIAccessibilityContainerDataTable <NSObject>
[iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIAccessibilityContainerDataTable
{
    // @required -(id<UIAccessibilityContainerDataTableCell> _Nullable)accessibilityDataTableCellElementForRow:(NSUInteger)row column:(NSUInteger)column;
    [Abstract]
    [Export("accessibilityDataTableCellElementForRow:column:")]
    [return: NullAllowed]
    UIAccessibilityContainerDataTableCell AccessibilityDataTableCellElementForRow(nuint row, nuint column);

    // @required -(NSUInteger)accessibilityRowCount;
    [Abstract]
    [Export("accessibilityRowCount")]
    [Verify(MethodToProperty)]
    nuint AccessibilityRowCount { get; }

    // @required -(NSUInteger)accessibilityColumnCount;
    [Abstract]
    [Export("accessibilityColumnCount")]
    [Verify(MethodToProperty)]
    nuint AccessibilityColumnCount { get; }

    // @optional -(NSArray<id<UIAccessibilityContainerDataTableCell>> * _Nullable)accessibilityHeaderElementsForRow:(NSUInteger)row;
    [Export("accessibilityHeaderElementsForRow:")]
    [return: NullAllowed]
    UIAccessibilityContainerDataTableCell[] AccessibilityHeaderElementsForRow(nuint row);

    // @optional -(NSArray<id<UIAccessibilityContainerDataTableCell>> * _Nullable)accessibilityHeaderElementsForColumn:(NSUInteger)column;
    [Export("accessibilityHeaderElementsForColumn:")]
    [return: NullAllowed]
    UIAccessibilityContainerDataTableCell[] AccessibilityHeaderElementsForColumn(nuint column);
}

// @interface UIAccessibilityCustomAction : NSObject
[iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface UIAccessibilityCustomAction
{
    // -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name target:(id _Nullable)target selector:(SEL _Nonnull)selector;
    [Export("initWithName:target:selector:")]
    IntPtr Constructor(string name, [NullAllowed] NSObject target, Selector selector);

    // -(instancetype _Nonnull)initWithAttributedName:(NSAttributedString * _Nonnull)attributedName target:(id _Nullable)target selector:(SEL _Nonnull)selector __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("initWithAttributedName:target:selector:")]
    IntPtr Constructor(NSAttributedString attributedName, [NullAllowed] NSObject target, Selector selector);

    // @property (copy, nonatomic) NSString * _Nonnull name;
    [Export("name")]
    string Name { get; set; }

    // @property (copy, nonatomic) NSAttributedString * _Nonnull attributedName __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("attributedName", ArgumentSemantic.Copy)]
    NSAttributedString AttributedName { get; set; }

    // @property (nonatomic, weak) id _Nullable target;
    [NullAllowed, Export("target", ArgumentSemantic.Weak)]
    NSObject Target { get; set; }

    // @property (assign, nonatomic) SEL _Nonnull selector;
    [Export("selector", ArgumentSemantic.Assign)]
    Selector Selector { get; set; }
}

// @interface UITextInputPasswordRules : NSObject <NSSecureCoding, NSCopying>
[iOS(12, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UITextInputPasswordRules : INSSecureCoding, INSCopying
{
    // @property (readonly, nonatomic) NSString * _Nonnull passwordRulesDescriptor;
    [Export("passwordRulesDescriptor")]
    string PasswordRulesDescriptor { get; }

    // +(instancetype _Nonnull)passwordRulesWithDescriptor:(NSString * _Nonnull)passwordRulesDescriptor;
    [Static]
    [Export("passwordRulesWithDescriptor:")]
    UITextInputPasswordRules PasswordRulesWithDescriptor(string passwordRulesDescriptor);
}

// @protocol UITextInputTraits <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITextInputTraits
{
    // @optional @property (nonatomic) UITextAutocapitalizationType autocapitalizationType;
    [Export("autocapitalizationType", ArgumentSemantic.Assign)]
    UITextAutocapitalizationType AutocapitalizationType { get; set; }

    // @optional @property (nonatomic) UITextAutocorrectionType autocorrectionType;
    [Export("autocorrectionType", ArgumentSemantic.Assign)]
    UITextAutocorrectionType AutocorrectionType { get; set; }

    // @optional @property (nonatomic) UITextSpellCheckingType spellCheckingType __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("spellCheckingType", ArgumentSemantic.Assign)]
    UITextSpellCheckingType SpellCheckingType { get; set; }

    // @optional @property (nonatomic) UITextSmartQuotesType smartQuotesType __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("smartQuotesType", ArgumentSemantic.Assign)]
    UITextSmartQuotesType SmartQuotesType { get; set; }

    // @optional @property (nonatomic) UITextSmartDashesType smartDashesType __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("smartDashesType", ArgumentSemantic.Assign)]
    UITextSmartDashesType SmartDashesType { get; set; }

    // @optional @property (nonatomic) UITextSmartInsertDeleteType smartInsertDeleteType __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("smartInsertDeleteType", ArgumentSemantic.Assign)]
    UITextSmartInsertDeleteType SmartInsertDeleteType { get; set; }

    // @optional @property (nonatomic) UIKeyboardType keyboardType;
    [Export("keyboardType", ArgumentSemantic.Assign)]
    UIKeyboardType KeyboardType { get; set; }

    // @optional @property (nonatomic) UIKeyboardAppearance keyboardAppearance;
    [Export("keyboardAppearance", ArgumentSemantic.Assign)]
    UIKeyboardAppearance KeyboardAppearance { get; set; }

    // @optional @property (nonatomic) UIReturnKeyType returnKeyType;
    [Export("returnKeyType", ArgumentSemantic.Assign)]
    UIReturnKeyType ReturnKeyType { get; set; }

    // @optional @property (nonatomic) BOOL enablesReturnKeyAutomatically;
    [Export("enablesReturnKeyAutomatically")]
    bool EnablesReturnKeyAutomatically { get; set; }

    // @optional @property (getter = isSecureTextEntry, nonatomic) BOOL secureTextEntry;
    [Export("secureTextEntry")]
    bool SecureTextEntry { [Bind("isSecureTextEntry")] get; set; }

    // @optional @property (copy, nonatomic) UITextContentType _Null_unspecified textContentType __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("textContentType")]
    string TextContentType { get; set; }

    // @optional @property (copy, nonatomic) UITextInputPasswordRules * _Nullable passwordRules __attribute__((availability(ios, introduced=12_0)));
    [iOS(12, 0)]
    [NullAllowed, Export("passwordRules", ArgumentSemantic.Copy)]
    UITextInputPasswordRules PasswordRules { get; set; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UITextContentType _Nonnull UITextContentTypeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeName", "__Internal")]
    NSString UITextContentTypeName { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeNamePrefix __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeNamePrefix", "__Internal")]
    NSString UITextContentTypeNamePrefix { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeGivenName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeGivenName", "__Internal")]
    NSString UITextContentTypeGivenName { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeMiddleName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeMiddleName", "__Internal")]
    NSString UITextContentTypeMiddleName { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeFamilyName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeFamilyName", "__Internal")]
    NSString UITextContentTypeFamilyName { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeNameSuffix __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeNameSuffix", "__Internal")]
    NSString UITextContentTypeNameSuffix { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeNickname __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeNickname", "__Internal")]
    NSString UITextContentTypeNickname { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeJobTitle __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeJobTitle", "__Internal")]
    NSString UITextContentTypeJobTitle { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeOrganizationName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeOrganizationName", "__Internal")]
    NSString UITextContentTypeOrganizationName { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeLocation __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeLocation", "__Internal")]
    NSString UITextContentTypeLocation { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeFullStreetAddress __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeFullStreetAddress", "__Internal")]
    NSString UITextContentTypeFullStreetAddress { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeStreetAddressLine1 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeStreetAddressLine1", "__Internal")]
    NSString UITextContentTypeStreetAddressLine1 { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeStreetAddressLine2 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeStreetAddressLine2", "__Internal")]
    NSString UITextContentTypeStreetAddressLine2 { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeAddressCity __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeAddressCity", "__Internal")]
    NSString UITextContentTypeAddressCity { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeAddressState __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeAddressState", "__Internal")]
    NSString UITextContentTypeAddressState { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeAddressCityAndState __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeAddressCityAndState", "__Internal")]
    NSString UITextContentTypeAddressCityAndState { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeSublocality __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeSublocality", "__Internal")]
    NSString UITextContentTypeSublocality { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeCountryName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeCountryName", "__Internal")]
    NSString UITextContentTypeCountryName { get; }

    // extern const UITextContentType _Nonnull UITextContentTypePostalCode __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypePostalCode", "__Internal")]
    NSString UITextContentTypePostalCode { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeTelephoneNumber __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeTelephoneNumber", "__Internal")]
    NSString UITextContentTypeTelephoneNumber { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeEmailAddress __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeEmailAddress", "__Internal")]
    NSString UITextContentTypeEmailAddress { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeURL __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeURL", "__Internal")]
    NSString UITextContentTypeURL { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeCreditCardNumber __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextContentTypeCreditCardNumber", "__Internal")]
    NSString UITextContentTypeCreditCardNumber { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeUsername __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Field("UITextContentTypeUsername", "__Internal")]
    NSString UITextContentTypeUsername { get; }

    // extern const UITextContentType _Nonnull UITextContentTypePassword __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Field("UITextContentTypePassword", "__Internal")]
    NSString UITextContentTypePassword { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeNewPassword __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=12_0)));
    [iOS(12, 0)]
    [Field("UITextContentTypeNewPassword", "__Internal")]
    NSString UITextContentTypeNewPassword { get; }

    // extern const UITextContentType _Nonnull UITextContentTypeOneTimeCode __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=12_0)));
    [iOS(12, 0)]
    [Field("UITextContentTypeOneTimeCode", "__Internal")]
    NSString UITextContentTypeOneTimeCode { get; }
}

// @protocol UIKeyInput <UITextInputTraits>
[Protocol, Model]
interface UIKeyInput : IUITextInputTraits
{
    // @required @property (readonly, nonatomic) BOOL hasText;
    [Abstract]
    [Export("hasText")]
    bool HasText { get; }

    // @required -(void)insertText:(NSString * _Nonnull)text;
    [Abstract]
    [Export("insertText:")]
    void InsertText(string text);

    // @required -(void)deleteBackward;
    [Abstract]
    [Export("deleteBackward")]
    void DeleteBackward();
}

// @interface UIDictationPhrase : NSObject
[iOS(5, 1)]
[BaseType(typeof(NSObject))]
interface UIDictationPhrase
{
    // @property (readonly, nonatomic) NSString * _Nonnull text;
    [Export("text")]
    string Text { get; }

    // @property (readonly, nonatomic) NSArray<NSString *> * _Nullable alternativeInterpretations;
    [NullAllowed, Export("alternativeInterpretations")]
    string[] AlternativeInterpretations { get; }
}

// @interface UITextInputAssistantItem : NSObject
[NoWatch, NoTV, iOS(9, 0)]
[BaseType(typeof(NSObject))]
interface UITextInputAssistantItem
{
    // @property (assign, readwrite, nonatomic) BOOL allowsHidingShortcuts;
    [Export("allowsHidingShortcuts")]
    bool AllowsHidingShortcuts { get; set; }

    // @property (readwrite, copy, nonatomic) NSArray<UIBarButtonItemGroup *> * _Nonnull leadingBarButtonGroups;
    [Export("leadingBarButtonGroups", ArgumentSemantic.Copy)]
    UIBarButtonItemGroup[] LeadingBarButtonGroups { get; set; }

    // @property (readwrite, copy, nonatomic) NSArray<UIBarButtonItemGroup *> * _Nonnull trailingBarButtonGroups;
    [Export("trailingBarButtonGroups", ArgumentSemantic.Copy)]
    UIBarButtonItemGroup[] TrailingBarButtonGroups { get; set; }
}

// @protocol UITextInput <UIKeyInput>
[Protocol, Model]
interface UITextInput : IUIKeyInput
{
    // @required -(NSString * _Nullable)textInRange:(UITextRange * _Nonnull)range;
    [Abstract]
    [Export("textInRange:")]
    [return: NullAllowed]
    string TextInRange(UITextRange range);

    // @required -(void)replaceRange:(UITextRange * _Nonnull)range withText:(NSString * _Nonnull)text;
    [Abstract]
    [Export("replaceRange:withText:")]
    void ReplaceRange(UITextRange range, string text);

    // @required @property (readwrite, copy) UITextRange * _Nullable selectedTextRange;
    [Abstract]
    [NullAllowed, Export("selectedTextRange", ArgumentSemantic.Copy)]
    UITextRange SelectedTextRange { get; set; }

    // @required @property (readonly, nonatomic) UITextRange * _Nullable markedTextRange;
    [Abstract]
    [NullAllowed, Export("markedTextRange")]
    UITextRange MarkedTextRange { get; }

    // @required @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nullable markedTextStyle;
    [Abstract]
    [NullAllowed, Export("markedTextStyle", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> MarkedTextStyle { get; set; }

    // @required -(void)setMarkedText:(NSString * _Nullable)markedText selectedRange:(NSRange)selectedRange;
    [Abstract]
    [Export("setMarkedText:selectedRange:")]
    void SetMarkedText([NullAllowed] string markedText, NSRange selectedRange);

    // @required -(void)unmarkText;
    [Abstract]
    [Export("unmarkText")]
    void UnmarkText();

    // @required @property (readonly, nonatomic) UITextPosition * _Nonnull beginningOfDocument;
    [Abstract]
    [Export("beginningOfDocument")]
    UITextPosition BeginningOfDocument { get; }

    // @required @property (readonly, nonatomic) UITextPosition * _Nonnull endOfDocument;
    [Abstract]
    [Export("endOfDocument")]
    UITextPosition EndOfDocument { get; }

    // @required -(UITextRange * _Nullable)textRangeFromPosition:(UITextPosition * _Nonnull)fromPosition toPosition:(UITextPosition * _Nonnull)toPosition;
    [Abstract]
    [Export("textRangeFromPosition:toPosition:")]
    [return: NullAllowed]
    UITextRange TextRangeFromPosition(UITextPosition fromPosition, UITextPosition toPosition);

    // @required -(UITextPosition * _Nullable)positionFromPosition:(UITextPosition * _Nonnull)position offset:(NSInteger)offset;
    [Abstract]
    [Export("positionFromPosition:offset:")]
    [return: NullAllowed]
    UITextPosition PositionFromPosition(UITextPosition position, nint offset);

    // @required -(UITextPosition * _Nullable)positionFromPosition:(UITextPosition * _Nonnull)position inDirection:(UITextLayoutDirection)direction offset:(NSInteger)offset;
    [Abstract]
    [Export("positionFromPosition:inDirection:offset:")]
    [return: NullAllowed]
    UITextPosition PositionFromPosition(UITextPosition position, UITextLayoutDirection direction, nint offset);

    // @required -(NSComparisonResult)comparePosition:(UITextPosition * _Nonnull)position toPosition:(UITextPosition * _Nonnull)other;
    [Abstract]
    [Export("comparePosition:toPosition:")]
    NSComparisonResult ComparePosition(UITextPosition position, UITextPosition other);

    // @required -(NSInteger)offsetFromPosition:(UITextPosition * _Nonnull)from toPosition:(UITextPosition * _Nonnull)toPosition;
    [Abstract]
    [Export("offsetFromPosition:toPosition:")]
    nint OffsetFromPosition(UITextPosition from, UITextPosition toPosition);

    [Wrap("WeakInputDelegate"), Abstract]
    [NullAllowed]
    UITextInputDelegate InputDelegate { get; set; }

    // @required @property (nonatomic, weak) id<UITextInputDelegate> _Nullable inputDelegate;
    [Abstract]
    [NullAllowed, Export("inputDelegate", ArgumentSemantic.Weak)]
    NSObject WeakInputDelegate { get; set; }

    // @required @property (readonly, nonatomic) id<UITextInputTokenizer> _Nonnull tokenizer;
    [Abstract]
    [Export("tokenizer")]
    UITextInputTokenizer Tokenizer { get; }

    // @required -(UITextPosition * _Nullable)positionWithinRange:(UITextRange * _Nonnull)range farthestInDirection:(UITextLayoutDirection)direction;
    [Abstract]
    [Export("positionWithinRange:farthestInDirection:")]
    [return: NullAllowed]
    UITextPosition PositionWithinRange(UITextRange range, UITextLayoutDirection direction);

    // @required -(UITextRange * _Nullable)characterRangeByExtendingPosition:(UITextPosition * _Nonnull)position inDirection:(UITextLayoutDirection)direction;
    [Abstract]
    [Export("characterRangeByExtendingPosition:inDirection:")]
    [return: NullAllowed]
    UITextRange CharacterRangeByExtendingPosition(UITextPosition position, UITextLayoutDirection direction);

    // @required -(UITextWritingDirection)baseWritingDirectionForPosition:(UITextPosition * _Nonnull)position inDirection:(UITextStorageDirection)direction;
    [Abstract]
    [Export("baseWritingDirectionForPosition:inDirection:")]
    UITextWritingDirection BaseWritingDirectionForPosition(UITextPosition position, UITextStorageDirection direction);

    // @required -(void)setBaseWritingDirection:(UITextWritingDirection)writingDirection forRange:(UITextRange * _Nonnull)range;
    [Abstract]
    [Export("setBaseWritingDirection:forRange:")]
    void SetBaseWritingDirection(UITextWritingDirection writingDirection, UITextRange range);

    // @required -(CGRect)firstRectForRange:(UITextRange * _Nonnull)range;
    [Abstract]
    [Export("firstRectForRange:")]
    CGRect FirstRectForRange(UITextRange range);

    // @required -(CGRect)caretRectForPosition:(UITextPosition * _Nonnull)position;
    [Abstract]
    [Export("caretRectForPosition:")]
    CGRect CaretRectForPosition(UITextPosition position);

    // @required -(NSArray<UITextSelectionRect *> * _Nonnull)selectionRectsForRange:(UITextRange * _Nonnull)range __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Abstract]
    [Export("selectionRectsForRange:")]
    UITextSelectionRect[] SelectionRectsForRange(UITextRange range);

    // @required -(UITextPosition * _Nullable)closestPositionToPoint:(CGPoint)point;
    [Abstract]
    [Export("closestPositionToPoint:")]
    [return: NullAllowed]
    UITextPosition ClosestPositionToPoint(CGPoint point);

    // @required -(UITextPosition * _Nullable)closestPositionToPoint:(CGPoint)point withinRange:(UITextRange * _Nonnull)range;
    [Abstract]
    [Export("closestPositionToPoint:withinRange:")]
    [return: NullAllowed]
    UITextPosition ClosestPositionToPoint(CGPoint point, UITextRange range);

    // @required -(UITextRange * _Nullable)characterRangeAtPoint:(CGPoint)point;
    [Abstract]
    [Export("characterRangeAtPoint:")]
    [return: NullAllowed]
    UITextRange CharacterRangeAtPoint(CGPoint point);

    // @optional -(BOOL)shouldChangeTextInRange:(UITextRange * _Nonnull)range replacementText:(NSString * _Nonnull)text __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("shouldChangeTextInRange:replacementText:")]
    bool ShouldChangeTextInRange(UITextRange range, string text);

    // @optional -(NSDictionary<NSAttributedStringKey,id> * _Nullable)textStylingAtPosition:(UITextPosition * _Nonnull)position inDirection:(UITextStorageDirection)direction;
    [Export("textStylingAtPosition:inDirection:")]
    [return: NullAllowed]
    NSDictionary<NSString, NSObject> TextStylingAtPosition(UITextPosition position, UITextStorageDirection direction);

    // @optional -(UITextPosition * _Nullable)positionWithinRange:(UITextRange * _Nonnull)range atCharacterOffset:(NSInteger)offset;
    [Export("positionWithinRange:atCharacterOffset:")]
    [return: NullAllowed]
    UITextPosition PositionWithinRange(UITextRange range, nint offset);

    // @optional -(NSInteger)characterOffsetOfPosition:(UITextPosition * _Nonnull)position withinRange:(UITextRange * _Nonnull)range;
    [Export("characterOffsetOfPosition:withinRange:")]
    nint CharacterOffsetOfPosition(UITextPosition position, UITextRange range);

    // @optional @property (readonly, nonatomic) __kindof UIView * _Nonnull textInputView;
    [Export("textInputView")]
    UIView TextInputView { get; }

    // @optional @property (nonatomic) UITextStorageDirection selectionAffinity;
    [Export("selectionAffinity", ArgumentSemantic.Assign)]
    UITextStorageDirection SelectionAffinity { get; set; }

    // @optional -(void)insertDictationResult:(NSArray<UIDictationPhrase *> * _Nonnull)dictationResult;
    [Export("insertDictationResult:")]
    void InsertDictationResult(UIDictationPhrase[] dictationResult);

    // @optional -(void)dictationRecordingDidEnd;
    [Export("dictationRecordingDidEnd")]
    void DictationRecordingDidEnd();

    // @optional -(void)dictationRecognitionFailed;
    [Export("dictationRecognitionFailed")]
    void DictationRecognitionFailed();

    // @optional @property (readonly, nonatomic) id _Nonnull insertDictationResultPlaceholder;
    [Export("insertDictationResultPlaceholder")]
    NSObject InsertDictationResultPlaceholder { get; }

    // @optional -(CGRect)frameForDictationResultPlaceholder:(id _Nonnull)placeholder;
    [Export("frameForDictationResultPlaceholder:")]
    CGRect FrameForDictationResultPlaceholder(NSObject placeholder);

    // @optional -(void)removeDictationResultPlaceholder:(id _Nonnull)placeholder willInsertResult:(BOOL)willInsertResult;
    [Export("removeDictationResultPlaceholder:willInsertResult:")]
    void RemoveDictationResultPlaceholder(NSObject placeholder, bool willInsertResult);

    // @optional -(void)beginFloatingCursorAtPoint:(CGPoint)point __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("beginFloatingCursorAtPoint:")]
    void BeginFloatingCursorAtPoint(CGPoint point);

    // @optional -(void)updateFloatingCursorAtPoint:(CGPoint)point __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("updateFloatingCursorAtPoint:")]
    void UpdateFloatingCursorAtPoint(CGPoint point);

    // @optional -(void)endFloatingCursor __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("endFloatingCursor")]
    void EndFloatingCursor();
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const _Nonnull UITextInputTextBackgroundColorKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_2, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 2, message: "Use NSBackgroundColorAttributeName instead")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSBackgroundColorAttributeName instead")]
    [NoTV]
    [Field("UITextInputTextBackgroundColorKey", "__Internal")]
    NSString UITextInputTextBackgroundColorKey { get; }

    // extern NSString *const _Nonnull UITextInputTextColorKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_2, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 2, message: "Use NSForegroundColorAttributeName instead")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSForegroundColorAttributeName instead")]
    [NoTV]
    [Field("UITextInputTextColorKey", "__Internal")]
    NSString UITextInputTextColorKey { get; }

    // extern NSString *const _Nonnull UITextInputTextFontKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_2, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 2, message: "Use NSFontAttributeName instead")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Use NSFontAttributeName instead")]
    [NoTV]
    [Field("UITextInputTextFontKey", "__Internal")]
    NSString UITextInputTextFontKey { get; }
}

// @interface UITextPosition : NSObject
[iOS(3, 2)]
[BaseType(typeof(NSObject))]
interface UITextPosition
{
}

// @interface UITextRange : NSObject
[iOS(3, 2)]
[BaseType(typeof(NSObject))]
interface UITextRange
{
    // @property (readonly, getter = isEmpty, nonatomic) BOOL empty;
    [Export("empty")]
    bool Empty { [Bind("isEmpty")] get; }

    // @property (readonly, nonatomic) UITextPosition * _Nonnull start;
    [Export("start")]
    UITextPosition Start { get; }

    // @property (readonly, nonatomic) UITextPosition * _Nonnull end;
    [Export("end")]
    UITextPosition End { get; }
}

// @interface UITextSelectionRect : NSObject
[iOS(6, 0)]
[BaseType(typeof(NSObject))]
interface UITextSelectionRect
{
    // @property (readonly, nonatomic) CGRect rect;
    [Export("rect")]
    CGRect Rect { get; }

    // @property (readonly, nonatomic) UITextWritingDirection writingDirection;
    [Export("writingDirection")]
    UITextWritingDirection WritingDirection { get; }

    // @property (readonly, nonatomic) BOOL containsStart;
    [Export("containsStart")]
    bool ContainsStart { get; }

    // @property (readonly, nonatomic) BOOL containsEnd;
    [Export("containsEnd")]
    bool ContainsEnd { get; }

    // @property (readonly, nonatomic) BOOL isVertical;
    [Export("isVertical")]
    bool IsVertical { get; }
}

// @protocol UITextInputDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITextInputDelegate
{
    // @required -(void)selectionWillChange:(id<UITextInput> _Nullable)textInput;
    [Abstract]
    [Export("selectionWillChange:")]
    void SelectionWillChange([NullAllowed] UITextInput textInput);

    // @required -(void)selectionDidChange:(id<UITextInput> _Nullable)textInput;
    [Abstract]
    [Export("selectionDidChange:")]
    void SelectionDidChange([NullAllowed] UITextInput textInput);

    // @required -(void)textWillChange:(id<UITextInput> _Nullable)textInput;
    [Abstract]
    [Export("textWillChange:")]
    void TextWillChange([NullAllowed] UITextInput textInput);

    // @required -(void)textDidChange:(id<UITextInput> _Nullable)textInput;
    [Abstract]
    [Export("textDidChange:")]
    void TextDidChange([NullAllowed] UITextInput textInput);
}

// @protocol UITextInputTokenizer <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITextInputTokenizer
{
    // @required -(UITextRange * _Nullable)rangeEnclosingPosition:(UITextPosition * _Nonnull)position withGranularity:(UITextGranularity)granularity inDirection:(UITextDirection)direction;
    [Abstract]
    [Export("rangeEnclosingPosition:withGranularity:inDirection:")]
    [return: NullAllowed]
    UITextRange RangeEnclosingPosition(UITextPosition position, UITextGranularity granularity, nint direction);

    // @required -(BOOL)isPosition:(UITextPosition * _Nonnull)position atBoundary:(UITextGranularity)granularity inDirection:(UITextDirection)direction;
    [Abstract]
    [Export("isPosition:atBoundary:inDirection:")]
    bool IsPosition(UITextPosition position, UITextGranularity granularity, nint direction);

    // @required -(UITextPosition * _Nullable)positionFromPosition:(UITextPosition * _Nonnull)position toBoundary:(UITextGranularity)granularity inDirection:(UITextDirection)direction;
    [Abstract]
    [Export("positionFromPosition:toBoundary:inDirection:")]
    [return: NullAllowed]
    UITextPosition PositionFromPosition(UITextPosition position, UITextGranularity granularity, nint direction);

    // @required -(BOOL)isPosition:(UITextPosition * _Nonnull)position withinTextUnit:(UITextGranularity)granularity inDirection:(UITextDirection)direction;
    [Abstract]
    [Export("isPosition:withinTextUnit:inDirection:")]
    bool IsPosition(UITextPosition position, UITextGranularity granularity, nint direction);
}

// @interface UITextInputStringTokenizer : NSObject <UITextInputTokenizer>
[iOS(3, 2)]
[BaseType(typeof(NSObject))]
interface UITextInputStringTokenizer : IUITextInputTokenizer
{
    // -(instancetype _Nonnull)initWithTextInput:(UIResponder<UITextInput> * _Nonnull)textInput;
    [Export("initWithTextInput:")]
    IntPtr Constructor(UITextInput textInput);
}

// @interface UITextInputMode : NSObject <NSSecureCoding>
[iOS(4, 2)]
[BaseType(typeof(NSObject))]
interface UITextInputMode : INSSecureCoding
{
    // @property (readonly, nonatomic, strong) NSString * _Nullable primaryLanguage;
    [NullAllowed, Export("primaryLanguage", ArgumentSemantic.Strong)]
    string PrimaryLanguage { get; }

    // +(UITextInputMode * _Nullable)currentInputMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_2, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 4, 2)]
    [Deprecated(PlatformName.iOS, 7, 0)]
    [NoTV]
    [Static]
    [NullAllowed, Export("currentInputMode")]
    [Verify(MethodToProperty)]
    UITextInputMode CurrentInputMode { get; }

    // @property (readonly, nonatomic, class) NSArray<UITextInputMode *> * _Nonnull activeInputModes;
    [Static]
    [Export("activeInputModes")]
    UITextInputMode[] ActiveInputModes { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSNotificationName _Nonnull UITextInputCurrentInputModeDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4_2)));
    [iOS(4, 2)]
    [Field("UITextInputCurrentInputModeDidChangeNotification", "__Internal")]
    NSString UITextInputCurrentInputModeDidChangeNotification { get; }
}

// typedef UIAccessibilityCustomRotorItemResult * _Nullable (^UIAccessibilityCustomRotorSearch)(UIAccessibilityCustomRotorSearchPredicate * _Nonnull);
delegate UIAccessibilityCustomRotorItemResult UIAccessibilityCustomRotorSearch(UIAccessibilityCustomRotorSearchPredicate arg0);

// @interface UIAccessibilityCustomRotor (NSObject)
[Category]
[BaseType(typeof(NSObject))]
interface NSObject_UIAccessibilityCustomRotor
{
    // @property (retain, nonatomic) NSArray<UIAccessibilityCustomRotor *> * _Nullable accessibilityCustomRotors __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [NullAllowed, Export("accessibilityCustomRotors", ArgumentSemantic.Retain)]
    UIAccessibilityCustomRotor[] AccessibilityCustomRotors { get; set; }
}

// @interface UIAccessibilityCustomRotorSearchPredicate : NSObject
[iOS(10, 0)]
[BaseType(typeof(NSObject))]
interface UIAccessibilityCustomRotorSearchPredicate
{
    // @property (retain, nonatomic) UIAccessibilityCustomRotorItemResult * _Nonnull currentItem;
    [Export("currentItem", ArgumentSemantic.Retain)]
    UIAccessibilityCustomRotorItemResult CurrentItem { get; set; }

    // @property (nonatomic) UIAccessibilityCustomRotorDirection searchDirection;
    [Export("searchDirection", ArgumentSemantic.Assign)]
    UIAccessibilityCustomRotorDirection SearchDirection { get; set; }
}

// @interface UIAccessibilityCustomRotor : NSObject
[iOS(10, 0)]
[BaseType(typeof(NSObject))]
interface UIAccessibilityCustomRotor
{
    // -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name itemSearchBlock:(UIAccessibilityCustomRotorSearch _Nonnull)itemSearchBlock;
    [Export("initWithName:itemSearchBlock:")]
    IntPtr Constructor(string name, UIAccessibilityCustomRotorSearch itemSearchBlock);

    // -(instancetype _Nonnull)initWithAttributedName:(NSAttributedString * _Nonnull)attributedName itemSearchBlock:(UIAccessibilityCustomRotorSearch _Nonnull)itemSearchBlock __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("initWithAttributedName:itemSearchBlock:")]
    IntPtr Constructor(NSAttributedString attributedName, UIAccessibilityCustomRotorSearch itemSearchBlock);

    // -(instancetype _Nonnull)initWithSystemType:(UIAccessibilityCustomSystemRotorType)type itemSearchBlock:(UIAccessibilityCustomRotorSearch _Nonnull)itemSearchBlock __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("initWithSystemType:itemSearchBlock:")]
    IntPtr Constructor(UIAccessibilityCustomSystemRotorType type, UIAccessibilityCustomRotorSearch itemSearchBlock);

    // @property (copy, nonatomic) NSString * _Nonnull name;
    [Export("name")]
    string Name { get; set; }

    // @property (copy, nonatomic) NSAttributedString * _Nonnull attributedName __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("attributedName", ArgumentSemantic.Copy)]
    NSAttributedString AttributedName { get; set; }

    // @property (copy, nonatomic) UIAccessibilityCustomRotorSearch _Nonnull itemSearchBlock;
    [Export("itemSearchBlock", ArgumentSemantic.Copy)]
    UIAccessibilityCustomRotorSearch ItemSearchBlock { get; set; }

    // @property (readonly, nonatomic) UIAccessibilityCustomSystemRotorType systemRotorType __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("systemRotorType")]
    UIAccessibilityCustomSystemRotorType SystemRotorType { get; }
}

// @interface UIAccessibilityCustomRotorItemResult : NSObject
[iOS(10, 0)]
[BaseType(typeof(NSObject))]
interface UIAccessibilityCustomRotorItemResult
{
    // -(instancetype _Nonnull)initWithTargetElement:(id<NSObject> _Nonnull)targetElement targetRange:(UITextRange * _Nullable)targetRange;
    [Export("initWithTargetElement:targetRange:")]
    IntPtr Constructor(NSObject targetElement, [NullAllowed] UITextRange targetRange);

    // @property (nonatomic, weak) id<NSObject> _Nullable targetElement;
    [NullAllowed, Export("targetElement", ArgumentSemantic.Weak)]
    NSObject TargetElement { get; set; }

    // @property (retain, nonatomic) UITextRange * _Nullable targetRange;
    [NullAllowed, Export("targetRange", ArgumentSemantic.Retain)]
    UITextRange TargetRange { get; set; }
}

// @interface UIKitAdditions (NSItemProvider)
[Category]
[BaseType(typeof(NSItemProvider))]
interface NSItemProvider_UIKitAdditions
{
    // @property (copy, nonatomic) NSData * _Nullable teamData __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [NullAllowed, Export("teamData", ArgumentSemantic.Copy)]
    NSData TeamData { get; set; }

    // @property (nonatomic) CGSize preferredPresentationSize __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("preferredPresentationSize", ArgumentSemantic.Assign)]
    CGSize PreferredPresentationSize { get; set; }

    // @property (nonatomic) UIPreferredPresentationStyle preferredPresentationStyle;
    [Export("preferredPresentationStyle", ArgumentSemantic.Assign)]
    UIPreferredPresentationStyle PreferredPresentationStyle { get; set; }
}

// @protocol UIItemProviderPresentationSizeProviding <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIItemProviderPresentationSizeProviding
{
    // @required @property (readonly, nonatomic) CGSize preferredPresentationSizeForItemProvider;
    [Abstract]
    [Export("preferredPresentationSizeForItemProvider")]
    CGSize PreferredPresentationSizeForItemProvider { get; }
}

// @interface UIImage : NSObject <NSSecureCoding>
[iOS(2, 0)]
[BaseType(typeof(NSObject))]
interface UIImage : INSSecureCoding
{
    // +(UIImage * _Nullable)imageNamed:(NSString * _Nonnull)name;
    [Static]
    [Export("imageNamed:")]
    [return: NullAllowed]
    UIImage ImageNamed(string name);

    // +(UIImage * _Nullable)imageNamed:(NSString * _Nonnull)name inBundle:(NSBundle * _Nullable)bundle compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Static]
    [Export("imageNamed:inBundle:compatibleWithTraitCollection:")]
    [return: NullAllowed]
    UIImage ImageNamed(string name, [NullAllowed] NSBundle bundle, [NullAllowed] UITraitCollection traitCollection);

    // +(UIImage * _Nullable)imageWithContentsOfFile:(NSString * _Nonnull)path;
    [Static]
    [Export("imageWithContentsOfFile:")]
    [return: NullAllowed]
    UIImage ImageWithContentsOfFile(string path);

    // +(UIImage * _Nullable)imageWithData:(NSData * _Nonnull)data;
    [Static]
    [Export("imageWithData:")]
    [return: NullAllowed]
    UIImage ImageWithData(NSData data);

    // +(UIImage * _Nullable)imageWithData:(NSData * _Nonnull)data scale:(CGFloat)scale __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Static]
    [Export("imageWithData:scale:")]
    [return: NullAllowed]
    UIImage ImageWithData(NSData data, nfloat scale);

    // +(UIImage * _Nonnull)imageWithCGImage:(CGImageRef _Nonnull)cgImage;
    [Static]
    [Export("imageWithCGImage:")]
    unsafe UIImage ImageWithCGImage(CGImageRef* cgImage);

    // +(UIImage * _Nonnull)imageWithCGImage:(CGImageRef _Nonnull)cgImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Static]
    [Export("imageWithCGImage:scale:orientation:")]
    unsafe UIImage ImageWithCGImage(CGImageRef* cgImage, nfloat scale, UIImageOrientation orientation);

    // +(UIImage * _Nonnull)imageWithCIImage:(CIImage * _Nonnull)ciImage __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Static]
    [Export("imageWithCIImage:")]
    UIImage ImageWithCIImage(CIImage ciImage);

    // +(UIImage * _Nonnull)imageWithCIImage:(CIImage * _Nonnull)ciImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Static]
    [Export("imageWithCIImage:scale:orientation:")]
    UIImage ImageWithCIImage(CIImage ciImage, nfloat scale, UIImageOrientation orientation);

    // -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
    [Export("initWithContentsOfFile:")]
    IntPtr Constructor(string path);

    // -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data;
    [Export("initWithData:")]
    IntPtr Constructor(NSData data);

    // -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data scale:(CGFloat)scale __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("initWithData:scale:")]
    IntPtr Constructor(NSData data, nfloat scale);

    // -(instancetype _Nonnull)initWithCGImage:(CGImageRef _Nonnull)cgImage;
    [Export("initWithCGImage:")]
    unsafe IntPtr Constructor(CGImageRef* cgImage);

    // -(instancetype _Nonnull)initWithCGImage:(CGImageRef _Nonnull)cgImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("initWithCGImage:scale:orientation:")]
    unsafe IntPtr Constructor(CGImageRef* cgImage, nfloat scale, UIImageOrientation orientation);

    // -(instancetype _Nonnull)initWithCIImage:(CIImage * _Nonnull)ciImage __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("initWithCIImage:")]
    IntPtr Constructor(CIImage ciImage);

    // -(instancetype _Nonnull)initWithCIImage:(CIImage * _Nonnull)ciImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("initWithCIImage:scale:orientation:")]
    IntPtr Constructor(CIImage ciImage, nfloat scale, UIImageOrientation orientation);

    // @property (readonly, nonatomic) CGSize size;
    [Export("size")]
    CGSize Size { get; }

    // @property (readonly, nonatomic) CGImageRef _Nullable CGImage;
    [NullAllowed, Export("CGImage")]
    unsafe CGImageRef* CGImage { get; }

    // @property (readonly, nonatomic) CIImage * _Nullable CIImage __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("CIImage")]
    CIImage CIImage { get; }

    // @property (readonly, nonatomic) UIImageOrientation imageOrientation;
    [Export("imageOrientation")]
    UIImageOrientation ImageOrientation { get; }

    // @property (readonly, nonatomic) CGFloat scale __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("scale")]
    nfloat Scale { get; }

    // +(UIImage * _Nullable)animatedImageNamed:(NSString * _Nonnull)name duration:(NSTimeInterval)duration __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Static]
    [Export("animatedImageNamed:duration:")]
    [return: NullAllowed]
    UIImage AnimatedImageNamed(string name, double duration);

    // +(UIImage * _Nullable)animatedResizableImageNamed:(NSString * _Nonnull)name capInsets:(UIEdgeInsets)capInsets duration:(NSTimeInterval)duration __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Static]
    [Export("animatedResizableImageNamed:capInsets:duration:")]
    [return: NullAllowed]
    UIImage AnimatedResizableImageNamed(string name, UIEdgeInsets capInsets, double duration);

    // +(UIImage * _Nullable)animatedResizableImageNamed:(NSString * _Nonnull)name capInsets:(UIEdgeInsets)capInsets resizingMode:(UIImageResizingMode)resizingMode duration:(NSTimeInterval)duration __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Static]
    [Export("animatedResizableImageNamed:capInsets:resizingMode:duration:")]
    [return: NullAllowed]
    UIImage AnimatedResizableImageNamed(string name, UIEdgeInsets capInsets, UIImageResizingMode resizingMode, double duration);

    // +(UIImage * _Nullable)animatedImageWithImages:(NSArray<UIImage *> * _Nonnull)images duration:(NSTimeInterval)duration __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Static]
    [Export("animatedImageWithImages:duration:")]
    [return: NullAllowed]
    UIImage AnimatedImageWithImages(UIImage[] images, double duration);

    // @property (readonly, nonatomic) NSArray<UIImage *> * _Nullable images __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("images")]
    UIImage[] Images { get; }

    // @property (readonly, nonatomic) NSTimeInterval duration __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("duration")]
    double Duration { get; }

    // -(void)drawAtPoint:(CGPoint)point;
    [Export("drawAtPoint:")]
    void DrawAtPoint(CGPoint point);

    // -(void)drawAtPoint:(CGPoint)point blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha;
    [Export("drawAtPoint:blendMode:alpha:")]
    void DrawAtPoint(CGPoint point, CGBlendMode blendMode, nfloat alpha);

    // -(void)drawInRect:(CGRect)rect;
    [Export("drawInRect:")]
    void DrawInRect(CGRect rect);

    // -(void)drawInRect:(CGRect)rect blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha;
    [Export("drawInRect:blendMode:alpha:")]
    void DrawInRect(CGRect rect, CGBlendMode blendMode, nfloat alpha);

    // -(void)drawAsPatternInRect:(CGRect)rect;
    [Export("drawAsPatternInRect:")]
    void DrawAsPatternInRect(CGRect rect);

    // -(UIImage * _Nonnull)resizableImageWithCapInsets:(UIEdgeInsets)capInsets __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("resizableImageWithCapInsets:")]
    UIImage ResizableImageWithCapInsets(UIEdgeInsets capInsets);

    // -(UIImage * _Nonnull)resizableImageWithCapInsets:(UIEdgeInsets)capInsets resizingMode:(UIImageResizingMode)resizingMode __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("resizableImageWithCapInsets:resizingMode:")]
    UIImage ResizableImageWithCapInsets(UIEdgeInsets capInsets, UIImageResizingMode resizingMode);

    // @property (readonly, nonatomic) UIEdgeInsets capInsets __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("capInsets")]
    UIEdgeInsets CapInsets { get; }

    // @property (readonly, nonatomic) UIImageResizingMode resizingMode __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("resizingMode")]
    UIImageResizingMode ResizingMode { get; }

    // -(UIImage * _Nonnull)imageWithAlignmentRectInsets:(UIEdgeInsets)alignmentInsets __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("imageWithAlignmentRectInsets:")]
    UIImage ImageWithAlignmentRectInsets(UIEdgeInsets alignmentInsets);

    // @property (readonly, nonatomic) UIEdgeInsets alignmentRectInsets __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("alignmentRectInsets")]
    UIEdgeInsets AlignmentRectInsets { get; }

    // -(UIImage * _Nonnull)imageWithRenderingMode:(UIImageRenderingMode)renderingMode __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("imageWithRenderingMode:")]
    UIImage ImageWithRenderingMode(UIImageRenderingMode renderingMode);

    // @property (readonly, nonatomic) UIImageRenderingMode renderingMode __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("renderingMode")]
    UIImageRenderingMode RenderingMode { get; }

    // @property (readonly, nonatomic) UIGraphicsImageRendererFormat * _Nonnull imageRendererFormat __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("imageRendererFormat")]
    UIGraphicsImageRendererFormat ImageRendererFormat { get; }

    // @property (readonly, copy, nonatomic) UITraitCollection * _Nonnull traitCollection __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("traitCollection", ArgumentSemantic.Copy)]
    UITraitCollection TraitCollection { get; }

    // @property (readonly, nonatomic) UIImageAsset * _Nullable imageAsset __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("imageAsset")]
    UIImageAsset ImageAsset { get; }

    // -(UIImage * _Nonnull)imageFlippedForRightToLeftLayoutDirection __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("imageFlippedForRightToLeftLayoutDirection")]
    [Verify(MethodToProperty)]
    UIImage ImageFlippedForRightToLeftLayoutDirection { get; }

    // @property (readonly, nonatomic) BOOL flipsForRightToLeftLayoutDirection __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("flipsForRightToLeftLayoutDirection")]
    bool FlipsForRightToLeftLayoutDirection { get; }

    // -(UIImage * _Nonnull)imageWithHorizontallyFlippedOrientation __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("imageWithHorizontallyFlippedOrientation")]
    [Verify(MethodToProperty)]
    UIImage ImageWithHorizontallyFlippedOrientation { get; }
}

// @interface NSItemProvider (UIImage) <NSItemProviderReading, NSItemProviderWriting, UIItemProviderPresentationSizeProviding>
[Category]
[BaseType(typeof(UIImage))]
interface UIImage_NSItemProvider : INSItemProviderReading, INSItemProviderWriting, IUIItemProviderPresentationSizeProviding
{
}

// @interface UIImageDeprecated (UIImage)
[Category]
[BaseType(typeof(UIImage))]
interface UIImage_UIImageDeprecated
{
    // -(UIImage * _Nonnull)stretchableImageWithLeftCapWidth:(NSInteger)leftCapWidth topCapHeight:(NSInteger)topCapHeight __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("stretchableImageWithLeftCapWidth:topCapHeight:")]
    UIImage StretchableImageWithLeftCapWidth(nint leftCapWidth, nint topCapHeight);

    // @property (readonly, nonatomic) NSInteger leftCapWidth __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("leftCapWidth")]
    nint LeftCapWidth { get; }

    // @property (readonly, nonatomic) NSInteger topCapHeight __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("topCapHeight")]
    nint TopCapHeight { get; }
}

// @interface UIKitAdditions (CIImage)
[Category]
[BaseType(typeof(CIImage))]
interface CIImage_UIKitAdditions
{
    // -(instancetype _Nullable)initWithImage:(UIImage * _Nonnull)image __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("initWithImage:")]
    IntPtr Constructor(UIImage image);

    // -(instancetype _Nullable)initWithImage:(UIImage * _Nonnull)image options:(NSDictionary<CIImageOption,id> * _Nullable)options __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("initWithImage:options:")]
    IntPtr Constructor(UIImage image, [NullAllowed] NSDictionary<NSString, NSObject> options);
}

// @interface UIBarItem : NSObject <NSCoding, UIAppearance>
[iOS(2, 0)]
[BaseType(typeof(NSObject))]
interface UIBarItem : INSCoding, IUIAppearance
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (getter = isEnabled, nonatomic) BOOL enabled;
    [Export("enabled")]
    bool Enabled { [Bind("isEnabled")] get; set; }

    // @property (copy, nonatomic) NSString * _Nullable title;
    [NullAllowed, Export("title")]
    string Title { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable image;
    [NullAllowed, Export("image", ArgumentSemantic.Strong)]
    UIImage Image { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable landscapeImagePhone __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [NullAllowed, Export("landscapeImagePhone", ArgumentSemantic.Strong)]
    UIImage LandscapeImagePhone { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable largeContentSizeImage __attribute__((availability(ios, introduced=11.0)));
    [iOS(11, 0)]
    [NullAllowed, Export("largeContentSizeImage", ArgumentSemantic.Strong)]
    UIImage LargeContentSizeImage { get; set; }

    // @property (nonatomic) UIEdgeInsets imageInsets;
    [Export("imageInsets", ArgumentSemantic.Assign)]
    UIEdgeInsets ImageInsets { get; set; }

    // @property (nonatomic) UIEdgeInsets landscapeImagePhoneInsets __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Export("landscapeImagePhoneInsets", ArgumentSemantic.Assign)]
    UIEdgeInsets LandscapeImagePhoneInsets { get; set; }

    // @property (nonatomic) UIEdgeInsets largeContentSizeImageInsets __attribute__((availability(ios, introduced=11.0)));
    [iOS(11, 0)]
    [Export("largeContentSizeImageInsets", ArgumentSemantic.Assign)]
    UIEdgeInsets LargeContentSizeImageInsets { get; set; }

    // @property (nonatomic) NSInteger tag;
    [Export("tag")]
    nint Tag { get; set; }

    // -(void)setTitleTextAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attributes forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setTitleTextAttributes:forState:")]
    void SetTitleTextAttributes([NullAllowed] NSDictionary<NSString, NSObject> attributes, UIControlState state);

    // -(NSDictionary<NSAttributedStringKey,id> * _Nullable)titleTextAttributesForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("titleTextAttributesForState:")]
    [return: NullAllowed]
    NSDictionary<NSString, NSObject> TitleTextAttributesForState(UIControlState state);
}

// @protocol UIAccessibilityIdentification <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIAccessibilityIdentification
{
    // @required @property (copy, nonatomic) NSString * _Nullable accessibilityIdentifier __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Abstract]
    [NullAllowed, Export("accessibilityIdentifier")]
    string AccessibilityIdentifier { get; set; }
}

// @interface UIAccessibility (UIView) <UIAccessibilityIdentification>
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIAccessibility : IUIAccessibilityIdentification
{
}

// @interface UIAccessibility (UIBarItem) <UIAccessibilityIdentification>
[Category]
[BaseType(typeof(UIBarItem))]
interface UIBarItem_UIAccessibility : IUIAccessibilityIdentification
{
}

// @interface UIAccessibility (UIImage) <UIAccessibilityIdentification>
[Category]
[BaseType(typeof(UIImage))]
interface UIImage_UIAccessibility : IUIAccessibilityIdentification
{
}

// @interface UIAccessibilityElement : NSObject <UIAccessibilityIdentification>
[iOS(3, 0)]
[BaseType(typeof(NSObject))]
interface UIAccessibilityElement : IUIAccessibilityIdentification
{
    // -(instancetype _Nonnull)initWithAccessibilityContainer:(id _Nonnull)container;
    [Export("initWithAccessibilityContainer:")]
    IntPtr Constructor(NSObject container);

    // @property (assign, nonatomic) id _Nullable accessibilityContainer;
    [NullAllowed, Export("accessibilityContainer", ArgumentSemantic.Assign)]
    NSObject AccessibilityContainer { get; set; }

    // @property (assign, nonatomic) BOOL isAccessibilityElement;
    [Export("isAccessibilityElement")]
    bool IsAccessibilityElement { get; set; }

    // @property (nonatomic, strong) NSString * _Nullable accessibilityLabel;
    [NullAllowed, Export("accessibilityLabel", ArgumentSemantic.Strong)]
    string AccessibilityLabel { get; set; }

    // @property (nonatomic, strong) NSString * _Nullable accessibilityHint;
    [NullAllowed, Export("accessibilityHint", ArgumentSemantic.Strong)]
    string AccessibilityHint { get; set; }

    // @property (nonatomic, strong) NSString * _Nullable accessibilityValue;
    [NullAllowed, Export("accessibilityValue", ArgumentSemantic.Strong)]
    string AccessibilityValue { get; set; }

    // @property (assign, nonatomic) CGRect accessibilityFrame;
    [Export("accessibilityFrame", ArgumentSemantic.Assign)]
    CGRect AccessibilityFrame { get; set; }

    // @property (assign, nonatomic) UIAccessibilityTraits accessibilityTraits;
    [Export("accessibilityTraits")]
    ulong AccessibilityTraits { get; set; }

    // @property (assign, nonatomic) CGRect accessibilityFrameInContainerSpace __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("accessibilityFrameInContainerSpace", ArgumentSemantic.Assign)]
    CGRect AccessibilityFrameInContainerSpace { get; set; }
}

// @protocol UIGuidedAccessRestrictionDelegate <NSObject>
[iOS(7, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIGuidedAccessRestrictionDelegate
{
    // @required @property (readonly, nonatomic) NSArray<NSString *> * _Nullable guidedAccessRestrictionIdentifiers;
    [Abstract]
    [NullAllowed, Export("guidedAccessRestrictionIdentifiers")]
    string[] GuidedAccessRestrictionIdentifiers { get; }

    // @required -(void)guidedAccessRestrictionWithIdentifier:(NSString * _Nonnull)restrictionIdentifier didChangeState:(UIGuidedAccessRestrictionState)newRestrictionState;
    [Abstract]
    [Export("guidedAccessRestrictionWithIdentifier:didChangeState:")]
    void GuidedAccessRestrictionWithIdentifier(string restrictionIdentifier, UIGuidedAccessRestrictionState newRestrictionState);

    // @required -(NSString * _Nullable)textForGuidedAccessRestrictionWithIdentifier:(NSString * _Nonnull)restrictionIdentifier;
    [Abstract]
    [Export("textForGuidedAccessRestrictionWithIdentifier:")]
    [return: NullAllowed]
    string TextForGuidedAccessRestrictionWithIdentifier(string restrictionIdentifier);

    // @optional -(NSString * _Nullable)detailTextForGuidedAccessRestrictionWithIdentifier:(NSString * _Nonnull)restrictionIdentifier;
    [Export("detailTextForGuidedAccessRestrictionWithIdentifier:")]
    [return: NullAllowed]
    string DetailTextForGuidedAccessRestrictionWithIdentifier(string restrictionIdentifier);
}

// @interface UIAccessibilityLocationDescriptor : NSObject
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIAccessibilityLocationDescriptor
{
    // -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name view:(UIView * _Nonnull)view;
    [Export("initWithName:view:")]
    IntPtr Constructor(string name, UIView view);

    // -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name point:(CGPoint)point inView:(UIView * _Nonnull)view;
    [Export("initWithName:point:inView:")]
    IntPtr Constructor(string name, CGPoint point, UIView view);

    // -(instancetype _Nonnull)initWithAttributedName:(NSAttributedString * _Nonnull)attributedName point:(CGPoint)point inView:(UIView * _Nonnull)view __attribute__((objc_designated_initializer));
    [Export("initWithAttributedName:point:inView:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSAttributedString attributedName, CGPoint point, UIView view);

    // @property (readonly, nonatomic, weak) UIView * _Nullable view;
    [NullAllowed, Export("view", ArgumentSemantic.Weak)]
    UIView View { get; }

    // @property (readonly, nonatomic) CGPoint point;
    [Export("point")]
    CGPoint Point { get; }

    // @property (readonly, nonatomic, strong) NSString * _Nonnull name;
    [Export("name", ArgumentSemantic.Strong)]
    string Name { get; }

    // @property (readonly, nonatomic, strong) NSAttributedString * _Nonnull attributedName;
    [Export("attributedName", ArgumentSemantic.Strong)]
    NSAttributedString AttributedName { get; }
}

// @interface UIAccessibility (NSObject)
[Category]
[BaseType(typeof(NSObject))]
interface NSObject_UIAccessibility
{
    // @property (nonatomic) BOOL isAccessibilityElement;
    [Export("isAccessibilityElement")]
    bool IsAccessibilityElement { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable accessibilityLabel;
    [NullAllowed, Export("accessibilityLabel")]
    string AccessibilityLabel { get; set; }

    // @property (copy, nonatomic) NSAttributedString * _Nullable accessibilityAttributedLabel __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [NullAllowed, Export("accessibilityAttributedLabel", ArgumentSemantic.Copy)]
    NSAttributedString AccessibilityAttributedLabel { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable accessibilityHint;
    [NullAllowed, Export("accessibilityHint")]
    string AccessibilityHint { get; set; }

    // @property (copy, nonatomic) NSAttributedString * _Nullable accessibilityAttributedHint __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [NullAllowed, Export("accessibilityAttributedHint", ArgumentSemantic.Copy)]
    NSAttributedString AccessibilityAttributedHint { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable accessibilityValue;
    [NullAllowed, Export("accessibilityValue")]
    string AccessibilityValue { get; set; }

    // @property (copy, nonatomic) NSAttributedString * _Nullable accessibilityAttributedValue __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [NullAllowed, Export("accessibilityAttributedValue", ArgumentSemantic.Copy)]
    NSAttributedString AccessibilityAttributedValue { get; set; }

    // @property (nonatomic) UIAccessibilityTraits accessibilityTraits;
    [Export("accessibilityTraits")]
    ulong AccessibilityTraits { get; set; }

    // @property (nonatomic) CGRect accessibilityFrame;
    [Export("accessibilityFrame", ArgumentSemantic.Assign)]
    CGRect AccessibilityFrame { get; set; }

    // @property (copy, nonatomic) UIBezierPath * _Nullable accessibilityPath __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("accessibilityPath", ArgumentSemantic.Copy)]
    UIBezierPath AccessibilityPath { get; set; }

    // @property (nonatomic) CGPoint accessibilityActivationPoint __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("accessibilityActivationPoint", ArgumentSemantic.Assign)]
    CGPoint AccessibilityActivationPoint { get; set; }

    // @property (nonatomic, strong) NSString * _Nullable accessibilityLanguage;
    [NullAllowed, Export("accessibilityLanguage", ArgumentSemantic.Strong)]
    string AccessibilityLanguage { get; set; }

    // @property (nonatomic) BOOL accessibilityElementsHidden __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("accessibilityElementsHidden")]
    bool AccessibilityElementsHidden { get; set; }

    // @property (nonatomic) BOOL accessibilityViewIsModal __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("accessibilityViewIsModal")]
    bool AccessibilityViewIsModal { get; set; }

    // @property (nonatomic) BOOL shouldGroupAccessibilityChildren __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("shouldGroupAccessibilityChildren")]
    bool ShouldGroupAccessibilityChildren { get; set; }

    // @property (nonatomic) UIAccessibilityNavigationStyle accessibilityNavigationStyle __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("accessibilityNavigationStyle", ArgumentSemantic.Assign)]
    UIAccessibilityNavigationStyle AccessibilityNavigationStyle { get; set; }

    // @property (copy, nonatomic) NSArray * _Nullable accessibilityHeaderElements __attribute__((availability(tvos, introduced=9_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
    [TV(9, 0), NoWatch, NoiOS]
    [NullAllowed, Export("accessibilityHeaderElements", ArgumentSemantic.Copy)]
    [Verify(StronglyTypedNSArray)]
    NSObject[] AccessibilityHeaderElements { get; set; }
}

// @interface UIAccessibilityFocus (NSObject)
[Category]
[BaseType(typeof(NSObject))]
interface NSObject_UIAccessibilityFocus
{
    // -(void)accessibilityElementDidBecomeFocused __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("accessibilityElementDidBecomeFocused")]
    void AccessibilityElementDidBecomeFocused();

    // -(void)accessibilityElementDidLoseFocus __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("accessibilityElementDidLoseFocus")]
    void AccessibilityElementDidLoseFocus();

    // -(BOOL)accessibilityElementIsFocused __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("accessibilityElementIsFocused")]
    [Verify(MethodToProperty)]
    bool AccessibilityElementIsFocused { get; }

    // -(NSSet<UIAccessibilityAssistiveTechnologyIdentifier> * _Nullable)accessibilityAssistiveTechnologyFocusedIdentifiers __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [NullAllowed, Export("accessibilityAssistiveTechnologyFocusedIdentifiers")]
    [Verify(MethodToProperty)]
    NSSet<NSString> AccessibilityAssistiveTechnologyFocusedIdentifiers { get; }
}

// @interface UIAccessibilityAction (NSObject)
[Category]
[BaseType(typeof(NSObject))]
interface NSObject_UIAccessibilityAction
{
    // -(BOOL)accessibilityActivate __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("accessibilityActivate")]
    [Verify(MethodToProperty)]
    bool AccessibilityActivate { get; }

    // -(void)accessibilityIncrement __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("accessibilityIncrement")]
    void AccessibilityIncrement();

    // -(void)accessibilityDecrement __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("accessibilityDecrement")]
    void AccessibilityDecrement();

    // -(BOOL)accessibilityScroll:(UIAccessibilityScrollDirection)direction __attribute__((availability(ios, introduced=4_2)));
    [iOS(4, 2)]
    [Export("accessibilityScroll:")]
    bool AccessibilityScroll(UIAccessibilityScrollDirection direction);

    // -(BOOL)accessibilityPerformEscape __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("accessibilityPerformEscape")]
    [Verify(MethodToProperty)]
    bool AccessibilityPerformEscape { get; }

    // -(BOOL)accessibilityPerformMagicTap __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("accessibilityPerformMagicTap")]
    [Verify(MethodToProperty)]
    bool AccessibilityPerformMagicTap { get; }

    // @property (nonatomic, strong) NSArray<UIAccessibilityCustomAction *> * _Nullable accessibilityCustomActions __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("accessibilityCustomActions", ArgumentSemantic.Strong)]
    UIAccessibilityCustomAction[] AccessibilityCustomActions { get; set; }
}

// @protocol UIAccessibilityReadingContent
[Protocol, Model]
interface UIAccessibilityReadingContent
{
    // @required -(NSInteger)accessibilityLineNumberForPoint:(CGPoint)point __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Abstract]
    [Export("accessibilityLineNumberForPoint:")]
    nint AccessibilityLineNumberForPoint(CGPoint point);

    // @required -(NSString * _Nullable)accessibilityContentForLineNumber:(NSInteger)lineNumber __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Abstract]
    [Export("accessibilityContentForLineNumber:")]
    [return: NullAllowed]
    string AccessibilityContentForLineNumber(nint lineNumber);

    // @required -(CGRect)accessibilityFrameForLineNumber:(NSInteger)lineNumber __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Abstract]
    [Export("accessibilityFrameForLineNumber:")]
    CGRect AccessibilityFrameForLineNumber(nint lineNumber);

    // @required -(NSString * _Nullable)accessibilityPageContent __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Abstract]
    [NullAllowed, Export("accessibilityPageContent")]
    [Verify(MethodToProperty)]
    string AccessibilityPageContent { get; }

    // @optional -(NSAttributedString * _Nullable)accessibilityAttributedContentForLineNumber:(NSInteger)lineNumber __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("accessibilityAttributedContentForLineNumber:")]
    [return: NullAllowed]
    NSAttributedString AccessibilityAttributedContentForLineNumber(nint lineNumber);

    // @optional -(NSAttributedString * _Nullable)accessibilityAttributedPageContent __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [NullAllowed, Export("accessibilityAttributedPageContent")]
    [Verify(MethodToProperty)]
    NSAttributedString AccessibilityAttributedPageContent { get; }
}

// @interface UIAccessibilityDragging (NSObject)
[Category]
[BaseType(typeof(NSObject))]
interface NSObject_UIAccessibilityDragging
{
    // @property (copy, nonatomic) NSArray<UIAccessibilityLocationDescriptor *> * _Nullable accessibilityDragSourceDescriptors __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [NullAllowed, Export("accessibilityDragSourceDescriptors", ArgumentSemantic.Copy)]
    UIAccessibilityLocationDescriptor[] AccessibilityDragSourceDescriptors { get; set; }

    // @property (copy, nonatomic) NSArray<UIAccessibilityLocationDescriptor *> * _Nullable accessibilityDropPointDescriptors __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [NullAllowed, Export("accessibilityDropPointDescriptors", ArgumentSemantic.Copy)]
    UIAccessibilityLocationDescriptor[] AccessibilityDropPointDescriptors { get; set; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const _Nonnull UIAccessibilityVoiceOverStatusChanged __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=9.0, deprecated=11.0))) __attribute__((availability(ios, introduced=4.0, deprecated=11.0)));
    [Introduced(PlatformName.TvOS, 9, 0)]
    [Deprecated(PlatformName.TvOS, 11, 0)]
    [Introduced(PlatformName.iOS, 4, 0)]
    [Deprecated(PlatformName.iOS, 11, 0)]
    [Field("UIAccessibilityVoiceOverStatusChanged", "__Internal")]
    NSString UIAccessibilityVoiceOverStatusChanged { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityVoiceOverStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Field("UIAccessibilityVoiceOverStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilityVoiceOverStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityMonoAudioStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Field("UIAccessibilityMonoAudioStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilityMonoAudioStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityClosedCaptioningStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Field("UIAccessibilityClosedCaptioningStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilityClosedCaptioningStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityInvertColorsStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UIAccessibilityInvertColorsStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilityInvertColorsStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityGuidedAccessStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UIAccessibilityGuidedAccessStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilityGuidedAccessStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityBoldTextStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIAccessibilityBoldTextStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilityBoldTextStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityGrayscaleStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIAccessibilityGrayscaleStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilityGrayscaleStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityReduceTransparencyStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIAccessibilityReduceTransparencyStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilityReduceTransparencyStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityReduceMotionStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIAccessibilityReduceMotionStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilityReduceMotionStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityDarkerSystemColorsStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIAccessibilityDarkerSystemColorsStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilityDarkerSystemColorsStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilitySwitchControlStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIAccessibilitySwitchControlStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilitySwitchControlStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilitySpeakSelectionStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIAccessibilitySpeakSelectionStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilitySpeakSelectionStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilitySpeakScreenStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIAccessibilitySpeakScreenStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilitySpeakScreenStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityShakeToUndoDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Field("UIAccessibilityShakeToUndoDidChangeNotification", "__Internal")]
    NSString UIAccessibilityShakeToUndoDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIAccessibilityAssistiveTouchStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UIAccessibilityAssistiveTouchStatusDidChangeNotification", "__Internal")]
    NSString UIAccessibilityAssistiveTouchStatusDidChangeNotification { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSNotificationName _Nonnull UIAccessibilityHearingDevicePairedEarDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10_0)));
    [NoTV, iOS(10, 0)]
    [Field("UIAccessibilityHearingDevicePairedEarDidChangeNotification", "__Internal")]
    NSString UIAccessibilityHearingDevicePairedEarDidChangeNotification { get; }
}

// @interface UIImageView : UIView
[iOS(2, 0)]
[BaseType(typeof(UIView))]
interface UIImageView
{
    // -(instancetype _Nonnull)initWithImage:(UIImage * _Nullable)image;
    [Export("initWithImage:")]
    IntPtr Constructor([NullAllowed] UIImage image);

    // -(instancetype _Nonnull)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("initWithImage:highlightedImage:")]
    IntPtr Constructor([NullAllowed] UIImage image, [NullAllowed] UIImage highlightedImage);

    // @property (nonatomic, strong) UIImage * _Nullable image;
    [NullAllowed, Export("image", ArgumentSemantic.Strong)]
    UIImage Image { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable highlightedImage __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [NullAllowed, Export("highlightedImage", ArgumentSemantic.Strong)]
    UIImage HighlightedImage { get; set; }

    // @property (getter = isUserInteractionEnabled, nonatomic) BOOL userInteractionEnabled;
    [Export("userInteractionEnabled")]
    bool UserInteractionEnabled { [Bind("isUserInteractionEnabled")] get; set; }

    // @property (getter = isHighlighted, nonatomic) BOOL highlighted __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("highlighted")]
    bool Highlighted { [Bind("isHighlighted")] get; set; }

    // @property (copy, nonatomic) NSArray<UIImage *> * _Nullable animationImages;
    [NullAllowed, Export("animationImages", ArgumentSemantic.Copy)]
    UIImage[] AnimationImages { get; set; }

    // @property (copy, nonatomic) NSArray<UIImage *> * _Nullable highlightedAnimationImages __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [NullAllowed, Export("highlightedAnimationImages", ArgumentSemantic.Copy)]
    UIImage[] HighlightedAnimationImages { get; set; }

    // @property (nonatomic) NSTimeInterval animationDuration;
    [Export("animationDuration")]
    double AnimationDuration { get; set; }

    // @property (nonatomic) NSInteger animationRepeatCount;
    [Export("animationRepeatCount")]
    nint AnimationRepeatCount { get; set; }

    // @property (nonatomic, strong) UIColor * _Null_unspecified tintColor __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("tintColor", ArgumentSemantic.Strong)]
    UIColor TintColor { get; set; }

    // -(void)startAnimating;
    [Export("startAnimating")]
    void StartAnimating();

    // -(void)stopAnimating;
    [Export("stopAnimating")]
    void StopAnimating();

    // @property (readonly, getter = isAnimating, nonatomic) BOOL animating;
    [Export("animating")]
    bool Animating { [Bind("isAnimating")] get; }

    // @property (nonatomic) BOOL adjustsImageWhenAncestorFocused __attribute__((availability(tvos, introduced=9_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
    [TV(9, 0), NoWatch, NoiOS]
    [Export("adjustsImageWhenAncestorFocused")]
    bool AdjustsImageWhenAncestorFocused { get; set; }

    // @property (readonly, strong) UILayoutGuide * _Nonnull focusedFrameGuide __attribute__((availability(tvos, introduced=9_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
    [TV(9, 0), NoWatch, NoiOS]
    [Export("focusedFrameGuide", ArgumentSemantic.Strong)]
    UILayoutGuide FocusedFrameGuide { get; }

    // @property (readonly, nonatomic, strong) UIView * _Nonnull overlayContentView __attribute__((availability(tvos, introduced=11_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
    [TV(11, 0), NoWatch, NoiOS]
    [Export("overlayContentView", ArgumentSemantic.Strong)]
    UIView OverlayContentView { get; }

    // @property (nonatomic) BOOL masksFocusEffectToContents __attribute__((availability(tvos, introduced=11_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable)));
    [TV(11, 0), NoWatch, NoiOS]
    [Export("masksFocusEffectToContents")]
    bool MasksFocusEffectToContents { get; set; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSTextTabOptionKey _Nonnull NSTabColumnTerminatorsAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSTabColumnTerminatorsAttributeName", "__Internal")]
    NSString NSTabColumnTerminatorsAttributeName { get; }
}

// @interface NSTextTab : NSObject <NSCopying, NSCoding, NSSecureCoding>
[iOS(7, 0)]
[BaseType(typeof(NSObject))]
interface NSTextTab : INSCopying, INSCoding, INSSecureCoding
{
    // +(NSCharacterSet * _Nonnull)columnTerminatorsForLocale:(NSLocale * _Nullable)aLocale __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Static]
    [Export("columnTerminatorsForLocale:")]
    NSCharacterSet ColumnTerminatorsForLocale([NullAllowed] NSLocale aLocale);

    // -(instancetype _Nonnull)initWithTextAlignment:(NSTextAlignment)alignment location:(CGFloat)loc options:(NSDictionary<NSTextTabOptionKey,id> * _Nonnull)options __attribute__((objc_designated_initializer));
    [Export("initWithTextAlignment:location:options:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSTextAlignment alignment, nfloat loc, NSDictionary<NSString, NSObject> options);

    // @property (readonly, nonatomic) NSTextAlignment alignment;
    [Export("alignment")]
    NSTextAlignment Alignment { get; }

    // @property (readonly, nonatomic) CGFloat location;
    [Export("location")]
    nfloat Location { get; }

    // @property (readonly, nonatomic) NSDictionary<NSTextTabOptionKey,id> * _Nonnull options;
    [Export("options")]
    NSDictionary<NSString, NSObject> Options { get; }
}

// @interface NSParagraphStyle : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
[iOS(6, 0)]
[BaseType(typeof(NSObject))]
interface NSParagraphStyle : INSCopying, INSMutableCopying, INSSecureCoding
{
    // @property (readonly, copy, nonatomic, class) NSParagraphStyle * _Nonnull defaultParagraphStyle;
    [Static]
    [Export("defaultParagraphStyle", ArgumentSemantic.Copy)]
    NSParagraphStyle DefaultParagraphStyle { get; }

    // +(NSWritingDirection)defaultWritingDirectionForLanguage:(NSString * _Nullable)languageName;
    [Static]
    [Export("defaultWritingDirectionForLanguage:")]
    NSWritingDirection DefaultWritingDirectionForLanguage([NullAllowed] string languageName);

    // @property (readonly, nonatomic) CGFloat lineSpacing;
    [Export("lineSpacing")]
    nfloat LineSpacing { get; }

    // @property (readonly, nonatomic) CGFloat paragraphSpacing;
    [Export("paragraphSpacing")]
    nfloat ParagraphSpacing { get; }

    // @property (readonly, nonatomic) NSTextAlignment alignment;
    [Export("alignment")]
    NSTextAlignment Alignment { get; }

    // @property (readonly, nonatomic) CGFloat headIndent;
    [Export("headIndent")]
    nfloat HeadIndent { get; }

    // @property (readonly, nonatomic) CGFloat tailIndent;
    [Export("tailIndent")]
    nfloat TailIndent { get; }

    // @property (readonly, nonatomic) CGFloat firstLineHeadIndent;
    [Export("firstLineHeadIndent")]
    nfloat FirstLineHeadIndent { get; }

    // @property (readonly, nonatomic) CGFloat minimumLineHeight;
    [Export("minimumLineHeight")]
    nfloat MinimumLineHeight { get; }

    // @property (readonly, nonatomic) CGFloat maximumLineHeight;
    [Export("maximumLineHeight")]
    nfloat MaximumLineHeight { get; }

    // @property (readonly, nonatomic) NSLineBreakMode lineBreakMode;
    [Export("lineBreakMode")]
    NSLineBreakMode LineBreakMode { get; }

    // @property (readonly, nonatomic) NSWritingDirection baseWritingDirection;
    [Export("baseWritingDirection")]
    NSWritingDirection BaseWritingDirection { get; }

    // @property (readonly, nonatomic) CGFloat lineHeightMultiple;
    [Export("lineHeightMultiple")]
    nfloat LineHeightMultiple { get; }

    // @property (readonly, nonatomic) CGFloat paragraphSpacingBefore;
    [Export("paragraphSpacingBefore")]
    nfloat ParagraphSpacingBefore { get; }

    // @property (readonly, nonatomic) float hyphenationFactor;
    [Export("hyphenationFactor")]
    float HyphenationFactor { get; }

    // @property (readonly, copy, nonatomic) NSArray<NSTextTab *> * _Nonnull tabStops __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("tabStops", ArgumentSemantic.Copy)]
    NSTextTab[] TabStops { get; }

    // @property (readonly, nonatomic) CGFloat defaultTabInterval __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("defaultTabInterval")]
    nfloat DefaultTabInterval { get; }

    // @property (readonly, nonatomic) BOOL allowsDefaultTighteningForTruncation __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("allowsDefaultTighteningForTruncation")]
    bool AllowsDefaultTighteningForTruncation { get; }
}

// @interface NSMutableParagraphStyle : NSParagraphStyle
[iOS(6, 0)]
[BaseType(typeof(NSParagraphStyle))]
interface NSMutableParagraphStyle
{
    // @property (nonatomic) CGFloat lineSpacing;
    [Export("lineSpacing")]
    nfloat LineSpacing { get; set; }

    // @property (nonatomic) CGFloat paragraphSpacing;
    [Export("paragraphSpacing")]
    nfloat ParagraphSpacing { get; set; }

    // @property (nonatomic) NSTextAlignment alignment;
    [Export("alignment", ArgumentSemantic.Assign)]
    NSTextAlignment Alignment { get; set; }

    // @property (nonatomic) CGFloat firstLineHeadIndent;
    [Export("firstLineHeadIndent")]
    nfloat FirstLineHeadIndent { get; set; }

    // @property (nonatomic) CGFloat headIndent;
    [Export("headIndent")]
    nfloat HeadIndent { get; set; }

    // @property (nonatomic) CGFloat tailIndent;
    [Export("tailIndent")]
    nfloat TailIndent { get; set; }

    // @property (nonatomic) NSLineBreakMode lineBreakMode;
    [Export("lineBreakMode", ArgumentSemantic.Assign)]
    NSLineBreakMode LineBreakMode { get; set; }

    // @property (nonatomic) CGFloat minimumLineHeight;
    [Export("minimumLineHeight")]
    nfloat MinimumLineHeight { get; set; }

    // @property (nonatomic) CGFloat maximumLineHeight;
    [Export("maximumLineHeight")]
    nfloat MaximumLineHeight { get; set; }

    // @property (nonatomic) NSWritingDirection baseWritingDirection;
    [Export("baseWritingDirection", ArgumentSemantic.Assign)]
    NSWritingDirection BaseWritingDirection { get; set; }

    // @property (nonatomic) CGFloat lineHeightMultiple;
    [Export("lineHeightMultiple")]
    nfloat LineHeightMultiple { get; set; }

    // @property (nonatomic) CGFloat paragraphSpacingBefore;
    [Export("paragraphSpacingBefore")]
    nfloat ParagraphSpacingBefore { get; set; }

    // @property (nonatomic) float hyphenationFactor;
    [Export("hyphenationFactor")]
    float HyphenationFactor { get; set; }

    // @property (copy, nonatomic) NSArray<NSTextTab *> * _Null_unspecified tabStops __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("tabStops", ArgumentSemantic.Copy)]
    NSTextTab[] TabStops { get; set; }

    // @property (nonatomic) CGFloat defaultTabInterval __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("defaultTabInterval")]
    nfloat DefaultTabInterval { get; set; }

    // @property (nonatomic) BOOL allowsDefaultTighteningForTruncation __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("allowsDefaultTighteningForTruncation")]
    bool AllowsDefaultTighteningForTruncation { get; set; }

    // -(void)addTabStop:(NSTextTab * _Nonnull)anObject __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("addTabStop:")]
    void AddTabStop(NSTextTab anObject);

    // -(void)removeTabStop:(NSTextTab * _Nonnull)anObject __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("removeTabStop:")]
    void RemoveTabStop(NSTextTab anObject);

    // -(void)setParagraphStyle:(NSParagraphStyle * _Nonnull)obj __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("setParagraphStyle:")]
    void SetParagraphStyle(NSParagraphStyle obj);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const UITextAttributeFont __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 5, 0, message: "Use NSFontAttributeName")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use NSFontAttributeName")]
    [NoTV]
    [Field("UITextAttributeFont", "__Internal")]
    NSString UITextAttributeFont { get; }

    // extern NSString *const UITextAttributeTextColor __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 5, 0, message: "Use NSForegroundColorAttributeName")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use NSForegroundColorAttributeName")]
    [NoTV]
    [Field("UITextAttributeTextColor", "__Internal")]
    NSString UITextAttributeTextColor { get; }

    // extern NSString *const UITextAttributeTextShadowColor __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 5, 0, message: "Use NSShadowAttributeName with an NSShadow instance as the value")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use NSShadowAttributeName with an NSShadow instance as the value")]
    [NoTV]
    [Field("UITextAttributeTextShadowColor", "__Internal")]
    NSString UITextAttributeTextShadowColor { get; }

    // extern NSString *const UITextAttributeTextShadowOffset __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 5, 0, message: "Use NSShadowAttributeName with an NSShadow instance as the value")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use NSShadowAttributeName with an NSShadow instance as the value")]
    [NoTV]
    [Field("UITextAttributeTextShadowOffset", "__Internal")]
    NSString UITextAttributeTextShadowOffset { get; }
}

// @interface UIStringDrawing (NSString)
[Category]
[BaseType(typeof(NSString))]
interface NSString_UIStringDrawing
{
    // -(CGSize)sizeWithFont:(UIFont *)font __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -sizeWithAttributes:")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use -sizeWithAttributes:")]
    [NoTV]
    [Export("sizeWithFont:")]
    CGSize SizeWithFont(UIFont font);

    // -(CGSize)sizeWithFont:(UIFont *)font forWidth:(CGFloat)width lineBreakMode:(NSLineBreakMode)lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -boundingRectWithSize:options:attributes:context:")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use -boundingRectWithSize:options:attributes:context:")]
    [NoTV]
    [Export("sizeWithFont:forWidth:lineBreakMode:")]
    CGSize SizeWithFont(UIFont font, nfloat width, NSLineBreakMode lineBreakMode);

    // -(CGSize)drawAtPoint:(CGPoint)point withFont:(UIFont *)font __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -drawAtPoint:withAttributes:")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use -drawAtPoint:withAttributes:")]
    [NoTV]
    [Export("drawAtPoint:withFont:")]
    CGSize DrawAtPoint(CGPoint point, UIFont font);

    // -(CGSize)drawAtPoint:(CGPoint)point forWidth:(CGFloat)width withFont:(UIFont *)font lineBreakMode:(NSLineBreakMode)lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -drawInRect:withAttributes:")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use -drawInRect:withAttributes:")]
    [NoTV]
    [Export("drawAtPoint:forWidth:withFont:lineBreakMode:")]
    CGSize DrawAtPoint(CGPoint point, nfloat width, UIFont font, NSLineBreakMode lineBreakMode);

    // -(CGSize)sizeWithFont:(UIFont *)font constrainedToSize:(CGSize)size __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -boundingRectWithSize:options:attributes:context:")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use -boundingRectWithSize:options:attributes:context:")]
    [NoTV]
    [Export("sizeWithFont:constrainedToSize:")]
    CGSize SizeWithFont(UIFont font, CGSize size);

    // -(CGSize)sizeWithFont:(UIFont *)font constrainedToSize:(CGSize)size lineBreakMode:(NSLineBreakMode)lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -boundingRectWithSize:options:attributes:context:")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use -boundingRectWithSize:options:attributes:context:")]
    [NoTV]
    [Export("sizeWithFont:constrainedToSize:lineBreakMode:")]
    CGSize SizeWithFont(UIFont font, CGSize size, NSLineBreakMode lineBreakMode);

    // -(CGSize)drawInRect:(CGRect)rect withFont:(UIFont *)font __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -drawInRect:withAttributes:")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use -drawInRect:withAttributes:")]
    [NoTV]
    [Export("drawInRect:withFont:")]
    CGSize DrawInRect(CGRect rect, UIFont font);

    // -(CGSize)drawInRect:(CGRect)rect withFont:(UIFont *)font lineBreakMode:(NSLineBreakMode)lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -drawInRect:withAttributes:")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use -drawInRect:withAttributes:")]
    [NoTV]
    [Export("drawInRect:withFont:lineBreakMode:")]
    CGSize DrawInRect(CGRect rect, UIFont font, NSLineBreakMode lineBreakMode);

    // -(CGSize)drawInRect:(CGRect)rect withFont:(UIFont *)font lineBreakMode:(NSLineBreakMode)lineBreakMode alignment:(NSTextAlignment)alignment __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -drawInRect:withAttributes:")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use -drawInRect:withAttributes:")]
    [NoTV]
    [Export("drawInRect:withFont:lineBreakMode:alignment:")]
    CGSize DrawInRect(CGRect rect, UIFont font, NSLineBreakMode lineBreakMode, NSTextAlignment alignment);

    // -(CGSize)sizeWithFont:(UIFont *)font minFontSize:(CGFloat)minFontSize actualFontSize:(CGFloat *)actualFontSize forWidth:(CGFloat)width lineBreakMode:(NSLineBreakMode)lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 7, 0)]
    [NoTV]
    [Export("sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:")]
    unsafe CGSize SizeWithFont(UIFont font, nfloat minFontSize, nfloat* actualFontSize, nfloat width, NSLineBreakMode lineBreakMode);

    // -(CGSize)drawAtPoint:(CGPoint)point forWidth:(CGFloat)width withFont:(UIFont *)font fontSize:(CGFloat)fontSize lineBreakMode:(NSLineBreakMode)lineBreakMode baselineAdjustment:(UIBaselineAdjustment)baselineAdjustment __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -drawInRect:withAttributes:")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use -drawInRect:withAttributes:")]
    [NoTV]
    [Export("drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:")]
    CGSize DrawAtPoint(CGPoint point, nfloat width, UIFont font, nfloat fontSize, NSLineBreakMode lineBreakMode, UIBaselineAdjustment baselineAdjustment);

    // -(CGSize)drawAtPoint:(CGPoint)point forWidth:(CGFloat)width withFont:(UIFont *)font minFontSize:(CGFloat)minFontSize actualFontSize:(CGFloat *)actualFontSize lineBreakMode:(NSLineBreakMode)lineBreakMode baselineAdjustment:(UIBaselineAdjustment)baselineAdjustment __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -drawInRect:withAttributes:")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use -drawInRect:withAttributes:")]
    [NoTV]
    [Export("drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:")]
    unsafe CGSize DrawAtPoint(CGPoint point, nfloat width, UIFont font, nfloat minFontSize, nfloat* actualFontSize, NSLineBreakMode lineBreakMode, UIBaselineAdjustment baselineAdjustment);
}

// @protocol UISpringLoadedInteractionSupporting <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UISpringLoadedInteractionSupporting
{
    // @required @property (getter = isSpringLoaded, assign, nonatomic) BOOL springLoaded __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11_0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Abstract]
    [Export("springLoaded")]
    bool SpringLoaded { [Bind("isSpringLoaded")] get; set; }
}

// @interface UIButton : UIControl <NSCoding>
[iOS(2, 0)]
[BaseType(typeof(UIControl))]
interface UIButton : INSCoding
{
    // +(instancetype _Nonnull)buttonWithType:(UIButtonType)buttonType;
    [Static]
    [Export("buttonWithType:")]
    UIButton ButtonWithType(UIButtonType buttonType);

    // @property (nonatomic) UIEdgeInsets contentEdgeInsets __attribute__((annotate("ui_appearance_selector")));
    [Export("contentEdgeInsets", ArgumentSemantic.Assign)]
    UIEdgeInsets ContentEdgeInsets { get; set; }

    // @property (nonatomic) UIEdgeInsets titleEdgeInsets;
    [Export("titleEdgeInsets", ArgumentSemantic.Assign)]
    UIEdgeInsets TitleEdgeInsets { get; set; }

    // @property (nonatomic) BOOL reversesTitleShadowWhenHighlighted;
    [Export("reversesTitleShadowWhenHighlighted")]
    bool ReversesTitleShadowWhenHighlighted { get; set; }

    // @property (nonatomic) UIEdgeInsets imageEdgeInsets;
    [Export("imageEdgeInsets", ArgumentSemantic.Assign)]
    UIEdgeInsets ImageEdgeInsets { get; set; }

    // @property (nonatomic) BOOL adjustsImageWhenHighlighted;
    [Export("adjustsImageWhenHighlighted")]
    bool AdjustsImageWhenHighlighted { get; set; }

    // @property (nonatomic) BOOL adjustsImageWhenDisabled;
    [Export("adjustsImageWhenDisabled")]
    bool AdjustsImageWhenDisabled { get; set; }

    // @property (nonatomic) BOOL showsTouchWhenHighlighted __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("showsTouchWhenHighlighted")]
    bool ShowsTouchWhenHighlighted { get; set; }

    // @property (nonatomic, strong) UIColor * _Null_unspecified tintColor __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("tintColor", ArgumentSemantic.Strong)]
    UIColor TintColor { get; set; }

    // @property (readonly, nonatomic) UIButtonType buttonType;
    [Export("buttonType")]
    UIButtonType ButtonType { get; }

    // -(void)setTitle:(NSString * _Nullable)title forState:(UIControlState)state;
    [Export("setTitle:forState:")]
    void SetTitle([NullAllowed] string title, UIControlState state);

    // -(void)setTitleColor:(UIColor * _Nullable)color forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
    [Export("setTitleColor:forState:")]
    void SetTitleColor([NullAllowed] UIColor color, UIControlState state);

    // -(void)setTitleShadowColor:(UIColor * _Nullable)color forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
    [Export("setTitleShadowColor:forState:")]
    void SetTitleShadowColor([NullAllowed] UIColor color, UIControlState state);

    // -(void)setImage:(UIImage * _Nullable)image forState:(UIControlState)state;
    [Export("setImage:forState:")]
    void SetImage([NullAllowed] UIImage image, UIControlState state);

    // -(void)setBackgroundImage:(UIImage * _Nullable)image forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector")));
    [Export("setBackgroundImage:forState:")]
    void SetBackgroundImage([NullAllowed] UIImage image, UIControlState state);

    // -(void)setAttributedTitle:(NSAttributedString * _Nullable)title forState:(UIControlState)state __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("setAttributedTitle:forState:")]
    void SetAttributedTitle([NullAllowed] NSAttributedString title, UIControlState state);

    // -(NSString * _Nullable)titleForState:(UIControlState)state;
    [Export("titleForState:")]
    [return: NullAllowed]
    string TitleForState(UIControlState state);

    // -(UIColor * _Nullable)titleColorForState:(UIControlState)state;
    [Export("titleColorForState:")]
    [return: NullAllowed]
    UIColor TitleColorForState(UIControlState state);

    // -(UIColor * _Nullable)titleShadowColorForState:(UIControlState)state;
    [Export("titleShadowColorForState:")]
    [return: NullAllowed]
    UIColor TitleShadowColorForState(UIControlState state);

    // -(UIImage * _Nullable)imageForState:(UIControlState)state;
    [Export("imageForState:")]
    [return: NullAllowed]
    UIImage ImageForState(UIControlState state);

    // -(UIImage * _Nullable)backgroundImageForState:(UIControlState)state;
    [Export("backgroundImageForState:")]
    [return: NullAllowed]
    UIImage BackgroundImageForState(UIControlState state);

    // -(NSAttributedString * _Nullable)attributedTitleForState:(UIControlState)state __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("attributedTitleForState:")]
    [return: NullAllowed]
    NSAttributedString AttributedTitleForState(UIControlState state);

    // @property (readonly, nonatomic, strong) NSString * _Nullable currentTitle;
    [NullAllowed, Export("currentTitle", ArgumentSemantic.Strong)]
    string CurrentTitle { get; }

    // @property (readonly, nonatomic, strong) UIColor * _Nonnull currentTitleColor;
    [Export("currentTitleColor", ArgumentSemantic.Strong)]
    UIColor CurrentTitleColor { get; }

    // @property (readonly, nonatomic, strong) UIColor * _Nullable currentTitleShadowColor;
    [NullAllowed, Export("currentTitleShadowColor", ArgumentSemantic.Strong)]
    UIColor CurrentTitleShadowColor { get; }

    // @property (readonly, nonatomic, strong) UIImage * _Nullable currentImage;
    [NullAllowed, Export("currentImage", ArgumentSemantic.Strong)]
    UIImage CurrentImage { get; }

    // @property (readonly, nonatomic, strong) UIImage * _Nullable currentBackgroundImage;
    [NullAllowed, Export("currentBackgroundImage", ArgumentSemantic.Strong)]
    UIImage CurrentBackgroundImage { get; }

    // @property (readonly, nonatomic, strong) NSAttributedString * _Nullable currentAttributedTitle __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("currentAttributedTitle", ArgumentSemantic.Strong)]
    NSAttributedString CurrentAttributedTitle { get; }

    // @property (readonly, nonatomic, strong) UILabel * _Nullable titleLabel __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [NullAllowed, Export("titleLabel", ArgumentSemantic.Strong)]
    UILabel TitleLabel { get; }

    // @property (readonly, nonatomic, strong) UIImageView * _Nullable imageView __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [NullAllowed, Export("imageView", ArgumentSemantic.Strong)]
    UIImageView ImageView { get; }

    // -(CGRect)backgroundRectForBounds:(CGRect)bounds;
    [Export("backgroundRectForBounds:")]
    CGRect BackgroundRectForBounds(CGRect bounds);

    // -(CGRect)contentRectForBounds:(CGRect)bounds;
    [Export("contentRectForBounds:")]
    CGRect ContentRectForBounds(CGRect bounds);

    // -(CGRect)titleRectForContentRect:(CGRect)contentRect;
    [Export("titleRectForContentRect:")]
    CGRect TitleRectForContentRect(CGRect contentRect);

    // -(CGRect)imageRectForContentRect:(CGRect)contentRect;
    [Export("imageRectForContentRect:")]
    CGRect ImageRectForContentRect(CGRect contentRect);
}

// @interface UIButtonDeprecated (UIButton)
[Category]
[BaseType(typeof(UIButton))]
interface UIButton_UIButtonDeprecated
{
    // @property (nonatomic, strong) UIFont * _Nonnull font __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [Export("font", ArgumentSemantic.Strong)]
    UIFont Font { get; set; }

    // @property (nonatomic) NSLineBreakMode lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [Export("lineBreakMode", ArgumentSemantic.Assign)]
    NSLineBreakMode LineBreakMode { get; set; }

    // @property (nonatomic) CGSize titleShadowOffset __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [Export("titleShadowOffset", ArgumentSemantic.Assign)]
    CGSize TitleShadowOffset { get; set; }
}

// @interface SpringLoading (UIButton) <UISpringLoadedInteractionSupporting>
[Category]
[BaseType(typeof(UIButton))]
interface UIButton_SpringLoading : IUISpringLoadedInteractionSupporting
{
}

// @protocol NSTextAttachmentContainer <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface NSTextAttachmentContainer
{
    // @required -(UIImage * _Nullable)imageForBounds:(CGRect)imageBounds textContainer:(NSTextContainer * _Nullable)textContainer characterIndex:(NSUInteger)charIndex __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Abstract]
    [Export("imageForBounds:textContainer:characterIndex:")]
    [return: NullAllowed]
    UIImage ImageForBounds(CGRect imageBounds, [NullAllowed] NSTextContainer textContainer, nuint charIndex);

    // @required -(CGRect)attachmentBoundsForTextContainer:(NSTextContainer * _Nullable)textContainer proposedLineFragment:(CGRect)lineFrag glyphPosition:(CGPoint)position characterIndex:(NSUInteger)charIndex __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Abstract]
    [Export("attachmentBoundsForTextContainer:proposedLineFragment:glyphPosition:characterIndex:")]
    CGRect AttachmentBoundsForTextContainer([NullAllowed] NSTextContainer textContainer, CGRect lineFrag, CGPoint position, nuint charIndex);
}

// @interface NSTextAttachment : NSObject <NSTextAttachmentContainer, NSCoding>
[iOS(7, 0)]
[BaseType(typeof(NSObject))]
interface NSTextAttachment : INSTextAttachmentContainer, INSCoding
{
    // -(instancetype _Nonnull)initWithData:(NSData * _Nullable)contentData ofType:(NSString * _Nullable)uti __attribute__((availability(ios, introduced=7_0))) __attribute__((objc_designated_initializer));
    [iOS(7, 0)]
    [Export("initWithData:ofType:")]
    [DesignatedInitializer]
    IntPtr Constructor([NullAllowed] NSData contentData, [NullAllowed] string uti);

    // @property (copy, nonatomic) NSData * _Nullable contents __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("contents", ArgumentSemantic.Copy)]
    NSData Contents { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable fileType __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("fileType")]
    string FileType { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable image __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("image", ArgumentSemantic.Strong)]
    UIImage Image { get; set; }

    // @property (nonatomic) CGRect bounds __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("bounds", ArgumentSemantic.Assign)]
    CGRect Bounds { get; set; }

    // @property (nonatomic, strong) NSFileWrapper * _Nullable fileWrapper;
    [NullAllowed, Export("fileWrapper", ArgumentSemantic.Strong)]
    NSFileWrapper FileWrapper { get; set; }
}

// @interface NSAttributedStringAttachmentConveniences (NSAttributedString)
[Category]
[BaseType(typeof(NSAttributedString))]
interface NSAttributedString_NSAttributedStringAttachmentConveniences
{
    // +(NSAttributedString * _Nonnull)attributedStringWithAttachment:(NSTextAttachment * _Nonnull)attachment __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Static]
    [Export("attributedStringWithAttachment:")]
    NSAttributedString AttributedStringWithAttachment(NSTextAttachment attachment);
}

// @protocol UIAccessibilityContentSizeCategoryImageAdjusting <NSObject>
[TV(11, 0), iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIAccessibilityContentSizeCategoryImageAdjusting
{
    // @required @property (nonatomic) BOOL adjustsImageSizeForAccessibilityContentSizeCategory;
    [Abstract]
    [Export("adjustsImageSizeForAccessibilityContentSizeCategory")]
    bool AdjustsImageSizeForAccessibilityContentSizeCategory { get; set; }
}

// @interface UIAccessibilityContentSizeCategoryImageAdjusting (UIImageView) <UIAccessibilityContentSizeCategoryImageAdjusting>
[Category]
[BaseType(typeof(UIImageView))]
interface UIImageView_UIAccessibilityContentSizeCategoryImageAdjusting : IUIAccessibilityContentSizeCategoryImageAdjusting
{
}

// @interface UIAccessibilityContentSizeCategoryImageAdjusting (UIButton) <UIAccessibilityContentSizeCategoryImageAdjusting>
[Category]
[BaseType(typeof(UIButton))]
interface UIButton_UIAccessibilityContentSizeCategoryImageAdjusting : IUIAccessibilityContentSizeCategoryImageAdjusting
{
}

// @interface UIAccessibilityContentSizeCategoryImageAdjusting (NSTextAttachment) <UIAccessibilityContentSizeCategoryImageAdjusting>
[Category]
[BaseType(typeof(NSTextAttachment))]
interface NSTextAttachment_UIAccessibilityContentSizeCategoryImageAdjusting : IUIAccessibilityContentSizeCategoryImageAdjusting
{
}

// @interface UIActivityIndicatorView : UIView <NSCoding>
[iOS(2, 0)]
[BaseType(typeof(UIView))]
interface UIActivityIndicatorView : INSCoding
{
    // -(instancetype _Nonnull)initWithActivityIndicatorStyle:(UIActivityIndicatorViewStyle)style __attribute__((objc_designated_initializer));
    [Export("initWithActivityIndicatorStyle:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIActivityIndicatorViewStyle style);

    // -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
    [Export("initWithFrame:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect frame);

    // -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder coder);

    // @property (nonatomic) UIActivityIndicatorViewStyle activityIndicatorViewStyle;
    [Export("activityIndicatorViewStyle", ArgumentSemantic.Assign)]
    UIActivityIndicatorViewStyle ActivityIndicatorViewStyle { get; set; }

    // @property (nonatomic) BOOL hidesWhenStopped;
    [Export("hidesWhenStopped")]
    bool HidesWhenStopped { get; set; }

    // @property (readwrite, nonatomic, strong) UIColor * _Null_unspecified color __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("color", ArgumentSemantic.Strong)]
    UIColor Color { get; set; }

    // -(void)startAnimating;
    [Export("startAnimating")]
    void StartAnimating();

    // -(void)stopAnimating;
    [Export("stopAnimating")]
    void StopAnimating();

    // @property (readonly, getter = isAnimating, nonatomic) BOOL animating;
    [Export("animating")]
    bool Animating { [Bind("isAnimating")] get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UIActivityType _Nonnull UIActivityTypePostToFacebook __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Field("UIActivityTypePostToFacebook", "__Internal")]
    NSString UIActivityTypePostToFacebook { get; }

    // extern const UIActivityType _Nonnull UIActivityTypePostToTwitter __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Field("UIActivityTypePostToTwitter", "__Internal")]
    NSString UIActivityTypePostToTwitter { get; }

    // extern const UIActivityType _Nonnull UIActivityTypePostToWeibo __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Field("UIActivityTypePostToWeibo", "__Internal")]
    NSString UIActivityTypePostToWeibo { get; }

    // extern const UIActivityType _Nonnull UIActivityTypeMessage __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Field("UIActivityTypeMessage", "__Internal")]
    NSString UIActivityTypeMessage { get; }

    // extern const UIActivityType _Nonnull UIActivityTypeMail __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Field("UIActivityTypeMail", "__Internal")]
    NSString UIActivityTypeMail { get; }

    // extern const UIActivityType _Nonnull UIActivityTypePrint __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Field("UIActivityTypePrint", "__Internal")]
    NSString UIActivityTypePrint { get; }

    // extern const UIActivityType _Nonnull UIActivityTypeCopyToPasteboard __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Field("UIActivityTypeCopyToPasteboard", "__Internal")]
    NSString UIActivityTypeCopyToPasteboard { get; }

    // extern const UIActivityType _Nonnull UIActivityTypeAssignToContact __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Field("UIActivityTypeAssignToContact", "__Internal")]
    NSString UIActivityTypeAssignToContact { get; }

    // extern const UIActivityType _Nonnull UIActivityTypeSaveToCameraRoll __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Field("UIActivityTypeSaveToCameraRoll", "__Internal")]
    NSString UIActivityTypeSaveToCameraRoll { get; }

    // extern const UIActivityType _Nonnull UIActivityTypeAddToReadingList __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Field("UIActivityTypeAddToReadingList", "__Internal")]
    NSString UIActivityTypeAddToReadingList { get; }

    // extern const UIActivityType _Nonnull UIActivityTypePostToFlickr __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Field("UIActivityTypePostToFlickr", "__Internal")]
    NSString UIActivityTypePostToFlickr { get; }

    // extern const UIActivityType _Nonnull UIActivityTypePostToVimeo __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Field("UIActivityTypePostToVimeo", "__Internal")]
    NSString UIActivityTypePostToVimeo { get; }

    // extern const UIActivityType _Nonnull UIActivityTypePostToTencentWeibo __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Field("UIActivityTypePostToTencentWeibo", "__Internal")]
    NSString UIActivityTypePostToTencentWeibo { get; }

    // extern const UIActivityType _Nonnull UIActivityTypeAirDrop __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Field("UIActivityTypeAirDrop", "__Internal")]
    NSString UIActivityTypeAirDrop { get; }

    // extern const UIActivityType _Nonnull UIActivityTypeOpenInIBooks __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0)));
    [NoTV, iOS(9, 0)]
    [Field("UIActivityTypeOpenInIBooks", "__Internal")]
    NSString UIActivityTypeOpenInIBooks { get; }

    // extern const UIActivityType _Nonnull UIActivityTypeMarkupAsPDF __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11_0)));
    [NoTV, iOS(11, 0)]
    [Field("UIActivityTypeMarkupAsPDF", "__Internal")]
    NSString UIActivityTypeMarkupAsPDF { get; }
}

// @interface UIActivity : NSObject
[NoTV, iOS(6, 0)]
[BaseType(typeof(NSObject))]
interface UIActivity
{
    // @property (readonly, nonatomic, class) UIActivityCategory activityCategory __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Static]
    [Export("activityCategory")]
    UIActivityCategory ActivityCategory { get; }

    // @property (readonly, nonatomic) UIActivityType _Nullable activityType;
    [NullAllowed, Export("activityType")]
    string ActivityType { get; }

    // @property (readonly, nonatomic) NSString * _Nullable activityTitle;
    [NullAllowed, Export("activityTitle")]
    string ActivityTitle { get; }

    // @property (readonly, nonatomic) UIImage * _Nullable activityImage;
    [NullAllowed, Export("activityImage")]
    UIImage ActivityImage { get; }

    // -(BOOL)canPerformWithActivityItems:(NSArray * _Nonnull)activityItems;
    [Export("canPerformWithActivityItems:")]
    [Verify(StronglyTypedNSArray)]
    bool CanPerformWithActivityItems(NSObject[] activityItems);

    // -(void)prepareWithActivityItems:(NSArray * _Nonnull)activityItems;
    [Export("prepareWithActivityItems:")]
    [Verify(StronglyTypedNSArray)]
    void PrepareWithActivityItems(NSObject[] activityItems);

    // @property (readonly, nonatomic) UIViewController * _Nullable activityViewController;
    [NullAllowed, Export("activityViewController")]
    UIViewController ActivityViewController { get; }

    // -(void)performActivity;
    [Export("performActivity")]
    void PerformActivity();

    // -(void)activityDidFinish:(BOOL)completed;
    [Export("activityDidFinish:")]
    void ActivityDidFinish(bool completed);
}

// @protocol UIActivityItemSource <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIActivityItemSource
{
    // @required -(id _Nonnull)activityViewControllerPlaceholderItem:(UIActivityViewController * _Nonnull)activityViewController;
    [Abstract]
    [Export("activityViewControllerPlaceholderItem:")]
    NSObject ActivityViewControllerPlaceholderItem(UIActivityViewController activityViewController);

    // @required -(id _Nullable)activityViewController:(UIActivityViewController * _Nonnull)activityViewController itemForActivityType:(UIActivityType _Nullable)activityType;
    [Abstract]
    [Export("activityViewController:itemForActivityType:")]
    [return: NullAllowed]
    NSObject ActivityViewController(UIActivityViewController activityViewController, [NullAllowed] string activityType);

    // @optional -(NSString * _Nonnull)activityViewController:(UIActivityViewController * _Nonnull)activityViewController subjectForActivityType:(UIActivityType _Nullable)activityType;
    [Export("activityViewController:subjectForActivityType:")]
    string ActivityViewController(UIActivityViewController activityViewController, [NullAllowed] string activityType);

    // @optional -(NSString * _Nonnull)activityViewController:(UIActivityViewController * _Nonnull)activityViewController dataTypeIdentifierForActivityType:(UIActivityType _Nullable)activityType;
    [Export("activityViewController:dataTypeIdentifierForActivityType:")]
    string ActivityViewController(UIActivityViewController activityViewController, [NullAllowed] string activityType);

    // @optional -(UIImage * _Nullable)activityViewController:(UIActivityViewController * _Nonnull)activityViewController thumbnailImageForActivityType:(UIActivityType _Nullable)activityType suggestedSize:(CGSize)size;
    [Export("activityViewController:thumbnailImageForActivityType:suggestedSize:")]
    [return: NullAllowed]
    UIImage ActivityViewController(UIActivityViewController activityViewController, [NullAllowed] string activityType, CGSize size);
}

// @interface UIActivityItemProvider : NSOperation <UIActivityItemSource>
[NoTV, iOS(6, 0)]
[BaseType(typeof(NSOperation))]
[DisableDefaultCtor]
interface UIActivityItemProvider : IUIActivityItemSource
{
    // -(instancetype _Nonnull)initWithPlaceholderItem:(id _Nonnull)placeholderItem __attribute__((objc_designated_initializer));
    [Export("initWithPlaceholderItem:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSObject placeholderItem);

    // @property (readonly, nonatomic, strong) id _Nullable placeholderItem;
    [NullAllowed, Export("placeholderItem", ArgumentSemantic.Strong)]
    NSObject PlaceholderItem { get; }

    // @property (readonly, copy, nonatomic) UIActivityType _Nullable activityType;
    [NullAllowed, Export("activityType")]
    string ActivityType { get; }

    // @property (readonly, nonatomic) id _Nonnull item;
    [Export("item")]
    NSObject Item { get; }
}

// @protocol UIInteraction <NSObject>
[Watch(5, 0), NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIInteraction
{
    // @required @property (readonly, nonatomic, weak) __kindof UIView * _Nullable view;
    [Abstract]
    [Export("view", ArgumentSemantic.Weak)]
    UIView View { get; }

    // @required -(void)willMoveToView:(UIView * _Nullable)view;
    [Abstract]
    [Export("willMoveToView:")]
    void WillMoveToView([NullAllowed] UIView view);

    // @required -(void)didMoveToView:(UIView * _Nullable)view;
    [Abstract]
    [Export("didMoveToView:")]
    void DidMoveToView([NullAllowed] UIView view);
}

// @interface Interactions (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_Interactions
{
    // -(void)addInteraction:(id<UIInteraction> _Nonnull)interaction __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=11.0)));
    [Watch(5, 0), NoTV, iOS(11, 0)]
    [Export("addInteraction:")]
    void AddInteraction(UIInteraction interaction);

    // -(void)removeInteraction:(id<UIInteraction> _Nonnull)interaction __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=11.0)));
    [Watch(5, 0), NoTV, iOS(11, 0)]
    [Export("removeInteraction:")]
    void RemoveInteraction(UIInteraction interaction);

    // @property (copy, nonatomic) NSArray<id<UIInteraction>> * _Nonnull interactions __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=11.0)));
    [Watch(5, 0), NoTV, iOS(11, 0)]
    [Export("interactions", ArgumentSemantic.Copy)]
    UIInteraction[] Interactions { get; set; }
}

// @interface UIDropInteraction : NSObject <UIInteraction>
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIDropInteraction : IUIInteraction
{
    // -(instancetype _Nonnull)initWithDelegate:(id<UIDropInteractionDelegate> _Nonnull)delegate __attribute__((objc_designated_initializer));
    [Export("initWithDelegate:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIDropInteractionDelegate @delegate);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIDropInteractionDelegate Delegate { get; }

    // @property (readonly, nonatomic, weak) id<UIDropInteractionDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; }

    // @property (assign, nonatomic) BOOL allowsSimultaneousDropSessions;
    [Export("allowsSimultaneousDropSessions")]
    bool AllowsSimultaneousDropSessions { get; set; }
}

// @interface UIDropProposal : NSObject <NSCopying>
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIDropProposal : INSCopying
{
    // -(instancetype _Nonnull)initWithDropOperation:(UIDropOperation)operation __attribute__((objc_designated_initializer));
    [Export("initWithDropOperation:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIDropOperation operation);

    // @property (readonly, nonatomic) UIDropOperation operation;
    [Export("operation")]
    UIDropOperation Operation { get; }

    // @property (getter = isPrecise, nonatomic) BOOL precise;
    [Export("precise")]
    bool Precise { [Bind("isPrecise")] get; set; }

    // @property (nonatomic) BOOL prefersFullSizePreview;
    [Export("prefersFullSizePreview")]
    bool PrefersFullSizePreview { get; set; }
}

// @protocol UIDropInteractionDelegate <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIDropInteractionDelegate
{
    // @optional -(BOOL)dropInteraction:(UIDropInteraction * _Nonnull)interaction canHandleSession:(id<UIDropSession> _Nonnull)session;
    [Export("dropInteraction:canHandleSession:")]
    bool DropInteraction(UIDropInteraction interaction, UIDropSession session);

    // @optional -(void)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidEnter:(id<UIDropSession> _Nonnull)session;
    [Export("dropInteraction:sessionDidEnter:")]
    void DropInteraction(UIDropInteraction interaction, UIDropSession session);

    // @optional -(UIDropProposal * _Nonnull)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidUpdate:(id<UIDropSession> _Nonnull)session;
    [Export("dropInteraction:sessionDidUpdate:")]
    UIDropProposal DropInteraction(UIDropInteraction interaction, UIDropSession session);

    // @optional -(void)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidExit:(id<UIDropSession> _Nonnull)session;
    [Export("dropInteraction:sessionDidExit:")]
    void DropInteraction(UIDropInteraction interaction, UIDropSession session);

    // @optional -(void)dropInteraction:(UIDropInteraction * _Nonnull)interaction performDrop:(id<UIDropSession> _Nonnull)session;
    [Export("dropInteraction:performDrop:")]
    void DropInteraction(UIDropInteraction interaction, UIDropSession session);

    // @optional -(void)dropInteraction:(UIDropInteraction * _Nonnull)interaction concludeDrop:(id<UIDropSession> _Nonnull)session;
    [Export("dropInteraction:concludeDrop:")]
    void DropInteraction(UIDropInteraction interaction, UIDropSession session);

    // @optional -(void)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidEnd:(id<UIDropSession> _Nonnull)session;
    [Export("dropInteraction:sessionDidEnd:")]
    void DropInteraction(UIDropInteraction interaction, UIDropSession session);

    // @optional -(UITargetedDragPreview * _Nullable)dropInteraction:(UIDropInteraction * _Nonnull)interaction previewForDroppingItem:(UIDragItem * _Nonnull)item withDefault:(UITargetedDragPreview * _Nonnull)defaultPreview;
    [Export("dropInteraction:previewForDroppingItem:withDefault:")]
    [return: NullAllowed]
    UITargetedDragPreview DropInteraction(UIDropInteraction interaction, UIDragItem item, UITargetedDragPreview defaultPreview);

    // @optional -(void)dropInteraction:(UIDropInteraction * _Nonnull)interaction item:(UIDragItem * _Nonnull)item willAnimateDropWithAnimator:(id<UIDragAnimating> _Nonnull)animator;
    [Export("dropInteraction:item:willAnimateDropWithAnimator:")]
    void DropInteraction(UIDropInteraction interaction, UIDragItem item, UIDragAnimating animator);
}

// @protocol UIViewAnimating <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIViewAnimating
{
    // @required @property (readonly, nonatomic) UIViewAnimatingState state;
    [Abstract]
    [Export("state")]
    UIViewAnimatingState State { get; }

    // @required @property (readonly, getter = isRunning, nonatomic) BOOL running;
    [Abstract]
    [Export("running")]
    bool Running { [Bind("isRunning")] get; }

    // @required @property (getter = isReversed, nonatomic) BOOL reversed;
    [Abstract]
    [Export("reversed")]
    bool Reversed { [Bind("isReversed")] get; set; }

    // @required @property (nonatomic) CGFloat fractionComplete;
    [Abstract]
    [Export("fractionComplete")]
    nfloat FractionComplete { get; set; }

    // @required -(void)startAnimation;
    [Abstract]
    [Export("startAnimation")]
    void StartAnimation();

    // @required -(void)startAnimationAfterDelay:(NSTimeInterval)delay;
    [Abstract]
    [Export("startAnimationAfterDelay:")]
    void StartAnimationAfterDelay(double delay);

    // @required -(void)pauseAnimation;
    [Abstract]
    [Export("pauseAnimation")]
    void PauseAnimation();

    // @required -(void)stopAnimation:(BOOL)withoutFinishing;
    [Abstract]
    [Export("stopAnimation:")]
    void StopAnimation(bool withoutFinishing);

    // @required -(void)finishAnimationAtPosition:(UIViewAnimatingPosition)finalPosition;
    [Abstract]
    [Export("finishAnimationAtPosition:")]
    void FinishAnimationAtPosition(UIViewAnimatingPosition finalPosition);
}

// @protocol UIViewImplicitlyAnimating <UIViewAnimating>
[Protocol, Model]
interface UIViewImplicitlyAnimating : IUIViewAnimating
{
    // @optional -(void)addAnimations:(void (^ _Nonnull)(void))animation delayFactor:(CGFloat)delayFactor;
    [Export("addAnimations:delayFactor:")]
    void AddAnimations(Action animation, nfloat delayFactor);

    // @optional -(void)addAnimations:(void (^ _Nonnull)(void))animation;
    [Export("addAnimations:")]
    void AddAnimations(Action animation);

    // @optional -(void)addCompletion:(void (^ _Nonnull)(UIViewAnimatingPosition))completion;
    [Export("addCompletion:")]
    void AddCompletion(Action<UIViewAnimatingPosition> completion);

    // @optional -(void)continueAnimationWithTimingParameters:(id<UITimingCurveProvider> _Nullable)parameters durationFactor:(CGFloat)durationFactor;
    [Export("continueAnimationWithTimingParameters:durationFactor:")]
    void ContinueAnimationWithTimingParameters([NullAllowed] UITimingCurveProvider parameters, nfloat durationFactor);
}

// @protocol UIDragAnimating <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIDragAnimating
{
    // @required -(void)addAnimations:(void (^ _Nonnull)(void))animations;
    [Abstract]
    [Export("addAnimations:")]
    void AddAnimations(Action animations);

    // @required -(void)addCompletion:(void (^ _Nonnull)(UIViewAnimatingPosition))completion;
    [Abstract]
    [Export("addCompletion:")]
    void AddCompletion(Action<UIViewAnimatingPosition> completion);
}

// @interface UIDragInteraction : NSObject <UIInteraction>
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIDragInteraction : IUIInteraction
{
    // -(instancetype _Nonnull)initWithDelegate:(id<UIDragInteractionDelegate> _Nonnull)delegate __attribute__((objc_designated_initializer));
    [Export("initWithDelegate:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIDragInteractionDelegate @delegate);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIDragInteractionDelegate Delegate { get; }

    // @property (readonly, nonatomic, weak) id<UIDragInteractionDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; }

    // @property (nonatomic) BOOL allowsSimultaneousRecognitionDuringLift;
    [Export("allowsSimultaneousRecognitionDuringLift")]
    bool AllowsSimultaneousRecognitionDuringLift { get; set; }

    // @property (getter = isEnabled, nonatomic) BOOL enabled;
    [Export("enabled")]
    bool Enabled { [Bind("isEnabled")] get; set; }

    // @property (readonly, getter = isEnabledByDefault, nonatomic, class) BOOL enabledByDefault;
    [Static]
    [Export("enabledByDefault")]
    bool EnabledByDefault { [Bind("isEnabledByDefault")] get; }
}

// @protocol UIDragInteractionDelegate <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIDragInteractionDelegate
{
    // @required -(NSArray<UIDragItem *> * _Nonnull)dragInteraction:(UIDragInteraction * _Nonnull)interaction itemsForBeginningSession:(id<UIDragSession> _Nonnull)session;
    [Abstract]
    [Export("dragInteraction:itemsForBeginningSession:")]
    UIDragItem[] DragInteraction(UIDragInteraction interaction, UIDragSession session);

    // @optional -(UITargetedDragPreview * _Nullable)dragInteraction:(UIDragInteraction * _Nonnull)interaction previewForLiftingItem:(UIDragItem * _Nonnull)item session:(id<UIDragSession> _Nonnull)session;
    [Export("dragInteraction:previewForLiftingItem:session:")]
    [return: NullAllowed]
    UITargetedDragPreview DragInteraction(UIDragInteraction interaction, UIDragItem item, UIDragSession session);

    // @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction willAnimateLiftWithAnimator:(id<UIDragAnimating> _Nonnull)animator session:(id<UIDragSession> _Nonnull)session;
    [Export("dragInteraction:willAnimateLiftWithAnimator:session:")]
    void DragInteraction(UIDragInteraction interaction, UIDragAnimating animator, UIDragSession session);

    // @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction sessionWillBegin:(id<UIDragSession> _Nonnull)session;
    [Export("dragInteraction:sessionWillBegin:")]
    void DragInteraction(UIDragInteraction interaction, UIDragSession session);

    // @optional -(BOOL)dragInteraction:(UIDragInteraction * _Nonnull)interaction sessionAllowsMoveOperation:(id<UIDragSession> _Nonnull)session;
    [Export("dragInteraction:sessionAllowsMoveOperation:")]
    bool DragInteraction(UIDragInteraction interaction, UIDragSession session);

    // @optional -(BOOL)dragInteraction:(UIDragInteraction * _Nonnull)interaction sessionIsRestrictedToDraggingApplication:(id<UIDragSession> _Nonnull)session;
    [Export("dragInteraction:sessionIsRestrictedToDraggingApplication:")]
    bool DragInteraction(UIDragInteraction interaction, UIDragSession session);

    // @optional -(BOOL)dragInteraction:(UIDragInteraction * _Nonnull)interaction prefersFullSizePreviewsForSession:(id<UIDragSession> _Nonnull)session;
    [Export("dragInteraction:prefersFullSizePreviewsForSession:")]
    bool DragInteraction(UIDragInteraction interaction, UIDragSession session);

    // @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction sessionDidMove:(id<UIDragSession> _Nonnull)session;
    [Export("dragInteraction:sessionDidMove:")]
    void DragInteraction(UIDragInteraction interaction, UIDragSession session);

    // @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction session:(id<UIDragSession> _Nonnull)session willEndWithOperation:(UIDropOperation)operation;
    [Export("dragInteraction:session:willEndWithOperation:")]
    void DragInteraction(UIDragInteraction interaction, UIDragSession session, UIDropOperation operation);

    // @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction session:(id<UIDragSession> _Nonnull)session didEndWithOperation:(UIDropOperation)operation;
    [Export("dragInteraction:session:didEndWithOperation:")]
    void DragInteraction(UIDragInteraction interaction, UIDragSession session, UIDropOperation operation);

    // @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction sessionDidTransferItems:(id<UIDragSession> _Nonnull)session;
    [Export("dragInteraction:sessionDidTransferItems:")]
    void DragInteraction(UIDragInteraction interaction, UIDragSession session);

    // @optional -(NSArray<UIDragItem *> * _Nonnull)dragInteraction:(UIDragInteraction * _Nonnull)interaction itemsForAddingToSession:(id<UIDragSession> _Nonnull)session withTouchAtPoint:(CGPoint)point;
    [Export("dragInteraction:itemsForAddingToSession:withTouchAtPoint:")]
    UIDragItem[] DragInteraction(UIDragInteraction interaction, UIDragSession session, CGPoint point);

    // @optional -(id<UIDragSession> _Nullable)dragInteraction:(UIDragInteraction * _Nonnull)interaction sessionForAddingItems:(NSArray<id<UIDragSession>> * _Nonnull)sessions withTouchAtPoint:(CGPoint)point;
    [Export("dragInteraction:sessionForAddingItems:withTouchAtPoint:")]
    [return: NullAllowed]
    UIDragSession DragInteraction(UIDragInteraction interaction, UIDragSession[] sessions, CGPoint point);

    // @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction session:(id<UIDragSession> _Nonnull)session willAddItems:(NSArray<UIDragItem *> * _Nonnull)items forInteraction:(UIDragInteraction * _Nonnull)addingInteraction;
    [Export("dragInteraction:session:willAddItems:forInteraction:")]
    void DragInteraction(UIDragInteraction interaction, UIDragSession session, UIDragItem[] items, UIDragInteraction addingInteraction);

    // @optional -(UITargetedDragPreview * _Nullable)dragInteraction:(UIDragInteraction * _Nonnull)interaction previewForCancellingItem:(UIDragItem * _Nonnull)item withDefault:(UITargetedDragPreview * _Nonnull)defaultPreview;
    [Export("dragInteraction:previewForCancellingItem:withDefault:")]
    [return: NullAllowed]
    UITargetedDragPreview DragInteraction(UIDragInteraction interaction, UIDragItem item, UITargetedDragPreview defaultPreview);

    // @optional -(void)dragInteraction:(UIDragInteraction * _Nonnull)interaction item:(UIDragItem * _Nonnull)item willAnimateCancelWithAnimator:(id<UIDragAnimating> _Nonnull)animator;
    [Export("dragInteraction:item:willAnimateCancelWithAnimator:")]
    void DragInteraction(UIDragInteraction interaction, UIDragItem item, UIDragAnimating animator);
}

// @protocol UITextDraggable <UITextInput>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
interface UITextDraggable : IUITextInput
{
    [Wrap("WeakTextDragDelegate"), Abstract]
    [NullAllowed]
    UITextDragDelegate TextDragDelegate { get; set; }

    // @required @property (nonatomic, weak) id<UITextDragDelegate> _Nullable textDragDelegate;
    [Abstract]
    [NullAllowed, Export("textDragDelegate", ArgumentSemantic.Weak)]
    NSObject WeakTextDragDelegate { get; set; }

    // @required @property (readonly, nonatomic) UIDragInteraction * _Nullable textDragInteraction;
    [Abstract]
    [NullAllowed, Export("textDragInteraction")]
    UIDragInteraction TextDragInteraction { get; }

    // @required @property (readonly, getter = isTextDragActive, nonatomic) BOOL textDragActive;
    [Abstract]
    [Export("textDragActive")]
    bool TextDragActive { [Bind("isTextDragActive")] get; }

    // @required @property (nonatomic) UITextDragOptions textDragOptions;
    [Abstract]
    [Export("textDragOptions", ArgumentSemantic.Assign)]
    UITextDragOptions TextDragOptions { get; set; }
}

// @protocol UITextDragDelegate <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITextDragDelegate
{
    // @optional -(NSArray<UIDragItem *> * _Nonnull)textDraggableView:(UIView<UITextDraggable> * _Nonnull)textDraggableView itemsForDrag:(id<UITextDragRequest> _Nonnull)dragRequest;
    [Export("textDraggableView:itemsForDrag:")]
    UIDragItem[] TextDraggableView(UITextDraggable textDraggableView, UITextDragRequest dragRequest);

    // @optional -(UITargetedDragPreview * _Nullable)textDraggableView:(UIView<UITextDraggable> * _Nonnull)textDraggableView dragPreviewForLiftingItem:(UIDragItem * _Nonnull)item session:(id<UIDragSession> _Nonnull)session;
    [Export("textDraggableView:dragPreviewForLiftingItem:session:")]
    [return: NullAllowed]
    UITargetedDragPreview TextDraggableView(UITextDraggable textDraggableView, UIDragItem item, UIDragSession session);

    // @optional -(void)textDraggableView:(UIView<UITextDraggable> * _Nonnull)textDraggableView willAnimateLiftWithAnimator:(id<UIDragAnimating> _Nonnull)animator session:(id<UIDragSession> _Nonnull)session;
    [Export("textDraggableView:willAnimateLiftWithAnimator:session:")]
    void TextDraggableView(UITextDraggable textDraggableView, UIDragAnimating animator, UIDragSession session);

    // @optional -(void)textDraggableView:(UIView<UITextDraggable> * _Nonnull)textDraggableView dragSessionWillBegin:(id<UIDragSession> _Nonnull)session;
    [Export("textDraggableView:dragSessionWillBegin:")]
    void TextDraggableView(UITextDraggable textDraggableView, UIDragSession session);

    // @optional -(void)textDraggableView:(UIView<UITextDraggable> * _Nonnull)textDraggableView dragSessionDidEnd:(id<UIDragSession> _Nonnull)session withOperation:(UIDropOperation)operation;
    [Export("textDraggableView:dragSessionDidEnd:withOperation:")]
    void TextDraggableView(UITextDraggable textDraggableView, UIDragSession session, UIDropOperation operation);
}

// @protocol UITextDragRequest <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITextDragRequest
{
    // @required @property (readonly, nonatomic) UITextRange * _Nonnull dragRange;
    [Abstract]
    [Export("dragRange")]
    UITextRange DragRange { get; }

    // @required @property (readonly, nonatomic) NSArray<UIDragItem *> * _Nonnull suggestedItems;
    [Abstract]
    [Export("suggestedItems")]
    UIDragItem[] SuggestedItems { get; }

    // @required @property (readonly, nonatomic) NSArray<UIDragItem *> * _Nonnull existingItems;
    [Abstract]
    [Export("existingItems")]
    UIDragItem[] ExistingItems { get; }

    // @required @property (readonly, getter = isSelected, nonatomic) BOOL selected;
    [Abstract]
    [Export("selected")]
    bool Selected { [Bind("isSelected")] get; }

    // @required @property (readonly, nonatomic) id<UIDragSession> _Nonnull dragSession;
    [Abstract]
    [Export("dragSession")]
    UIDragSession DragSession { get; }
}

// @interface UITextDropProposal : UIDropProposal <NSCopying>
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(UIDropProposal))]
interface UITextDropProposal : INSCopying
{
    // @property (nonatomic) UITextDropAction dropAction;
    [Export("dropAction", ArgumentSemantic.Assign)]
    UITextDropAction DropAction { get; set; }

    // @property (nonatomic) UITextDropProgressMode dropProgressMode;
    [Export("dropProgressMode", ArgumentSemantic.Assign)]
    UITextDropProgressMode DropProgressMode { get; set; }

    // @property (nonatomic) BOOL useFastSameViewOperations;
    [Export("useFastSameViewOperations")]
    bool UseFastSameViewOperations { get; set; }

    // @property (nonatomic) UITextDropPerformer dropPerformer;
    [Export("dropPerformer", ArgumentSemantic.Assign)]
    UITextDropPerformer DropPerformer { get; set; }
}

// @interface UIPasteConfiguration : NSObject <NSSecureCoding, NSCopying>
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
interface UIPasteConfiguration : INSSecureCoding, INSCopying
{
    // @property (copy, nonatomic) NSArray<NSString *> * _Nonnull acceptableTypeIdentifiers;
    [Export("acceptableTypeIdentifiers", ArgumentSemantic.Copy)]
    string[] AcceptableTypeIdentifiers { get; set; }

    // -(instancetype _Nonnull)initWithAcceptableTypeIdentifiers:(NSArray<NSString *> * _Nonnull)acceptableTypeIdentifiers;
    [Export("initWithAcceptableTypeIdentifiers:")]
    IntPtr Constructor(string[] acceptableTypeIdentifiers);

    // -(void)addAcceptableTypeIdentifiers:(NSArray<NSString *> * _Nonnull)acceptableTypeIdentifiers;
    [Export("addAcceptableTypeIdentifiers:")]
    void AddAcceptableTypeIdentifiers(string[] acceptableTypeIdentifiers);

    // -(instancetype _Nonnull)initWithTypeIdentifiersForAcceptingClass:(Class<NSItemProviderReading> _Nonnull)aClass;
    [Export("initWithTypeIdentifiersForAcceptingClass:")]
    IntPtr Constructor(NSItemProviderReading aClass);

    // -(void)addTypeIdentifiersForAcceptingClass:(Class<NSItemProviderReading> _Nonnull)aClass;
    [Export("addTypeIdentifiersForAcceptingClass:")]
    void AddTypeIdentifiersForAcceptingClass(NSItemProviderReading aClass);
}

// @protocol UITextPasteDelegate <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITextPasteDelegate
{
    // @optional -(void)textPasteConfigurationSupporting:(id<UITextPasteConfigurationSupporting> _Nonnull)textPasteConfigurationSupporting transformPasteItem:(id<UITextPasteItem> _Nonnull)item;
    [Export("textPasteConfigurationSupporting:transformPasteItem:")]
    void TextPasteConfigurationSupporting(UITextPasteConfigurationSupporting textPasteConfigurationSupporting, UITextPasteItem item);

    // @optional -(NSAttributedString * _Nonnull)textPasteConfigurationSupporting:(id<UITextPasteConfigurationSupporting> _Nonnull)textPasteConfigurationSupporting combineItemAttributedStrings:(NSArray<NSAttributedString *> * _Nonnull)itemStrings forRange:(UITextRange * _Nonnull)textRange;
    [Export("textPasteConfigurationSupporting:combineItemAttributedStrings:forRange:")]
    NSAttributedString TextPasteConfigurationSupporting(UITextPasteConfigurationSupporting textPasteConfigurationSupporting, NSAttributedString[] itemStrings, UITextRange textRange);

    // @optional -(UITextRange * _Nonnull)textPasteConfigurationSupporting:(id<UITextPasteConfigurationSupporting> _Nonnull)textPasteConfigurationSupporting performPasteOfAttributedString:(NSAttributedString * _Nonnull)attributedString toRange:(UITextRange * _Nonnull)textRange;
    [Export("textPasteConfigurationSupporting:performPasteOfAttributedString:toRange:")]
    UITextRange TextPasteConfigurationSupporting(UITextPasteConfigurationSupporting textPasteConfigurationSupporting, NSAttributedString attributedString, UITextRange textRange);

    // @optional -(BOOL)textPasteConfigurationSupporting:(id<UITextPasteConfigurationSupporting> _Nonnull)textPasteConfigurationSupporting shouldAnimatePasteOfAttributedString:(NSAttributedString * _Nonnull)attributedString toRange:(UITextRange * _Nonnull)textRange;
    [Export("textPasteConfigurationSupporting:shouldAnimatePasteOfAttributedString:toRange:")]
    bool TextPasteConfigurationSupporting(UITextPasteConfigurationSupporting textPasteConfigurationSupporting, NSAttributedString attributedString, UITextRange textRange);
}

// @protocol UITextPasteItem <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITextPasteItem
{
    // @required @property (readonly, nonatomic) __kindof NSItemProvider * _Nonnull itemProvider;
    [Abstract]
    [Export("itemProvider")]
    NSItemProvider ItemProvider { get; }

    // @required @property (readonly, nonatomic) id _Nullable localObject;
    [Abstract]
    [NullAllowed, Export("localObject")]
    NSObject LocalObject { get; }

    // @required @property (readonly, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nonnull defaultAttributes;
    [Abstract]
    [Export("defaultAttributes")]
    NSDictionary<NSString, NSObject> DefaultAttributes { get; }

    // @required -(void)setStringResult:(NSString * _Nonnull)string;
    [Abstract]
    [Export("setStringResult:")]
    void SetStringResult(string @string);

    // @required -(void)setAttributedStringResult:(NSAttributedString * _Nonnull)string;
    [Abstract]
    [Export("setAttributedStringResult:")]
    void SetAttributedStringResult(NSAttributedString @string);

    // @required -(void)setAttachmentResult:(NSTextAttachment * _Nonnull)textAttachment;
    [Abstract]
    [Export("setAttachmentResult:")]
    void SetAttachmentResult(NSTextAttachment textAttachment);

    // @required -(void)setNoResult;
    [Abstract]
    [Export("setNoResult")]
    void SetNoResult();

    // @required -(void)setDefaultResult;
    [Abstract]
    [Export("setDefaultResult")]
    void SetDefaultResult();
}

// @protocol UITextPasteConfigurationSupporting <UIPasteConfigurationSupporting>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
interface UITextPasteConfigurationSupporting : IUIPasteConfigurationSupporting
{
    [Wrap("WeakPasteDelegate"), Abstract]
    [NullAllowed]
    UITextPasteDelegate PasteDelegate { get; set; }

    // @required @property (nonatomic, weak) id<UITextPasteDelegate> _Nullable pasteDelegate;
    [Abstract]
    [NullAllowed, Export("pasteDelegate", ArgumentSemantic.Weak)]
    NSObject WeakPasteDelegate { get; set; }
}

// @protocol UITextDroppable <UITextInput, UITextPasteConfigurationSupporting>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
interface UITextDroppable : IUITextInput, IUITextPasteConfigurationSupporting
{
    [Wrap("WeakTextDropDelegate"), Abstract]
    [NullAllowed]
    UITextDropDelegate TextDropDelegate { get; set; }

    // @required @property (nonatomic, weak) id<UITextDropDelegate> _Nullable textDropDelegate;
    [Abstract]
    [NullAllowed, Export("textDropDelegate", ArgumentSemantic.Weak)]
    NSObject WeakTextDropDelegate { get; set; }

    // @required @property (readonly, nonatomic) UIDropInteraction * _Nullable textDropInteraction;
    [Abstract]
    [NullAllowed, Export("textDropInteraction")]
    UIDropInteraction TextDropInteraction { get; }

    // @required @property (readonly, getter = isTextDropActive, nonatomic) _Bool textDropActive;
    [Abstract]
    [Export("textDropActive")]
    bool TextDropActive { [Bind("isTextDropActive")] get; }
}

// @protocol UITextDropDelegate <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITextDropDelegate
{
    // @optional -(UITextDropEditability)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView willBecomeEditableForDrop:(id<UITextDropRequest> _Nonnull)drop;
    [Export("textDroppableView:willBecomeEditableForDrop:")]
    UITextDropEditability TextDroppableView(UITextDroppable textDroppableView, UITextDropRequest drop);

    // @optional -(UITextDropProposal * _Nonnull)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView proposalForDrop:(id<UITextDropRequest> _Nonnull)drop;
    [Export("textDroppableView:proposalForDrop:")]
    UITextDropProposal TextDroppableView(UITextDroppable textDroppableView, UITextDropRequest drop);

    // @optional -(void)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView willPerformDrop:(id<UITextDropRequest> _Nonnull)drop;
    [Export("textDroppableView:willPerformDrop:")]
    void TextDroppableView(UITextDroppable textDroppableView, UITextDropRequest drop);

    // @optional -(UITargetedDragPreview * _Nullable)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView previewForDroppingAllItemsWithDefault:(UITargetedDragPreview * _Nonnull)defaultPreview;
    [Export("textDroppableView:previewForDroppingAllItemsWithDefault:")]
    [return: NullAllowed]
    UITargetedDragPreview TextDroppableView(UITextDroppable textDroppableView, UITargetedDragPreview defaultPreview);

    // @optional -(void)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView dropSessionDidEnter:(id<UIDropSession> _Nonnull)session;
    [Export("textDroppableView:dropSessionDidEnter:")]
    void TextDroppableView(UITextDroppable textDroppableView, UIDropSession session);

    // @optional -(void)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView dropSessionDidUpdate:(id<UIDropSession> _Nonnull)session;
    [Export("textDroppableView:dropSessionDidUpdate:")]
    void TextDroppableView(UITextDroppable textDroppableView, UIDropSession session);

    // @optional -(void)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView dropSessionDidExit:(id<UIDropSession> _Nonnull)session;
    [Export("textDroppableView:dropSessionDidExit:")]
    void TextDroppableView(UITextDroppable textDroppableView, UIDropSession session);

    // @optional -(void)textDroppableView:(UIView<UITextDroppable> * _Nonnull)textDroppableView dropSessionDidEnd:(id<UIDropSession> _Nonnull)session;
    [Export("textDroppableView:dropSessionDidEnd:")]
    void TextDroppableView(UITextDroppable textDroppableView, UIDropSession session);
}

// @protocol UITextDropRequest <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITextDropRequest
{
    // @required @property (readonly, nonatomic) UITextPosition * _Nonnull dropPosition;
    [Abstract]
    [Export("dropPosition")]
    UITextPosition DropPosition { get; }

    // @required @property (readonly, nonatomic) UITextDropProposal * _Nonnull suggestedProposal;
    [Abstract]
    [Export("suggestedProposal")]
    UITextDropProposal SuggestedProposal { get; }

    // @required @property (readonly, getter = isSameView, nonatomic) BOOL sameView;
    [Abstract]
    [Export("sameView")]
    bool SameView { [Bind("isSameView")] get; }

    // @required @property (readonly, nonatomic) id<UIDropSession> _Nonnull dropSession;
    [Abstract]
    [Export("dropSession")]
    UIDropSession DropSession { get; }
}

// @protocol UIContentSizeCategoryAdjusting <NSObject>
[iOS(10, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIContentSizeCategoryAdjusting
{
    // @required @property (nonatomic) BOOL adjustsFontForContentSizeCategory;
    [Abstract]
    [Export("adjustsFontForContentSizeCategory")]
    bool AdjustsFontForContentSizeCategory { get; set; }
}

// @interface UITextField : UIControl <UITextInput, NSCoding, UIContentSizeCategoryAdjusting>
[iOS(2, 0)]
[BaseType(typeof(UIControl))]
interface UITextField : IUITextInput, INSCoding, IUIContentSizeCategoryAdjusting
{
    // @property (copy, nonatomic) NSString * _Nullable text;
    [NullAllowed, Export("text")]
    string Text { get; set; }

    // @property (copy, nonatomic) NSAttributedString * _Nullable attributedText __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("attributedText", ArgumentSemantic.Copy)]
    NSAttributedString AttributedText { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable textColor;
    [NullAllowed, Export("textColor", ArgumentSemantic.Strong)]
    UIColor TextColor { get; set; }

    // @property (nonatomic, strong) UIFont * _Nullable font;
    [NullAllowed, Export("font", ArgumentSemantic.Strong)]
    UIFont Font { get; set; }

    // @property (nonatomic) NSTextAlignment textAlignment;
    [Export("textAlignment", ArgumentSemantic.Assign)]
    NSTextAlignment TextAlignment { get; set; }

    // @property (nonatomic) UITextBorderStyle borderStyle;
    [Export("borderStyle", ArgumentSemantic.Assign)]
    UITextBorderStyle BorderStyle { get; set; }

    // @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nonnull defaultTextAttributes __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("defaultTextAttributes", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> DefaultTextAttributes { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable placeholder;
    [NullAllowed, Export("placeholder")]
    string Placeholder { get; set; }

    // @property (copy, nonatomic) NSAttributedString * _Nullable attributedPlaceholder __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("attributedPlaceholder", ArgumentSemantic.Copy)]
    NSAttributedString AttributedPlaceholder { get; set; }

    // @property (nonatomic) BOOL clearsOnBeginEditing;
    [Export("clearsOnBeginEditing")]
    bool ClearsOnBeginEditing { get; set; }

    // @property (nonatomic) BOOL adjustsFontSizeToFitWidth;
    [Export("adjustsFontSizeToFitWidth")]
    bool AdjustsFontSizeToFitWidth { get; set; }

    // @property (nonatomic) CGFloat minimumFontSize;
    [Export("minimumFontSize")]
    nfloat MinimumFontSize { get; set; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UITextFieldDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UITextFieldDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable background;
    [NullAllowed, Export("background", ArgumentSemantic.Strong)]
    UIImage Background { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable disabledBackground;
    [NullAllowed, Export("disabledBackground", ArgumentSemantic.Strong)]
    UIImage DisabledBackground { get; set; }

    // @property (readonly, getter = isEditing, nonatomic) BOOL editing;
    [Export("editing")]
    bool Editing { [Bind("isEditing")] get; }

    // @property (nonatomic) BOOL allowsEditingTextAttributes __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("allowsEditingTextAttributes")]
    bool AllowsEditingTextAttributes { get; set; }

    // @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nullable typingAttributes __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("typingAttributes", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> TypingAttributes { get; set; }

    // @property (nonatomic) UITextFieldViewMode clearButtonMode;
    [Export("clearButtonMode", ArgumentSemantic.Assign)]
    UITextFieldViewMode ClearButtonMode { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable leftView;
    [NullAllowed, Export("leftView", ArgumentSemantic.Strong)]
    UIView LeftView { get; set; }

    // @property (nonatomic) UITextFieldViewMode leftViewMode;
    [Export("leftViewMode", ArgumentSemantic.Assign)]
    UITextFieldViewMode LeftViewMode { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable rightView;
    [NullAllowed, Export("rightView", ArgumentSemantic.Strong)]
    UIView RightView { get; set; }

    // @property (nonatomic) UITextFieldViewMode rightViewMode;
    [Export("rightViewMode", ArgumentSemantic.Assign)]
    UITextFieldViewMode RightViewMode { get; set; }

    // -(CGRect)borderRectForBounds:(CGRect)bounds;
    [Export("borderRectForBounds:")]
    CGRect BorderRectForBounds(CGRect bounds);

    // -(CGRect)textRectForBounds:(CGRect)bounds;
    [Export("textRectForBounds:")]
    CGRect TextRectForBounds(CGRect bounds);

    // -(CGRect)placeholderRectForBounds:(CGRect)bounds;
    [Export("placeholderRectForBounds:")]
    CGRect PlaceholderRectForBounds(CGRect bounds);

    // -(CGRect)editingRectForBounds:(CGRect)bounds;
    [Export("editingRectForBounds:")]
    CGRect EditingRectForBounds(CGRect bounds);

    // -(CGRect)clearButtonRectForBounds:(CGRect)bounds;
    [Export("clearButtonRectForBounds:")]
    CGRect ClearButtonRectForBounds(CGRect bounds);

    // -(CGRect)leftViewRectForBounds:(CGRect)bounds;
    [Export("leftViewRectForBounds:")]
    CGRect LeftViewRectForBounds(CGRect bounds);

    // -(CGRect)rightViewRectForBounds:(CGRect)bounds;
    [Export("rightViewRectForBounds:")]
    CGRect RightViewRectForBounds(CGRect bounds);

    // -(void)drawTextInRect:(CGRect)rect;
    [Export("drawTextInRect:")]
    void DrawTextInRect(CGRect rect);

    // -(void)drawPlaceholderInRect:(CGRect)rect;
    [Export("drawPlaceholderInRect:")]
    void DrawPlaceholderInRect(CGRect rect);

    // @property (readwrite, strong) UIView * _Nullable inputView;
    [NullAllowed, Export("inputView", ArgumentSemantic.Strong)]
    UIView InputView { get; set; }

    // @property (readwrite, strong) UIView * _Nullable inputAccessoryView;
    [NullAllowed, Export("inputAccessoryView", ArgumentSemantic.Strong)]
    UIView InputAccessoryView { get; set; }

    // @property (nonatomic) BOOL clearsOnInsertion __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("clearsOnInsertion")]
    bool ClearsOnInsertion { get; set; }
}

// @interface  (UITextField) <UITextDraggable, UITextDroppable, UITextPasteConfigurationSupporting>
[Category]
[BaseType(typeof(UITextField))]
interface UITextField_ : IUITextDraggable, IUITextDroppable, IUITextPasteConfigurationSupporting
{
}

// @interface UITextField (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UITextField
{
    // -(BOOL)endEditing:(BOOL)force;
    [Export("endEditing:")]
    bool EndEditing(bool force);
}

// @protocol UITextFieldDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITextFieldDelegate
{
    // @optional -(BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField;
    [Export("textFieldShouldBeginEditing:")]
    bool TextFieldShouldBeginEditing(UITextField textField);

    // @optional -(void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
    [Export("textFieldDidBeginEditing:")]
    void TextFieldDidBeginEditing(UITextField textField);

    // @optional -(BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField;
    [Export("textFieldShouldEndEditing:")]
    bool TextFieldShouldEndEditing(UITextField textField);

    // @optional -(void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
    [Export("textFieldDidEndEditing:")]
    void TextFieldDidEndEditing(UITextField textField);

    // @optional -(void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("textFieldDidEndEditing:reason:")]
    void TextFieldDidEndEditing(UITextField textField, UITextFieldDidEndEditingReason reason);

    // @optional -(BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string;
    [Export("textField:shouldChangeCharactersInRange:replacementString:")]
    bool TextField(UITextField textField, NSRange range, string @string);

    // @optional -(BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField;
    [Export("textFieldShouldClear:")]
    bool TextFieldShouldClear(UITextField textField);

    // @optional -(BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField;
    [Export("textFieldShouldReturn:")]
    bool TextFieldShouldReturn(UITextField textField);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSNotificationName _Nonnull UITextFieldTextDidBeginEditingNotification __attribute__((visibility("default")));
    [Field("UITextFieldTextDidBeginEditingNotification", "__Internal")]
    NSString UITextFieldTextDidBeginEditingNotification { get; }

    // extern const NSNotificationName _Nonnull UITextFieldTextDidEndEditingNotification __attribute__((visibility("default")));
    [Field("UITextFieldTextDidEndEditingNotification", "__Internal")]
    NSString UITextFieldTextDidEndEditingNotification { get; }

    // extern const NSNotificationName _Nonnull UITextFieldTextDidChangeNotification __attribute__((visibility("default")));
    [Field("UITextFieldTextDidChangeNotification", "__Internal")]
    NSString UITextFieldTextDidChangeNotification { get; }

    // extern NSString *const _Nonnull UITextFieldDidEndEditingReasonKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UITextFieldDidEndEditingReasonKey", "__Internal")]
    NSString UITextFieldDidEndEditingReasonKey { get; }
}

// @interface UIActionSheet : UIView
[Introduced(PlatformName.iOS, 2, 0, message: "UIActionSheet is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleActionSheet instead")]
[Deprecated(PlatformName.iOS, 8, 3, message: "UIActionSheet is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleActionSheet instead")]
[NoTV]
[BaseType(typeof(UIView))]
interface UIActionSheet
{
    // -(instancetype _Nonnull)initWithTitle:(NSString * _Nullable)title delegate:(id<UIActionSheetDelegate> _Nullable)delegate cancelButtonTitle:(NSString * _Nullable)cancelButtonTitle destructiveButtonTitle:(NSString * _Nullable)destructiveButtonTitle otherButtonTitles:(NSString * _Nullable)otherButtonTitles, ... __attribute__((availability(ios_app_extension, unavailable))) __attribute__((sentinel(0, 1)));
    [Unavailable(PlatformName.iOSAppExtension)]
    [Internal]
    [Export("initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:", IsVariadic = true)]
    IntPtr Constructor([NullAllowed] string title, [NullAllowed] UIActionSheetDelegate @delegate, [NullAllowed] string cancelButtonTitle, [NullAllowed] string destructiveButtonTitle, [NullAllowed] string otherButtonTitles, IntPtr varArgs);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIActionSheetDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIActionSheetDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull title;
    [Export("title")]
    string Title { get; set; }

    // @property (nonatomic) UIActionSheetStyle actionSheetStyle;
    [Export("actionSheetStyle", ArgumentSemantic.Assign)]
    UIActionSheetStyle ActionSheetStyle { get; set; }

    // -(NSInteger)addButtonWithTitle:(NSString * _Nullable)title;
    [Export("addButtonWithTitle:")]
    nint AddButtonWithTitle([NullAllowed] string title);

    // -(NSString * _Nullable)buttonTitleAtIndex:(NSInteger)buttonIndex;
    [Export("buttonTitleAtIndex:")]
    [return: NullAllowed]
    string ButtonTitleAtIndex(nint buttonIndex);

    // @property (readonly, nonatomic) NSInteger numberOfButtons;
    [Export("numberOfButtons")]
    nint NumberOfButtons { get; }

    // @property (nonatomic) NSInteger cancelButtonIndex;
    [Export("cancelButtonIndex")]
    nint CancelButtonIndex { get; set; }

    // @property (nonatomic) NSInteger destructiveButtonIndex;
    [Export("destructiveButtonIndex")]
    nint DestructiveButtonIndex { get; set; }

    // @property (readonly, nonatomic) NSInteger firstOtherButtonIndex;
    [Export("firstOtherButtonIndex")]
    nint FirstOtherButtonIndex { get; }

    // @property (readonly, getter = isVisible, nonatomic) BOOL visible;
    [Export("visible")]
    bool Visible { [Bind("isVisible")] get; }

    // -(void)showFromToolbar:(UIToolbar * _Nonnull)view;
    [Export("showFromToolbar:")]
    void ShowFromToolbar(UIToolbar view);

    // -(void)showFromTabBar:(UITabBar * _Nonnull)view;
    [Export("showFromTabBar:")]
    void ShowFromTabBar(UITabBar view);

    // -(void)showFromBarButtonItem:(UIBarButtonItem * _Nonnull)item animated:(BOOL)animated __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Export("showFromBarButtonItem:animated:")]
    void ShowFromBarButtonItem(UIBarButtonItem item, bool animated);

    // -(void)showFromRect:(CGRect)rect inView:(UIView * _Nonnull)view animated:(BOOL)animated __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Export("showFromRect:inView:animated:")]
    void ShowFromRect(CGRect rect, UIView view, bool animated);

    // -(void)showInView:(UIView * _Nonnull)view;
    [Export("showInView:")]
    void ShowInView(UIView view);

    // -(void)dismissWithClickedButtonIndex:(NSInteger)buttonIndex animated:(BOOL)animated;
    [Export("dismissWithClickedButtonIndex:animated:")]
    void DismissWithClickedButtonIndex(nint buttonIndex, bool animated);
}

// @protocol UIActionSheetDelegate <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIActionSheetDelegate
{
    // @optional -(void)actionSheet:(UIActionSheet * _Nonnull)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_3)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 8, 3)]
    [NoTV]
    [Export("actionSheet:clickedButtonAtIndex:")]
    void ActionSheet(UIActionSheet actionSheet, nint buttonIndex);

    // @optional -(void)actionSheetCancel:(UIActionSheet * _Nonnull)actionSheet __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_3)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 8, 3)]
    [NoTV]
    [Export("actionSheetCancel:")]
    void ActionSheetCancel(UIActionSheet actionSheet);

    // @optional -(void)willPresentActionSheet:(UIActionSheet * _Nonnull)actionSheet __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_3)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 8, 3)]
    [NoTV]
    [Export("willPresentActionSheet:")]
    void WillPresentActionSheet(UIActionSheet actionSheet);

    // @optional -(void)didPresentActionSheet:(UIActionSheet * _Nonnull)actionSheet __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_3)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 8, 3)]
    [NoTV]
    [Export("didPresentActionSheet:")]
    void DidPresentActionSheet(UIActionSheet actionSheet);

    // @optional -(void)actionSheet:(UIActionSheet * _Nonnull)actionSheet willDismissWithButtonIndex:(NSInteger)buttonIndex __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_3)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 8, 3)]
    [NoTV]
    [Export("actionSheet:willDismissWithButtonIndex:")]
    void ActionSheet(UIActionSheet actionSheet, nint buttonIndex);

    // @optional -(void)actionSheet:(UIActionSheet * _Nonnull)actionSheet didDismissWithButtonIndex:(NSInteger)buttonIndex __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_3)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 8, 3)]
    [NoTV]
    [Export("actionSheet:didDismissWithButtonIndex:")]
    void ActionSheet(UIActionSheet actionSheet, nint buttonIndex);
}

// @interface UIAlertView : UIView
[Introduced(PlatformName.iOS, 2, 0, message: "UIAlertView is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleAlert instead")]
[Deprecated(PlatformName.iOS, 9, 0, message: "UIAlertView is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleAlert instead")]
[NoTV]
[BaseType(typeof(UIView))]
interface UIAlertView
{
    // -(instancetype _Nonnull)initWithTitle:(NSString * _Nullable)title message:(NSString * _Nullable)message delegate:(id _Nullable)delegate cancelButtonTitle:(NSString * _Nullable)cancelButtonTitle otherButtonTitles:(NSString * _Nullable)otherButtonTitles, ... __attribute__((availability(ios_app_extension, unavailable))) __attribute__((sentinel(0, 1)));
    [Unavailable(PlatformName.iOSAppExtension)]
    [Internal]
    [Export("initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:", IsVariadic = true)]
    IntPtr Constructor([NullAllowed] string title, [NullAllowed] string message, [NullAllowed] NSObject @delegate, [NullAllowed] string cancelButtonTitle, [NullAllowed] string otherButtonTitles, IntPtr varArgs);

    // -(id _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
    [Export("initWithFrame:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect frame);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    NSObject Delegate { get; set; }

    // @property (nonatomic, weak) id _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull title;
    [Export("title")]
    string Title { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable message;
    [NullAllowed, Export("message")]
    string Message { get; set; }

    // -(NSInteger)addButtonWithTitle:(NSString * _Nullable)title;
    [Export("addButtonWithTitle:")]
    nint AddButtonWithTitle([NullAllowed] string title);

    // -(NSString * _Nullable)buttonTitleAtIndex:(NSInteger)buttonIndex;
    [Export("buttonTitleAtIndex:")]
    [return: NullAllowed]
    string ButtonTitleAtIndex(nint buttonIndex);

    // @property (readonly, nonatomic) NSInteger numberOfButtons;
    [Export("numberOfButtons")]
    nint NumberOfButtons { get; }

    // @property (nonatomic) NSInteger cancelButtonIndex;
    [Export("cancelButtonIndex")]
    nint CancelButtonIndex { get; set; }

    // @property (readonly, nonatomic) NSInteger firstOtherButtonIndex;
    [Export("firstOtherButtonIndex")]
    nint FirstOtherButtonIndex { get; }

    // @property (readonly, getter = isVisible, nonatomic) BOOL visible;
    [Export("visible")]
    bool Visible { [Bind("isVisible")] get; }

    // -(void)show;
    [Export("show")]
    void Show();

    // -(void)dismissWithClickedButtonIndex:(NSInteger)buttonIndex animated:(BOOL)animated;
    [Export("dismissWithClickedButtonIndex:animated:")]
    void DismissWithClickedButtonIndex(nint buttonIndex, bool animated);

    // @property (assign, nonatomic) UIAlertViewStyle alertViewStyle __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("alertViewStyle", ArgumentSemantic.Assign)]
    UIAlertViewStyle AlertViewStyle { get; set; }

    // -(UITextField * _Nullable)textFieldAtIndex:(NSInteger)textFieldIndex __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("textFieldAtIndex:")]
    [return: NullAllowed]
    UITextField TextFieldAtIndex(nint textFieldIndex);
}

// @protocol UIAlertViewDelegate <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIAlertViewDelegate
{
    // @optional -(void)alertView:(UIAlertView * _Nonnull)alertView clickedButtonAtIndex:(NSInteger)buttonIndex __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("alertView:clickedButtonAtIndex:")]
    void AlertView(UIAlertView alertView, nint buttonIndex);

    // @optional -(void)alertViewCancel:(UIAlertView * _Nonnull)alertView __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("alertViewCancel:")]
    void AlertViewCancel(UIAlertView alertView);

    // @optional -(void)willPresentAlertView:(UIAlertView * _Nonnull)alertView __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("willPresentAlertView:")]
    void WillPresentAlertView(UIAlertView alertView);

    // @optional -(void)didPresentAlertView:(UIAlertView * _Nonnull)alertView __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("didPresentAlertView:")]
    void DidPresentAlertView(UIAlertView alertView);

    // @optional -(void)alertView:(UIAlertView * _Nonnull)alertView willDismissWithButtonIndex:(NSInteger)buttonIndex __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("alertView:willDismissWithButtonIndex:")]
    void AlertView(UIAlertView alertView, nint buttonIndex);

    // @optional -(void)alertView:(UIAlertView * _Nonnull)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("alertView:didDismissWithButtonIndex:")]
    void AlertView(UIAlertView alertView, nint buttonIndex);

    // @optional -(BOOL)alertViewShouldEnableFirstOtherButton:(UIAlertView * _Nonnull)alertView __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("alertViewShouldEnableFirstOtherButton:")]
    bool AlertViewShouldEnableFirstOtherButton(UIAlertView alertView);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSExceptionName _Nonnull UIApplicationInvalidInterfaceOrientationException __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Field("UIApplicationInvalidInterfaceOrientationException", "__Internal")]
    NSString UIApplicationInvalidInterfaceOrientationException { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UIBackgroundTaskIdentifier UIBackgroundTaskInvalid __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Field("UIBackgroundTaskInvalid", "__Internal")]
    nuint UIBackgroundTaskInvalid { get; }

    // extern const NSTimeInterval UIMinimumKeepAliveTimeout __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Field("UIMinimumKeepAliveTimeout", "__Internal")]
    double UIMinimumKeepAliveTimeout { get; }

    // extern const NSTimeInterval UIApplicationBackgroundFetchIntervalMinimum __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=7.0)));
    [TV(11, 0), iOS(7, 0)]
    [Field("UIApplicationBackgroundFetchIntervalMinimum", "__Internal")]
    double UIApplicationBackgroundFetchIntervalMinimum { get; }

    // extern const NSTimeInterval UIApplicationBackgroundFetchIntervalNever __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=7.0)));
    [TV(11, 0), iOS(7, 0)]
    [Field("UIApplicationBackgroundFetchIntervalNever", "__Internal")]
    double UIApplicationBackgroundFetchIntervalNever { get; }
}

// @interface UIApplication : UIResponder
[iOS(2, 0)]
[BaseType(typeof(UIResponder))]
interface UIApplication
{
    // @property (readonly, nonatomic, class) UIApplication * _Nonnull sharedApplication __attribute__((availability(ios_app_extension, unavailable)));
    [Unavailable(PlatformName.iOSAppExtension)]
    [Static]
    [Export("sharedApplication")]
    UIApplication SharedApplication { get; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIApplicationDelegate Delegate { get; set; }

    // @property (assign, nonatomic) id<UIApplicationDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
    NSObject WeakDelegate { get; set; }

    // -(void)beginIgnoringInteractionEvents __attribute__((availability(ios_app_extension, unavailable)));
    [Unavailable(PlatformName.iOSAppExtension)]
    [Export("beginIgnoringInteractionEvents")]
    void BeginIgnoringInteractionEvents();

    // -(void)endIgnoringInteractionEvents __attribute__((availability(ios_app_extension, unavailable)));
    [Unavailable(PlatformName.iOSAppExtension)]
    [Export("endIgnoringInteractionEvents")]
    void EndIgnoringInteractionEvents();

    // @property (readonly, getter = isIgnoringInteractionEvents, nonatomic) BOOL ignoringInteractionEvents;
    [Export("ignoringInteractionEvents")]
    bool IgnoringInteractionEvents { [Bind("isIgnoringInteractionEvents")] get; }

    // @property (getter = isIdleTimerDisabled, nonatomic) BOOL idleTimerDisabled;
    [Export("idleTimerDisabled")]
    bool IdleTimerDisabled { [Bind("isIdleTimerDisabled")] get; set; }

    // -(BOOL)openURL:(NSURL * _Nonnull)url __attribute__((availability(ios_app_extension, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=10_0)));
    [Unavailable(PlatformName.iOSAppExtension)]
    [Introduced(PlatformName.iOS, 2, 0, message: "Please use openURL:options:completionHandler: instead")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Please use openURL:options:completionHandler: instead")]
    [Export("openURL:")]
    bool OpenURL(NSUrl url);

    // -(BOOL)canOpenURL:(NSURL * _Nonnull)url __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("canOpenURL:")]
    bool CanOpenURL(NSUrl url);

    // -(void)openURL:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenExternalURLOptionsKey,id> * _Nonnull)options completionHandler:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios_app_extension, unavailable))) __attribute__((availability(ios, introduced=10_0)));
    [Unavailable(PlatformName.iOSAppExtension)]
    [iOS(10, 0)]
    [Export("openURL:options:completionHandler:")]
    void OpenURL(NSUrl url, NSDictionary<NSString, NSObject> options, [NullAllowed] Action<bool> completion);

    // -(void)sendEvent:(UIEvent * _Nonnull)event;
    [Export("sendEvent:")]
    void SendEvent(UIEvent @event);

    // @property (readonly, nonatomic) UIWindow * _Nullable keyWindow;
    [NullAllowed, Export("keyWindow")]
    UIWindow KeyWindow { get; }

    // @property (readonly, nonatomic) NSArray<__kindof UIWindow *> * _Nonnull windows;
    [Export("windows")]
    UIWindow[] Windows { get; }

    // -(BOOL)sendAction:(SEL _Nonnull)action to:(id _Nullable)target from:(id _Nullable)sender forEvent:(UIEvent * _Nullable)event;
    [Export("sendAction:to:from:forEvent:")]
    bool SendAction(Selector action, [NullAllowed] NSObject target, [NullAllowed] NSObject sender, [NullAllowed] UIEvent @event);

    // @property (getter = isNetworkActivityIndicatorVisible, nonatomic) BOOL networkActivityIndicatorVisible __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("networkActivityIndicatorVisible")]
    bool NetworkActivityIndicatorVisible { [Bind("isNetworkActivityIndicatorVisible")] get; set; }

    // @property (readonly, nonatomic) UIStatusBarStyle statusBarStyle __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("statusBarStyle")]
    UIStatusBarStyle StatusBarStyle { get; }

    // @property (readonly, getter = isStatusBarHidden, nonatomic) BOOL statusBarHidden __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("statusBarHidden")]
    bool StatusBarHidden { [Bind("isStatusBarHidden")] get; }

    // @property (readonly, nonatomic) UIInterfaceOrientation statusBarOrientation __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("statusBarOrientation")]
    UIInterfaceOrientation StatusBarOrientation { get; }

    // -(UIInterfaceOrientationMask)supportedInterfaceOrientationsForWindow:(UIWindow * _Nullable)window __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Export("supportedInterfaceOrientationsForWindow:")]
    UIInterfaceOrientationMask SupportedInterfaceOrientationsForWindow([NullAllowed] UIWindow window);

    // @property (readonly, nonatomic) NSTimeInterval statusBarOrientationAnimationDuration __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("statusBarOrientationAnimationDuration")]
    double StatusBarOrientationAnimationDuration { get; }

    // @property (readonly, nonatomic) CGRect statusBarFrame __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("statusBarFrame")]
    CGRect StatusBarFrame { get; }

    // @property (nonatomic) NSInteger applicationIconBadgeNumber;
    [Export("applicationIconBadgeNumber")]
    nint ApplicationIconBadgeNumber { get; set; }

    // @property (nonatomic) BOOL applicationSupportsShakeToEdit __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("applicationSupportsShakeToEdit")]
    bool ApplicationSupportsShakeToEdit { get; set; }

    // @property (readonly, nonatomic) UIApplicationState applicationState __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("applicationState")]
    UIApplicationState ApplicationState { get; }

    // @property (readonly, nonatomic) NSTimeInterval backgroundTimeRemaining __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("backgroundTimeRemaining")]
    double BackgroundTimeRemaining { get; }

    // -(UIBackgroundTaskIdentifier)beginBackgroundTaskWithExpirationHandler:(void (^ _Nullable)(void))handler __attribute__((objc_requires_super)) __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("beginBackgroundTaskWithExpirationHandler:")]
    [RequiresSuper]
    nuint BeginBackgroundTaskWithExpirationHandler([NullAllowed] Action handler);

    // -(UIBackgroundTaskIdentifier)beginBackgroundTaskWithName:(NSString * _Nullable)taskName expirationHandler:(void (^ _Nullable)(void))handler __attribute__((objc_requires_super)) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("beginBackgroundTaskWithName:expirationHandler:")]
    [RequiresSuper]
    nuint BeginBackgroundTaskWithName([NullAllowed] string taskName, [NullAllowed] Action handler);

    // -(void)endBackgroundTask:(UIBackgroundTaskIdentifier)identifier __attribute__((objc_requires_super)) __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("endBackgroundTask:")]
    [RequiresSuper]
    void EndBackgroundTask(nuint identifier);

    // -(void)setMinimumBackgroundFetchInterval:(NSTimeInterval)minimumBackgroundFetchInterval __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=7.0)));
    [TV(11, 0), iOS(7, 0)]
    [Export("setMinimumBackgroundFetchInterval:")]
    void SetMinimumBackgroundFetchInterval(double minimumBackgroundFetchInterval);

    // @property (readonly, nonatomic) UIBackgroundRefreshStatus backgroundRefreshStatus __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=7.0)));
    [TV(11, 0), iOS(7, 0)]
    [Export("backgroundRefreshStatus")]
    UIBackgroundRefreshStatus BackgroundRefreshStatus { get; }

    // @property (readonly, getter = isProtectedDataAvailable, nonatomic) BOOL protectedDataAvailable __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("protectedDataAvailable")]
    bool ProtectedDataAvailable { [Bind("isProtectedDataAvailable")] get; }

    // @property (readonly, nonatomic) UIUserInterfaceLayoutDirection userInterfaceLayoutDirection __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("userInterfaceLayoutDirection")]
    UIUserInterfaceLayoutDirection UserInterfaceLayoutDirection { get; }

    // @property (readonly, nonatomic) UIContentSizeCategory _Nonnull preferredContentSizeCategory __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("preferredContentSizeCategory")]
    string PreferredContentSizeCategory { get; }
}

// @interface UIRemoteNotifications (UIApplication)
[Category]
[BaseType(typeof(UIApplication))]
interface UIApplication_UIRemoteNotifications
{
    // -(void)registerForRemoteNotifications __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("registerForRemoteNotifications")]
    void RegisterForRemoteNotifications();

    // -(void)unregisterForRemoteNotifications __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("unregisterForRemoteNotifications")]
    void UnregisterForRemoteNotifications();

    // @property (readonly, getter = isRegisteredForRemoteNotifications, nonatomic) BOOL registeredForRemoteNotifications __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("registeredForRemoteNotifications")]
    bool RegisteredForRemoteNotifications { [Bind("isRegisteredForRemoteNotifications")] get; }

    // -(void)registerForRemoteNotificationTypes:(UIRemoteNotificationType)types __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0, message: "Use -[UIApplication registerForRemoteNotifications] and UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Use -[UIApplication registerForRemoteNotifications] and UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]")]
    [NoTV]
    [Export("registerForRemoteNotificationTypes:")]
    void RegisterForRemoteNotificationTypes(UIRemoteNotificationType types);

    // -(UIRemoteNotificationType)enabledRemoteNotificationTypes __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0, message: "Use -[UIApplication isRegisteredForRemoteNotifications] and UserNotifications Framework's -[UNUserNotificationCenter getNotificationSettingsWithCompletionHandler:] to retrieve user-enabled remote notification and user notification settings")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Use -[UIApplication isRegisteredForRemoteNotifications] and UserNotifications Framework's -[UNUserNotificationCenter getNotificationSettingsWithCompletionHandler:] to retrieve user-enabled remote notification and user notification settings")]
    [NoTV]
    [Export("enabledRemoteNotificationTypes")]
    [Verify(MethodToProperty)]
    UIRemoteNotificationType EnabledRemoteNotificationTypes { get; }
}

// @interface UILocalNotifications (UIApplication)
[Category]
[BaseType(typeof(UIApplication))]
interface UIApplication_UILocalNotifications
{
    // -(void)presentLocalNotificationNow:(UILocalNotification * _Nonnull)notification __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]")]
    [NoTV]
    [Export("presentLocalNotificationNow:")]
    void PresentLocalNotificationNow(UILocalNotification notification);

    // -(void)scheduleLocalNotification:(UILocalNotification * _Nonnull)notification __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]")]
    [NoTV]
    [Export("scheduleLocalNotification:")]
    void ScheduleLocalNotification(UILocalNotification notification);

    // -(void)cancelLocalNotification:(UILocalNotification * _Nonnull)notification __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter removePendingNotificationRequestsWithIdentifiers:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter removePendingNotificationRequestsWithIdentifiers:]")]
    [NoTV]
    [Export("cancelLocalNotification:")]
    void CancelLocalNotification(UILocalNotification notification);

    // -(void)cancelAllLocalNotifications __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter removeAllPendingNotificationRequests]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter removeAllPendingNotificationRequests]")]
    [NoTV]
    [Export("cancelAllLocalNotifications")]
    void CancelAllLocalNotifications();

    // @property (copy, nonatomic) NSArray<UILocalNotification *> * _Nullable scheduledLocalNotifications __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter getPendingNotificationRequestsWithCompletionHandler:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter getPendingNotificationRequestsWithCompletionHandler:]")]
    [NoTV]
    [NullAllowed, Export("scheduledLocalNotifications", ArgumentSemantic.Copy)]
    UILocalNotification[] ScheduledLocalNotifications { get; set; }
}

// @interface UIUserNotificationSettings (UIApplication)
[Category]
[BaseType(typeof(UIApplication))]
interface UIApplication_UIUserNotificationSettings
{
    // -(void)registerUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)notificationSettings __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:] and -[UNUserNotificationCenter setNotificationCategories:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:] and -[UNUserNotificationCenter setNotificationCategories:]")]
    [NoTV]
    [Export("registerUserNotificationSettings:")]
    void RegisterUserNotificationSettings(UIUserNotificationSettings notificationSettings);

    // @property (readonly, nonatomic) UIUserNotificationSettings * _Nullable currentUserNotificationSettings __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter getNotificationSettingsWithCompletionHandler:] and -[UNUserNotificationCenter getNotificationCategoriesWithCompletionHandler:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter getNotificationSettingsWithCompletionHandler:] and -[UNUserNotificationCenter getNotificationCategoriesWithCompletionHandler:]")]
    [NoTV]
    [NullAllowed, Export("currentUserNotificationSettings")]
    UIUserNotificationSettings CurrentUserNotificationSettings { get; }
}

// @interface UIRemoteControlEvents (UIApplication)
[Category]
[BaseType(typeof(UIApplication))]
interface UIApplication_UIRemoteControlEvents
{
    // -(void)beginReceivingRemoteControlEvents __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("beginReceivingRemoteControlEvents")]
    void BeginReceivingRemoteControlEvents();

    // -(void)endReceivingRemoteControlEvents __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("endReceivingRemoteControlEvents")]
    void EndReceivingRemoteControlEvents();
}

// @interface UINewsstand (UIApplication)
[Category]
[BaseType(typeof(UIApplication))]
interface UIApplication_UINewsstand
{
    // -(void)setNewsstandIconImage:(UIImage * _Nullable)image __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 5, 0, message: "Newsstand apps now behave like normal apps on SpringBoard")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Newsstand apps now behave like normal apps on SpringBoard")]
    [NoTV]
    [Export("setNewsstandIconImage:")]
    void SetNewsstandIconImage([NullAllowed] UIImage image);
}

// @interface UIShortcutItems (UIApplication)
[Category]
[BaseType(typeof(UIApplication))]
interface UIApplication_UIShortcutItems
{
    // @property (copy, nonatomic) NSArray<UIApplicationShortcutItem *> * _Nullable shortcutItems __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9.0)));
    [NoTV, NoMac, iOS(9, 0)]
    [NullAllowed, Export("shortcutItems", ArgumentSemantic.Copy)]
    UIApplicationShortcutItem[] ShortcutItems { get; set; }
}

// @interface UIAlternateApplicationIcons (UIApplication)
[Category]
[BaseType(typeof(UIApplication))]
interface UIApplication_UIAlternateApplicationIcons
{
    // @property (readonly, nonatomic) BOOL supportsAlternateIcons __attribute__((availability(tvos, introduced=10.2))) __attribute__((availability(ios, introduced=10.3))) __attribute__((availability(ios_app_extension, unavailable))) __attribute__((availability(macos_app_extension, unavailable)));
    [Unavailable(PlatformName.iOSAppExtension)]
    [Unavailable(PlatformName.MacOSXAppExtension)]
    [TV(10, 2), iOS(10, 3)]
    [Export("supportsAlternateIcons")]
    bool SupportsAlternateIcons { get; }

    // -(void)setAlternateIconName:(NSString * _Nullable)alternateIconName completionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler __attribute__((availability(tvos, introduced=10.2))) __attribute__((availability(ios, introduced=10.3))) __attribute__((availability(ios_app_extension, unavailable))) __attribute__((availability(macos_app_extension, unavailable)));
    [Unavailable(PlatformName.iOSAppExtension)]
    [Unavailable(PlatformName.MacOSXAppExtension)]
    [TV(10, 2), iOS(10, 3)]
    [Export("setAlternateIconName:completionHandler:")]
    void SetAlternateIconName([NullAllowed] string alternateIconName, [NullAllowed] Action<NSError> completionHandler);

    // @property (readonly, nonatomic) NSString * _Nullable alternateIconName __attribute__((availability(tvos, introduced=10.2))) __attribute__((availability(ios, introduced=10.3))) __attribute__((availability(ios_app_extension, unavailable))) __attribute__((availability(macos_app_extension, unavailable)));
    [Unavailable(PlatformName.iOSAppExtension)]
    [Unavailable(PlatformName.MacOSXAppExtension)]
    [TV(10, 2), iOS(10, 3)]
    [NullAllowed, Export("alternateIconName")]
    string AlternateIconName { get; }
}

// @interface UIStateRestoration (UIApplication)
[Category]
[BaseType(typeof(UIApplication))]
interface UIApplication_UIStateRestoration
{
    // -(void)extendStateRestoration __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("extendStateRestoration")]
    void ExtendStateRestoration();

    // -(void)completeStateRestoration __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("completeStateRestoration")]
    void CompleteStateRestoration();

    // -(void)ignoreSnapshotOnNextApplicationLaunch __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("ignoreSnapshotOnNextApplicationLaunch")]
    void IgnoreSnapshotOnNextApplicationLaunch();

    // +(void)registerObjectForStateRestoration:(id<UIStateRestoring> _Nonnull)object restorationIdentifier:(NSString * _Nonnull)restorationIdentifier __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Static]
    [Export("registerObjectForStateRestoration:restorationIdentifier:")]
    void RegisterObjectForStateRestoration(UIStateRestoring @object, string restorationIdentifier);
}

// @protocol UIApplicationDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIApplicationDelegate
{
    // @optional -(void)applicationDidFinishLaunching:(UIApplication * _Nonnull)application;
    [Export("applicationDidFinishLaunching:")]
    void ApplicationDidFinishLaunching(UIApplication application);

    // @optional -(BOOL)application:(UIApplication * _Nonnull)application willFinishLaunchingWithOptions:(NSDictionary * _Nullable)launchOptions __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("application:willFinishLaunchingWithOptions:")]
    bool Application(UIApplication application, [NullAllowed] NSDictionary launchOptions);

    // @optional -(BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary * _Nullable)launchOptions __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("application:didFinishLaunchingWithOptions:")]
    bool Application(UIApplication application, [NullAllowed] NSDictionary launchOptions);

    // @optional -(void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
    [Export("applicationDidBecomeActive:")]
    void ApplicationDidBecomeActive(UIApplication application);

    // @optional -(void)applicationWillResignActive:(UIApplication * _Nonnull)application;
    [Export("applicationWillResignActive:")]
    void ApplicationWillResignActive(UIApplication application);

    // @optional -(BOOL)application:(UIApplication * _Nonnull)application handleOpenURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Please use application:openURL:options:")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Please use application:openURL:options:")]
    [NoTV]
    [Export("application:handleOpenURL:")]
    bool Application(UIApplication application, NSUrl url);

    // @optional -(BOOL)application:(UIApplication * _Nonnull)application openURL:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nonnull)annotation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_2, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 4, 2, message: "Please use application:openURL:options:")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Please use application:openURL:options:")]
    [NoTV]
    [Export("application:openURL:sourceApplication:annotation:")]
    bool Application(UIApplication application, NSUrl url, [NullAllowed] string sourceApplication, NSObject annotation);

    // @optional -(BOOL)application:(UIApplication * _Nonnull)app openURL:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> * _Nonnull)options __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("application:openURL:options:")]
    bool Application(UIApplication app, NSUrl url, NSDictionary<NSString, NSObject> options);

    // @optional -(void)applicationDidReceiveMemoryWarning:(UIApplication * _Nonnull)application;
    [Export("applicationDidReceiveMemoryWarning:")]
    void ApplicationDidReceiveMemoryWarning(UIApplication application);

    // @optional -(void)applicationWillTerminate:(UIApplication * _Nonnull)application;
    [Export("applicationWillTerminate:")]
    void ApplicationWillTerminate(UIApplication application);

    // @optional -(void)applicationSignificantTimeChange:(UIApplication * _Nonnull)application;
    [Export("applicationSignificantTimeChange:")]
    void ApplicationSignificantTimeChange(UIApplication application);

    // @optional -(void)application:(UIApplication * _Nonnull)application willChangeStatusBarOrientation:(UIInterfaceOrientation)newStatusBarOrientation duration:(NSTimeInterval)duration __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("application:willChangeStatusBarOrientation:duration:")]
    void Application(UIApplication application, UIInterfaceOrientation newStatusBarOrientation, double duration);

    // @optional -(void)application:(UIApplication * _Nonnull)application didChangeStatusBarOrientation:(UIInterfaceOrientation)oldStatusBarOrientation __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("application:didChangeStatusBarOrientation:")]
    void Application(UIApplication application, UIInterfaceOrientation oldStatusBarOrientation);

    // @optional -(void)application:(UIApplication * _Nonnull)application willChangeStatusBarFrame:(CGRect)newStatusBarFrame __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("application:willChangeStatusBarFrame:")]
    void Application(UIApplication application, CGRect newStatusBarFrame);

    // @optional -(void)application:(UIApplication * _Nonnull)application didChangeStatusBarFrame:(CGRect)oldStatusBarFrame __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("application:didChangeStatusBarFrame:")]
    void Application(UIApplication application, CGRect oldStatusBarFrame);

    // @optional -(void)application:(UIApplication * _Nonnull)application didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)notificationSettings __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]")]
    [NoTV]
    [Export("application:didRegisterUserNotificationSettings:")]
    void Application(UIApplication application, UIUserNotificationSettings notificationSettings);

    // @optional -(void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("application:didRegisterForRemoteNotificationsWithDeviceToken:")]
    void Application(UIApplication application, NSData deviceToken);

    // @optional -(void)application:(UIApplication * _Nonnull)application didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("application:didFailToRegisterForRemoteNotificationsWithError:")]
    void Application(UIApplication application, NSError error);

    // @optional -(void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo __attribute__((availability(ios, introduced=3_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 3, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:] for user visible notifications and -[UIApplicationDelegate application:didReceiveRemoteNotification:fetchCompletionHandler:] for silent remote notifications")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:] for user visible notifications and -[UIApplicationDelegate application:didReceiveRemoteNotification:fetchCompletionHandler:] for silent remote notifications")]
    [Export("application:didReceiveRemoteNotification:")]
    void Application(UIApplication application, NSDictionary userInfo);

    // @optional -(void)application:(UIApplication * _Nonnull)application didReceiveLocalNotification:(UILocalNotification * _Nonnull)notification __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
    [NoTV]
    [Export("application:didReceiveLocalNotification:")]
    void Application(UIApplication application, UILocalNotification notification);

    // @optional -(void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nullable)identifier forLocalNotification:(UILocalNotification * _Nonnull)notification completionHandler:(void (^ _Nonnull)())completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
    [NoTV]
    [Export("application:handleActionWithIdentifier:forLocalNotification:completionHandler:")]
    void Application(UIApplication application, [NullAllowed] string identifier, UILocalNotification notification, Action completionHandler);

    // @optional -(void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nullable)identifier forRemoteNotification:(NSDictionary * _Nonnull)userInfo withResponseInfo:(NSDictionary * _Nonnull)responseInfo completionHandler:(void (^ _Nonnull)())completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 9, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
    [NoTV]
    [Export("application:handleActionWithIdentifier:forRemoteNotification:withResponseInfo:completionHandler:")]
    void Application(UIApplication application, [NullAllowed] string identifier, NSDictionary userInfo, NSDictionary responseInfo, Action completionHandler);

    // @optional -(void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nullable)identifier forRemoteNotification:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nonnull)())completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
    [NoTV]
    [Export("application:handleActionWithIdentifier:forRemoteNotification:completionHandler:")]
    void Application(UIApplication application, [NullAllowed] string identifier, NSDictionary userInfo, Action completionHandler);

    // @optional -(void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nullable)identifier forLocalNotification:(UILocalNotification * _Nonnull)notification withResponseInfo:(NSDictionary * _Nonnull)responseInfo completionHandler:(void (^ _Nonnull)())completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 9, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
    [NoTV]
    [Export("application:handleActionWithIdentifier:forLocalNotification:withResponseInfo:completionHandler:")]
    void Application(UIApplication application, [NullAllowed] string identifier, UILocalNotification notification, NSDictionary responseInfo, Action completionHandler);

    // @optional -(void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("application:didReceiveRemoteNotification:fetchCompletionHandler:")]
    void Application(UIApplication application, NSDictionary userInfo, Action<UIBackgroundFetchResult> completionHandler);

    // @optional -(void)application:(UIApplication * _Nonnull)application performFetchWithCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=7.0)));
    [TV(11, 0), iOS(7, 0)]
    [Export("application:performFetchWithCompletionHandler:")]
    void Application(UIApplication application, Action<UIBackgroundFetchResult> completionHandler);

    // @optional -(void)application:(UIApplication * _Nonnull)application performActionForShortcutItem:(UIApplicationShortcutItem * _Nonnull)shortcutItem completionHandler:(void (^ _Nonnull)(BOOL))completionHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0)));
    [NoTV, iOS(9, 0)]
    [Export("application:performActionForShortcutItem:completionHandler:")]
    void Application(UIApplication application, UIApplicationShortcutItem shortcutItem, Action<bool> completionHandler);

    // @optional -(void)application:(UIApplication * _Nonnull)application handleEventsForBackgroundURLSession:(NSString * _Nonnull)identifier completionHandler:(void (^ _Nonnull)(void))completionHandler __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("application:handleEventsForBackgroundURLSession:completionHandler:")]
    void Application(UIApplication application, string identifier, Action completionHandler);

    // @optional -(void)application:(UIApplication * _Nonnull)application handleWatchKitExtensionRequest:(NSDictionary * _Nullable)userInfo reply:(void (^ _Nonnull)(NSDictionary * _Nullable))reply __attribute__((availability(ios, introduced=8_2)));
    [iOS(8, 2)]
    [Export("application:handleWatchKitExtensionRequest:reply:")]
    void Application(UIApplication application, [NullAllowed] NSDictionary userInfo, Action<NSDictionary> reply);

    // @optional -(void)applicationShouldRequestHealthAuthorization:(UIApplication * _Nonnull)application __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("applicationShouldRequestHealthAuthorization:")]
    void ApplicationShouldRequestHealthAuthorization(UIApplication application);

    // @optional -(void)application:(UIApplication * _Nonnull)application handleIntent:(INIntent * _Nonnull)intent completionHandler:(void (^ _Nonnull)(INIntentResponse * _Nonnull))completionHandler __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("application:handleIntent:completionHandler:")]
    void Application(UIApplication application, INIntent intent, Action<INIntentResponse> completionHandler);

    // @optional -(void)applicationDidEnterBackground:(UIApplication * _Nonnull)application __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("applicationDidEnterBackground:")]
    void ApplicationDidEnterBackground(UIApplication application);

    // @optional -(void)applicationWillEnterForeground:(UIApplication * _Nonnull)application __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("applicationWillEnterForeground:")]
    void ApplicationWillEnterForeground(UIApplication application);

    // @optional -(void)applicationProtectedDataWillBecomeUnavailable:(UIApplication * _Nonnull)application __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("applicationProtectedDataWillBecomeUnavailable:")]
    void ApplicationProtectedDataWillBecomeUnavailable(UIApplication application);

    // @optional -(void)applicationProtectedDataDidBecomeAvailable:(UIApplication * _Nonnull)application __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("applicationProtectedDataDidBecomeAvailable:")]
    void ApplicationProtectedDataDidBecomeAvailable(UIApplication application);

    // @optional @property (nonatomic, strong) UIWindow * _Nullable window __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("window", ArgumentSemantic.Strong)]
    UIWindow Window { get; set; }

    // @optional -(UIInterfaceOrientationMask)application:(UIApplication * _Nonnull)application supportedInterfaceOrientationsForWindow:(UIWindow * _Nullable)window __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Export("application:supportedInterfaceOrientationsForWindow:")]
    UIInterfaceOrientationMask Application(UIApplication application, [NullAllowed] UIWindow window);

    // @optional -(BOOL)application:(UIApplication * _Nonnull)application shouldAllowExtensionPointIdentifier:(UIApplicationExtensionPointIdentifier _Nonnull)extensionPointIdentifier __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("application:shouldAllowExtensionPointIdentifier:")]
    bool Application(UIApplication application, string extensionPointIdentifier);

    // @optional -(UIViewController * _Nullable)application:(UIApplication * _Nonnull)application viewControllerWithRestorationIdentifierPath:(NSArray<NSString *> * _Nonnull)identifierComponents coder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("application:viewControllerWithRestorationIdentifierPath:coder:")]
    [return: NullAllowed]
    UIViewController Application(UIApplication application, string[] identifierComponents, NSCoder coder);

    // @optional -(BOOL)application:(UIApplication * _Nonnull)application shouldSaveApplicationState:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("application:shouldSaveApplicationState:")]
    bool Application(UIApplication application, NSCoder coder);

    // @optional -(BOOL)application:(UIApplication * _Nonnull)application shouldRestoreApplicationState:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("application:shouldRestoreApplicationState:")]
    bool Application(UIApplication application, NSCoder coder);

    // @optional -(void)application:(UIApplication * _Nonnull)application willEncodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("application:willEncodeRestorableStateWithCoder:")]
    void Application(UIApplication application, NSCoder coder);

    // @optional -(void)application:(UIApplication * _Nonnull)application didDecodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("application:didDecodeRestorableStateWithCoder:")]
    void Application(UIApplication application, NSCoder coder);

    // @optional -(BOOL)application:(UIApplication * _Nonnull)application willContinueUserActivityWithType:(NSString * _Nonnull)userActivityType __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("application:willContinueUserActivityWithType:")]
    bool Application(UIApplication application, string userActivityType);

    // @optional -(BOOL)application:(UIApplication * _Nonnull)application continueUserActivity:(NSUserActivity * _Nonnull)userActivity restorationHandler:(void (^ _Nonnull)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("application:continueUserActivity:restorationHandler:")]
    bool Application(UIApplication application, NSUserActivity userActivity, Action<NSArray<UIUserActivityRestoring>> restorationHandler);

    // @optional -(void)application:(UIApplication * _Nonnull)application didFailToContinueUserActivityWithType:(NSString * _Nonnull)userActivityType error:(NSError * _Nonnull)error __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("application:didFailToContinueUserActivityWithType:error:")]
    void Application(UIApplication application, string userActivityType, NSError error);

    // @optional -(void)application:(UIApplication * _Nonnull)application didUpdateUserActivity:(NSUserActivity * _Nonnull)userActivity __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("application:didUpdateUserActivity:")]
    void Application(UIApplication application, NSUserActivity userActivity);

    // @optional -(void)application:(UIApplication * _Nonnull)application userDidAcceptCloudKitShareWithMetadata:(CKShareMetadata * _Nonnull)cloudKitShareMetadata __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("application:userDidAcceptCloudKitShareWithMetadata:")]
    void Application(UIApplication application, CKShareMetadata cloudKitShareMetadata);
}

// @interface UIApplicationDeprecated (UIApplication)
[Category]
[BaseType(typeof(UIApplication))]
interface UIApplication_UIApplicationDeprecated
{
    // @property (getter = isProximitySensingEnabled, nonatomic) BOOL proximitySensingEnabled __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [Export("proximitySensingEnabled")]
    bool ProximitySensingEnabled { [Bind("isProximitySensingEnabled")] get; set; }

    // -(void)setStatusBarHidden:(BOOL)hidden animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_2)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 2)]
    [NoTV]
    [Export("setStatusBarHidden:animated:")]
    void SetStatusBarHidden(bool hidden, bool animated);

    // @property (readwrite, nonatomic) UIInterfaceOrientation statusBarOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Explicit setting of the status bar orientation is more limited in iOS 6.0 and later")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Explicit setting of the status bar orientation is more limited in iOS 6.0 and later")]
    [NoTV]
    [Export("statusBarOrientation", ArgumentSemantic.Assign)]
    UIInterfaceOrientation StatusBarOrientation { get; set; }

    // -(void)setStatusBarOrientation:(UIInterfaceOrientation)interfaceOrientation animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Explicit setting of the status bar orientation is more limited in iOS 6.0 and later")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Explicit setting of the status bar orientation is more limited in iOS 6.0 and later")]
    [NoTV]
    [Export("setStatusBarOrientation:animated:")]
    void SetStatusBarOrientation(UIInterfaceOrientation interfaceOrientation, bool animated);

    // @property (readwrite, nonatomic) UIStatusBarStyle statusBarStyle __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -[UIViewController preferredStatusBarStyle]")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Use -[UIViewController preferredStatusBarStyle]")]
    [NoTV]
    [Export("statusBarStyle", ArgumentSemantic.Assign)]
    UIStatusBarStyle StatusBarStyle { get; set; }

    // -(void)setStatusBarStyle:(UIStatusBarStyle)statusBarStyle animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -[UIViewController preferredStatusBarStyle]")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Use -[UIViewController preferredStatusBarStyle]")]
    [NoTV]
    [Export("setStatusBarStyle:animated:")]
    void SetStatusBarStyle(UIStatusBarStyle statusBarStyle, bool animated);

    // @property (getter = isStatusBarHidden, readwrite, nonatomic) BOOL statusBarHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -[UIViewController prefersStatusBarHidden]")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Use -[UIViewController prefersStatusBarHidden]")]
    [NoTV]
    [Export("statusBarHidden")]
    bool StatusBarHidden { [Bind("isStatusBarHidden")] get; set; }

    // -(void)setStatusBarHidden:(BOOL)hidden withAnimation:(UIStatusBarAnimation)animation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_2, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 3, 2, message: "Use -[UIViewController prefersStatusBarHidden]")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Use -[UIViewController prefersStatusBarHidden]")]
    [NoTV]
    [Export("setStatusBarHidden:withAnimation:")]
    void SetStatusBarHidden(bool hidden, UIStatusBarAnimation animation);

    // -(BOOL)setKeepAliveTimeout:(NSTimeInterval)timeout handler:(void (^ _Nullable)(void))keepAliveHandler __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 4, 0, message: "Please use PushKit for VoIP applications instead of calling this method")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Please use PushKit for VoIP applications instead of calling this method")]
    [NoTV]
    [Export("setKeepAliveTimeout:handler:")]
    bool SetKeepAliveTimeout(double timeout, [NullAllowed] Action keepAliveHandler);

    // -(void)clearKeepAliveTimeout __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 4, 0, message: "Please use PushKit for VoIP applications instead of calling this method")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Please use PushKit for VoIP applications instead of calling this method")]
    [NoTV]
    [Export("clearKeepAliveTimeout")]
    void ClearKeepAliveTimeout();
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSRunLoopMode _Nonnull UITrackingRunLoopMode __attribute__((visibility("default")));
    [Field("UITrackingRunLoopMode", "__Internal")]
    NSString UITrackingRunLoopMode { get; }

    // extern const NSNotificationName _Nonnull UIApplicationDidEnterBackgroundNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Field("UIApplicationDidEnterBackgroundNotification", "__Internal")]
    NSString UIApplicationDidEnterBackgroundNotification { get; }

    // extern const NSNotificationName _Nonnull UIApplicationWillEnterForegroundNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Field("UIApplicationWillEnterForegroundNotification", "__Internal")]
    NSString UIApplicationWillEnterForegroundNotification { get; }

    // extern const NSNotificationName _Nonnull UIApplicationDidFinishLaunchingNotification __attribute__((visibility("default")));
    [Field("UIApplicationDidFinishLaunchingNotification", "__Internal")]
    NSString UIApplicationDidFinishLaunchingNotification { get; }

    // extern const NSNotificationName _Nonnull UIApplicationDidBecomeActiveNotification __attribute__((visibility("default")));
    [Field("UIApplicationDidBecomeActiveNotification", "__Internal")]
    NSString UIApplicationDidBecomeActiveNotification { get; }

    // extern const NSNotificationName _Nonnull UIApplicationWillResignActiveNotification __attribute__((visibility("default")));
    [Field("UIApplicationWillResignActiveNotification", "__Internal")]
    NSString UIApplicationWillResignActiveNotification { get; }

    // extern const NSNotificationName _Nonnull UIApplicationDidReceiveMemoryWarningNotification __attribute__((visibility("default")));
    [Field("UIApplicationDidReceiveMemoryWarningNotification", "__Internal")]
    NSString UIApplicationDidReceiveMemoryWarningNotification { get; }

    // extern const NSNotificationName _Nonnull UIApplicationWillTerminateNotification __attribute__((visibility("default")));
    [Field("UIApplicationWillTerminateNotification", "__Internal")]
    NSString UIApplicationWillTerminateNotification { get; }

    // extern const NSNotificationName _Nonnull UIApplicationSignificantTimeChangeNotification __attribute__((visibility("default")));
    [Field("UIApplicationSignificantTimeChangeNotification", "__Internal")]
    NSString UIApplicationSignificantTimeChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIApplicationWillChangeStatusBarOrientationNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIApplicationWillChangeStatusBarOrientationNotification", "__Internal")]
    NSString UIApplicationWillChangeStatusBarOrientationNotification { get; }

    // extern const NSNotificationName _Nonnull UIApplicationDidChangeStatusBarOrientationNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIApplicationDidChangeStatusBarOrientationNotification", "__Internal")]
    NSString UIApplicationDidChangeStatusBarOrientationNotification { get; }

    // extern NSString *const _Nonnull UIApplicationStatusBarOrientationUserInfoKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIApplicationStatusBarOrientationUserInfoKey", "__Internal")]
    NSString UIApplicationStatusBarOrientationUserInfoKey { get; }

    // extern const NSNotificationName _Nonnull UIApplicationWillChangeStatusBarFrameNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIApplicationWillChangeStatusBarFrameNotification", "__Internal")]
    NSString UIApplicationWillChangeStatusBarFrameNotification { get; }

    // extern const NSNotificationName _Nonnull UIApplicationDidChangeStatusBarFrameNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIApplicationDidChangeStatusBarFrameNotification", "__Internal")]
    NSString UIApplicationDidChangeStatusBarFrameNotification { get; }

    // extern NSString *const _Nonnull UIApplicationStatusBarFrameUserInfoKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIApplicationStatusBarFrameUserInfoKey", "__Internal")]
    NSString UIApplicationStatusBarFrameUserInfoKey { get; }

    // extern const NSNotificationName _Nonnull UIApplicationBackgroundRefreshStatusDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=7.0)));
    [TV(11, 0), iOS(7, 0)]
    [Field("UIApplicationBackgroundRefreshStatusDidChangeNotification", "__Internal")]
    NSString UIApplicationBackgroundRefreshStatusDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIApplicationProtectedDataWillBecomeUnavailable __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Field("UIApplicationProtectedDataWillBecomeUnavailable", "__Internal")]
    NSString UIApplicationProtectedDataWillBecomeUnavailable { get; }

    // extern const NSNotificationName _Nonnull UIApplicationProtectedDataDidBecomeAvailable __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Field("UIApplicationProtectedDataDidBecomeAvailable", "__Internal")]
    NSString UIApplicationProtectedDataDidBecomeAvailable { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsURLKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Field("UIApplicationLaunchOptionsURLKey", "__Internal")]
    NSString UIApplicationLaunchOptionsURLKey { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsSourceApplicationKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Field("UIApplicationLaunchOptionsSourceApplicationKey", "__Internal")]
    NSString UIApplicationLaunchOptionsSourceApplicationKey { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsRemoteNotificationKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Field("UIApplicationLaunchOptionsRemoteNotificationKey", "__Internal")]
    NSString UIApplicationLaunchOptionsRemoteNotificationKey { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsLocalNotificationKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:]")]
    [NoTV]
    [Field("UIApplicationLaunchOptionsLocalNotificationKey", "__Internal")]
    NSString UIApplicationLaunchOptionsLocalNotificationKey { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsAnnotationKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Field("UIApplicationLaunchOptionsAnnotationKey", "__Internal")]
    NSString UIApplicationLaunchOptionsAnnotationKey { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsLocationKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Field("UIApplicationLaunchOptionsLocationKey", "__Internal")]
    NSString UIApplicationLaunchOptionsLocationKey { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsNewsstandDownloadsKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Field("UIApplicationLaunchOptionsNewsstandDownloadsKey", "__Internal")]
    NSString UIApplicationLaunchOptionsNewsstandDownloadsKey { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsBluetoothCentralsKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIApplicationLaunchOptionsBluetoothCentralsKey", "__Internal")]
    NSString UIApplicationLaunchOptionsBluetoothCentralsKey { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsBluetoothPeripheralsKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIApplicationLaunchOptionsBluetoothPeripheralsKey", "__Internal")]
    NSString UIApplicationLaunchOptionsBluetoothPeripheralsKey { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsShortcutItemKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0)));
    [NoTV, iOS(9, 0)]
    [Field("UIApplicationLaunchOptionsShortcutItemKey", "__Internal")]
    NSString UIApplicationLaunchOptionsShortcutItemKey { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsUserActivityDictionaryKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIApplicationLaunchOptionsUserActivityDictionaryKey", "__Internal")]
    NSString UIApplicationLaunchOptionsUserActivityDictionaryKey { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsUserActivityTypeKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIApplicationLaunchOptionsUserActivityTypeKey", "__Internal")]
    NSString UIApplicationLaunchOptionsUserActivityTypeKey { get; }

    // extern const UIApplicationLaunchOptionsKey _Nonnull UIApplicationLaunchOptionsCloudKitShareMetadataKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=10_0)));
    [NoTV, iOS(10, 0)]
    [Field("UIApplicationLaunchOptionsCloudKitShareMetadataKey", "__Internal")]
    NSString UIApplicationLaunchOptionsCloudKitShareMetadataKey { get; }

    // extern NSString *const _Nonnull UIApplicationOpenSettingsURLString __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIApplicationOpenSettingsURLString", "__Internal")]
    NSString UIApplicationOpenSettingsURLString { get; }

    // extern const UIApplicationOpenURLOptionsKey _Nonnull UIApplicationOpenURLOptionsSourceApplicationKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Field("UIApplicationOpenURLOptionsSourceApplicationKey", "__Internal")]
    NSString UIApplicationOpenURLOptionsSourceApplicationKey { get; }

    // extern const UIApplicationOpenURLOptionsKey _Nonnull UIApplicationOpenURLOptionsAnnotationKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Field("UIApplicationOpenURLOptionsAnnotationKey", "__Internal")]
    NSString UIApplicationOpenURLOptionsAnnotationKey { get; }

    // extern const UIApplicationOpenURLOptionsKey _Nonnull UIApplicationOpenURLOptionsOpenInPlaceKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Field("UIApplicationOpenURLOptionsOpenInPlaceKey", "__Internal")]
    NSString UIApplicationOpenURLOptionsOpenInPlaceKey { get; }

    // extern const NSNotificationName _Nonnull UIApplicationUserDidTakeScreenshotNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIApplicationUserDidTakeScreenshotNotification", "__Internal")]
    NSString UIApplicationUserDidTakeScreenshotNotification { get; }

    // extern const UIApplicationExtensionPointIdentifier _Nonnull UIApplicationKeyboardExtensionPointIdentifier __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIApplicationKeyboardExtensionPointIdentifier", "__Internal")]
    NSString UIApplicationKeyboardExtensionPointIdentifier { get; }

    // extern const UIApplicationOpenExternalURLOptionsKey _Nonnull UIApplicationOpenURLOptionUniversalLinksOnly __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UIApplicationOpenURLOptionUniversalLinksOnly", "__Internal")]
    NSString UIApplicationOpenURLOptionUniversalLinksOnly { get; }

    // extern NSString *const _Nonnull UIStateRestorationViewControllerStoryboardKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UIStateRestorationViewControllerStoryboardKey", "__Internal")]
    NSString UIStateRestorationViewControllerStoryboardKey { get; }

    // extern NSString *const _Nonnull UIApplicationStateRestorationBundleVersionKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UIApplicationStateRestorationBundleVersionKey", "__Internal")]
    NSString UIApplicationStateRestorationBundleVersionKey { get; }

    // extern NSString *const _Nonnull UIApplicationStateRestorationUserInterfaceIdiomKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UIApplicationStateRestorationUserInterfaceIdiomKey", "__Internal")]
    NSString UIApplicationStateRestorationUserInterfaceIdiomKey { get; }

    // extern NSString *const _Nonnull UIApplicationStateRestorationTimestampKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIApplicationStateRestorationTimestampKey", "__Internal")]
    NSString UIApplicationStateRestorationTimestampKey { get; }

    // extern NSString *const _Nonnull UIApplicationStateRestorationSystemVersionKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UIApplicationStateRestorationSystemVersionKey", "__Internal")]
    NSString UIApplicationStateRestorationSystemVersionKey { get; }
}

// @protocol UIViewControllerRestoration
[Protocol, Model]
interface UIViewControllerRestoration
{
    // @required +(UIViewController * _Nullable)viewControllerWithRestorationIdentifierPath:(NSArray<NSString *> * _Nonnull)identifierComponents coder:(NSCoder * _Nonnull)coder;
    [Static, Abstract]
    [Export("viewControllerWithRestorationIdentifierPath:coder:")]
    [return: NullAllowed]
    UIViewController Coder(string[] identifierComponents, NSCoder coder);
}

// @protocol UIDataSourceModelAssociation
[Protocol, Model]
interface UIDataSourceModelAssociation
{
    // @required -(NSString * _Nullable)modelIdentifierForElementAtIndexPath:(NSIndexPath * _Nonnull)idx inView:(UIView * _Nonnull)view;
    [Abstract]
    [Export("modelIdentifierForElementAtIndexPath:inView:")]
    [return: NullAllowed]
    string ModelIdentifierForElementAtIndexPath(NSIndexPath idx, UIView view);

    // @required -(NSIndexPath * _Nullable)indexPathForElementWithModelIdentifier:(NSString * _Nonnull)identifier inView:(UIView * _Nonnull)view;
    [Abstract]
    [Export("indexPathForElementWithModelIdentifier:inView:")]
    [return: NullAllowed]
    NSIndexPath IndexPathForElementWithModelIdentifier(string identifier, UIView view);
}

// @protocol UIStateRestoring <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIStateRestoring
{
    // @optional @property (readonly, nonatomic) id<UIStateRestoring> _Nullable restorationParent;
    [NullAllowed, Export("restorationParent")]
    UIStateRestoring RestorationParent { get; }

    // @optional @property (readonly, nonatomic) Class<UIObjectRestoration> _Nullable objectRestorationClass;
    [NullAllowed, Export("objectRestorationClass")]
    UIObjectRestoration ObjectRestorationClass { get; }

    // @optional -(void)encodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder;
    [Export("encodeRestorableStateWithCoder:")]
    void EncodeRestorableStateWithCoder(NSCoder coder);

    // @optional -(void)decodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder;
    [Export("decodeRestorableStateWithCoder:")]
    void DecodeRestorableStateWithCoder(NSCoder coder);

    // @optional -(void)applicationFinishedRestoringState;
    [Export("applicationFinishedRestoringState")]
    void ApplicationFinishedRestoringState();
}

// @protocol UIObjectRestoration
[Protocol, Model]
interface UIObjectRestoration
{
    // @required +(id<UIStateRestoring> _Nullable)objectWithRestorationIdentifierPath:(NSArray<NSString *> * _Nonnull)identifierComponents coder:(NSCoder * _Nonnull)coder;
    [Static, Abstract]
    [Export("objectWithRestorationIdentifierPath:coder:")]
    [return: NullAllowed]
    UIStateRestoring Coder(string[] identifierComponents, NSCoder coder);
}

// @protocol UIContentContainer <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIContentContainer
{
    // @required @property (readonly, nonatomic) CGSize preferredContentSize __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("preferredContentSize")]
    CGSize PreferredContentSize { get; }

    // @required -(void)preferredContentSizeDidChangeForChildContentContainer:(id<UIContentContainer> _Nonnull)container __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("preferredContentSizeDidChangeForChildContentContainer:")]
    void PreferredContentSizeDidChangeForChildContentContainer(UIContentContainer container);

    // @required -(void)systemLayoutFittingSizeDidChangeForChildContentContainer:(id<UIContentContainer> _Nonnull)container __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("systemLayoutFittingSizeDidChangeForChildContentContainer:")]
    void SystemLayoutFittingSizeDidChangeForChildContentContainer(UIContentContainer container);

    // @required -(CGSize)sizeForChildContentContainer:(id<UIContentContainer> _Nonnull)container withParentContainerSize:(CGSize)parentSize __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("sizeForChildContentContainer:withParentContainerSize:")]
    CGSize SizeForChildContentContainer(UIContentContainer container, CGSize parentSize);

    // @required -(void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id<UIViewControllerTransitionCoordinator> _Nonnull)coordinator __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("viewWillTransitionToSize:withTransitionCoordinator:")]
    void ViewWillTransitionToSize(CGSize size, UIViewControllerTransitionCoordinator coordinator);

    // @required -(void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id<UIViewControllerTransitionCoordinator> _Nonnull)coordinator __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("willTransitionToTraitCollection:withTransitionCoordinator:")]
    void WillTransitionToTraitCollection(UITraitCollection newCollection, UIViewControllerTransitionCoordinator coordinator);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSNotificationName _Nonnull UIViewControllerShowDetailTargetDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UIViewControllerShowDetailTargetDidChangeNotification", "__Internal")]
    NSString UIViewControllerShowDetailTargetDidChangeNotification { get; }
}

// @interface UIViewController : UIResponder <NSCoding, UIAppearanceContainer, UITraitEnvironment, UIContentContainer, UIFocusEnvironment>
[iOS(2, 0)]
[BaseType(typeof(UIResponder))]
interface UIViewController : INSCoding, IUIAppearanceContainer, IUITraitEnvironment, IUIContentContainer, IUIFocusEnvironment
{
    // -(instancetype _Nonnull)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil __attribute__((objc_designated_initializer));
    [Export("initWithNibName:bundle:")]
    [DesignatedInitializer]
    IntPtr Constructor([NullAllowed] string nibNameOrNil, [NullAllowed] NSBundle nibBundleOrNil);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (nonatomic, strong) UIView * _Null_unspecified view;
    [Export("view", ArgumentSemantic.Strong)]
    UIView View { get; set; }

    // -(void)loadView;
    [Export("loadView")]
    void LoadView();

    // -(void)loadViewIfNeeded __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("loadViewIfNeeded")]
    void LoadViewIfNeeded();

    // @property (readonly, nonatomic, strong) UIView * _Nullable viewIfLoaded __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [NullAllowed, Export("viewIfLoaded", ArgumentSemantic.Strong)]
    UIView ViewIfLoaded { get; }

    // -(void)viewWillUnload __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=6_0)));
    [Introduced(PlatformName.iOS, 5, 0)]
    [Deprecated(PlatformName.iOS, 6, 0)]
    [NoTV]
    [Export("viewWillUnload")]
    void ViewWillUnload();

    // -(void)viewDidUnload __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0, deprecated=6_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 6, 0)]
    [NoTV]
    [Export("viewDidUnload")]
    void ViewDidUnload();

    // -(void)viewDidLoad;
    [Export("viewDidLoad")]
    void ViewDidLoad();

    // @property (readonly, getter = isViewLoaded, nonatomic) BOOL viewLoaded __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("viewLoaded")]
    bool ViewLoaded { [Bind("isViewLoaded")] get; }

    // @property (readonly, copy, nonatomic) NSString * _Nullable nibName;
    [NullAllowed, Export("nibName")]
    string NibName { get; }

    // @property (readonly, nonatomic, strong) NSBundle * _Nullable nibBundle;
    [NullAllowed, Export("nibBundle", ArgumentSemantic.Strong)]
    NSBundle NibBundle { get; }

    // @property (readonly, nonatomic, strong) UIStoryboard * _Nullable storyboard __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("storyboard", ArgumentSemantic.Strong)]
    UIStoryboard Storyboard { get; }

    // -(void)performSegueWithIdentifier:(NSString * _Nonnull)identifier sender:(id _Nullable)sender __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("performSegueWithIdentifier:sender:")]
    void PerformSegueWithIdentifier(string identifier, [NullAllowed] NSObject sender);

    // -(BOOL)shouldPerformSegueWithIdentifier:(NSString * _Nonnull)identifier sender:(id _Nullable)sender __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("shouldPerformSegueWithIdentifier:sender:")]
    bool ShouldPerformSegueWithIdentifier(string identifier, [NullAllowed] NSObject sender);

    // -(void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("prepareForSegue:sender:")]
    void PrepareForSegue(UIStoryboardSegue segue, [NullAllowed] NSObject sender);

    // -(BOOL)canPerformUnwindSegueAction:(SEL _Nonnull)action fromViewController:(UIViewController * _Nonnull)fromViewController withSender:(id _Nonnull)sender __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("canPerformUnwindSegueAction:fromViewController:withSender:")]
    bool CanPerformUnwindSegueAction(Selector action, UIViewController fromViewController, NSObject sender);

    // -(NSArray<UIViewController *> * _Nonnull)allowedChildViewControllersForUnwindingFromSource:(UIStoryboardUnwindSegueSource * _Nonnull)source __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("allowedChildViewControllersForUnwindingFromSource:")]
    UIViewController[] AllowedChildViewControllersForUnwindingFromSource(UIStoryboardUnwindSegueSource source);

    // -(UIViewController * _Nullable)childViewControllerContainingSegueSource:(UIStoryboardUnwindSegueSource * _Nonnull)source __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("childViewControllerContainingSegueSource:")]
    [return: NullAllowed]
    UIViewController ChildViewControllerContainingSegueSource(UIStoryboardUnwindSegueSource source);

    // -(UIViewController * _Nullable)viewControllerForUnwindSegueAction:(SEL _Nonnull)action fromViewController:(UIViewController * _Nonnull)fromViewController withSender:(id _Nullable)sender __attribute__((availability(ios, introduced=6_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 6, 0)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("viewControllerForUnwindSegueAction:fromViewController:withSender:")]
    [return: NullAllowed]
    UIViewController ViewControllerForUnwindSegueAction(Selector action, UIViewController fromViewController, [NullAllowed] NSObject sender);

    // -(void)unwindForSegue:(UIStoryboardSegue * _Nonnull)unwindSegue towardsViewController:(UIViewController * _Nonnull)subsequentVC __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("unwindForSegue:towardsViewController:")]
    void UnwindForSegue(UIStoryboardSegue unwindSegue, UIViewController subsequentVC);

    // -(UIStoryboardSegue * _Nullable)segueForUnwindingToViewController:(UIViewController * _Nonnull)toViewController fromViewController:(UIViewController * _Nonnull)fromViewController identifier:(NSString * _Nullable)identifier __attribute__((availability(ios, introduced=6_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 6, 0)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("segueForUnwindingToViewController:fromViewController:identifier:")]
    [return: NullAllowed]
    UIStoryboardSegue SegueForUnwindingToViewController(UIViewController toViewController, UIViewController fromViewController, [NullAllowed] string identifier);

    // -(void)viewWillAppear:(BOOL)animated;
    [Export("viewWillAppear:")]
    void ViewWillAppear(bool animated);

    // -(void)viewDidAppear:(BOOL)animated;
    [Export("viewDidAppear:")]
    void ViewDidAppear(bool animated);

    // -(void)viewWillDisappear:(BOOL)animated;
    [Export("viewWillDisappear:")]
    void ViewWillDisappear(bool animated);

    // -(void)viewDidDisappear:(BOOL)animated;
    [Export("viewDidDisappear:")]
    void ViewDidDisappear(bool animated);

    // -(void)viewWillLayoutSubviews __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("viewWillLayoutSubviews")]
    void ViewWillLayoutSubviews();

    // -(void)viewDidLayoutSubviews __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("viewDidLayoutSubviews")]
    void ViewDidLayoutSubviews();

    // @property (copy, nonatomic) NSString * _Nullable title;
    [NullAllowed, Export("title")]
    string Title { get; set; }

    // -(void)didReceiveMemoryWarning;
    [Export("didReceiveMemoryWarning")]
    void DidReceiveMemoryWarning();

    // @property (readonly, nonatomic, weak) UIViewController * _Nullable parentViewController;
    [NullAllowed, Export("parentViewController", ArgumentSemantic.Weak)]
    UIViewController ParentViewController { get; }

    // @property (readonly, nonatomic) UIViewController * _Nullable modalViewController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=6_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 6, 0)]
    [NoTV]
    [NullAllowed, Export("modalViewController")]
    UIViewController ModalViewController { get; }

    // @property (readonly, nonatomic) UIViewController * _Nullable presentedViewController __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("presentedViewController")]
    UIViewController PresentedViewController { get; }

    // @property (readonly, nonatomic) UIViewController * _Nullable presentingViewController __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("presentingViewController")]
    UIViewController PresentingViewController { get; }

    // @property (assign, nonatomic) BOOL definesPresentationContext __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("definesPresentationContext")]
    bool DefinesPresentationContext { get; set; }

    // @property (assign, nonatomic) BOOL providesPresentationContextTransitionStyle __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("providesPresentationContextTransitionStyle")]
    bool ProvidesPresentationContextTransitionStyle { get; set; }

    // @property (nonatomic) BOOL restoresFocusAfterTransition __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("restoresFocusAfterTransition")]
    bool RestoresFocusAfterTransition { get; set; }

    // @property (readonly, getter = isBeingPresented, nonatomic) BOOL beingPresented __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("beingPresented")]
    bool BeingPresented { [Bind("isBeingPresented")] get; }

    // @property (readonly, getter = isBeingDismissed, nonatomic) BOOL beingDismissed __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("beingDismissed")]
    bool BeingDismissed { [Bind("isBeingDismissed")] get; }

    // @property (readonly, getter = isMovingToParentViewController, nonatomic) BOOL movingToParentViewController __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("movingToParentViewController")]
    bool MovingToParentViewController { [Bind("isMovingToParentViewController")] get; }

    // @property (readonly, getter = isMovingFromParentViewController, nonatomic) BOOL movingFromParentViewController __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("movingFromParentViewController")]
    bool MovingFromParentViewController { [Bind("isMovingFromParentViewController")] get; }

    // -(void)presentViewController:(UIViewController * _Nonnull)viewControllerToPresent animated:(BOOL)flag completion:(void (^ _Nullable)(void))completion __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("presentViewController:animated:completion:")]
    void PresentViewController(UIViewController viewControllerToPresent, bool flag, [NullAllowed] Action completion);

    // -(void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("dismissViewControllerAnimated:completion:")]
    void DismissViewControllerAnimated(bool flag, [NullAllowed] Action completion);

    // -(void)presentModalViewController:(UIViewController * _Nonnull)modalViewController animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=6_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 6, 0)]
    [NoTV]
    [Export("presentModalViewController:animated:")]
    void PresentModalViewController(UIViewController modalViewController, bool animated);

    // -(void)dismissModalViewControllerAnimated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=6_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 6, 0)]
    [NoTV]
    [Export("dismissModalViewControllerAnimated:")]
    void DismissModalViewControllerAnimated(bool animated);

    // @property (assign, nonatomic) UIModalTransitionStyle modalTransitionStyle __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("modalTransitionStyle", ArgumentSemantic.Assign)]
    UIModalTransitionStyle ModalTransitionStyle { get; set; }

    // @property (assign, nonatomic) UIModalPresentationStyle modalPresentationStyle __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Export("modalPresentationStyle", ArgumentSemantic.Assign)]
    UIModalPresentationStyle ModalPresentationStyle { get; set; }

    // @property (assign, nonatomic) BOOL modalPresentationCapturesStatusBarAppearance __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("modalPresentationCapturesStatusBarAppearance")]
    bool ModalPresentationCapturesStatusBarAppearance { get; set; }

    // @property (readonly, nonatomic) BOOL disablesAutomaticKeyboardDismissal __attribute__((availability(ios, introduced=4_3)));
    [iOS(4, 3)]
    [Export("disablesAutomaticKeyboardDismissal")]
    bool DisablesAutomaticKeyboardDismissal { get; }

    // @property (assign, nonatomic) BOOL wantsFullScreenLayout __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 7, 0)]
    [NoTV]
    [Export("wantsFullScreenLayout")]
    bool WantsFullScreenLayout { get; set; }

    // @property (assign, nonatomic) UIRectEdge edgesForExtendedLayout __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("edgesForExtendedLayout", ArgumentSemantic.Assign)]
    UIRectEdge EdgesForExtendedLayout { get; set; }

    // @property (assign, nonatomic) BOOL extendedLayoutIncludesOpaqueBars __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("extendedLayoutIncludesOpaqueBars")]
    bool ExtendedLayoutIncludesOpaqueBars { get; set; }

    // @property (assign, nonatomic) BOOL automaticallyAdjustsScrollViewInsets __attribute__((availability(tvos, introduced=7.0, deprecated=11.0))) __attribute__((availability(ios, introduced=7.0, deprecated=11.0)));
    [Introduced(PlatformName.TvOS, 7, 0, message: "Use UIScrollView's contentInsetAdjustmentBehavior instead")]
    [Deprecated(PlatformName.TvOS, 11, 0, message: "Use UIScrollView's contentInsetAdjustmentBehavior instead")]
    [Introduced(PlatformName.iOS, 7, 0, message: "Use UIScrollView's contentInsetAdjustmentBehavior instead")]
    [Deprecated(PlatformName.iOS, 11, 0, message: "Use UIScrollView's contentInsetAdjustmentBehavior instead")]
    [Export("automaticallyAdjustsScrollViewInsets")]
    bool AutomaticallyAdjustsScrollViewInsets { get; set; }

    // @property (nonatomic) CGSize preferredContentSize __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("preferredContentSize", ArgumentSemantic.Assign)]
    CGSize PreferredContentSize { get; set; }

    // @property (readonly, nonatomic) UIStatusBarStyle preferredStatusBarStyle __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("preferredStatusBarStyle")]
    UIStatusBarStyle PreferredStatusBarStyle { get; }

    // @property (readonly, nonatomic) BOOL prefersStatusBarHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("prefersStatusBarHidden")]
    bool PrefersStatusBarHidden { get; }

    // @property (readonly, nonatomic) UIStatusBarAnimation preferredStatusBarUpdateAnimation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("preferredStatusBarUpdateAnimation")]
    UIStatusBarAnimation PreferredStatusBarUpdateAnimation { get; }

    // -(void)setNeedsStatusBarAppearanceUpdate __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("setNeedsStatusBarAppearanceUpdate")]
    void SetNeedsStatusBarAppearanceUpdate();

    // -(UIViewController * _Nullable)targetViewControllerForAction:(SEL _Nonnull)action sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("targetViewControllerForAction:sender:")]
    [return: NullAllowed]
    UIViewController TargetViewControllerForAction(Selector action, [NullAllowed] NSObject sender);

    // -(void)showViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("showViewController:sender:")]
    void ShowViewController(UIViewController vc, [NullAllowed] NSObject sender);

    // -(void)showDetailViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("showDetailViewController:sender:")]
    void ShowDetailViewController(UIViewController vc, [NullAllowed] NSObject sender);

    // @property (readonly, nonatomic) UIUserInterfaceStyle preferredUserInterfaceStyle __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.0)));
    [TV(11, 0), NoWatch, NoiOS]
    [Export("preferredUserInterfaceStyle")]
    UIUserInterfaceStyle PreferredUserInterfaceStyle { get; }

    // -(void)setNeedsUserInterfaceAppearanceUpdate __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.0)));
    [TV(11, 0), NoWatch, NoiOS]
    [Export("setNeedsUserInterfaceAppearanceUpdate")]
    void SetNeedsUserInterfaceAppearanceUpdate();
}

// @interface UIViewControllerRotation (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIViewControllerRotation
{
    // +(void)attemptRotationToDeviceOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Static]
    [Export("attemptRotationToDeviceOrientation")]
    void AttemptRotationToDeviceOrientation();

    // -(BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=6_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 6, 0)]
    [NoTV]
    [Export("shouldAutorotateToInterfaceOrientation:")]
    bool ShouldAutorotateToInterfaceOrientation(UIInterfaceOrientation toInterfaceOrientation);

    // @property (readonly, nonatomic) BOOL shouldAutorotate __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Export("shouldAutorotate")]
    bool ShouldAutorotate { get; }

    // @property (readonly, nonatomic) UIInterfaceOrientationMask supportedInterfaceOrientations __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Export("supportedInterfaceOrientations")]
    UIInterfaceOrientationMask SupportedInterfaceOrientations { get; }

    // @property (readonly, nonatomic) UIInterfaceOrientation preferredInterfaceOrientationForPresentation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [Export("preferredInterfaceOrientationForPresentation")]
    UIInterfaceOrientation PreferredInterfaceOrientationForPresentation { get; }

    // -(UIView * _Nullable)rotatingHeaderView __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Header views are animated along with the rest of the view hierarchy")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Header views are animated along with the rest of the view hierarchy")]
    [NoTV]
    [NullAllowed, Export("rotatingHeaderView")]
    [Verify(MethodToProperty)]
    UIView RotatingHeaderView { get; }

    // -(UIView * _Nullable)rotatingFooterView __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Footer views are animated along with the rest of the view hierarchy")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Footer views are animated along with the rest of the view hierarchy")]
    [NoTV]
    [NullAllowed, Export("rotatingFooterView")]
    [Verify(MethodToProperty)]
    UIView RotatingFooterView { get; }

    // @property (readonly, nonatomic) UIInterfaceOrientation interfaceOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [NoTV]
    [Export("interfaceOrientation")]
    UIInterfaceOrientation InterfaceOrientation { get; }

    // -(void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Implement viewWillTransitionToSize:withTransitionCoordinator: instead")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Implement viewWillTransitionToSize:withTransitionCoordinator: instead")]
    [NoTV]
    [Export("willRotateToInterfaceOrientation:duration:")]
    void WillRotateToInterfaceOrientation(UIInterfaceOrientation toInterfaceOrientation, double duration);

    // -(void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [NoTV]
    [Export("didRotateFromInterfaceOrientation:")]
    void DidRotateFromInterfaceOrientation(UIInterfaceOrientation fromInterfaceOrientation);

    // -(void)willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0, message: "Implement viewWillTransitionToSize:withTransitionCoordinator: instead")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Implement viewWillTransitionToSize:withTransitionCoordinator: instead")]
    [NoTV]
    [Export("willAnimateRotationToInterfaceOrientation:duration:")]
    void WillAnimateRotationToInterfaceOrientation(UIInterfaceOrientation toInterfaceOrientation, double duration);

    // -(void)willAnimateFirstHalfOfRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=5_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 5, 0)]
    [NoTV]
    [Export("willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:")]
    void WillAnimateFirstHalfOfRotationToInterfaceOrientation(UIInterfaceOrientation toInterfaceOrientation, double duration);

    // -(void)didAnimateFirstHalfOfRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=5_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 5, 0)]
    [NoTV]
    [Export("didAnimateFirstHalfOfRotationToInterfaceOrientation:")]
    void DidAnimateFirstHalfOfRotationToInterfaceOrientation(UIInterfaceOrientation toInterfaceOrientation);

    // -(void)willAnimateSecondHalfOfRotationFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation duration:(NSTimeInterval)duration __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=5_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 5, 0)]
    [NoTV]
    [Export("willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:")]
    void WillAnimateSecondHalfOfRotationFromInterfaceOrientation(UIInterfaceOrientation fromInterfaceOrientation, double duration);
}

// @interface UIViewControllerEditing (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIViewControllerEditing
{
    // @property (getter = isEditing, nonatomic) BOOL editing;
    [Export("editing")]
    bool Editing { [Bind("isEditing")] get; set; }

    // -(void)setEditing:(BOOL)editing animated:(BOOL)animated;
    [Export("setEditing:animated:")]
    void SetEditing(bool editing, bool animated);

    // @property (readonly, nonatomic) UIBarButtonItem * _Nonnull editButtonItem;
    [Export("editButtonItem")]
    UIBarButtonItem EditButtonItem { get; }
}

// @interface UISearchDisplayControllerSupport (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UISearchDisplayControllerSupport
{
    // @property (readonly, nonatomic, strong) UISearchDisplayController * _Nullable searchDisplayController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [NoTV]
    [NullAllowed, Export("searchDisplayController", ArgumentSemantic.Strong)]
    UISearchDisplayController SearchDisplayController { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSExceptionName _Nonnull UIViewControllerHierarchyInconsistencyException __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Field("UIViewControllerHierarchyInconsistencyException", "__Internal")]
    NSString UIViewControllerHierarchyInconsistencyException { get; }
}

// @interface UIContainerViewControllerProtectedMethods (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIContainerViewControllerProtectedMethods
{
    // @property (readonly, nonatomic) NSArray<__kindof UIViewController *> * _Nonnull childViewControllers __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("childViewControllers")]
    UIViewController[] ChildViewControllers { get; }

    // -(void)addChildViewController:(UIViewController * _Nonnull)childController __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("addChildViewController:")]
    void AddChildViewController(UIViewController childController);

    // -(void)removeFromParentViewController __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("removeFromParentViewController")]
    void RemoveFromParentViewController();

    // -(void)transitionFromViewController:(UIViewController * _Nonnull)fromViewController toViewController:(UIViewController * _Nonnull)toViewController duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(void))animations completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("transitionFromViewController:toViewController:duration:options:animations:completion:")]
    void TransitionFromViewController(UIViewController fromViewController, UIViewController toViewController, double duration, UIViewAnimationOptions options, [NullAllowed] Action animations, [NullAllowed] Action<bool> completion);

    // -(void)beginAppearanceTransition:(BOOL)isAppearing animated:(BOOL)animated __attribute__((availability(ios, introduced=5.0)));
    [iOS(5, 0)]
    [Export("beginAppearanceTransition:animated:")]
    void BeginAppearanceTransition(bool isAppearing, bool animated);

    // -(void)endAppearanceTransition __attribute__((availability(ios, introduced=5.0)));
    [iOS(5, 0)]
    [Export("endAppearanceTransition")]
    void EndAppearanceTransition();

    // @property (readonly, nonatomic) UIViewController * _Nullable childViewControllerForStatusBarStyle __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [NullAllowed, Export("childViewControllerForStatusBarStyle")]
    UIViewController ChildViewControllerForStatusBarStyle { get; }

    // @property (readonly, nonatomic) UIViewController * _Nullable childViewControllerForStatusBarHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [NullAllowed, Export("childViewControllerForStatusBarHidden")]
    UIViewController ChildViewControllerForStatusBarHidden { get; }

    // -(void)setOverrideTraitCollection:(UITraitCollection * _Nullable)collection forChildViewController:(UIViewController * _Nonnull)childViewController __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("setOverrideTraitCollection:forChildViewController:")]
    void SetOverrideTraitCollection([NullAllowed] UITraitCollection collection, UIViewController childViewController);

    // -(UITraitCollection * _Nullable)overrideTraitCollectionForChildViewController:(UIViewController * _Nonnull)childViewController __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("overrideTraitCollectionForChildViewController:")]
    [return: NullAllowed]
    UITraitCollection OverrideTraitCollectionForChildViewController(UIViewController childViewController);

    // @property (readonly, nonatomic) UIViewController * _Nullable childViewControllerForUserInterfaceStyle __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.0)));
    [TV(11, 0), NoWatch, NoiOS]
    [NullAllowed, Export("childViewControllerForUserInterfaceStyle")]
    UIViewController ChildViewControllerForUserInterfaceStyle { get; }
}

// @interface UIContainerViewControllerCallbacks (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIContainerViewControllerCallbacks
{
    // -(BOOL)automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=6_0)));
    [Introduced(PlatformName.iOS, 5, 0)]
    [Deprecated(PlatformName.iOS, 6, 0)]
    [NoTV]
    [Export("automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers")]
    [Verify(MethodToProperty)]
    bool AutomaticallyForwardAppearanceAndRotationMethodsToChildViewControllers { get; }

    // -(BOOL)shouldAutomaticallyForwardRotationMethods __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 6, 0, message: "Manually forward viewWillTransitionToSize:withTransitionCoordinator: if necessary")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Manually forward viewWillTransitionToSize:withTransitionCoordinator: if necessary")]
    [NoTV]
    [Export("shouldAutomaticallyForwardRotationMethods")]
    [Verify(MethodToProperty)]
    bool ShouldAutomaticallyForwardRotationMethods { get; }

    // @property (readonly, nonatomic) BOOL shouldAutomaticallyForwardAppearanceMethods __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("shouldAutomaticallyForwardAppearanceMethods")]
    bool ShouldAutomaticallyForwardAppearanceMethods { get; }

    // -(void)willMoveToParentViewController:(UIViewController * _Nullable)parent __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("willMoveToParentViewController:")]
    void WillMoveToParentViewController([NullAllowed] UIViewController parent);

    // -(void)didMoveToParentViewController:(UIViewController * _Nullable)parent __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("didMoveToParentViewController:")]
    void DidMoveToParentViewController([NullAllowed] UIViewController parent);
}

// @interface UIStateRestoration (UIViewController) <UIStateRestoring>
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIStateRestoration : IUIStateRestoring
{
    // @property (copy, nonatomic) NSString * _Nullable restorationIdentifier __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("restorationIdentifier")]
    string RestorationIdentifier { get; set; }

    // @property (assign, readwrite, nonatomic) Class<UIViewControllerRestoration> _Nullable restorationClass __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("restorationClass", ArgumentSemantic.Assign)]
    UIViewControllerRestoration RestorationClass { get; set; }

    // -(void)encodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("encodeRestorableStateWithCoder:")]
    void EncodeRestorableStateWithCoder(NSCoder coder);

    // -(void)decodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("decodeRestorableStateWithCoder:")]
    void DecodeRestorableStateWithCoder(NSCoder coder);

    // -(void)applicationFinishedRestoringState __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("applicationFinishedRestoringState")]
    void ApplicationFinishedRestoringState();
}

// @interface UIConstraintBasedLayoutCoreMethods (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIConstraintBasedLayoutCoreMethods
{
    // -(void)updateViewConstraints __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("updateViewConstraints")]
    void UpdateViewConstraints();
}

// @interface UIViewControllerTransitioning (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIViewControllerTransitioning
{
    [Wrap("WeakTransitioningDelegate")]
    [NullAllowed]
    UIViewControllerTransitioningDelegate TransitioningDelegate { get; set; }

    // @property (nonatomic, weak) id<UIViewControllerTransitioningDelegate> _Nullable transitioningDelegate __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("transitioningDelegate", ArgumentSemantic.Weak)]
    NSObject WeakTransitioningDelegate { get; set; }
}

// @interface UILayoutSupport (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UILayoutSupport
{
    // @property (readonly, nonatomic, strong) id<UILayoutSupport> _Nonnull topLayoutGuide __attribute__((availability(tvos, introduced=7.0, deprecated=11.0))) __attribute__((availability(ios, introduced=7.0, deprecated=11.0)));
    [Introduced(PlatformName.TvOS, 7, 0, message: "Use view.safeAreaLayoutGuide.topAnchor instead of topLayoutGuide.bottomAnchor")]
    [Deprecated(PlatformName.TvOS, 11, 0, message: "Use view.safeAreaLayoutGuide.topAnchor instead of topLayoutGuide.bottomAnchor")]
    [Introduced(PlatformName.iOS, 7, 0, message: "Use view.safeAreaLayoutGuide.topAnchor instead of topLayoutGuide.bottomAnchor")]
    [Deprecated(PlatformName.iOS, 11, 0, message: "Use view.safeAreaLayoutGuide.topAnchor instead of topLayoutGuide.bottomAnchor")]
    [Export("topLayoutGuide", ArgumentSemantic.Strong)]
    UILayoutSupport TopLayoutGuide { get; }

    // @property (readonly, nonatomic, strong) id<UILayoutSupport> _Nonnull bottomLayoutGuide __attribute__((availability(tvos, introduced=7.0, deprecated=11.0))) __attribute__((availability(ios, introduced=7.0, deprecated=11.0)));
    [Introduced(PlatformName.TvOS, 7, 0, message: "Use view.safeAreaLayoutGuide.bottomAnchor instead of bottomLayoutGuide.topAnchor")]
    [Deprecated(PlatformName.TvOS, 11, 0, message: "Use view.safeAreaLayoutGuide.bottomAnchor instead of bottomLayoutGuide.topAnchor")]
    [Introduced(PlatformName.iOS, 7, 0, message: "Use view.safeAreaLayoutGuide.bottomAnchor instead of bottomLayoutGuide.topAnchor")]
    [Deprecated(PlatformName.iOS, 11, 0, message: "Use view.safeAreaLayoutGuide.bottomAnchor instead of bottomLayoutGuide.topAnchor")]
    [Export("bottomLayoutGuide", ArgumentSemantic.Strong)]
    UILayoutSupport BottomLayoutGuide { get; }

    // @property (nonatomic) UIEdgeInsets additionalSafeAreaInsets __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("additionalSafeAreaInsets", ArgumentSemantic.Assign)]
    UIEdgeInsets AdditionalSafeAreaInsets { get; set; }

    // @property (readonly, nonatomic) NSDirectionalEdgeInsets systemMinimumLayoutMargins __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("systemMinimumLayoutMargins")]
    NSDirectionalEdgeInsets SystemMinimumLayoutMargins { get; }

    // @property (nonatomic) BOOL viewRespectsSystemMinimumLayoutMargins __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("viewRespectsSystemMinimumLayoutMargins")]
    bool ViewRespectsSystemMinimumLayoutMargins { get; set; }

    // -(void)viewLayoutMarginsDidChange __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((objc_requires_super));
    [TV(11, 0), iOS(11, 0)]
    [Export("viewLayoutMarginsDidChange")]
    [RequiresSuper]
    void ViewLayoutMarginsDidChange();

    // -(void)viewSafeAreaInsetsDidChange __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0))) __attribute__((objc_requires_super));
    [TV(11, 0), iOS(11, 0)]
    [Export("viewSafeAreaInsetsDidChange")]
    [RequiresSuper]
    void ViewSafeAreaInsetsDidChange();
}

// @interface UIKeyCommand (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIKeyCommand
{
    // -(void)addKeyCommand:(UIKeyCommand * _Nonnull)keyCommand __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("addKeyCommand:")]
    void AddKeyCommand(UIKeyCommand keyCommand);

    // -(void)removeKeyCommand:(UIKeyCommand * _Nonnull)keyCommand __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("removeKeyCommand:")]
    void RemoveKeyCommand(UIKeyCommand keyCommand);
}

// @interface NSExtensionAdditions (UIViewController) <NSExtensionRequestHandling>
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_NSExtensionAdditions : INSExtensionRequestHandling
{
    // @property (readonly, nonatomic, strong) NSExtensionContext * _Nullable extensionContext __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("extensionContext", ArgumentSemantic.Strong)]
    NSExtensionContext ExtensionContext { get; }
}

// @interface UIAdaptivePresentations (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIAdaptivePresentations
{
    // @property (readonly, nonatomic) UIPresentationController * _Nullable presentationController __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("presentationController")]
    UIPresentationController PresentationController { get; }

    // @property (readonly, nonatomic) UIPopoverPresentationController * _Nullable popoverPresentationController __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("popoverPresentationController")]
    UIPopoverPresentationController PopoverPresentationController { get; }
}

// @protocol UIViewControllerPreviewing <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIViewControllerPreviewing
{
    // @required @property (readonly, nonatomic) UIGestureRecognizer * _Nonnull previewingGestureRecognizerForFailureRelationship __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Abstract]
    [Export("previewingGestureRecognizerForFailureRelationship")]
    UIGestureRecognizer PreviewingGestureRecognizerForFailureRelationship { get; }

    [Wrap("WeakDelegate"), Abstract]
    UIViewControllerPreviewingDelegate Delegate { get; }

    // @required @property (readonly, nonatomic) id<UIViewControllerPreviewingDelegate> _Nonnull delegate __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Abstract]
    [NullAllowed, Export("delegate")]
    NSObject WeakDelegate { get; }

    // @required @property (readonly, nonatomic) UIView * _Nonnull sourceView __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Abstract]
    [Export("sourceView")]
    UIView SourceView { get; }

    // @required @property (nonatomic) CGRect sourceRect __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Abstract]
    [Export("sourceRect", ArgumentSemantic.Assign)]
    CGRect SourceRect { get; set; }
}

// @protocol UIViewControllerPreviewingDelegate <NSObject>
[iOS(9, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIViewControllerPreviewingDelegate
{
    // @required -(UIViewController * _Nullable)previewingContext:(id<UIViewControllerPreviewing> _Nonnull)previewingContext viewControllerForLocation:(CGPoint)location __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Abstract]
    [Export("previewingContext:viewControllerForLocation:")]
    [return: NullAllowed]
    UIViewController PreviewingContext(UIViewControllerPreviewing previewingContext, CGPoint location);

    // @required -(void)previewingContext:(id<UIViewControllerPreviewing> _Nonnull)previewingContext commitViewController:(UIViewController * _Nonnull)viewControllerToCommit __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Abstract]
    [Export("previewingContext:commitViewController:")]
    void PreviewingContext(UIViewControllerPreviewing previewingContext, UIViewController viewControllerToCommit);
}

// @interface UIViewControllerPreviewingRegistration (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIViewControllerPreviewingRegistration
{
    // -(id<UIViewControllerPreviewing> _Nonnull)registerForPreviewingWithDelegate:(id<UIViewControllerPreviewingDelegate> _Nonnull)delegate sourceView:(UIView * _Nonnull)sourceView __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("registerForPreviewingWithDelegate:sourceView:")]
    UIViewControllerPreviewing RegisterForPreviewingWithDelegate(UIViewControllerPreviewingDelegate @delegate, UIView sourceView);

    // -(void)unregisterForPreviewingWithContext:(id<UIViewControllerPreviewing> _Nonnull)previewing __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("unregisterForPreviewingWithContext:")]
    void UnregisterForPreviewingWithContext(UIViewControllerPreviewing previewing);
}

// @interface UIScreenEdgesDeferringSystemGestures (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIScreenEdgesDeferringSystemGestures
{
    // @property (readonly, nonatomic) UIViewController * _Nullable childViewControllerForScreenEdgesDeferringSystemGestures __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [NullAllowed, Export("childViewControllerForScreenEdgesDeferringSystemGestures")]
    UIViewController ChildViewControllerForScreenEdgesDeferringSystemGestures { get; }

    // @property (readonly, nonatomic) UIRectEdge preferredScreenEdgesDeferringSystemGestures __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("preferredScreenEdgesDeferringSystemGestures")]
    UIRectEdge PreferredScreenEdgesDeferringSystemGestures { get; }

    // -(void)setNeedsUpdateOfScreenEdgesDeferringSystemGestures __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("setNeedsUpdateOfScreenEdgesDeferringSystemGestures")]
    void SetNeedsUpdateOfScreenEdgesDeferringSystemGestures();
}

// @interface UIHomeIndicatorAutoHidden (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIHomeIndicatorAutoHidden
{
    // @property (readonly, nonatomic) UIViewController * _Nullable childViewControllerForHomeIndicatorAutoHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [NullAllowed, Export("childViewControllerForHomeIndicatorAutoHidden")]
    UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }

    // @property (readonly, nonatomic) BOOL prefersHomeIndicatorAutoHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("prefersHomeIndicatorAutoHidden")]
    bool PrefersHomeIndicatorAutoHidden { get; }

    // -(void)setNeedsUpdateOfHomeIndicatorAutoHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("setNeedsUpdateOfHomeIndicatorAutoHidden")]
    void SetNeedsUpdateOfHomeIndicatorAutoHidden();
}

// @interface  (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_
{
    // @property (readonly, nonatomic) NSArray<id<UIPreviewActionItem>> * _Nonnull previewActionItems __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("previewActionItems")]
    UIPreviewActionItem[] PreviewActionItems { get; }
}

// @protocol UIPreviewActionItem <NSObject>
[iOS(9, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIPreviewActionItem
{
    // @required @property (readonly, copy, nonatomic) NSString * _Nonnull title;
    [Abstract]
    [Export("title")]
    string Title { get; }
}

// @interface UIPreviewAction : NSObject <NSCopying, UIPreviewActionItem>
[iOS(9, 0)]
[BaseType(typeof(NSObject))]
interface UIPreviewAction : INSCopying, IUIPreviewActionItem
{
    // @property (readonly, copy, nonatomic) void (^ _Nonnull)(id<UIPreviewActionItem> _Nonnull, UIViewController * _Nonnull) handler;
    [Export("handler", ArgumentSemantic.Copy)]
    Action<UIPreviewActionItem, UIViewController> Handler { get; }

    // +(instancetype _Nonnull)actionWithTitle:(NSString * _Nonnull)title style:(UIPreviewActionStyle)style handler:(void (^ _Nonnull)(UIPreviewAction * _Nonnull, UIViewController * _Nonnull))handler;
    [Static]
    [Export("actionWithTitle:style:handler:")]
    UIPreviewAction ActionWithTitle(string title, UIPreviewActionStyle style, Action<UIPreviewAction, UIViewController> handler);
}

// @interface UIPreviewActionGroup : NSObject <NSCopying, UIPreviewActionItem>
[iOS(9, 0)]
[BaseType(typeof(NSObject))]
interface UIPreviewActionGroup : INSCopying, IUIPreviewActionItem
{
    // +(instancetype _Nonnull)actionGroupWithTitle:(NSString * _Nonnull)title style:(UIPreviewActionStyle)style actions:(NSArray<UIPreviewAction *> * _Nonnull)actions;
    [Static]
    [Export("actionGroupWithTitle:style:actions:")]
    UIPreviewActionGroup ActionGroupWithTitle(string title, UIPreviewActionStyle style, UIPreviewAction[] actions);
}

// typedef void (^UIActivityViewControllerCompletionHandler)(UIActivityType _Nullable, BOOL);
delegate void UIActivityViewControllerCompletionHandler([NullAllowed] string arg0, bool arg1);

// typedef void (^UIActivityViewControllerCompletionWithItemsHandler)(UIActivityType _Nullable, BOOL, NSArray * _Nullable, NSError * _Nullable);
delegate void UIActivityViewControllerCompletionWithItemsHandler([NullAllowed] string arg0, bool arg1, [NullAllowed] NSObject[] arg2, [NullAllowed] NSError arg3);

// @interface UIActivityViewController : UIViewController
[NoTV, iOS(6, 0)]
[BaseType(typeof(UIViewController))]
[DisableDefaultCtor]
interface UIActivityViewController
{
    // -(instancetype _Nonnull)initWithActivityItems:(NSArray * _Nonnull)activityItems applicationActivities:(NSArray<__kindof UIActivity *> * _Nullable)applicationActivities __attribute__((objc_designated_initializer));
    [Export("initWithActivityItems:applicationActivities:")]
    [DesignatedInitializer]
    [Verify(StronglyTypedNSArray)]
    IntPtr Constructor(NSObject[] activityItems, [NullAllowed] UIActivity[] applicationActivities);

    // @property (copy, nonatomic) UIActivityViewControllerCompletionHandler _Nullable completionHandler __attribute__((availability(ios, introduced=6_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 6, 0, message: "Use completionWithItemsHandler instead.")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Use completionWithItemsHandler instead.")]
    [NullAllowed, Export("completionHandler", ArgumentSemantic.Copy)]
    UIActivityViewControllerCompletionHandler CompletionHandler { get; set; }

    // @property (copy, nonatomic) UIActivityViewControllerCompletionWithItemsHandler _Nullable completionWithItemsHandler __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("completionWithItemsHandler", ArgumentSemantic.Copy)]
    UIActivityViewControllerCompletionWithItemsHandler CompletionWithItemsHandler { get; set; }

    // @property (copy, nonatomic) NSArray<UIActivityType> * _Nullable excludedActivityTypes;
    [NullAllowed, Export("excludedActivityTypes", ArgumentSemantic.Copy)]
    string[] ExcludedActivityTypes { get; set; }
}

// @interface UIAlertAction : NSObject <NSCopying>
[iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface UIAlertAction : INSCopying
{
    // +(instancetype _Nonnull)actionWithTitle:(NSString * _Nullable)title style:(UIAlertActionStyle)style handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
    [Static]
    [Export("actionWithTitle:style:handler:")]
    UIAlertAction ActionWithTitle([NullAllowed] string title, UIAlertActionStyle style, [NullAllowed] Action<UIAlertAction> handler);

    // @property (readonly, nonatomic) NSString * _Nullable title;
    [NullAllowed, Export("title")]
    string Title { get; }

    // @property (readonly, nonatomic) UIAlertActionStyle style;
    [Export("style")]
    UIAlertActionStyle Style { get; }

    // @property (getter = isEnabled, nonatomic) BOOL enabled;
    [Export("enabled")]
    bool Enabled { [Bind("isEnabled")] get; set; }
}

// @interface UIAlertController : UIViewController
[iOS(8, 0)]
[BaseType(typeof(UIViewController))]
interface UIAlertController
{
    // +(instancetype _Nonnull)alertControllerWithTitle:(NSString * _Nullable)title message:(NSString * _Nullable)message preferredStyle:(UIAlertControllerStyle)preferredStyle;
    [Static]
    [Export("alertControllerWithTitle:message:preferredStyle:")]
    UIAlertController AlertControllerWithTitle([NullAllowed] string title, [NullAllowed] string message, UIAlertControllerStyle preferredStyle);

    // -(void)addAction:(UIAlertAction * _Nonnull)action;
    [Export("addAction:")]
    void AddAction(UIAlertAction action);

    // @property (readonly, nonatomic) NSArray<UIAlertAction *> * _Nonnull actions;
    [Export("actions")]
    UIAlertAction[] Actions { get; }

    // @property (nonatomic, strong) UIAlertAction * _Nullable preferredAction __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [NullAllowed, Export("preferredAction", ArgumentSemantic.Strong)]
    UIAlertAction PreferredAction { get; set; }

    // -(void)addTextFieldWithConfigurationHandler:(void (^ _Nullable)(UITextField * _Nonnull))configurationHandler;
    [Export("addTextFieldWithConfigurationHandler:")]
    void AddTextFieldWithConfigurationHandler([NullAllowed] Action<UITextField> configurationHandler);

    // @property (readonly, nonatomic) NSArray<UITextField *> * _Nullable textFields;
    [NullAllowed, Export("textFields")]
    UITextField[] TextFields { get; }

    // @property (copy, nonatomic) NSString * _Nullable title;
    [NullAllowed, Export("title")]
    string Title { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable message;
    [NullAllowed, Export("message")]
    string Message { get; set; }

    // @property (readonly, nonatomic) UIAlertControllerStyle preferredStyle;
    [Export("preferredStyle")]
    UIAlertControllerStyle PreferredStyle { get; }
}

// @interface SpringLoading (UIAlertController) <UISpringLoadedInteractionSupporting>
[Category]
[BaseType(typeof(UIAlertController))]
interface UIAlertController_SpringLoading : IUISpringLoadedInteractionSupporting
{
}

// @protocol UIBarPositioning <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIBarPositioning
{
    // @required @property (readonly, nonatomic) UIBarPosition barPosition;
    [Abstract]
    [Export("barPosition")]
    UIBarPosition BarPosition { get; }
}

// @protocol UIBarPositioningDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIBarPositioningDelegate
{
    // @optional -(UIBarPosition)positionForBar:(id<UIBarPositioning> _Nonnull)bar;
    [Export("positionForBar:")]
    UIBarPosition PositionForBar(UIBarPositioning bar);
}

// @interface UIBarButtonItem : UIBarItem <NSCoding>
[iOS(2, 0)]
[BaseType(typeof(UIBarItem))]
interface UIBarButtonItem : INSCoding
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // -(instancetype _Nonnull)initWithImage:(UIImage * _Nullable)image style:(UIBarButtonItemStyle)style target:(id _Nullable)target action:(SEL _Nullable)action;
    [Export("initWithImage:style:target:action:")]
    IntPtr Constructor([NullAllowed] UIImage image, UIBarButtonItemStyle style, [NullAllowed] NSObject target, [NullAllowed] Selector action);

    // -(instancetype _Nonnull)initWithImage:(UIImage * _Nullable)image landscapeImagePhone:(UIImage * _Nullable)landscapeImagePhone style:(UIBarButtonItemStyle)style target:(id _Nullable)target action:(SEL _Nullable)action __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("initWithImage:landscapeImagePhone:style:target:action:")]
    IntPtr Constructor([NullAllowed] UIImage image, [NullAllowed] UIImage landscapeImagePhone, UIBarButtonItemStyle style, [NullAllowed] NSObject target, [NullAllowed] Selector action);

    // -(instancetype _Nonnull)initWithTitle:(NSString * _Nullable)title style:(UIBarButtonItemStyle)style target:(id _Nullable)target action:(SEL _Nullable)action;
    [Export("initWithTitle:style:target:action:")]
    IntPtr Constructor([NullAllowed] string title, UIBarButtonItemStyle style, [NullAllowed] NSObject target, [NullAllowed] Selector action);

    // -(instancetype _Nonnull)initWithBarButtonSystemItem:(UIBarButtonSystemItem)systemItem target:(id _Nullable)target action:(SEL _Nullable)action;
    [Export("initWithBarButtonSystemItem:target:action:")]
    IntPtr Constructor(UIBarButtonSystemItem systemItem, [NullAllowed] NSObject target, [NullAllowed] Selector action);

    // -(instancetype _Nonnull)initWithCustomView:(UIView * _Nonnull)customView;
    [Export("initWithCustomView:")]
    IntPtr Constructor(UIView customView);

    // @property (nonatomic) UIBarButtonItemStyle style;
    [Export("style", ArgumentSemantic.Assign)]
    UIBarButtonItemStyle Style { get; set; }

    // @property (nonatomic) CGFloat width;
    [Export("width")]
    nfloat Width { get; set; }

    // @property (copy, nonatomic) NSSet<NSString *> * _Nullable possibleTitles;
    [NullAllowed, Export("possibleTitles", ArgumentSemantic.Copy)]
    NSSet<NSString> PossibleTitles { get; set; }

    // @property (nonatomic, strong) __kindof UIView * _Nullable customView;
    [Export("customView", ArgumentSemantic.Strong)]
    UIView CustomView { get; set; }

    // @property (nonatomic) SEL _Nullable action;
    [NullAllowed, Export("action", ArgumentSemantic.Assign)]
    Selector Action { get; set; }

    // @property (nonatomic, weak) id _Nullable target;
    [NullAllowed, Export("target", ArgumentSemantic.Weak)]
    NSObject Target { get; set; }

    // -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setBackgroundImage:forState:barMetrics:")]
    void SetBackgroundImage([NullAllowed] UIImage backgroundImage, UIControlState state, UIBarMetrics barMetrics);

    // -(UIImage * _Nullable)backgroundImageForState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("backgroundImageForState:barMetrics:")]
    [return: NullAllowed]
    UIImage BackgroundImageForState(UIControlState state, UIBarMetrics barMetrics);

    // -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forState:(UIControlState)state style:(UIBarButtonItemStyle)style barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("setBackgroundImage:forState:style:barMetrics:")]
    void SetBackgroundImage([NullAllowed] UIImage backgroundImage, UIControlState state, UIBarButtonItemStyle style, UIBarMetrics barMetrics);

    // -(UIImage * _Nullable)backgroundImageForState:(UIControlState)state style:(UIBarButtonItemStyle)style barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("backgroundImageForState:style:barMetrics:")]
    [return: NullAllowed]
    UIImage BackgroundImageForState(UIControlState state, UIBarButtonItemStyle style, UIBarMetrics barMetrics);

    // @property (nonatomic, strong) UIColor * _Nullable tintColor __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("tintColor", ArgumentSemantic.Strong)]
    UIColor TintColor { get; set; }

    // -(void)setBackgroundVerticalPositionAdjustment:(CGFloat)adjustment forBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setBackgroundVerticalPositionAdjustment:forBarMetrics:")]
    void SetBackgroundVerticalPositionAdjustment(nfloat adjustment, UIBarMetrics barMetrics);

    // -(CGFloat)backgroundVerticalPositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("backgroundVerticalPositionAdjustmentForBarMetrics:")]
    nfloat BackgroundVerticalPositionAdjustmentForBarMetrics(UIBarMetrics barMetrics);

    // -(void)setTitlePositionAdjustment:(UIOffset)adjustment forBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setTitlePositionAdjustment:forBarMetrics:")]
    void SetTitlePositionAdjustment(UIOffset adjustment, UIBarMetrics barMetrics);

    // -(UIOffset)titlePositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("titlePositionAdjustmentForBarMetrics:")]
    UIOffset TitlePositionAdjustmentForBarMetrics(UIBarMetrics barMetrics);

    // -(void)setBackButtonBackgroundImage:(UIImage * _Nullable)backgroundImage forState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Export("setBackButtonBackgroundImage:forState:barMetrics:")]
    void SetBackButtonBackgroundImage([NullAllowed] UIImage backgroundImage, UIControlState state, UIBarMetrics barMetrics);

    // -(UIImage * _Nullable)backButtonBackgroundImageForState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Export("backButtonBackgroundImageForState:barMetrics:")]
    [return: NullAllowed]
    UIImage BackButtonBackgroundImageForState(UIControlState state, UIBarMetrics barMetrics);

    // -(void)setBackButtonTitlePositionAdjustment:(UIOffset)adjustment forBarMetrics:(UIBarMetrics)barMetrics __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Export("setBackButtonTitlePositionAdjustment:forBarMetrics:")]
    void SetBackButtonTitlePositionAdjustment(UIOffset adjustment, UIBarMetrics barMetrics);

    // -(UIOffset)backButtonTitlePositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Export("backButtonTitlePositionAdjustmentForBarMetrics:")]
    UIOffset BackButtonTitlePositionAdjustmentForBarMetrics(UIBarMetrics barMetrics);

    // -(void)setBackButtonBackgroundVerticalPositionAdjustment:(CGFloat)adjustment forBarMetrics:(UIBarMetrics)barMetrics __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Export("setBackButtonBackgroundVerticalPositionAdjustment:forBarMetrics:")]
    void SetBackButtonBackgroundVerticalPositionAdjustment(nfloat adjustment, UIBarMetrics barMetrics);

    // -(CGFloat)backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Export("backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:")]
    nfloat BackButtonBackgroundVerticalPositionAdjustmentForBarMetrics(UIBarMetrics barMetrics);
}

// @interface SpringLoading (UIBarButtonItem) <UISpringLoadedInteractionSupporting>
[Category]
[BaseType(typeof(UIBarButtonItem))]
interface UIBarButtonItem_SpringLoading : IUISpringLoadedInteractionSupporting
{
}

// @interface UIBarButtonItemGroup : NSObject <NSCoding>
[iOS(9, 0)]
[BaseType(typeof(NSObject))]
interface UIBarButtonItemGroup : INSCoding
{
    // -(instancetype _Nonnull)initWithBarButtonItems:(NSArray<UIBarButtonItem *> * _Nonnull)barButtonItems representativeItem:(UIBarButtonItem * _Nullable)representativeItem __attribute__((objc_designated_initializer));
    [Export("initWithBarButtonItems:representativeItem:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIBarButtonItem[] barButtonItems, [NullAllowed] UIBarButtonItem representativeItem);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (readwrite, copy, nonatomic) NSArray<UIBarButtonItem *> * _Nonnull barButtonItems;
    [Export("barButtonItems", ArgumentSemantic.Copy)]
    UIBarButtonItem[] BarButtonItems { get; set; }

    // @property (readwrite, nonatomic, strong) UIBarButtonItem * _Nullable representativeItem;
    [NullAllowed, Export("representativeItem", ArgumentSemantic.Strong)]
    UIBarButtonItem RepresentativeItem { get; set; }

    // @property (readonly, getter = isDisplayingRepresentativeItem, assign, nonatomic) BOOL displayingRepresentativeItem;
    [Export("displayingRepresentativeItem")]
    bool DisplayingRepresentativeItem { [Bind("isDisplayingRepresentativeItem")] get; }
}

// @interface UIBarButtonItemGroup (UIBarButtonItem)
[Category]
[BaseType(typeof(UIBarButtonItem))]
interface UIBarButtonItem_UIBarButtonItemGroup
{
    // @property (readonly, nonatomic, weak) UIBarButtonItemGroup * _Nullable buttonGroup __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [NullAllowed, Export("buttonGroup", ArgumentSemantic.Weak)]
    UIBarButtonItemGroup ButtonGroup { get; }
}

// @interface UIKitAdditions (NSIndexPath)
[Category]
[BaseType(typeof(NSIndexPath))]
interface NSIndexPath_UIKitAdditions
{
    // +(instancetype _Nonnull)indexPathForRow:(NSInteger)row inSection:(NSInteger)section;
    [Static]
    [Export("indexPathForRow:inSection:")]
    NSIndexPath IndexPathForRow(nint row, nint section);

    // +(instancetype _Nonnull)indexPathForItem:(NSInteger)item inSection:(NSInteger)section __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Static]
    [Export("indexPathForItem:inSection:")]
    NSIndexPath IndexPathForItem(nint item, nint section);

    // @property (readonly, nonatomic) NSInteger section;
    [Export("section")]
    nint Section { get; }

    // @property (readonly, nonatomic) NSInteger row;
    [Export("row")]
    nint Row { get; }

    // @property (readonly, nonatomic) NSInteger item __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("item")]
    nint Item { get; }
}

// @protocol UIDataSourceTranslating <NSObject>
[TV(11, 0), iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIDataSourceTranslating
{
    // @required -(NSInteger)presentationSectionIndexForDataSourceSectionIndex:(NSInteger)dataSourceSectionIndex;
    [Abstract]
    [Export("presentationSectionIndexForDataSourceSectionIndex:")]
    nint PresentationSectionIndexForDataSourceSectionIndex(nint dataSourceSectionIndex);

    // @required -(NSInteger)dataSourceSectionIndexForPresentationSectionIndex:(NSInteger)presentationSectionIndex;
    [Abstract]
    [Export("dataSourceSectionIndexForPresentationSectionIndex:")]
    nint DataSourceSectionIndexForPresentationSectionIndex(nint presentationSectionIndex);

    // @required -(NSIndexPath * _Nullable)presentationIndexPathForDataSourceIndexPath:(NSIndexPath * _Nullable)dataSourceIndexPath;
    [Abstract]
    [Export("presentationIndexPathForDataSourceIndexPath:")]
    [return: NullAllowed]
    NSIndexPath PresentationIndexPathForDataSourceIndexPath([NullAllowed] NSIndexPath dataSourceIndexPath);

    // @required -(NSIndexPath * _Nullable)dataSourceIndexPathForPresentationIndexPath:(NSIndexPath * _Nullable)presentationIndexPath;
    [Abstract]
    [Export("dataSourceIndexPathForPresentationIndexPath:")]
    [return: NullAllowed]
    NSIndexPath DataSourceIndexPathForPresentationIndexPath([NullAllowed] NSIndexPath presentationIndexPath);

    // @required -(void)performUsingPresentationValues:(void (^ _Nonnull)(void))actionsToTranslate;
    [Abstract]
    [Export("performUsingPresentationValues:")]
    void PerformUsingPresentationValues(Action actionsToTranslate);
}

// typedef void (^UICollectionViewLayoutInteractiveTransitionCompletion)(BOOL, BOOL);
delegate void UICollectionViewLayoutInteractiveTransitionCompletion(bool arg0, bool arg1);

// @interface UICollectionViewFocusUpdateContext : UIFocusUpdateContext
[iOS(9, 0)]
[BaseType(typeof(UIFocusUpdateContext))]
interface UICollectionViewFocusUpdateContext
{
    // @property (readonly, nonatomic, strong) NSIndexPath * _Nullable previouslyFocusedIndexPath;
    [NullAllowed, Export("previouslyFocusedIndexPath", ArgumentSemantic.Strong)]
    NSIndexPath PreviouslyFocusedIndexPath { get; }

    // @property (readonly, nonatomic, strong) NSIndexPath * _Nullable nextFocusedIndexPath;
    [NullAllowed, Export("nextFocusedIndexPath", ArgumentSemantic.Strong)]
    NSIndexPath NextFocusedIndexPath { get; }
}

// @protocol UICollectionViewDataSource <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UICollectionViewDataSource
{
    // @required -(NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
    [Abstract]
    [Export("collectionView:numberOfItemsInSection:")]
    nint CollectionView(UICollectionView collectionView, nint section);

    // @required -(__kindof UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Abstract]
    [Export("collectionView:cellForItemAtIndexPath:")]
    UICollectionViewCell CollectionView(UICollectionView collectionView, NSIndexPath indexPath);

    // @optional -(NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
    [Export("numberOfSectionsInCollectionView:")]
    nint NumberOfSectionsInCollectionView(UICollectionView collectionView);

    // @optional -(UICollectionReusableView * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView viewForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:viewForSupplementaryElementOfKind:atIndexPath:")]
    UICollectionReusableView CollectionView(UICollectionView collectionView, string kind, NSIndexPath indexPath);

    // @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canMoveItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("collectionView:canMoveItemAtIndexPath:")]
    bool CollectionView(UICollectionView collectionView, NSIndexPath indexPath);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView moveItemAtIndexPath:(NSIndexPath * _Nonnull)sourceIndexPath toIndexPath:(NSIndexPath * _Nonnull)destinationIndexPath __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("collectionView:moveItemAtIndexPath:toIndexPath:")]
    void CollectionView(UICollectionView collectionView, NSIndexPath sourceIndexPath, NSIndexPath destinationIndexPath);

    // @optional -(NSArray<NSString *> * _Nullable)indexTitlesForCollectionView:(UICollectionView * _Nonnull)collectionView __attribute__((availability(tvos, introduced=10.2)));
    [TV(10, 2)]
    [Export("indexTitlesForCollectionView:")]
    [return: NullAllowed]
    string[] IndexTitlesForCollectionView(UICollectionView collectionView);

    // @optional -(NSIndexPath * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView indexPathForIndexTitle:(NSString * _Nonnull)title atIndex:(NSInteger)index __attribute__((availability(tvos, introduced=10.2)));
    [TV(10, 2)]
    [Export("collectionView:indexPathForIndexTitle:atIndex:")]
    NSIndexPath CollectionView(UICollectionView collectionView, string title, nint index);
}

// @protocol UICollectionViewDataSourcePrefetching <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UICollectionViewDataSourcePrefetching
{
    // @required -(void)collectionView:(UICollectionView * _Nonnull)collectionView prefetchItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Abstract]
    [Export("collectionView:prefetchItemsAtIndexPaths:")]
    void PrefetchItemsAtIndexPaths(UICollectionView collectionView, NSIndexPath[] indexPaths);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView cancelPrefetchingForItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("collectionView:cancelPrefetchingForItemsAtIndexPaths:")]
    void CancelPrefetchingForItemsAtIndexPaths(UICollectionView collectionView, NSIndexPath[] indexPaths);
}

// @protocol UICollectionViewDelegate <UIScrollViewDelegate>
[Protocol, Model]
interface UICollectionViewDelegate : IUIScrollViewDelegate
{
    // @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:shouldHighlightItemAtIndexPath:")]
    bool CollectionView(UICollectionView collectionView, NSIndexPath indexPath);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:didHighlightItemAtIndexPath:")]
    void CollectionView(UICollectionView collectionView, NSIndexPath indexPath);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didUnhighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:didUnhighlightItemAtIndexPath:")]
    void CollectionView(UICollectionView collectionView, NSIndexPath indexPath);

    // @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:shouldSelectItemAtIndexPath:")]
    bool CollectionView(UICollectionView collectionView, NSIndexPath indexPath);

    // @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:shouldDeselectItemAtIndexPath:")]
    bool CollectionView(UICollectionView collectionView, NSIndexPath indexPath);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:didSelectItemAtIndexPath:")]
    void CollectionView(UICollectionView collectionView, NSIndexPath indexPath);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:didDeselectItemAtIndexPath:")]
    void CollectionView(UICollectionView collectionView, NSIndexPath indexPath);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("collectionView:willDisplayCell:forItemAtIndexPath:")]
    void CollectionView(UICollectionView collectionView, UICollectionViewCell cell, NSIndexPath indexPath);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplaySupplementaryView:(UICollectionReusableView * _Nonnull)view forElementKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:")]
    void CollectionView(UICollectionView collectionView, UICollectionReusableView view, string elementKind, NSIndexPath indexPath);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:didEndDisplayingCell:forItemAtIndexPath:")]
    void CollectionView(UICollectionView collectionView, UICollectionViewCell cell, NSIndexPath indexPath);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingSupplementaryView:(UICollectionReusableView * _Nonnull)view forElementOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:")]
    void CollectionView(UICollectionView collectionView, UICollectionReusableView view, string elementKind, NSIndexPath indexPath);

    // @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldShowMenuForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:shouldShowMenuForItemAtIndexPath:")]
    bool CollectionView(UICollectionView collectionView, NSIndexPath indexPath);

    // @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canPerformAction:(SEL _Nonnull)action forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath withSender:(id _Nullable)sender;
    [Export("collectionView:canPerformAction:forItemAtIndexPath:withSender:")]
    bool CollectionView(UICollectionView collectionView, Selector action, NSIndexPath indexPath, [NullAllowed] NSObject sender);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView performAction:(SEL _Nonnull)action forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath withSender:(id _Nullable)sender;
    [Export("collectionView:performAction:forItemAtIndexPath:withSender:")]
    void CollectionView(UICollectionView collectionView, Selector action, NSIndexPath indexPath, [NullAllowed] NSObject sender);

    // @optional -(UICollectionViewTransitionLayout * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView transitionLayoutForOldLayout:(UICollectionViewLayout * _Nonnull)fromLayout newLayout:(UICollectionViewLayout * _Nonnull)toLayout;
    [Export("collectionView:transitionLayoutForOldLayout:newLayout:")]
    UICollectionViewTransitionLayout CollectionView(UICollectionView collectionView, UICollectionViewLayout fromLayout, UICollectionViewLayout toLayout);

    // @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canFocusItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("collectionView:canFocusItemAtIndexPath:")]
    bool CollectionView(UICollectionView collectionView, NSIndexPath indexPath);

    // @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldUpdateFocusInContext:(UICollectionViewFocusUpdateContext * _Nonnull)context __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("collectionView:shouldUpdateFocusInContext:")]
    bool CollectionView(UICollectionView collectionView, UICollectionViewFocusUpdateContext context);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView didUpdateFocusInContext:(UICollectionViewFocusUpdateContext * _Nonnull)context withAnimationCoordinator:(UIFocusAnimationCoordinator * _Nonnull)coordinator __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("collectionView:didUpdateFocusInContext:withAnimationCoordinator:")]
    void CollectionView(UICollectionView collectionView, UICollectionViewFocusUpdateContext context, UIFocusAnimationCoordinator coordinator);

    // @optional -(NSIndexPath * _Nullable)indexPathForPreferredFocusedViewInCollectionView:(UICollectionView * _Nonnull)collectionView __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("indexPathForPreferredFocusedViewInCollectionView:")]
    [return: NullAllowed]
    NSIndexPath IndexPathForPreferredFocusedViewInCollectionView(UICollectionView collectionView);

    // @optional -(NSIndexPath * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView targetIndexPathForMoveFromItemAtIndexPath:(NSIndexPath * _Nonnull)originalIndexPath toProposedIndexPath:(NSIndexPath * _Nonnull)proposedIndexPath __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:")]
    NSIndexPath CollectionView(UICollectionView collectionView, NSIndexPath originalIndexPath, NSIndexPath proposedIndexPath);

    // @optional -(CGPoint)collectionView:(UICollectionView * _Nonnull)collectionView targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("collectionView:targetContentOffsetForProposedContentOffset:")]
    CGPoint CollectionView(UICollectionView collectionView, CGPoint proposedContentOffset);

    // @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSpringLoadItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath withContext:(id<UISpringLoadedInteractionContext> _Nonnull)context __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("collectionView:shouldSpringLoadItemAtIndexPath:withContext:")]
    bool CollectionView(UICollectionView collectionView, NSIndexPath indexPath, UISpringLoadedInteractionContext context);
}

// @interface UICollectionView : UIScrollView <UIDataSourceTranslating>
[iOS(6, 0)]
[BaseType(typeof(UIScrollView))]
interface UICollectionView : IUIDataSourceTranslating
{
    // -(instancetype _Nonnull)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout __attribute__((objc_designated_initializer));
    [Export("initWithFrame:collectionViewLayout:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect frame, UICollectionViewLayout layout);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (nonatomic, strong) UICollectionViewLayout * _Nonnull collectionViewLayout;
    [Export("collectionViewLayout", ArgumentSemantic.Strong)]
    UICollectionViewLayout CollectionViewLayout { get; set; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UICollectionViewDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UICollectionViewDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (nonatomic, weak) id<UICollectionViewDataSource> _Nullable dataSource;
    [NullAllowed, Export("dataSource", ArgumentSemantic.Weak)]
    UICollectionViewDataSource DataSource { get; set; }

    // @property (nonatomic, weak) id<UICollectionViewDataSourcePrefetching> _Nullable prefetchDataSource __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [NullAllowed, Export("prefetchDataSource", ArgumentSemantic.Weak)]
    UICollectionViewDataSourcePrefetching PrefetchDataSource { get; set; }

    // @property (getter = isPrefetchingEnabled, nonatomic) BOOL prefetchingEnabled __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("prefetchingEnabled")]
    bool PrefetchingEnabled { [Bind("isPrefetchingEnabled")] get; set; }

    [Wrap("WeakDragDelegate")]
    [NullAllowed]
    UICollectionViewDragDelegate DragDelegate { get; set; }

    // @property (nonatomic, weak) id<UICollectionViewDragDelegate> _Nullable dragDelegate __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [NullAllowed, Export("dragDelegate", ArgumentSemantic.Weak)]
    NSObject WeakDragDelegate { get; set; }

    [Wrap("WeakDropDelegate")]
    [NullAllowed]
    UICollectionViewDropDelegate DropDelegate { get; set; }

    // @property (nonatomic, weak) id<UICollectionViewDropDelegate> _Nullable dropDelegate __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [NullAllowed, Export("dropDelegate", ArgumentSemantic.Weak)]
    NSObject WeakDropDelegate { get; set; }

    // @property (nonatomic) BOOL dragInteractionEnabled __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("dragInteractionEnabled")]
    bool DragInteractionEnabled { get; set; }

    // @property (nonatomic) UICollectionViewReorderingCadence reorderingCadence __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("reorderingCadence", ArgumentSemantic.Assign)]
    UICollectionViewReorderingCadence ReorderingCadence { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable backgroundView;
    [NullAllowed, Export("backgroundView", ArgumentSemantic.Strong)]
    UIView BackgroundView { get; set; }

    // -(void)registerClass:(Class _Nullable)cellClass forCellWithReuseIdentifier:(NSString * _Nonnull)identifier;
    [Export("registerClass:forCellWithReuseIdentifier:")]
    void RegisterClass([NullAllowed] Class cellClass, string identifier);

    // -(void)registerNib:(UINib * _Nullable)nib forCellWithReuseIdentifier:(NSString * _Nonnull)identifier;
    [Export("registerNib:forCellWithReuseIdentifier:")]
    void RegisterNib([NullAllowed] UINib nib, string identifier);

    // -(void)registerClass:(Class _Nullable)viewClass forSupplementaryViewOfKind:(NSString * _Nonnull)elementKind withReuseIdentifier:(NSString * _Nonnull)identifier;
    [Export("registerClass:forSupplementaryViewOfKind:withReuseIdentifier:")]
    void RegisterClass([NullAllowed] Class viewClass, string elementKind, string identifier);

    // -(void)registerNib:(UINib * _Nullable)nib forSupplementaryViewOfKind:(NSString * _Nonnull)kind withReuseIdentifier:(NSString * _Nonnull)identifier;
    [Export("registerNib:forSupplementaryViewOfKind:withReuseIdentifier:")]
    void RegisterNib([NullAllowed] UINib nib, string kind, string identifier);

    // -(__kindof UICollectionViewCell * _Nonnull)dequeueReusableCellWithReuseIdentifier:(NSString * _Nonnull)identifier forIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("dequeueReusableCellWithReuseIdentifier:forIndexPath:")]
    UICollectionViewCell DequeueReusableCellWithReuseIdentifier(string identifier, NSIndexPath indexPath);

    // -(__kindof UICollectionReusableView * _Nonnull)dequeueReusableSupplementaryViewOfKind:(NSString * _Nonnull)elementKind withReuseIdentifier:(NSString * _Nonnull)identifier forIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:")]
    UICollectionReusableView DequeueReusableSupplementaryViewOfKind(string elementKind, string identifier, NSIndexPath indexPath);

    // @property (nonatomic) BOOL allowsSelection;
    [Export("allowsSelection")]
    bool AllowsSelection { get; set; }

    // @property (nonatomic) BOOL allowsMultipleSelection;
    [Export("allowsMultipleSelection")]
    bool AllowsMultipleSelection { get; set; }

    // @property (readonly, nonatomic) NSArray<NSIndexPath *> * _Nullable indexPathsForSelectedItems;
    [NullAllowed, Export("indexPathsForSelectedItems")]
    NSIndexPath[] IndexPathsForSelectedItems { get; }

    // -(void)selectItemAtIndexPath:(NSIndexPath * _Nullable)indexPath animated:(BOOL)animated scrollPosition:(UICollectionViewScrollPosition)scrollPosition;
    [Export("selectItemAtIndexPath:animated:scrollPosition:")]
    void SelectItemAtIndexPath([NullAllowed] NSIndexPath indexPath, bool animated, UICollectionViewScrollPosition scrollPosition);

    // -(void)deselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath animated:(BOOL)animated;
    [Export("deselectItemAtIndexPath:animated:")]
    void DeselectItemAtIndexPath(NSIndexPath indexPath, bool animated);

    // @property (readonly, nonatomic) BOOL hasUncommittedUpdates __attribute__((availability(ios, introduced=11.0)));
    [iOS(11, 0)]
    [Export("hasUncommittedUpdates")]
    bool HasUncommittedUpdates { get; }

    // -(void)reloadData;
    [Export("reloadData")]
    void ReloadData();

    // -(void)setCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout animated:(BOOL)animated;
    [Export("setCollectionViewLayout:animated:")]
    void SetCollectionViewLayout(UICollectionViewLayout layout, bool animated);

    // -(void)setCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("setCollectionViewLayout:animated:completion:")]
    void SetCollectionViewLayout(UICollectionViewLayout layout, bool animated, [NullAllowed] Action<bool> completion);

    // -(UICollectionViewTransitionLayout * _Nonnull)startInteractiveTransitionToCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout completion:(UICollectionViewLayoutInteractiveTransitionCompletion _Nullable)completion __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("startInteractiveTransitionToCollectionViewLayout:completion:")]
    UICollectionViewTransitionLayout StartInteractiveTransitionToCollectionViewLayout(UICollectionViewLayout layout, [NullAllowed] UICollectionViewLayoutInteractiveTransitionCompletion completion);

    // -(void)finishInteractiveTransition __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("finishInteractiveTransition")]
    void FinishInteractiveTransition();

    // -(void)cancelInteractiveTransition __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("cancelInteractiveTransition")]
    void CancelInteractiveTransition();

    // @property (readonly, nonatomic) NSInteger numberOfSections;
    [Export("numberOfSections")]
    nint NumberOfSections { get; }

    // -(NSInteger)numberOfItemsInSection:(NSInteger)section;
    [Export("numberOfItemsInSection:")]
    nint NumberOfItemsInSection(nint section);

    // -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("layoutAttributesForItemAtIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes LayoutAttributesForItemAtIndexPath(NSIndexPath indexPath);

    // -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("layoutAttributesForSupplementaryElementOfKind:atIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryElementOfKind(string kind, NSIndexPath indexPath);

    // -(NSIndexPath * _Nullable)indexPathForItemAtPoint:(CGPoint)point;
    [Export("indexPathForItemAtPoint:")]
    [return: NullAllowed]
    NSIndexPath IndexPathForItemAtPoint(CGPoint point);

    // -(NSIndexPath * _Nullable)indexPathForCell:(UICollectionViewCell * _Nonnull)cell;
    [Export("indexPathForCell:")]
    [return: NullAllowed]
    NSIndexPath IndexPathForCell(UICollectionViewCell cell);

    // -(UICollectionViewCell * _Nullable)cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("cellForItemAtIndexPath:")]
    [return: NullAllowed]
    UICollectionViewCell CellForItemAtIndexPath(NSIndexPath indexPath);

    // @property (readonly, nonatomic) NSArray<__kindof UICollectionViewCell *> * _Nonnull visibleCells;
    [Export("visibleCells")]
    UICollectionViewCell[] VisibleCells { get; }

    // @property (readonly, nonatomic) NSArray<NSIndexPath *> * _Nonnull indexPathsForVisibleItems;
    [Export("indexPathsForVisibleItems")]
    NSIndexPath[] IndexPathsForVisibleItems { get; }

    // -(UICollectionReusableView * _Nullable)supplementaryViewForElementKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("supplementaryViewForElementKind:atIndexPath:")]
    [return: NullAllowed]
    UICollectionReusableView SupplementaryViewForElementKind(string elementKind, NSIndexPath indexPath);

    // -(NSArray<UICollectionReusableView *> * _Nonnull)visibleSupplementaryViewsOfKind:(NSString * _Nonnull)elementKind __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("visibleSupplementaryViewsOfKind:")]
    UICollectionReusableView[] VisibleSupplementaryViewsOfKind(string elementKind);

    // -(NSArray<NSIndexPath *> * _Nonnull)indexPathsForVisibleSupplementaryElementsOfKind:(NSString * _Nonnull)elementKind __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("indexPathsForVisibleSupplementaryElementsOfKind:")]
    NSIndexPath[] IndexPathsForVisibleSupplementaryElementsOfKind(string elementKind);

    // -(void)scrollToItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath atScrollPosition:(UICollectionViewScrollPosition)scrollPosition animated:(BOOL)animated;
    [Export("scrollToItemAtIndexPath:atScrollPosition:animated:")]
    void ScrollToItemAtIndexPath(NSIndexPath indexPath, UICollectionViewScrollPosition scrollPosition, bool animated);

    // -(void)insertSections:(NSIndexSet * _Nonnull)sections;
    [Export("insertSections:")]
    void InsertSections(NSIndexSet sections);

    // -(void)deleteSections:(NSIndexSet * _Nonnull)sections;
    [Export("deleteSections:")]
    void DeleteSections(NSIndexSet sections);

    // -(void)reloadSections:(NSIndexSet * _Nonnull)sections;
    [Export("reloadSections:")]
    void ReloadSections(NSIndexSet sections);

    // -(void)moveSection:(NSInteger)section toSection:(NSInteger)newSection;
    [Export("moveSection:toSection:")]
    void MoveSection(nint section, nint newSection);

    // -(void)insertItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
    [Export("insertItemsAtIndexPaths:")]
    void InsertItemsAtIndexPaths(NSIndexPath[] indexPaths);

    // -(void)deleteItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
    [Export("deleteItemsAtIndexPaths:")]
    void DeleteItemsAtIndexPaths(NSIndexPath[] indexPaths);

    // -(void)reloadItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
    [Export("reloadItemsAtIndexPaths:")]
    void ReloadItemsAtIndexPaths(NSIndexPath[] indexPaths);

    // -(void)moveItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath toIndexPath:(NSIndexPath * _Nonnull)newIndexPath;
    [Export("moveItemAtIndexPath:toIndexPath:")]
    void MoveItemAtIndexPath(NSIndexPath indexPath, NSIndexPath newIndexPath);

    // -(void)performBatchUpdates:(void (^ _Nullable)(void))updates completion:(void (^ _Nullable)(BOOL))completion;
    [Export("performBatchUpdates:completion:")]
    void PerformBatchUpdates([NullAllowed] Action updates, [NullAllowed] Action<bool> completion);

    // -(BOOL)beginInteractiveMovementForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("beginInteractiveMovementForItemAtIndexPath:")]
    bool BeginInteractiveMovementForItemAtIndexPath(NSIndexPath indexPath);

    // -(void)updateInteractiveMovementTargetPosition:(CGPoint)targetPosition __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("updateInteractiveMovementTargetPosition:")]
    void UpdateInteractiveMovementTargetPosition(CGPoint targetPosition);

    // -(void)endInteractiveMovement __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("endInteractiveMovement")]
    void EndInteractiveMovement();

    // -(void)cancelInteractiveMovement __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("cancelInteractiveMovement")]
    void CancelInteractiveMovement();

    // @property (nonatomic) BOOL remembersLastFocusedIndexPath __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("remembersLastFocusedIndexPath")]
    bool RemembersLastFocusedIndexPath { get; set; }

    // @property (readonly, nonatomic) BOOL hasActiveDrag __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("hasActiveDrag")]
    bool HasActiveDrag { get; }

    // @property (readonly, nonatomic) BOOL hasActiveDrop __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("hasActiveDrop")]
    bool HasActiveDrop { get; }
}

// @interface UIDragAndDrop (UICollectionView) <UISpringLoadedInteractionSupporting>
[Category]
[BaseType(typeof(UICollectionView))]
interface UICollectionView_UIDragAndDrop : IUISpringLoadedInteractionSupporting
{
}

// @protocol UICollectionViewDragDelegate <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UICollectionViewDragDelegate
{
    // @required -(NSArray<UIDragItem *> * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView itemsForBeginningDragSession:(id<UIDragSession> _Nonnull)session atIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Abstract]
    [Export("collectionView:itemsForBeginningDragSession:atIndexPath:")]
    UIDragItem[] CollectionView(UICollectionView collectionView, UIDragSession session, NSIndexPath indexPath);

    // @optional -(NSArray<UIDragItem *> * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView itemsForAddingToDragSession:(id<UIDragSession> _Nonnull)session atIndexPath:(NSIndexPath * _Nonnull)indexPath point:(CGPoint)point;
    [Export("collectionView:itemsForAddingToDragSession:atIndexPath:point:")]
    UIDragItem[] CollectionView(UICollectionView collectionView, UIDragSession session, NSIndexPath indexPath, CGPoint point);

    // @optional -(UIDragPreviewParameters * _Nullable)collectionView:(UICollectionView * _Nonnull)collectionView dragPreviewParametersForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:dragPreviewParametersForItemAtIndexPath:")]
    [return: NullAllowed]
    UIDragPreviewParameters CollectionView(UICollectionView collectionView, NSIndexPath indexPath);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView dragSessionWillBegin:(id<UIDragSession> _Nonnull)session;
    [Export("collectionView:dragSessionWillBegin:")]
    void CollectionView(UICollectionView collectionView, UIDragSession session);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView dragSessionDidEnd:(id<UIDragSession> _Nonnull)session;
    [Export("collectionView:dragSessionDidEnd:")]
    void CollectionView(UICollectionView collectionView, UIDragSession session);

    // @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView dragSessionAllowsMoveOperation:(id<UIDragSession> _Nonnull)session;
    [Export("collectionView:dragSessionAllowsMoveOperation:")]
    bool CollectionView(UICollectionView collectionView, UIDragSession session);

    // @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView dragSessionIsRestrictedToDraggingApplication:(id<UIDragSession> _Nonnull)session;
    [Export("collectionView:dragSessionIsRestrictedToDraggingApplication:")]
    bool CollectionView(UICollectionView collectionView, UIDragSession session);
}

// @protocol UICollectionViewDropDelegate <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UICollectionViewDropDelegate
{
    // @required -(void)collectionView:(UICollectionView * _Nonnull)collectionView performDropWithCoordinator:(id<UICollectionViewDropCoordinator> _Nonnull)coordinator;
    [Abstract]
    [Export("collectionView:performDropWithCoordinator:")]
    void CollectionView(UICollectionView collectionView, UICollectionViewDropCoordinator coordinator);

    // @optional -(BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canHandleDropSession:(id<UIDropSession> _Nonnull)session;
    [Export("collectionView:canHandleDropSession:")]
    bool CollectionView(UICollectionView collectionView, UIDropSession session);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView dropSessionDidEnter:(id<UIDropSession> _Nonnull)session;
    [Export("collectionView:dropSessionDidEnter:")]
    void CollectionView(UICollectionView collectionView, UIDropSession session);

    // @optional -(UICollectionViewDropProposal * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView dropSessionDidUpdate:(id<UIDropSession> _Nonnull)session withDestinationIndexPath:(NSIndexPath * _Nullable)destinationIndexPath;
    [Export("collectionView:dropSessionDidUpdate:withDestinationIndexPath:")]
    UICollectionViewDropProposal CollectionView(UICollectionView collectionView, UIDropSession session, [NullAllowed] NSIndexPath destinationIndexPath);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView dropSessionDidExit:(id<UIDropSession> _Nonnull)session;
    [Export("collectionView:dropSessionDidExit:")]
    void CollectionView(UICollectionView collectionView, UIDropSession session);

    // @optional -(void)collectionView:(UICollectionView * _Nonnull)collectionView dropSessionDidEnd:(id<UIDropSession> _Nonnull)session;
    [Export("collectionView:dropSessionDidEnd:")]
    void CollectionView(UICollectionView collectionView, UIDropSession session);

    // @optional -(UIDragPreviewParameters * _Nullable)collectionView:(UICollectionView * _Nonnull)collectionView dropPreviewParametersForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:dropPreviewParametersForItemAtIndexPath:")]
    [return: NullAllowed]
    UIDragPreviewParameters CollectionView(UICollectionView collectionView, NSIndexPath indexPath);
}

// @interface UICollectionViewDropProposal : UIDropProposal
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(UIDropProposal))]
interface UICollectionViewDropProposal
{
    // -(instancetype _Nonnull)initWithDropOperation:(UIDropOperation)operation intent:(UICollectionViewDropIntent)intent;
    [Export("initWithDropOperation:intent:")]
    IntPtr Constructor(UIDropOperation operation, UICollectionViewDropIntent intent);

    // @property (readonly, nonatomic) UICollectionViewDropIntent intent;
    [Export("intent")]
    UICollectionViewDropIntent Intent { get; }
}

// @protocol UICollectionViewDropCoordinator <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UICollectionViewDropCoordinator
{
    // @required @property (readonly, nonatomic) NSArray<id<UICollectionViewDropItem>> * _Nonnull items;
    [Abstract]
    [Export("items")]
    UICollectionViewDropItem[] Items { get; }

    // @required @property (readonly, nonatomic) NSIndexPath * _Nullable destinationIndexPath;
    [Abstract]
    [NullAllowed, Export("destinationIndexPath")]
    NSIndexPath DestinationIndexPath { get; }

    // @required @property (readonly, nonatomic) UICollectionViewDropProposal * _Nonnull proposal;
    [Abstract]
    [Export("proposal")]
    UICollectionViewDropProposal Proposal { get; }

    // @required @property (readonly, nonatomic) id<UIDropSession> _Nonnull session;
    [Abstract]
    [Export("session")]
    UIDropSession Session { get; }

    // @required -(id<UICollectionViewDropPlaceholderContext> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem toPlaceholder:(UICollectionViewDropPlaceholder * _Nonnull)placeholder;
    [Abstract]
    [Export("dropItem:toPlaceholder:")]
    UICollectionViewDropPlaceholderContext DropItem(UIDragItem dragItem, UICollectionViewDropPlaceholder placeholder);

    // @required -(id<UIDragAnimating> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem toItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Abstract]
    [Export("dropItem:toItemAtIndexPath:")]
    UIDragAnimating DropItem(UIDragItem dragItem, NSIndexPath indexPath);

    // @required -(id<UIDragAnimating> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem intoItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath rect:(CGRect)rect;
    [Abstract]
    [Export("dropItem:intoItemAtIndexPath:rect:")]
    UIDragAnimating DropItem(UIDragItem dragItem, NSIndexPath indexPath, CGRect rect);

    // @required -(id<UIDragAnimating> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem toTarget:(UIDragPreviewTarget * _Nonnull)target;
    [Abstract]
    [Export("dropItem:toTarget:")]
    UIDragAnimating DropItem(UIDragItem dragItem, UIDragPreviewTarget target);
}

// @interface UICollectionViewPlaceholder : NSObject
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UICollectionViewPlaceholder
{
    // -(instancetype _Nonnull)initWithInsertionIndexPath:(NSIndexPath * _Nonnull)insertionIndexPath reuseIdentifier:(NSString * _Nonnull)reuseIdentifier __attribute__((objc_designated_initializer));
    [Export("initWithInsertionIndexPath:reuseIdentifier:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSIndexPath insertionIndexPath, string reuseIdentifier);

    // @property (copy, nonatomic) void (^ _Nullable)(__kindof UICollectionViewCell * _Nonnull) cellUpdateHandler;
    [NullAllowed, Export("cellUpdateHandler", ArgumentSemantic.Copy)]
    Action<UICollectionViewCell> CellUpdateHandler { get; set; }
}

// @interface UICollectionViewDropPlaceholder : UICollectionViewPlaceholder
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(UICollectionViewPlaceholder))]
interface UICollectionViewDropPlaceholder
{
    // @property (copy, nonatomic) UIDragPreviewParameters * _Nullable (^ _Nullable)(__kindof UICollectionViewCell * _Nonnull) previewParametersProvider;
    [NullAllowed, Export("previewParametersProvider", ArgumentSemantic.Copy)]
    Func<UICollectionViewCell, UIDragPreviewParameters> PreviewParametersProvider { get; set; }
}

// @protocol UICollectionViewDropItem <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UICollectionViewDropItem
{
    // @required @property (readonly, nonatomic) UIDragItem * _Nonnull dragItem;
    [Abstract]
    [Export("dragItem")]
    UIDragItem DragItem { get; }

    // @required @property (readonly, nonatomic) NSIndexPath * _Nullable sourceIndexPath;
    [Abstract]
    [NullAllowed, Export("sourceIndexPath")]
    NSIndexPath SourceIndexPath { get; }

    // @required @property (readonly, nonatomic) CGSize previewSize;
    [Abstract]
    [Export("previewSize")]
    CGSize PreviewSize { get; }
}

// @protocol UICollectionViewDropPlaceholderContext <UIDragAnimating>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
interface UICollectionViewDropPlaceholderContext : IUIDragAnimating
{
    // @required @property (readonly, nonatomic) UIDragItem * _Nonnull dragItem;
    [Abstract]
    [Export("dragItem")]
    UIDragItem DragItem { get; }

    // @required -(BOOL)commitInsertionWithDataSourceUpdates:(void (^ _Nonnull)(NSIndexPath * _Nonnull))dataSourceUpdates;
    [Abstract]
    [Export("commitInsertionWithDataSourceUpdates:")]
    bool CommitInsertionWithDataSourceUpdates(Action<NSIndexPath> dataSourceUpdates);

    // @required -(BOOL)deletePlaceholder;
    [Abstract]
    [Export("deletePlaceholder")]
    [Verify(MethodToProperty)]
    bool DeletePlaceholder { get; }

    // @required -(void)setNeedsCellUpdate;
    [Abstract]
    [Export("setNeedsCellUpdate")]
    void SetNeedsCellUpdate();
}

// @interface UICollectionReusableView : UIView
[iOS(6, 0)]
[BaseType(typeof(UIView))]
interface UICollectionReusableView
{
    // @property (readonly, copy, nonatomic) NSString * _Nullable reuseIdentifier;
    [NullAllowed, Export("reuseIdentifier")]
    string ReuseIdentifier { get; }

    // -(void)prepareForReuse;
    [Export("prepareForReuse")]
    void PrepareForReuse();

    // -(void)applyLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes;
    [Export("applyLayoutAttributes:")]
    void ApplyLayoutAttributes(UICollectionViewLayoutAttributes layoutAttributes);

    // -(void)willTransitionFromLayout:(UICollectionViewLayout * _Nonnull)oldLayout toLayout:(UICollectionViewLayout * _Nonnull)newLayout;
    [Export("willTransitionFromLayout:toLayout:")]
    void WillTransitionFromLayout(UICollectionViewLayout oldLayout, UICollectionViewLayout newLayout);

    // -(void)didTransitionFromLayout:(UICollectionViewLayout * _Nonnull)oldLayout toLayout:(UICollectionViewLayout * _Nonnull)newLayout;
    [Export("didTransitionFromLayout:toLayout:")]
    void DidTransitionFromLayout(UICollectionViewLayout oldLayout, UICollectionViewLayout newLayout);

    // -(UICollectionViewLayoutAttributes * _Nonnull)preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("preferredLayoutAttributesFittingAttributes:")]
    UICollectionViewLayoutAttributes PreferredLayoutAttributesFittingAttributes(UICollectionViewLayoutAttributes layoutAttributes);
}

// @interface UICollectionViewCell : UICollectionReusableView
[iOS(6, 0)]
[BaseType(typeof(UICollectionReusableView))]
interface UICollectionViewCell
{
    // @property (readonly, nonatomic) UIView * _Nonnull contentView;
    [Export("contentView")]
    UIView ContentView { get; }

    // @property (getter = isSelected, nonatomic) BOOL selected;
    [Export("selected")]
    bool Selected { [Bind("isSelected")] get; set; }

    // @property (getter = isHighlighted, nonatomic) BOOL highlighted;
    [Export("highlighted")]
    bool Highlighted { [Bind("isHighlighted")] get; set; }

    // -(void)dragStateDidChange:(UICollectionViewCellDragState)dragState __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("dragStateDidChange:")]
    void DragStateDidChange(UICollectionViewCellDragState dragState);

    // @property (nonatomic, strong) UIView * _Nullable backgroundView;
    [NullAllowed, Export("backgroundView", ArgumentSemantic.Strong)]
    UIView BackgroundView { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable selectedBackgroundView;
    [NullAllowed, Export("selectedBackgroundView", ArgumentSemantic.Strong)]
    UIView SelectedBackgroundView { get; set; }
}

// @interface UICollectionViewController : UIViewController <UICollectionViewDelegate, UICollectionViewDataSource>
[iOS(6, 0)]
[BaseType(typeof(UIViewController))]
interface UICollectionViewController : IUICollectionViewDelegate, IUICollectionViewDataSource
{
    // -(instancetype _Nonnull)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout __attribute__((objc_designated_initializer));
    [Export("initWithCollectionViewLayout:")]
    [DesignatedInitializer]
    IntPtr Constructor(UICollectionViewLayout layout);

    // -(instancetype _Nonnull)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil __attribute__((objc_designated_initializer));
    [Export("initWithNibName:bundle:")]
    [DesignatedInitializer]
    IntPtr Constructor([NullAllowed] string nibNameOrNil, [NullAllowed] NSBundle nibBundleOrNil);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (nonatomic, strong) __kindof UICollectionView * _Null_unspecified collectionView;
    [Export("collectionView", ArgumentSemantic.Strong)]
    UICollectionView CollectionView { get; set; }

    // @property (nonatomic) BOOL clearsSelectionOnViewWillAppear;
    [Export("clearsSelectionOnViewWillAppear")]
    bool ClearsSelectionOnViewWillAppear { get; set; }

    // @property (assign, nonatomic) BOOL useLayoutToLayoutNavigationTransitions __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("useLayoutToLayoutNavigationTransitions")]
    bool UseLayoutToLayoutNavigationTransitions { get; set; }

    // @property (readonly, nonatomic) UICollectionViewLayout * _Nonnull collectionViewLayout __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("collectionViewLayout")]
    UICollectionViewLayout CollectionViewLayout { get; }

    // @property (nonatomic) BOOL installsStandardGestureForInteractiveMovement __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("installsStandardGestureForInteractiveMovement")]
    bool InstallsStandardGestureForInteractiveMovement { get; set; }
}

// @interface UICollectionViewLayoutAttributes : NSObject <NSCopying, UIDynamicItem>
[iOS(6, 0)]
[BaseType(typeof(NSObject))]
interface UICollectionViewLayoutAttributes : INSCopying, IUIDynamicItem
{
    // @property (nonatomic) CGRect frame;
    [Export("frame", ArgumentSemantic.Assign)]
    CGRect Frame { get; set; }

    // @property (nonatomic) CGPoint center;
    [Export("center", ArgumentSemantic.Assign)]
    CGPoint Center { get; set; }

    // @property (nonatomic) CGSize size;
    [Export("size", ArgumentSemantic.Assign)]
    CGSize Size { get; set; }

    // @property (nonatomic) CATransform3D transform3D;
    [Export("transform3D", ArgumentSemantic.Assign)]
    CATransform3D Transform3D { get; set; }

    // @property (nonatomic) CGRect bounds __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("bounds", ArgumentSemantic.Assign)]
    CGRect Bounds { get; set; }

    // @property (nonatomic) CGAffineTransform transform __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("transform", ArgumentSemantic.Assign)]
    CGAffineTransform Transform { get; set; }

    // @property (nonatomic) CGFloat alpha;
    [Export("alpha")]
    nfloat Alpha { get; set; }

    // @property (nonatomic) NSInteger zIndex;
    [Export("zIndex")]
    nint ZIndex { get; set; }

    // @property (getter = isHidden, nonatomic) BOOL hidden;
    [Export("hidden")]
    bool Hidden { [Bind("isHidden")] get; set; }

    // @property (nonatomic, strong) NSIndexPath * _Nonnull indexPath;
    [Export("indexPath", ArgumentSemantic.Strong)]
    NSIndexPath IndexPath { get; set; }

    // @property (readonly, nonatomic) UICollectionElementCategory representedElementCategory;
    [Export("representedElementCategory")]
    UICollectionElementCategory RepresentedElementCategory { get; }

    // @property (readonly, nonatomic) NSString * _Nullable representedElementKind;
    [NullAllowed, Export("representedElementKind")]
    string RepresentedElementKind { get; }

    // +(instancetype _Nonnull)layoutAttributesForCellWithIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Static]
    [Export("layoutAttributesForCellWithIndexPath:")]
    UICollectionViewLayoutAttributes LayoutAttributesForCellWithIndexPath(NSIndexPath indexPath);

    // +(instancetype _Nonnull)layoutAttributesForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind withIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Static]
    [Export("layoutAttributesForSupplementaryViewOfKind:withIndexPath:")]
    UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryViewOfKind(string elementKind, NSIndexPath indexPath);

    // +(instancetype _Nonnull)layoutAttributesForDecorationViewOfKind:(NSString * _Nonnull)decorationViewKind withIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Static]
    [Export("layoutAttributesForDecorationViewOfKind:withIndexPath:")]
    UICollectionViewLayoutAttributes LayoutAttributesForDecorationViewOfKind(string decorationViewKind, NSIndexPath indexPath);
}

// @interface UICollectionViewUpdateItem : NSObject
[iOS(6, 0)]
[BaseType(typeof(NSObject))]
interface UICollectionViewUpdateItem
{
    // @property (readonly, nonatomic) NSIndexPath * _Nullable indexPathBeforeUpdate;
    [NullAllowed, Export("indexPathBeforeUpdate")]
    NSIndexPath IndexPathBeforeUpdate { get; }

    // @property (readonly, nonatomic) NSIndexPath * _Nullable indexPathAfterUpdate;
    [NullAllowed, Export("indexPathAfterUpdate")]
    NSIndexPath IndexPathAfterUpdate { get; }

    // @property (readonly, nonatomic) UICollectionUpdateAction updateAction;
    [Export("updateAction")]
    UICollectionUpdateAction UpdateAction { get; }
}

// @interface UICollectionViewLayoutInvalidationContext : NSObject
[iOS(7, 0)]
[BaseType(typeof(NSObject))]
interface UICollectionViewLayoutInvalidationContext
{
    // @property (readonly, nonatomic) BOOL invalidateEverything;
    [Export("invalidateEverything")]
    bool InvalidateEverything { get; }

    // @property (readonly, nonatomic) BOOL invalidateDataSourceCounts;
    [Export("invalidateDataSourceCounts")]
    bool InvalidateDataSourceCounts { get; }

    // -(void)invalidateItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("invalidateItemsAtIndexPaths:")]
    void InvalidateItemsAtIndexPaths(NSIndexPath[] indexPaths);

    // -(void)invalidateSupplementaryElementsOfKind:(NSString * _Nonnull)elementKind atIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("invalidateSupplementaryElementsOfKind:atIndexPaths:")]
    void InvalidateSupplementaryElementsOfKind(string elementKind, NSIndexPath[] indexPaths);

    // -(void)invalidateDecorationElementsOfKind:(NSString * _Nonnull)elementKind atIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("invalidateDecorationElementsOfKind:atIndexPaths:")]
    void InvalidateDecorationElementsOfKind(string elementKind, NSIndexPath[] indexPaths);

    // @property (readonly, nonatomic) NSArray<NSIndexPath *> * _Nullable invalidatedItemIndexPaths __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("invalidatedItemIndexPaths")]
    NSIndexPath[] InvalidatedItemIndexPaths { get; }

    // @property (readonly, nonatomic) NSDictionary<NSString *,NSArray<NSIndexPath *> *> * _Nullable invalidatedSupplementaryIndexPaths __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("invalidatedSupplementaryIndexPaths")]
    NSDictionary<NSString, NSArray<NSIndexPath>> InvalidatedSupplementaryIndexPaths { get; }

    // @property (readonly, nonatomic) NSDictionary<NSString *,NSArray<NSIndexPath *> *> * _Nullable invalidatedDecorationIndexPaths __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("invalidatedDecorationIndexPaths")]
    NSDictionary<NSString, NSArray<NSIndexPath>> InvalidatedDecorationIndexPaths { get; }

    // @property (nonatomic) CGPoint contentOffsetAdjustment __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("contentOffsetAdjustment", ArgumentSemantic.Assign)]
    CGPoint ContentOffsetAdjustment { get; set; }

    // @property (nonatomic) CGSize contentSizeAdjustment __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("contentSizeAdjustment", ArgumentSemantic.Assign)]
    CGSize ContentSizeAdjustment { get; set; }

    // @property (readonly, copy, nonatomic) NSArray<NSIndexPath *> * _Nullable previousIndexPathsForInteractivelyMovingItems __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [NullAllowed, Export("previousIndexPathsForInteractivelyMovingItems", ArgumentSemantic.Copy)]
    NSIndexPath[] PreviousIndexPathsForInteractivelyMovingItems { get; }

    // @property (readonly, copy, nonatomic) NSArray<NSIndexPath *> * _Nullable targetIndexPathsForInteractivelyMovingItems __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [NullAllowed, Export("targetIndexPathsForInteractivelyMovingItems", ArgumentSemantic.Copy)]
    NSIndexPath[] TargetIndexPathsForInteractivelyMovingItems { get; }

    // @property (readonly, nonatomic) CGPoint interactiveMovementTarget __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("interactiveMovementTarget")]
    CGPoint InteractiveMovementTarget { get; }
}

// @interface UICollectionViewLayout : NSObject <NSCoding>
[iOS(6, 0)]
[BaseType(typeof(NSObject))]
interface UICollectionViewLayout : INSCoding
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (readonly, nonatomic) UICollectionView * _Nullable collectionView;
    [NullAllowed, Export("collectionView")]
    UICollectionView CollectionView { get; }

    // -(void)invalidateLayout;
    [Export("invalidateLayout")]
    void InvalidateLayout();

    // -(void)invalidateLayoutWithContext:(UICollectionViewLayoutInvalidationContext * _Nonnull)context __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("invalidateLayoutWithContext:")]
    void InvalidateLayoutWithContext(UICollectionViewLayoutInvalidationContext context);

    // -(void)registerClass:(Class _Nullable)viewClass forDecorationViewOfKind:(NSString * _Nonnull)elementKind;
    [Export("registerClass:forDecorationViewOfKind:")]
    void RegisterClass([NullAllowed] Class viewClass, string elementKind);

    // -(void)registerNib:(UINib * _Nullable)nib forDecorationViewOfKind:(NSString * _Nonnull)elementKind;
    [Export("registerNib:forDecorationViewOfKind:")]
    void RegisterNib([NullAllowed] UINib nib, string elementKind);
}

// @interface UISubclassingHooks (UICollectionViewLayout)
[Category]
[BaseType(typeof(UICollectionViewLayout))]
interface UICollectionViewLayout_UISubclassingHooks
{
    // @property (readonly, nonatomic, class) Class _Nonnull layoutAttributesClass;
    [Static]
    [Export("layoutAttributesClass")]
    Class LayoutAttributesClass { get; }

    // @property (readonly, nonatomic, class) Class _Nonnull invalidationContextClass __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Static]
    [Export("invalidationContextClass")]
    Class InvalidationContextClass { get; }

    // -(void)prepareLayout;
    [Export("prepareLayout")]
    void PrepareLayout();

    // -(NSArray<__kindof UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect;
    [Export("layoutAttributesForElementsInRect:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes[] LayoutAttributesForElementsInRect(CGRect rect);

    // -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("layoutAttributesForItemAtIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes LayoutAttributesForItemAtIndexPath(NSIndexPath indexPath);

    // -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("layoutAttributesForSupplementaryViewOfKind:atIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryViewOfKind(string elementKind, NSIndexPath indexPath);

    // -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForDecorationViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("layoutAttributesForDecorationViewOfKind:atIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes LayoutAttributesForDecorationViewOfKind(string elementKind, NSIndexPath indexPath);

    // -(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds;
    [Export("shouldInvalidateLayoutForBoundsChange:")]
    bool ShouldInvalidateLayoutForBoundsChange(CGRect newBounds);

    // -(UICollectionViewLayoutInvalidationContext * _Nonnull)invalidationContextForBoundsChange:(CGRect)newBounds __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("invalidationContextForBoundsChange:")]
    UICollectionViewLayoutInvalidationContext InvalidationContextForBoundsChange(CGRect newBounds);

    // -(BOOL)shouldInvalidateLayoutForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)preferredAttributes withOriginalAttributes:(UICollectionViewLayoutAttributes * _Nonnull)originalAttributes __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:")]
    bool ShouldInvalidateLayoutForPreferredLayoutAttributes(UICollectionViewLayoutAttributes preferredAttributes, UICollectionViewLayoutAttributes originalAttributes);

    // -(UICollectionViewLayoutInvalidationContext * _Nonnull)invalidationContextForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)preferredAttributes withOriginalAttributes:(UICollectionViewLayoutAttributes * _Nonnull)originalAttributes __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("invalidationContextForPreferredLayoutAttributes:withOriginalAttributes:")]
    UICollectionViewLayoutInvalidationContext InvalidationContextForPreferredLayoutAttributes(UICollectionViewLayoutAttributes preferredAttributes, UICollectionViewLayoutAttributes originalAttributes);

    // -(CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)velocity;
    [Export("targetContentOffsetForProposedContentOffset:withScrollingVelocity:")]
    CGPoint TargetContentOffsetForProposedContentOffset(CGPoint proposedContentOffset, CGPoint velocity);

    // -(CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("targetContentOffsetForProposedContentOffset:")]
    CGPoint TargetContentOffsetForProposedContentOffset(CGPoint proposedContentOffset);

    // @property (readonly, nonatomic) CGSize collectionViewContentSize;
    [Export("collectionViewContentSize")]
    CGSize CollectionViewContentSize { get; }

    // @property (readonly, nonatomic) UIUserInterfaceLayoutDirection developmentLayoutDirection;
    [Export("developmentLayoutDirection")]
    UIUserInterfaceLayoutDirection DevelopmentLayoutDirection { get; }

    // @property (readonly, nonatomic) BOOL flipsHorizontallyInOppositeLayoutDirection;
    [Export("flipsHorizontallyInOppositeLayoutDirection")]
    bool FlipsHorizontallyInOppositeLayoutDirection { get; }
}

// @interface UIUpdateSupportHooks (UICollectionViewLayout)
[Category]
[BaseType(typeof(UICollectionViewLayout))]
interface UICollectionViewLayout_UIUpdateSupportHooks
{
    // -(void)prepareForCollectionViewUpdates:(NSArray<UICollectionViewUpdateItem *> * _Nonnull)updateItems;
    [Export("prepareForCollectionViewUpdates:")]
    void PrepareForCollectionViewUpdates(UICollectionViewUpdateItem[] updateItems);

    // -(void)finalizeCollectionViewUpdates;
    [Export("finalizeCollectionViewUpdates")]
    void FinalizeCollectionViewUpdates();

    // -(void)prepareForAnimatedBoundsChange:(CGRect)oldBounds;
    [Export("prepareForAnimatedBoundsChange:")]
    void PrepareForAnimatedBoundsChange(CGRect oldBounds);

    // -(void)finalizeAnimatedBoundsChange;
    [Export("finalizeAnimatedBoundsChange")]
    void FinalizeAnimatedBoundsChange();

    // -(void)prepareForTransitionToLayout:(UICollectionViewLayout * _Nonnull)newLayout __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("prepareForTransitionToLayout:")]
    void PrepareForTransitionToLayout(UICollectionViewLayout newLayout);

    // -(void)prepareForTransitionFromLayout:(UICollectionViewLayout * _Nonnull)oldLayout __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("prepareForTransitionFromLayout:")]
    void PrepareForTransitionFromLayout(UICollectionViewLayout oldLayout);

    // -(void)finalizeLayoutTransition __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("finalizeLayoutTransition")]
    void FinalizeLayoutTransition();

    // -(UICollectionViewLayoutAttributes * _Nullable)initialLayoutAttributesForAppearingItemAtIndexPath:(NSIndexPath * _Nonnull)itemIndexPath;
    [Export("initialLayoutAttributesForAppearingItemAtIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingItemAtIndexPath(NSIndexPath itemIndexPath);

    // -(UICollectionViewLayoutAttributes * _Nullable)finalLayoutAttributesForDisappearingItemAtIndexPath:(NSIndexPath * _Nonnull)itemIndexPath;
    [Export("finalLayoutAttributesForDisappearingItemAtIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingItemAtIndexPath(NSIndexPath itemIndexPath);

    // -(UICollectionViewLayoutAttributes * _Nullable)initialLayoutAttributesForAppearingSupplementaryElementOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)elementIndexPath;
    [Export("initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingSupplementaryElementOfKind(string elementKind, NSIndexPath elementIndexPath);

    // -(UICollectionViewLayoutAttributes * _Nullable)finalLayoutAttributesForDisappearingSupplementaryElementOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)elementIndexPath;
    [Export("finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingSupplementaryElementOfKind(string elementKind, NSIndexPath elementIndexPath);

    // -(UICollectionViewLayoutAttributes * _Nullable)initialLayoutAttributesForAppearingDecorationElementOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)decorationIndexPath;
    [Export("initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingDecorationElementOfKind(string elementKind, NSIndexPath decorationIndexPath);

    // -(UICollectionViewLayoutAttributes * _Nullable)finalLayoutAttributesForDisappearingDecorationElementOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)decorationIndexPath;
    [Export("finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingDecorationElementOfKind(string elementKind, NSIndexPath decorationIndexPath);

    // -(NSArray<NSIndexPath *> * _Nonnull)indexPathsToDeleteForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("indexPathsToDeleteForSupplementaryViewOfKind:")]
    NSIndexPath[] IndexPathsToDeleteForSupplementaryViewOfKind(string elementKind);

    // -(NSArray<NSIndexPath *> * _Nonnull)indexPathsToDeleteForDecorationViewOfKind:(NSString * _Nonnull)elementKind __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("indexPathsToDeleteForDecorationViewOfKind:")]
    NSIndexPath[] IndexPathsToDeleteForDecorationViewOfKind(string elementKind);

    // -(NSArray<NSIndexPath *> * _Nonnull)indexPathsToInsertForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("indexPathsToInsertForSupplementaryViewOfKind:")]
    NSIndexPath[] IndexPathsToInsertForSupplementaryViewOfKind(string elementKind);

    // -(NSArray<NSIndexPath *> * _Nonnull)indexPathsToInsertForDecorationViewOfKind:(NSString * _Nonnull)elementKind __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("indexPathsToInsertForDecorationViewOfKind:")]
    NSIndexPath[] IndexPathsToInsertForDecorationViewOfKind(string elementKind);
}

// @interface UIReorderingSupportHooks (UICollectionViewLayout)
[Category]
[BaseType(typeof(UICollectionViewLayout))]
interface UICollectionViewLayout_UIReorderingSupportHooks
{
    // -(NSIndexPath * _Nonnull)targetIndexPathForInteractivelyMovingItem:(NSIndexPath * _Nonnull)previousIndexPath withPosition:(CGPoint)position __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("targetIndexPathForInteractivelyMovingItem:withPosition:")]
    NSIndexPath TargetIndexPathForInteractivelyMovingItem(NSIndexPath previousIndexPath, CGPoint position);

    // -(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributesForInteractivelyMovingItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath withTargetPosition:(CGPoint)position __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("layoutAttributesForInteractivelyMovingItemAtIndexPath:withTargetPosition:")]
    UICollectionViewLayoutAttributes LayoutAttributesForInteractivelyMovingItemAtIndexPath(NSIndexPath indexPath, CGPoint position);

    // -(UICollectionViewLayoutInvalidationContext * _Nonnull)invalidationContextForInteractivelyMovingItems:(NSArray<NSIndexPath *> * _Nonnull)targetIndexPaths withTargetPosition:(CGPoint)targetPosition previousIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)previousIndexPaths previousPosition:(CGPoint)previousPosition __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("invalidationContextForInteractivelyMovingItems:withTargetPosition:previousIndexPaths:previousPosition:")]
    UICollectionViewLayoutInvalidationContext InvalidationContextForInteractivelyMovingItems(NSIndexPath[] targetIndexPaths, CGPoint targetPosition, NSIndexPath[] previousIndexPaths, CGPoint previousPosition);

    // -(UICollectionViewLayoutInvalidationContext * _Nonnull)invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths previousIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)previousIndexPaths movementCancelled:(BOOL)movementCancelled __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths:previousIndexPaths:movementCancelled:")]
    UICollectionViewLayoutInvalidationContext InvalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths(NSIndexPath[] indexPaths, NSIndexPath[] previousIndexPaths, bool movementCancelled);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const _Nonnull UICollectionElementKindSectionHeader __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UICollectionElementKindSectionHeader", "__Internal")]
    NSString UICollectionElementKindSectionHeader { get; }

    // extern NSString *const _Nonnull UICollectionElementKindSectionFooter __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UICollectionElementKindSectionFooter", "__Internal")]
    NSString UICollectionElementKindSectionFooter { get; }

    // extern const CGSize UICollectionViewFlowLayoutAutomaticSize __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Field("UICollectionViewFlowLayoutAutomaticSize", "__Internal")]
    CGSize UICollectionViewFlowLayoutAutomaticSize { get; }
}

// @interface UICollectionViewFlowLayoutInvalidationContext : UICollectionViewLayoutInvalidationContext
[iOS(7, 0)]
[BaseType(typeof(UICollectionViewLayoutInvalidationContext))]
interface UICollectionViewFlowLayoutInvalidationContext
{
    // @property (nonatomic) BOOL invalidateFlowLayoutDelegateMetrics;
    [Export("invalidateFlowLayoutDelegateMetrics")]
    bool InvalidateFlowLayoutDelegateMetrics { get; set; }

    // @property (nonatomic) BOOL invalidateFlowLayoutAttributes;
    [Export("invalidateFlowLayoutAttributes")]
    bool InvalidateFlowLayoutAttributes { get; set; }
}

// @protocol UICollectionViewDelegateFlowLayout <UICollectionViewDelegate>
[Protocol, Model]
interface UICollectionViewDelegateFlowLayout : IUICollectionViewDelegate
{
    // @optional -(CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("collectionView:layout:sizeForItemAtIndexPath:")]
    CGSize CollectionView(UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, NSIndexPath indexPath);

    // @optional -(UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
    [Export("collectionView:layout:insetForSectionAtIndex:")]
    UIEdgeInsets CollectionView(UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, nint section);

    // @optional -(CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section;
    [Export("collectionView:layout:minimumLineSpacingForSectionAtIndex:")]
    nfloat CollectionView(UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, nint section);

    // @optional -(CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section;
    [Export("collectionView:layout:minimumInteritemSpacingForSectionAtIndex:")]
    nfloat CollectionView(UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, nint section);

    // @optional -(CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section;
    [Export("collectionView:layout:referenceSizeForHeaderInSection:")]
    CGSize CollectionView(UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, nint section);

    // @optional -(CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout referenceSizeForFooterInSection:(NSInteger)section;
    [Export("collectionView:layout:referenceSizeForFooterInSection:")]
    CGSize CollectionView(UICollectionView collectionView, UICollectionViewLayout collectionViewLayout, nint section);
}

// @interface UICollectionViewFlowLayout : UICollectionViewLayout
[iOS(6, 0)]
[BaseType(typeof(UICollectionViewLayout))]
interface UICollectionViewFlowLayout
{
    // @property (nonatomic) CGFloat minimumLineSpacing;
    [Export("minimumLineSpacing")]
    nfloat MinimumLineSpacing { get; set; }

    // @property (nonatomic) CGFloat minimumInteritemSpacing;
    [Export("minimumInteritemSpacing")]
    nfloat MinimumInteritemSpacing { get; set; }

    // @property (nonatomic) CGSize itemSize;
    [Export("itemSize", ArgumentSemantic.Assign)]
    CGSize ItemSize { get; set; }

    // @property (nonatomic) CGSize estimatedItemSize __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("estimatedItemSize", ArgumentSemantic.Assign)]
    CGSize EstimatedItemSize { get; set; }

    // @property (nonatomic) UICollectionViewScrollDirection scrollDirection;
    [Export("scrollDirection", ArgumentSemantic.Assign)]
    UICollectionViewScrollDirection ScrollDirection { get; set; }

    // @property (nonatomic) CGSize headerReferenceSize;
    [Export("headerReferenceSize", ArgumentSemantic.Assign)]
    CGSize HeaderReferenceSize { get; set; }

    // @property (nonatomic) CGSize footerReferenceSize;
    [Export("footerReferenceSize", ArgumentSemantic.Assign)]
    CGSize FooterReferenceSize { get; set; }

    // @property (nonatomic) UIEdgeInsets sectionInset;
    [Export("sectionInset", ArgumentSemantic.Assign)]
    UIEdgeInsets SectionInset { get; set; }

    // @property (nonatomic) UICollectionViewFlowLayoutSectionInsetReference sectionInsetReference __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), NoWatch, iOS(11, 0)]
    [Export("sectionInsetReference", ArgumentSemantic.Assign)]
    UICollectionViewFlowLayoutSectionInsetReference SectionInsetReference { get; set; }

    // @property (nonatomic) BOOL sectionHeadersPinToVisibleBounds __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("sectionHeadersPinToVisibleBounds")]
    bool SectionHeadersPinToVisibleBounds { get; set; }

    // @property (nonatomic) BOOL sectionFootersPinToVisibleBounds __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("sectionFootersPinToVisibleBounds")]
    bool SectionFootersPinToVisibleBounds { get; set; }
}

// @interface UICollectionViewTransitionLayout : UICollectionViewLayout
[iOS(7, 0)]
[BaseType(typeof(UICollectionViewLayout))]
[DisableDefaultCtor]
interface UICollectionViewTransitionLayout
{
    // @property (assign, nonatomic) CGFloat transitionProgress;
    [Export("transitionProgress")]
    nfloat TransitionProgress { get; set; }

    // @property (readonly, nonatomic) UICollectionViewLayout * _Nonnull currentLayout;
    [Export("currentLayout")]
    UICollectionViewLayout CurrentLayout { get; }

    // @property (readonly, nonatomic) UICollectionViewLayout * _Nonnull nextLayout;
    [Export("nextLayout")]
    UICollectionViewLayout NextLayout { get; }

    // -(instancetype _Nonnull)initWithCurrentLayout:(UICollectionViewLayout * _Nonnull)currentLayout nextLayout:(UICollectionViewLayout * _Nonnull)newLayout __attribute__((objc_designated_initializer));
    [Export("initWithCurrentLayout:nextLayout:")]
    [DesignatedInitializer]
    IntPtr Constructor(UICollectionViewLayout currentLayout, UICollectionViewLayout newLayout);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // -(void)updateValue:(CGFloat)value forAnimatedKey:(NSString * _Nonnull)key;
    [Export("updateValue:forAnimatedKey:")]
    void UpdateValue(nfloat value, string key);

    // -(CGFloat)valueForAnimatedKey:(NSString * _Nonnull)key;
    [Export("valueForAnimatedKey:")]
    nfloat ValueForAnimatedKey(string key);
}

// @interface UIDatePicker : UIControl <NSCoding>
[NoTV, iOS(2, 0)]
[BaseType(typeof(UIControl))]
interface UIDatePicker : INSCoding
{
    // @property (nonatomic) UIDatePickerMode datePickerMode;
    [Export("datePickerMode", ArgumentSemantic.Assign)]
    UIDatePickerMode DatePickerMode { get; set; }

    // @property (nonatomic, strong) NSLocale * _Nullable locale;
    [NullAllowed, Export("locale", ArgumentSemantic.Strong)]
    NSLocale Locale { get; set; }

    // @property (copy, nonatomic) NSCalendar * _Null_unspecified calendar;
    [Export("calendar", ArgumentSemantic.Copy)]
    NSCalendar Calendar { get; set; }

    // @property (nonatomic, strong) NSTimeZone * _Nullable timeZone;
    [NullAllowed, Export("timeZone", ArgumentSemantic.Strong)]
    NSTimeZone TimeZone { get; set; }

    // @property (nonatomic, strong) NSDate * _Nonnull date;
    [Export("date", ArgumentSemantic.Strong)]
    NSDate Date { get; set; }

    // @property (nonatomic, strong) NSDate * _Nullable minimumDate;
    [NullAllowed, Export("minimumDate", ArgumentSemantic.Strong)]
    NSDate MinimumDate { get; set; }

    // @property (nonatomic, strong) NSDate * _Nullable maximumDate;
    [NullAllowed, Export("maximumDate", ArgumentSemantic.Strong)]
    NSDate MaximumDate { get; set; }

    // @property (nonatomic) NSTimeInterval countDownDuration;
    [Export("countDownDuration")]
    double CountDownDuration { get; set; }

    // @property (nonatomic) NSInteger minuteInterval;
    [Export("minuteInterval")]
    nint MinuteInterval { get; set; }

    // -(void)setDate:(NSDate * _Nonnull)date animated:(BOOL)animated;
    [Export("setDate:animated:")]
    void SetDate(NSDate date, bool animated);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSNotificationName _Nonnull UIDocumentStateChangedNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Field("UIDocumentStateChangedNotification", "__Internal")]
    NSString UIDocumentStateChangedNotification { get; }
}

// @interface UIDocument : NSObject <NSFilePresenter, NSProgressReporting>
[NoTV, iOS(5, 0)]
[BaseType(typeof(NSObject))]
interface UIDocument : INSFilePresenter, INSProgressReporting
{
    // -(instancetype _Nonnull)initWithFileURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, unavailable))) __attribute__((objc_designated_initializer));
    [NoTV]
    [Export("initWithFileURL:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSUrl url);

    // @property (readonly) NSURL * _Nonnull fileURL __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("fileURL")]
    NSUrl FileURL { get; }

    // @property (readonly, copy) NSString * _Nonnull localizedName __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("localizedName")]
    string LocalizedName { get; }

    // @property (readonly, copy) NSString * _Nullable fileType __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [NullAllowed, Export("fileType")]
    string FileType { get; }

    // @property (copy) NSDate * _Nullable fileModificationDate __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [NullAllowed, Export("fileModificationDate", ArgumentSemantic.Copy)]
    NSDate FileModificationDate { get; set; }

    // @property (readonly) UIDocumentState documentState __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("documentState")]
    UIDocumentState DocumentState { get; }

    // @property (readonly) NSProgress * _Nullable progress __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0)));
    [NoTV, iOS(9, 0)]
    [NullAllowed, Export("progress")]
    NSProgress Progress { get; }

    // -(void)openWithCompletionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("openWithCompletionHandler:")]
    void OpenWithCompletionHandler([NullAllowed] Action<bool> completionHandler);

    // -(void)closeWithCompletionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("closeWithCompletionHandler:")]
    void CloseWithCompletionHandler([NullAllowed] Action<bool> completionHandler);

    // -(BOOL)loadFromContents:(id _Nonnull)contents ofType:(NSString * _Nullable)typeName error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("loadFromContents:ofType:error:")]
    bool LoadFromContents(NSObject contents, [NullAllowed] string typeName, [NullAllowed] out NSError outError);

    // -(id _Nullable)contentsForType:(NSString * _Nonnull)typeName error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("contentsForType:error:")]
    [return: NullAllowed]
    NSObject ContentsForType(string typeName, [NullAllowed] out NSError outError);

    // -(void)disableEditing __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("disableEditing")]
    void DisableEditing();

    // -(void)enableEditing __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("enableEditing")]
    void EnableEditing();

    // @property (strong) NSUndoManager * _Null_unspecified undoManager __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("undoManager", ArgumentSemantic.Strong)]
    NSUndoManager UndoManager { get; set; }

    // @property (readonly, nonatomic) BOOL hasUnsavedChanges __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("hasUnsavedChanges")]
    bool HasUnsavedChanges { get; }

    // -(void)updateChangeCount:(UIDocumentChangeKind)change __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("updateChangeCount:")]
    void UpdateChangeCount(UIDocumentChangeKind change);

    // -(id _Nonnull)changeCountTokenForSaveOperation:(UIDocumentSaveOperation)saveOperation __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("changeCountTokenForSaveOperation:")]
    NSObject ChangeCountTokenForSaveOperation(UIDocumentSaveOperation saveOperation);

    // -(void)updateChangeCountWithToken:(id _Nonnull)changeCountToken forSaveOperation:(UIDocumentSaveOperation)saveOperation __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("updateChangeCountWithToken:forSaveOperation:")]
    void UpdateChangeCountWithToken(NSObject changeCountToken, UIDocumentSaveOperation saveOperation);

    // -(void)saveToURL:(NSURL * _Nonnull)url forSaveOperation:(UIDocumentSaveOperation)saveOperation completionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("saveToURL:forSaveOperation:completionHandler:")]
    void SaveToURL(NSUrl url, UIDocumentSaveOperation saveOperation, [NullAllowed] Action<bool> completionHandler);

    // -(void)autosaveWithCompletionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("autosaveWithCompletionHandler:")]
    void AutosaveWithCompletionHandler([NullAllowed] Action<bool> completionHandler);

    // @property (readonly, nonatomic) NSString * _Nullable savingFileType __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [NullAllowed, Export("savingFileType")]
    string SavingFileType { get; }

    // -(NSString * _Nonnull)fileNameExtensionForType:(NSString * _Nullable)typeName saveOperation:(UIDocumentSaveOperation)saveOperation __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("fileNameExtensionForType:saveOperation:")]
    string FileNameExtensionForType([NullAllowed] string typeName, UIDocumentSaveOperation saveOperation);

    // -(BOOL)writeContents:(id _Nonnull)contents andAttributes:(NSDictionary * _Nullable)additionalFileAttributes safelyToURL:(NSURL * _Nonnull)url forSaveOperation:(UIDocumentSaveOperation)saveOperation error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("writeContents:andAttributes:safelyToURL:forSaveOperation:error:")]
    bool WriteContents(NSObject contents, [NullAllowed] NSDictionary additionalFileAttributes, NSUrl url, UIDocumentSaveOperation saveOperation, [NullAllowed] out NSError outError);

    // -(BOOL)writeContents:(id _Nonnull)contents toURL:(NSURL * _Nonnull)url forSaveOperation:(UIDocumentSaveOperation)saveOperation originalContentsURL:(NSURL * _Nullable)originalContentsURL error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("writeContents:toURL:forSaveOperation:originalContentsURL:error:")]
    bool WriteContents(NSObject contents, NSUrl url, UIDocumentSaveOperation saveOperation, [NullAllowed] NSUrl originalContentsURL, [NullAllowed] out NSError outError);

    // -(NSDictionary * _Nullable)fileAttributesToWriteToURL:(NSURL * _Nonnull)url forSaveOperation:(UIDocumentSaveOperation)saveOperation error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("fileAttributesToWriteToURL:forSaveOperation:error:")]
    [return: NullAllowed]
    NSDictionary FileAttributesToWriteToURL(NSUrl url, UIDocumentSaveOperation saveOperation, [NullAllowed] out NSError outError);

    // -(BOOL)readFromURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("readFromURL:error:")]
    bool ReadFromURL(NSUrl url, [NullAllowed] out NSError outError);

    // -(void)performAsynchronousFileAccessUsingBlock:(void (^ _Nonnull)(void))block __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("performAsynchronousFileAccessUsingBlock:")]
    void PerformAsynchronousFileAccessUsingBlock(Action block);

    // -(void)handleError:(NSError * _Nonnull)error userInteractionPermitted:(BOOL)userInteractionPermitted __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("handleError:userInteractionPermitted:")]
    void HandleError(NSError error, bool userInteractionPermitted);

    // -(void)finishedHandlingError:(NSError * _Nonnull)error recovered:(BOOL)recovered __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("finishedHandlingError:recovered:")]
    void FinishedHandlingError(NSError error, bool recovered);

    // -(void)userInteractionNoLongerPermittedForError:(NSError * _Nonnull)error __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("userInteractionNoLongerPermittedForError:")]
    void UserInteractionNoLongerPermittedForError(NSError error);

    // -(void)revertToContentsOfURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("revertToContentsOfURL:completionHandler:")]
    void RevertToContentsOfURL(NSUrl url, [NullAllowed] Action<bool> completionHandler);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const _Nonnull NSUserActivityDocumentURLKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0)));
    [NoTV, iOS(8, 0)]
    [Field("NSUserActivityDocumentURLKey", "__Internal")]
    NSString NSUserActivityDocumentURLKey { get; }
}

// @interface ActivityContinuation (UIDocument) <UIUserActivityRestoring>
[Category]
[BaseType(typeof(UIDocument))]
interface UIDocument_ActivityContinuation : IUIUserActivityRestoring
{
    // @property (nonatomic, strong) NSUserActivity * _Nullable userActivity __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0)));
    [NoTV, iOS(8, 0)]
    [NullAllowed, Export("userActivity", ArgumentSemantic.Strong)]
    NSUserActivity UserActivity { get; set; }

    // -(void)updateUserActivityState:(NSUserActivity * _Nonnull)userActivity __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0)));
    [NoTV, iOS(8, 0)]
    [Export("updateUserActivityState:")]
    void UpdateUserActivityState(NSUserActivity userActivity);

    // -(void)restoreUserActivityState:(NSUserActivity * _Nonnull)userActivity __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0)));
    [NoTV, iOS(8, 0)]
    [Export("restoreUserActivityState:")]
    void RestoreUserActivityState(NSUserActivity userActivity);
}

// @interface UIDocumentInteractionController : NSObject <UIActionSheetDelegate>
[NoTV, iOS(3, 2)]
[BaseType(typeof(NSObject))]
interface UIDocumentInteractionController : IUIActionSheetDelegate
{
    // +(UIDocumentInteractionController * _Nonnull)interactionControllerWithURL:(NSURL * _Nonnull)url;
    [Static]
    [Export("interactionControllerWithURL:")]
    UIDocumentInteractionController InteractionControllerWithURL(NSUrl url);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIDocumentInteractionControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIDocumentInteractionControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (strong) NSURL * _Nullable URL;
    [NullAllowed, Export("URL", ArgumentSemantic.Strong)]
    NSUrl URL { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable UTI;
    [NullAllowed, Export("UTI")]
    string UTI { get; set; }

    // @property (copy) NSString * _Nullable name;
    [NullAllowed, Export("name")]
    string Name { get; set; }

    // @property (readonly, nonatomic) NSArray<UIImage *> * _Nonnull icons;
    [Export("icons")]
    UIImage[] Icons { get; }

    // @property (nonatomic, strong) id _Nullable annotation;
    [NullAllowed, Export("annotation", ArgumentSemantic.Strong)]
    NSObject Annotation { get; set; }

    // -(BOOL)presentOptionsMenuFromRect:(CGRect)rect inView:(UIView * _Nonnull)view animated:(BOOL)animated;
    [Export("presentOptionsMenuFromRect:inView:animated:")]
    bool PresentOptionsMenuFromRect(CGRect rect, UIView view, bool animated);

    // -(BOOL)presentOptionsMenuFromBarButtonItem:(UIBarButtonItem * _Nonnull)item animated:(BOOL)animated;
    [Export("presentOptionsMenuFromBarButtonItem:animated:")]
    bool PresentOptionsMenuFromBarButtonItem(UIBarButtonItem item, bool animated);

    // -(BOOL)presentPreviewAnimated:(BOOL)animated;
    [Export("presentPreviewAnimated:")]
    bool PresentPreviewAnimated(bool animated);

    // -(BOOL)presentOpenInMenuFromRect:(CGRect)rect inView:(UIView * _Nonnull)view animated:(BOOL)animated;
    [Export("presentOpenInMenuFromRect:inView:animated:")]
    bool PresentOpenInMenuFromRect(CGRect rect, UIView view, bool animated);

    // -(BOOL)presentOpenInMenuFromBarButtonItem:(UIBarButtonItem * _Nonnull)item animated:(BOOL)animated;
    [Export("presentOpenInMenuFromBarButtonItem:animated:")]
    bool PresentOpenInMenuFromBarButtonItem(UIBarButtonItem item, bool animated);

    // -(void)dismissPreviewAnimated:(BOOL)animated;
    [Export("dismissPreviewAnimated:")]
    void DismissPreviewAnimated(bool animated);

    // -(void)dismissMenuAnimated:(BOOL)animated;
    [Export("dismissMenuAnimated:")]
    void DismissMenuAnimated(bool animated);

    // @property (readonly, nonatomic) NSArray<__kindof UIGestureRecognizer *> * _Nonnull gestureRecognizers;
    [Export("gestureRecognizers")]
    UIGestureRecognizer[] GestureRecognizers { get; }
}

// @protocol UIDocumentInteractionControllerDelegate <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIDocumentInteractionControllerDelegate
{
    // @optional -(UIViewController * _Nonnull)documentInteractionControllerViewControllerForPreview:(UIDocumentInteractionController * _Nonnull)controller;
    [Export("documentInteractionControllerViewControllerForPreview:")]
    UIViewController DocumentInteractionControllerViewControllerForPreview(UIDocumentInteractionController controller);

    // @optional -(CGRect)documentInteractionControllerRectForPreview:(UIDocumentInteractionController * _Nonnull)controller;
    [Export("documentInteractionControllerRectForPreview:")]
    CGRect DocumentInteractionControllerRectForPreview(UIDocumentInteractionController controller);

    // @optional -(UIView * _Nullable)documentInteractionControllerViewForPreview:(UIDocumentInteractionController * _Nonnull)controller;
    [Export("documentInteractionControllerViewForPreview:")]
    [return: NullAllowed]
    UIView DocumentInteractionControllerViewForPreview(UIDocumentInteractionController controller);

    // @optional -(void)documentInteractionControllerWillBeginPreview:(UIDocumentInteractionController * _Nonnull)controller;
    [Export("documentInteractionControllerWillBeginPreview:")]
    void DocumentInteractionControllerWillBeginPreview(UIDocumentInteractionController controller);

    // @optional -(void)documentInteractionControllerDidEndPreview:(UIDocumentInteractionController * _Nonnull)controller;
    [Export("documentInteractionControllerDidEndPreview:")]
    void DocumentInteractionControllerDidEndPreview(UIDocumentInteractionController controller);

    // @optional -(void)documentInteractionControllerWillPresentOptionsMenu:(UIDocumentInteractionController * _Nonnull)controller;
    [Export("documentInteractionControllerWillPresentOptionsMenu:")]
    void DocumentInteractionControllerWillPresentOptionsMenu(UIDocumentInteractionController controller);

    // @optional -(void)documentInteractionControllerDidDismissOptionsMenu:(UIDocumentInteractionController * _Nonnull)controller;
    [Export("documentInteractionControllerDidDismissOptionsMenu:")]
    void DocumentInteractionControllerDidDismissOptionsMenu(UIDocumentInteractionController controller);

    // @optional -(void)documentInteractionControllerWillPresentOpenInMenu:(UIDocumentInteractionController * _Nonnull)controller;
    [Export("documentInteractionControllerWillPresentOpenInMenu:")]
    void DocumentInteractionControllerWillPresentOpenInMenu(UIDocumentInteractionController controller);

    // @optional -(void)documentInteractionControllerDidDismissOpenInMenu:(UIDocumentInteractionController * _Nonnull)controller;
    [Export("documentInteractionControllerDidDismissOpenInMenu:")]
    void DocumentInteractionControllerDidDismissOpenInMenu(UIDocumentInteractionController controller);

    // @optional -(void)documentInteractionController:(UIDocumentInteractionController * _Nonnull)controller willBeginSendingToApplication:(NSString * _Nullable)application;
    [Export("documentInteractionController:willBeginSendingToApplication:")]
    void DocumentInteractionController(UIDocumentInteractionController controller, [NullAllowed] string application);

    // @optional -(void)documentInteractionController:(UIDocumentInteractionController * _Nonnull)controller didEndSendingToApplication:(NSString * _Nullable)application;
    [Export("documentInteractionController:didEndSendingToApplication:")]
    void DocumentInteractionController(UIDocumentInteractionController controller, [NullAllowed] string application);

    // @optional -(BOOL)documentInteractionController:(UIDocumentInteractionController * _Nonnull)controller canPerformAction:(SEL _Nullable)action __attribute__((availability(ios, introduced=3_2, deprecated=6_0)));
    [Introduced(PlatformName.iOS, 3, 2)]
    [Deprecated(PlatformName.iOS, 6, 0)]
    [Export("documentInteractionController:canPerformAction:")]
    bool DocumentInteractionController(UIDocumentInteractionController controller, [NullAllowed] Selector action);

    // @optional -(BOOL)documentInteractionController:(UIDocumentInteractionController * _Nonnull)controller performAction:(SEL _Nullable)action __attribute__((availability(ios, introduced=3_2, deprecated=6_0)));
    [Introduced(PlatformName.iOS, 3, 2)]
    [Deprecated(PlatformName.iOS, 6, 0)]
    [Export("documentInteractionController:performAction:")]
    bool DocumentInteractionController(UIDocumentInteractionController controller, [NullAllowed] Selector action);
}

// @protocol UIDocumentPickerDelegate <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIDocumentPickerDelegate
{
    // @optional -(void)documentPicker:(UIDocumentPickerViewController * _Nonnull)controller didPickDocumentsAtURLs:(NSArray<NSURL *> * _Nonnull)urls __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("documentPicker:didPickDocumentsAtURLs:")]
    void DocumentPicker(UIDocumentPickerViewController controller, NSUrl[] urls);

    // @optional -(void)documentPickerWasCancelled:(UIDocumentPickerViewController * _Nonnull)controller;
    [Export("documentPickerWasCancelled:")]
    void DocumentPickerWasCancelled(UIDocumentPickerViewController controller);

    // @optional -(void)documentPicker:(UIDocumentPickerViewController * _Nonnull)controller didPickDocumentAtURL:(NSURL * _Nonnull)url __attribute__((availability(ios, introduced=8_0, deprecated=11_0)));
    [Introduced(PlatformName.iOS, 8, 0, message: "Implement documentPicker:didPickDocumentsAtURLs: instead")]
    [Deprecated(PlatformName.iOS, 11, 0, message: "Implement documentPicker:didPickDocumentsAtURLs: instead")]
    [Export("documentPicker:didPickDocumentAtURL:")]
    void DocumentPicker(UIDocumentPickerViewController controller, NSUrl url);
}

// @interface UIDocumentPickerViewController : UIViewController
[NoTV, iOS(8, 0)]
[BaseType(typeof(UIViewController))]
interface UIDocumentPickerViewController
{
    // -(instancetype _Nonnull)initWithDocumentTypes:(NSArray<NSString *> * _Nonnull)allowedUTIs inMode:(UIDocumentPickerMode)mode __attribute__((objc_designated_initializer));
    [Export("initWithDocumentTypes:inMode:")]
    [DesignatedInitializer]
    IntPtr Constructor(string[] allowedUTIs, UIDocumentPickerMode mode);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)url inMode:(UIDocumentPickerMode)mode __attribute__((objc_designated_initializer));
    [Export("initWithURL:inMode:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSUrl url, UIDocumentPickerMode mode);

    // -(instancetype _Nonnull)initWithURLs:(NSArray<NSURL *> * _Nonnull)urls inMode:(UIDocumentPickerMode)mode __attribute__((availability(ios, introduced=11_0))) __attribute__((objc_designated_initializer));
    [iOS(11, 0)]
    [Export("initWithURLs:inMode:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSUrl[] urls, UIDocumentPickerMode mode);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIDocumentPickerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIDocumentPickerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (readonly, assign, nonatomic) UIDocumentPickerMode documentPickerMode;
    [Export("documentPickerMode", ArgumentSemantic.Assign)]
    UIDocumentPickerMode DocumentPickerMode { get; }

    // @property (assign, nonatomic) BOOL allowsMultipleSelection __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("allowsMultipleSelection")]
    bool AllowsMultipleSelection { get; set; }
}

// @protocol UIDocumentMenuDelegate <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIDocumentMenuDelegate
{
    // @required -(void)documentMenu:(UIDocumentMenuViewController * _Nonnull)documentMenu didPickDocumentPicker:(UIDocumentPickerViewController * _Nonnull)documentPicker;
    [Abstract]
    [Export("documentMenu:didPickDocumentPicker:")]
    void DocumentMenu(UIDocumentMenuViewController documentMenu, UIDocumentPickerViewController documentPicker);

    // @optional -(void)documentMenuWasCancelled:(UIDocumentMenuViewController * _Nonnull)documentMenu;
    [Export("documentMenuWasCancelled:")]
    void DocumentMenuWasCancelled(UIDocumentMenuViewController documentMenu);
}

// @interface UIDocumentMenuViewController : UIViewController
[Introduced(PlatformName.iOS, 8, 0, message: "UIDocumentMenuViewController is deprecated. Use UIDocumentPickerViewController directly.")]
[Deprecated(PlatformName.iOS, 11, 0, message: "UIDocumentMenuViewController is deprecated. Use UIDocumentPickerViewController directly.")]
[NoTV]
[BaseType(typeof(UIViewController))]
interface UIDocumentMenuViewController
{
    // -(instancetype _Nonnull)initWithDocumentTypes:(NSArray<NSString *> * _Nonnull)allowedUTIs inMode:(UIDocumentPickerMode)mode __attribute__((objc_designated_initializer));
    [Export("initWithDocumentTypes:inMode:")]
    [DesignatedInitializer]
    IntPtr Constructor(string[] allowedUTIs, UIDocumentPickerMode mode);

    // -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)url inMode:(UIDocumentPickerMode)mode __attribute__((objc_designated_initializer));
    [Export("initWithURL:inMode:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSUrl url, UIDocumentPickerMode mode);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // -(void)addOptionWithTitle:(NSString * _Nonnull)title image:(UIImage * _Nullable)image order:(UIDocumentMenuOrder)order handler:(void (^ _Nonnull)(void))handler;
    [Export("addOptionWithTitle:image:order:handler:")]
    void AddOptionWithTitle(string title, [NullAllowed] UIImage image, UIDocumentMenuOrder order, Action handler);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIDocumentMenuDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIDocumentMenuDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }
}

// @interface UIDocumentPickerExtensionViewController : UIViewController
[NoTV, iOS(8, 0)]
[BaseType(typeof(UIViewController))]
interface UIDocumentPickerExtensionViewController
{
    // -(void)dismissGrantingAccessToURL:(NSURL * _Nullable)url;
    [Export("dismissGrantingAccessToURL:")]
    void DismissGrantingAccessToURL([NullAllowed] NSUrl url);

    // -(void)prepareForPresentationInMode:(UIDocumentPickerMode)mode;
    [Export("prepareForPresentationInMode:")]
    void PrepareForPresentationInMode(UIDocumentPickerMode mode);

    // @property (readonly, assign, nonatomic) UIDocumentPickerMode documentPickerMode;
    [Export("documentPickerMode", ArgumentSemantic.Assign)]
    UIDocumentPickerMode DocumentPickerMode { get; }

    // @property (readonly, copy, nonatomic) NSURL * _Nullable originalURL;
    [NullAllowed, Export("originalURL", ArgumentSemantic.Copy)]
    NSUrl OriginalURL { get; }

    // @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nullable validTypes;
    [NullAllowed, Export("validTypes", ArgumentSemantic.Copy)]
    string[] ValidTypes { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull providerIdentifier;
    [Export("providerIdentifier")]
    string ProviderIdentifier { get; }

    // @property (readonly, copy, nonatomic) NSURL * _Nullable documentStorageURL;
    [NullAllowed, Export("documentStorageURL", ArgumentSemantic.Copy)]
    NSUrl DocumentStorageURL { get; }
}

// @protocol UICloudSharingControllerDelegate <NSObject>
[NoWatch, NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UICloudSharingControllerDelegate
{
    // @required -(void)cloudSharingController:(UICloudSharingController * _Nonnull)csc failedToSaveShareWithError:(NSError * _Nonnull)error;
    [Abstract]
    [Export("cloudSharingController:failedToSaveShareWithError:")]
    void CloudSharingController(UICloudSharingController csc, NSError error);

    // @required -(NSString * _Nullable)itemTitleForCloudSharingController:(UICloudSharingController * _Nonnull)csc;
    [Abstract]
    [Export("itemTitleForCloudSharingController:")]
    [return: NullAllowed]
    string ItemTitleForCloudSharingController(UICloudSharingController csc);

    // @optional -(NSData * _Nullable)itemThumbnailDataForCloudSharingController:(UICloudSharingController * _Nonnull)csc;
    [Export("itemThumbnailDataForCloudSharingController:")]
    [return: NullAllowed]
    NSData ItemThumbnailDataForCloudSharingController(UICloudSharingController csc);

    // @optional -(NSString * _Nullable)itemTypeForCloudSharingController:(UICloudSharingController * _Nonnull)csc;
    [Export("itemTypeForCloudSharingController:")]
    [return: NullAllowed]
    string ItemTypeForCloudSharingController(UICloudSharingController csc);

    // @optional -(void)cloudSharingControllerDidSaveShare:(UICloudSharingController * _Nonnull)csc;
    [Export("cloudSharingControllerDidSaveShare:")]
    void CloudSharingControllerDidSaveShare(UICloudSharingController csc);

    // @optional -(void)cloudSharingControllerDidStopSharing:(UICloudSharingController * _Nonnull)csc;
    [Export("cloudSharingControllerDidStopSharing:")]
    void CloudSharingControllerDidStopSharing(UICloudSharingController csc);
}

// @interface UICloudSharingController : UIViewController
[NoWatch, NoTV, iOS(10, 0)]
[BaseType(typeof(UIViewController))]
interface UICloudSharingController
{
    // -(instancetype _Nonnull)initWithPreparationHandler:(void (^ _Nonnull)(UICloudSharingController * _Nonnull, void (^ _Nonnull)(CKShare * _Nullable, CKContainer * _Nullable, NSError * _Nullable)))preparationHandler;
    [Export("initWithPreparationHandler:")]
    IntPtr Constructor(Action<UICloudSharingController, Action<CKShare, CKContainer, NSError>> preparationHandler);

    // -(instancetype _Nonnull)initWithShare:(CKShare * _Nonnull)share container:(CKContainer * _Nonnull)container;
    [Export("initWithShare:container:")]
    IntPtr Constructor(CKShare share, CKContainer container);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UICloudSharingControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UICloudSharingControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (readonly, nonatomic, strong) CKShare * _Nullable share;
    [NullAllowed, Export("share", ArgumentSemantic.Strong)]
    CKShare Share { get; }

    // @property (nonatomic) UICloudSharingPermissionOptions availablePermissions;
    [Export("availablePermissions", ArgumentSemantic.Assign)]
    UICloudSharingPermissionOptions AvailablePermissions { get; set; }

    // -(id<UIActivityItemSource> _Nonnull)activityItemSource;
    [Export("activityItemSource")]
    [Verify(MethodToProperty)]
    UIActivityItemSource ActivityItemSource { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSFileProviderItemIdentifier _Nonnull NSFileProviderRootContainerItemIdentifier __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, NoMac, iOS(11, 0)]
    [Field("NSFileProviderRootContainerItemIdentifier", "__Internal")]
    NSString NSFileProviderRootContainerItemIdentifier { get; }

    // extern const NSFileProviderItemIdentifier _Nonnull NSFileProviderWorkingSetContainerItemIdentifier __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, NoMac, iOS(11, 0)]
    [Field("NSFileProviderWorkingSetContainerItemIdentifier", "__Internal")]
    NSString NSFileProviderWorkingSetContainerItemIdentifier { get; }

    // extern const unsigned long long NSFileProviderFavoriteRankUnranked __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, NoMac, iOS(11, 0)]
    [Field("NSFileProviderFavoriteRankUnranked", "__Internal")]
    ulong NSFileProviderFavoriteRankUnranked { get; }
}

// @protocol NSFileProviderItem <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface NSFileProviderItem
{
    // @required @property (readonly, copy, nonatomic) NSFileProviderItemIdentifier _Nonnull itemIdentifier;
    [Abstract]
    [Export("itemIdentifier")]
    string ItemIdentifier { get; }

    // @required @property (readonly, copy, nonatomic) NSFileProviderItemIdentifier _Nonnull parentItemIdentifier;
    [Abstract]
    [Export("parentItemIdentifier")]
    string ParentItemIdentifier { get; }

    // @required @property (readonly, copy, nonatomic) NSString * _Nonnull filename;
    [Abstract]
    [Export("filename")]
    string Filename { get; }

    // @required @property (readonly, copy, nonatomic) NSString * _Nonnull typeIdentifier;
    [Abstract]
    [Export("typeIdentifier")]
    string TypeIdentifier { get; }

    // @optional @property (readonly, nonatomic) NSFileProviderItemCapabilities capabilities;
    [Export("capabilities")]
    NSFileProviderItemCapabilities Capabilities { get; }

    // @optional @property (readonly, copy, nonatomic) NSNumber * _Nullable documentSize;
    [NullAllowed, Export("documentSize", ArgumentSemantic.Copy)]
    NSNumber DocumentSize { get; }

    // @optional @property (readonly, copy, nonatomic) NSNumber * _Nullable childItemCount;
    [NullAllowed, Export("childItemCount", ArgumentSemantic.Copy)]
    NSNumber ChildItemCount { get; }

    // @optional @property (readonly, copy, nonatomic) NSDate * _Nullable creationDate;
    [NullAllowed, Export("creationDate", ArgumentSemantic.Copy)]
    NSDate CreationDate { get; }

    // @optional @property (readonly, copy, nonatomic) NSDate * _Nullable contentModificationDate;
    [NullAllowed, Export("contentModificationDate", ArgumentSemantic.Copy)]
    NSDate ContentModificationDate { get; }

    // @optional @property (readonly, copy, nonatomic) NSDate * _Nullable lastUsedDate;
    [NullAllowed, Export("lastUsedDate", ArgumentSemantic.Copy)]
    NSDate LastUsedDate { get; }

    // @optional @property (readonly, copy, nonatomic) NSData * _Nullable tagData;
    [NullAllowed, Export("tagData", ArgumentSemantic.Copy)]
    NSData TagData { get; }

    // @optional @property (readonly, copy, nonatomic) NSNumber * _Nullable favoriteRank;
    [NullAllowed, Export("favoriteRank", ArgumentSemantic.Copy)]
    NSNumber FavoriteRank { get; }

    // @optional @property (readonly, getter = isTrashed, nonatomic) BOOL trashed;
    [Export("trashed")]
    bool Trashed { [Bind("isTrashed")] get; }

    // @optional @property (readonly, getter = isUploaded, nonatomic) BOOL uploaded;
    [Export("uploaded")]
    bool Uploaded { [Bind("isUploaded")] get; }

    // @optional @property (readonly, getter = isUploading, nonatomic) BOOL uploading;
    [Export("uploading")]
    bool Uploading { [Bind("isUploading")] get; }

    // @optional @property (readonly, copy, nonatomic) NSError * _Nullable uploadingError;
    [NullAllowed, Export("uploadingError", ArgumentSemantic.Copy)]
    NSError UploadingError { get; }

    // @optional @property (readonly, getter = isDownloaded, nonatomic) BOOL downloaded;
    [Export("downloaded")]
    bool Downloaded { [Bind("isDownloaded")] get; }

    // @optional @property (readonly, getter = isDownloading, nonatomic) BOOL downloading;
    [Export("downloading")]
    bool Downloading { [Bind("isDownloading")] get; }

    // @optional @property (readonly, copy, nonatomic) NSError * _Nullable downloadingError;
    [NullAllowed, Export("downloadingError", ArgumentSemantic.Copy)]
    NSError DownloadingError { get; }

    // @optional @property (readonly, getter = isMostRecentVersionDownloaded, nonatomic) BOOL mostRecentVersionDownloaded;
    [Export("mostRecentVersionDownloaded")]
    bool MostRecentVersionDownloaded { [Bind("isMostRecentVersionDownloaded")] get; }

    // @optional @property (readonly, getter = isShared, nonatomic) BOOL shared;
    [Export("shared")]
    bool Shared { [Bind("isShared")] get; }

    // @optional @property (readonly, getter = isSharedByCurrentUser, nonatomic) BOOL sharedByCurrentUser;
    [Export("sharedByCurrentUser")]
    bool SharedByCurrentUser { [Bind("isSharedByCurrentUser")] get; }

    // @optional @property (readonly, nonatomic, strong) NSPersonNameComponents * _Nullable ownerNameComponents;
    [NullAllowed, Export("ownerNameComponents", ArgumentSemantic.Strong)]
    NSPersonNameComponents OwnerNameComponents { get; }

    // @optional @property (readonly, nonatomic, strong) NSPersonNameComponents * _Nullable mostRecentEditorNameComponents;
    [NullAllowed, Export("mostRecentEditorNameComponents", ArgumentSemantic.Strong)]
    NSPersonNameComponents MostRecentEditorNameComponents { get; }

    // @optional @property (readonly, nonatomic, strong) NSData * _Nullable versionIdentifier;
    [NullAllowed, Export("versionIdentifier", ArgumentSemantic.Strong)]
    NSData VersionIdentifier { get; }

    // @optional @property (readonly, nonatomic, strong) NSDictionary * _Nullable userInfo;
    [NullAllowed, Export("userInfo", ArgumentSemantic.Strong)]
    NSDictionary UserInfo { get; }
}

// @interface NSFileProviderExtension : NSObject
[NoWatch, NoTV, NoMac, iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface NSFileProviderExtension
{
    // -(NSURL * _Nullable)URLForItemWithPersistentIdentifier:(NSFileProviderItemIdentifier _Nonnull)identifier;
    [Export("URLForItemWithPersistentIdentifier:")]
    [return: NullAllowed]
    NSUrl URLForItemWithPersistentIdentifier(string identifier);

    // -(NSFileProviderItemIdentifier _Nullable)persistentIdentifierForItemAtURL:(NSURL * _Nonnull)url;
    [Export("persistentIdentifierForItemAtURL:")]
    [return: NullAllowed]
    string PersistentIdentifierForItemAtURL(NSUrl url);

    // -(NSFileProviderItem _Nullable)itemForIdentifier:(NSFileProviderItemIdentifier _Nonnull)identifier error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, NoMac, iOS(11, 0)]
    [Export("itemForIdentifier:error:")]
    [return: NullAllowed]
    NSFileProviderItem ItemForIdentifier(string identifier, [NullAllowed] out NSError error);

    // -(void)providePlaceholderAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
    [Export("providePlaceholderAtURL:completionHandler:")]
    void ProvidePlaceholderAtURL(NSUrl url, Action<NSError> completionHandler);

    // -(void)startProvidingItemAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
    [Export("startProvidingItemAtURL:completionHandler:")]
    void StartProvidingItemAtURL(NSUrl url, Action<NSError> completionHandler);

    // -(void)stopProvidingItemAtURL:(NSURL * _Nonnull)url;
    [Export("stopProvidingItemAtURL:")]
    void StopProvidingItemAtURL(NSUrl url);

    // -(void)itemChangedAtURL:(NSURL * _Nonnull)url;
    [Export("itemChangedAtURL:")]
    void ItemChangedAtURL(NSUrl url);
}

// @interface Deprecated (NSFileProviderExtension)
[Category]
[BaseType(typeof(NSFileProviderExtension))]
interface NSFileProviderExtension_Deprecated
{
    // +(BOOL)writePlaceholderAtURL:(NSURL * _Nonnull)placeholderURL withMetadata:(NSDictionary<NSURLResourceKey,id> * _Nonnull)metadata error:(NSError * _Nullable * _Nullable)error __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=11.0)));
    [Introduced(PlatformName.iOS, 8, 0, message: "Use the corresponding method on NSFileProviderManager instead")]
    [Deprecated(PlatformName.iOS, 11, 0, message: "Use the corresponding method on NSFileProviderManager instead")]
    [NoWatch, NoTV, NoMac]
    [Static]
    [Export("writePlaceholderAtURL:withMetadata:error:")]
    bool WritePlaceholderAtURL(NSUrl placeholderURL, NSDictionary<NSString, NSObject> metadata, [NullAllowed] out NSError error);

    // +(NSURL * _Nonnull)placeholderURLForURL:(NSURL * _Nonnull)url __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=11.0)));
    [Introduced(PlatformName.iOS, 8, 0)]
    [Deprecated(PlatformName.iOS, 11, 0)]
    [NoWatch, NoTV, NoMac]
    [Static]
    [Export("placeholderURLForURL:")]
    NSUrl PlaceholderURLForURL(NSUrl url);

    // @property (readonly, nonatomic) NSString * _Nonnull providerIdentifier __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=11.0)));
    [Introduced(PlatformName.iOS, 8, 0)]
    [Deprecated(PlatformName.iOS, 11, 0)]
    [NoWatch, NoTV, NoMac]
    [Export("providerIdentifier")]
    string ProviderIdentifier { get; }

    // @property (readonly, nonatomic) NSURL * _Nonnull documentStorageURL __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=8.0, deprecated=11.0)));
    [Introduced(PlatformName.iOS, 8, 0)]
    [Deprecated(PlatformName.iOS, 11, 0)]
    [NoWatch, NoTV, NoMac]
    [Export("documentStorageURL")]
    NSUrl DocumentStorageURL { get; }
}

// @interface UIVisualEffect : NSObject <NSCopying, NSSecureCoding>
[iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface UIVisualEffect : INSCopying, INSSecureCoding
{
}

// @interface UIBlurEffect : UIVisualEffect
[iOS(8, 0)]
[BaseType(typeof(UIVisualEffect))]
interface UIBlurEffect
{
    // +(UIBlurEffect * _Nonnull)effectWithStyle:(UIBlurEffectStyle)style;
    [Static]
    [Export("effectWithStyle:")]
    UIBlurEffect EffectWithStyle(UIBlurEffectStyle style);
}

// @interface UIVibrancyEffect : UIVisualEffect
[iOS(8, 0)]
[BaseType(typeof(UIVisualEffect))]
interface UIVibrancyEffect
{
    // +(UIVibrancyEffect * _Nonnull)effectForBlurEffect:(UIBlurEffect * _Nonnull)blurEffect;
    [Static]
    [Export("effectForBlurEffect:")]
    UIVibrancyEffect EffectForBlurEffect(UIBlurEffect blurEffect);
}

// @interface UIVisualEffectView : UIView <NSSecureCoding>
[iOS(8, 0)]
[BaseType(typeof(UIView))]
interface UIVisualEffectView : INSSecureCoding
{
    // @property (readonly, nonatomic, strong) UIView * _Nonnull contentView;
    [Export("contentView", ArgumentSemantic.Strong)]
    UIView ContentView { get; }

    // @property (copy, nonatomic) UIVisualEffect * _Nullable effect;
    [NullAllowed, Export("effect", ArgumentSemantic.Copy)]
    UIVisualEffect Effect { get; set; }

    // -(instancetype _Nonnull)initWithEffect:(UIVisualEffect * _Nullable)effect __attribute__((objc_designated_initializer));
    [Export("initWithEffect:")]
    [DesignatedInitializer]
    IntPtr Constructor([NullAllowed] UIVisualEffect effect);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);
}

// @interface UIFontMetrics : NSObject
[Watch(4, 0), TV(11, 0), iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIFontMetrics
{
    // @property (readonly, strong, class) UIFontMetrics * _Nonnull defaultMetrics;
    [Static]
    [Export("defaultMetrics", ArgumentSemantic.Strong)]
    UIFontMetrics DefaultMetrics { get; }

    // +(instancetype _Nonnull)metricsForTextStyle:(UIFontTextStyle _Nonnull)textStyle;
    [Static]
    [Export("metricsForTextStyle:")]
    UIFontMetrics MetricsForTextStyle(string textStyle);

    // -(instancetype _Nonnull)initForTextStyle:(UIFontTextStyle _Nonnull)textStyle __attribute__((objc_designated_initializer));
    [Export("initForTextStyle:")]
    [DesignatedInitializer]
    IntPtr Constructor(string textStyle);

    // -(UIFont * _Nonnull)scaledFontForFont:(UIFont * _Nonnull)font;
    [Export("scaledFontForFont:")]
    UIFont ScaledFontForFont(UIFont font);

    // -(UIFont * _Nonnull)scaledFontForFont:(UIFont * _Nonnull)font maximumPointSize:(CGFloat)maximumPointSize;
    [Export("scaledFontForFont:maximumPointSize:")]
    UIFont ScaledFontForFont(UIFont font, nfloat maximumPointSize);

    // -(UIFont * _Nonnull)scaledFontForFont:(UIFont * _Nonnull)font compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(watchos, unavailable)));
    [NoWatch]
    [Export("scaledFontForFont:compatibleWithTraitCollection:")]
    UIFont ScaledFontForFont(UIFont font, [NullAllowed] UITraitCollection traitCollection);

    // -(UIFont * _Nonnull)scaledFontForFont:(UIFont * _Nonnull)font maximumPointSize:(CGFloat)maximumPointSize compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(watchos, unavailable)));
    [NoWatch]
    [Export("scaledFontForFont:maximumPointSize:compatibleWithTraitCollection:")]
    UIFont ScaledFontForFont(UIFont font, nfloat maximumPointSize, [NullAllowed] UITraitCollection traitCollection);

    // -(CGFloat)scaledValueForValue:(CGFloat)value;
    [Export("scaledValueForValue:")]
    nfloat ScaledValueForValue(nfloat value);

    // -(CGFloat)scaledValueForValue:(CGFloat)value compatibleWithTraitCollection:(UITraitCollection * _Nullable)traitCollection __attribute__((availability(watchos, unavailable)));
    [NoWatch]
    [Export("scaledValueForValue:compatibleWithTraitCollection:")]
    nfloat ScaledValueForValue(nfloat value, [NullAllowed] UITraitCollection traitCollection);
}

// @interface UIGestureRecognizer : NSObject
[iOS(3, 2)]
[BaseType(typeof(NSObject))]
interface UIGestureRecognizer
{
    // -(instancetype _Nonnull)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action __attribute__((objc_designated_initializer));
    [Export("initWithTarget:action:")]
    [DesignatedInitializer]
    IntPtr Constructor([NullAllowed] NSObject target, [NullAllowed] Selector action);

    // -(void)addTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
    [Export("addTarget:action:")]
    void AddTarget(NSObject target, Selector action);

    // -(void)removeTarget:(id _Nullable)target action:(SEL _Nullable)action;
    [Export("removeTarget:action:")]
    void RemoveTarget([NullAllowed] NSObject target, [NullAllowed] Selector action);

    // @property (readonly, nonatomic) UIGestureRecognizerState state;
    [Export("state")]
    UIGestureRecognizerState State { get; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIGestureRecognizerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIGestureRecognizerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (getter = isEnabled, nonatomic) BOOL enabled;
    [Export("enabled")]
    bool Enabled { [Bind("isEnabled")] get; set; }

    // @property (readonly, nonatomic) UIView * _Nullable view;
    [NullAllowed, Export("view")]
    UIView View { get; }

    // @property (nonatomic) BOOL cancelsTouchesInView;
    [Export("cancelsTouchesInView")]
    bool CancelsTouchesInView { get; set; }

    // @property (nonatomic) BOOL delaysTouchesBegan;
    [Export("delaysTouchesBegan")]
    bool DelaysTouchesBegan { get; set; }

    // @property (nonatomic) BOOL delaysTouchesEnded;
    [Export("delaysTouchesEnded")]
    bool DelaysTouchesEnded { get; set; }

    // @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedTouchTypes __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("allowedTouchTypes", ArgumentSemantic.Copy)]
    NSNumber[] AllowedTouchTypes { get; set; }

    // @property (copy, nonatomic) NSArray<NSNumber *> * _Nonnull allowedPressTypes __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("allowedPressTypes", ArgumentSemantic.Copy)]
    NSNumber[] AllowedPressTypes { get; set; }

    // @property (nonatomic) BOOL requiresExclusiveTouchType __attribute__((availability(ios, introduced=9_2)));
    [iOS(9, 2)]
    [Export("requiresExclusiveTouchType")]
    bool RequiresExclusiveTouchType { get; set; }

    // -(void)requireGestureRecognizerToFail:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;
    [Export("requireGestureRecognizerToFail:")]
    void RequireGestureRecognizerToFail(UIGestureRecognizer otherGestureRecognizer);

    // -(CGPoint)locationInView:(UIView * _Nullable)view;
    [Export("locationInView:")]
    CGPoint LocationInView([NullAllowed] UIView view);

    // @property (readonly, nonatomic) NSUInteger numberOfTouches;
    [Export("numberOfTouches")]
    nuint NumberOfTouches { get; }

    // -(CGPoint)locationOfTouch:(NSUInteger)touchIndex inView:(UIView * _Nullable)view;
    [Export("locationOfTouch:inView:")]
    CGPoint LocationOfTouch(nuint touchIndex, [NullAllowed] UIView view);

    // @property (copy, nonatomic) NSString * _Nullable name __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [NullAllowed, Export("name")]
    string Name { get; set; }
}

// @protocol UIGestureRecognizerDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIGestureRecognizerDelegate
{
    // @optional -(BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
    [Export("gestureRecognizerShouldBegin:")]
    bool GestureRecognizerShouldBegin(UIGestureRecognizer gestureRecognizer);

    // @optional -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;
    [Export("gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:")]
    bool GestureRecognizer(UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);

    // @optional -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("gestureRecognizer:shouldRequireFailureOfGestureRecognizer:")]
    bool GestureRecognizer(UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);

    // @optional -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:")]
    bool GestureRecognizer(UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);

    // @optional -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch;
    [Export("gestureRecognizer:shouldReceiveTouch:")]
    bool GestureRecognizer(UIGestureRecognizer gestureRecognizer, UITouch touch);

    // @optional -(BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceivePress:(UIPress * _Nonnull)press;
    [Export("gestureRecognizer:shouldReceivePress:")]
    bool GestureRecognizer(UIGestureRecognizer gestureRecognizer, UIPress press);
}

// @interface UIGraphicsRendererFormat : NSObject <NSCopying>
[iOS(10, 0)]
[BaseType(typeof(NSObject))]
interface UIGraphicsRendererFormat : INSCopying
{
    // +(instancetype _Nonnull)defaultFormat __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0, deprecated=11.0)));
    [Introduced(PlatformName.TvOS, 10, 0)]
    [Deprecated(PlatformName.TvOS, 11, 0)]
    [Watch(3, 0), iOS(10, 0)]
    [Static]
    [Export("defaultFormat")]
    UIGraphicsRendererFormat DefaultFormat();

    // +(instancetype _Nonnull)preferredFormat __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [Watch(4, 0), TV(11, 0), iOS(11, 0)]
    [Static]
    [Export("preferredFormat")]
    UIGraphicsRendererFormat PreferredFormat();

    // @property (readonly, nonatomic) CGRect bounds;
    [Export("bounds")]
    CGRect Bounds { get; }
}

// @interface UIGraphicsRendererContext : NSObject
[iOS(10, 0)]
[BaseType(typeof(NSObject))]
interface UIGraphicsRendererContext
{
    // @property (readonly, nonatomic) CGContextRef _Nonnull CGContext;
    [Export("CGContext")]
    unsafe CGContextRef* CGContext { get; }

    // @property (readonly, nonatomic) __kindof UIGraphicsRendererFormat * _Nonnull format;
    [Export("format")]
    UIGraphicsRendererFormat Format { get; }

    // -(void)fillRect:(CGRect)rect;
    [Export("fillRect:")]
    void FillRect(CGRect rect);

    // -(void)fillRect:(CGRect)rect blendMode:(CGBlendMode)blendMode;
    [Export("fillRect:blendMode:")]
    void FillRect(CGRect rect, CGBlendMode blendMode);

    // -(void)strokeRect:(CGRect)rect;
    [Export("strokeRect:")]
    void StrokeRect(CGRect rect);

    // -(void)strokeRect:(CGRect)rect blendMode:(CGBlendMode)blendMode;
    [Export("strokeRect:blendMode:")]
    void StrokeRect(CGRect rect, CGBlendMode blendMode);

    // -(void)clipToRect:(CGRect)rect;
    [Export("clipToRect:")]
    void ClipToRect(CGRect rect);
}

// @interface UIGraphicsRenderer : NSObject
[iOS(10, 0)]
[BaseType(typeof(NSObject))]
interface UIGraphicsRenderer
{
    // -(instancetype _Nonnull)initWithBounds:(CGRect)bounds;
    [Export("initWithBounds:")]
    IntPtr Constructor(CGRect bounds);

    // -(instancetype _Nonnull)initWithBounds:(CGRect)bounds format:(UIGraphicsRendererFormat * _Nonnull)format __attribute__((objc_designated_initializer));
    [Export("initWithBounds:format:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect bounds, UIGraphicsRendererFormat format);

    // @property (readonly, nonatomic) __kindof UIGraphicsRendererFormat * _Nonnull format;
    [Export("format")]
    UIGraphicsRendererFormat Format { get; }

    // @property (readonly, nonatomic) BOOL allowsImageOutput;
    [Export("allowsImageOutput")]
    bool AllowsImageOutput { get; }
}

// typedef void (^UIGraphicsImageDrawingActions)(UIGraphicsImageRendererContext * _Nonnull);
delegate void UIGraphicsImageDrawingActions(UIGraphicsImageRendererContext arg0);

// @interface UIGraphicsImageRendererFormat : UIGraphicsRendererFormat
[iOS(10, 0)]
[BaseType(typeof(UIGraphicsRendererFormat))]
interface UIGraphicsImageRendererFormat
{
    // @property (nonatomic) CGFloat scale;
    [Export("scale")]
    nfloat Scale { get; set; }

    // @property (nonatomic) BOOL opaque;
    [Export("opaque")]
    bool Opaque { get; set; }

    // @property (nonatomic) BOOL prefersExtendedRange __attribute__((availability(ios, introduced=10_0, deprecated=12_0)));
    [Introduced(PlatformName.iOS, 10, 0, message: "Use the preferredRange property instead")]
    [Deprecated(PlatformName.iOS, 12, 0, message: "Use the preferredRange property instead")]
    [Export("prefersExtendedRange")]
    bool PrefersExtendedRange { get; set; }

    // @property (nonatomic) UIGraphicsImageRendererFormatRange preferredRange __attribute__((availability(ios, introduced=12_0)));
    [iOS(12, 0)]
    [Export("preferredRange", ArgumentSemantic.Assign)]
    UIGraphicsImageRendererFormatRange PreferredRange { get; set; }

    // +(instancetype _Nonnull)formatForTraitCollection:(UITraitCollection * _Nonnull)traitCollection __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Static]
    [Export("formatForTraitCollection:")]
    UIGraphicsImageRendererFormat FormatForTraitCollection(UITraitCollection traitCollection);
}

// @interface UIGraphicsImageRendererContext : UIGraphicsRendererContext
[iOS(10, 0)]
[BaseType(typeof(UIGraphicsRendererContext))]
interface UIGraphicsImageRendererContext
{
    // @property (readonly, nonatomic) UIImage * _Nonnull currentImage;
    [Export("currentImage")]
    UIImage CurrentImage { get; }
}

// @interface UIGraphicsImageRenderer : UIGraphicsRenderer
[iOS(10, 0)]
[BaseType(typeof(UIGraphicsRenderer))]
interface UIGraphicsImageRenderer
{
    // -(instancetype _Nonnull)initWithSize:(CGSize)size;
    [Export("initWithSize:")]
    IntPtr Constructor(CGSize size);

    // -(instancetype _Nonnull)initWithSize:(CGSize)size format:(UIGraphicsImageRendererFormat * _Nonnull)format __attribute__((objc_designated_initializer));
    [Export("initWithSize:format:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGSize size, UIGraphicsImageRendererFormat format);

    // -(instancetype _Nonnull)initWithBounds:(CGRect)bounds format:(UIGraphicsImageRendererFormat * _Nonnull)format __attribute__((objc_designated_initializer));
    [Export("initWithBounds:format:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect bounds, UIGraphicsImageRendererFormat format);

    // -(UIImage * _Nonnull)imageWithActions:(UIGraphicsImageDrawingActions _Nonnull)actions;
    [Export("imageWithActions:")]
    UIImage ImageWithActions(UIGraphicsImageDrawingActions actions);

    // -(NSData * _Nonnull)PNGDataWithActions:(UIGraphicsImageDrawingActions _Nonnull)actions;
    [Export("PNGDataWithActions:")]
    NSData PNGDataWithActions(UIGraphicsImageDrawingActions actions);

    // -(NSData * _Nonnull)JPEGDataWithCompressionQuality:(CGFloat)compressionQuality actions:(UIGraphicsImageDrawingActions _Nonnull)actions;
    [Export("JPEGDataWithCompressionQuality:actions:")]
    NSData JPEGDataWithCompressionQuality(nfloat compressionQuality, UIGraphicsImageDrawingActions actions);
}

// typedef void (^UIGraphicsPDFDrawingActions)(UIGraphicsPDFRendererContext * _Nonnull);
delegate void UIGraphicsPDFDrawingActions(UIGraphicsPdfRendererContext arg0);

// @interface UIGraphicsPDFRendererFormat : UIGraphicsRendererFormat
[iOS(10, 0)]
[BaseType(typeof(UIGraphicsRendererFormat))]
interface UIGraphicsPDFRendererFormat
{
    // @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nonnull documentInfo;
    [Export("documentInfo", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> DocumentInfo { get; set; }
}

// @interface UIGraphicsPDFRendererContext : UIGraphicsRendererContext
[iOS(10, 0)]
[BaseType(typeof(UIGraphicsRendererContext))]
interface UIGraphicsPDFRendererContext
{
    // @property (readonly, nonatomic) CGRect pdfContextBounds;
    [Export("pdfContextBounds")]
    CGRect PdfContextBounds { get; }

    // -(void)beginPage;
    [Export("beginPage")]
    void BeginPage();

    // -(void)beginPageWithBounds:(CGRect)bounds pageInfo:(NSDictionary<NSString *,id> * _Nonnull)pageInfo;
    [Export("beginPageWithBounds:pageInfo:")]
    void BeginPageWithBounds(CGRect bounds, NSDictionary<NSString, NSObject> pageInfo);

    // -(void)setURL:(NSURL * _Nonnull)url forRect:(CGRect)rect;
    [Export("setURL:forRect:")]
    void SetURL(NSUrl url, CGRect rect);

    // -(void)addDestinationWithName:(NSString * _Nonnull)name atPoint:(CGPoint)point;
    [Export("addDestinationWithName:atPoint:")]
    void AddDestinationWithName(string name, CGPoint point);

    // -(void)setDestinationWithName:(NSString * _Nonnull)name forRect:(CGRect)rect;
    [Export("setDestinationWithName:forRect:")]
    void SetDestinationWithName(string name, CGRect rect);
}

// @interface UIGraphicsPDFRenderer : UIGraphicsRenderer
[iOS(10, 0)]
[BaseType(typeof(UIGraphicsRenderer))]
interface UIGraphicsPDFRenderer
{
    // -(instancetype _Nonnull)initWithBounds:(CGRect)bounds format:(UIGraphicsPDFRendererFormat * _Nonnull)format __attribute__((objc_designated_initializer));
    [Export("initWithBounds:format:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect bounds, UIGraphicsPdfRendererFormat format);

    // -(BOOL)writePDFToURL:(NSURL * _Nonnull)url withActions:(UIGraphicsPDFDrawingActions _Nonnull)actions error:(NSError * _Nullable * _Nullable)error;
    [Export("writePDFToURL:withActions:error:")]
    bool WritePDFToURL(NSUrl url, UIGraphicsPDFDrawingActions actions, [NullAllowed] out NSError error);

    // -(NSData * _Nonnull)PDFDataWithActions:(UIGraphicsPDFDrawingActions _Nonnull)actions;
    [Export("PDFDataWithActions:")]
    NSData PDFDataWithActions(UIGraphicsPDFDrawingActions actions);
}

// @interface UIImageAsset : NSObject <NSSecureCoding>
[iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface UIImageAsset : INSSecureCoding
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // -(UIImage * _Nonnull)imageWithTraitCollection:(UITraitCollection * _Nonnull)traitCollection;
    [Export("imageWithTraitCollection:")]
    UIImage ImageWithTraitCollection(UITraitCollection traitCollection);

    // -(void)registerImage:(UIImage * _Nonnull)image withTraitCollection:(UITraitCollection * _Nonnull)traitCollection;
    [Export("registerImage:withTraitCollection:")]
    void RegisterImage(UIImage image, UITraitCollection traitCollection);

    // -(void)unregisterImageWithTraitCollection:(UITraitCollection * _Nonnull)traitCollection;
    [Export("unregisterImageWithTraitCollection:")]
    void UnregisterImageWithTraitCollection(UITraitCollection traitCollection);
}

// @interface NSDataAsset : NSObject <NSCopying>
[iOS(9, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface NSDataAsset : INSCopying
{
    // -(instancetype _Nullable)initWithName:(NSString * _Nonnull)name;
    [Export("initWithName:")]
    IntPtr Constructor(string name);

    // -(instancetype _Nullable)initWithName:(NSString * _Nonnull)name bundle:(NSBundle * _Nonnull)bundle __attribute__((objc_designated_initializer));
    [Export("initWithName:bundle:")]
    [DesignatedInitializer]
    IntPtr Constructor(string name, NSBundle bundle);

    // @property (readonly, copy, nonatomic) NSString * _Nonnull name;
    [Export("name")]
    string Name { get; }

    // @property (readonly, copy, nonatomic) NSData * _Nonnull data;
    [Export("data", ArgumentSemantic.Copy)]
    NSData Data { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull typeIdentifier;
    [Export("typeIdentifier")]
    string TypeIdentifier { get; }
}

// @interface UIPanGestureRecognizer : UIGestureRecognizer
[iOS(3, 2)]
[BaseType(typeof(UIGestureRecognizer))]
interface UIPanGestureRecognizer
{
    // @property (nonatomic) NSUInteger minimumNumberOfTouches __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("minimumNumberOfTouches")]
    nuint MinimumNumberOfTouches { get; set; }

    // @property (nonatomic) NSUInteger maximumNumberOfTouches __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("maximumNumberOfTouches")]
    nuint MaximumNumberOfTouches { get; set; }

    // -(CGPoint)translationInView:(UIView * _Nullable)view;
    [Export("translationInView:")]
    CGPoint TranslationInView([NullAllowed] UIView view);

    // -(void)setTranslation:(CGPoint)translation inView:(UIView * _Nullable)view;
    [Export("setTranslation:inView:")]
    void SetTranslation(CGPoint translation, [NullAllowed] UIView view);

    // -(CGPoint)velocityInView:(UIView * _Nullable)view;
    [Export("velocityInView:")]
    CGPoint VelocityInView([NullAllowed] UIView view);
}

// @interface UITapGestureRecognizer : UIGestureRecognizer
[iOS(3, 2)]
[BaseType(typeof(UIGestureRecognizer))]
interface UITapGestureRecognizer
{
    // @property (nonatomic) NSUInteger numberOfTapsRequired;
    [Export("numberOfTapsRequired")]
    nuint NumberOfTapsRequired { get; set; }

    // @property (nonatomic) NSUInteger numberOfTouchesRequired __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("numberOfTouchesRequired")]
    nuint NumberOfTouchesRequired { get; set; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const CGFloat UINavigationControllerHideShowBarDuration __attribute__((visibility("default")));
    [Field("UINavigationControllerHideShowBarDuration", "__Internal")]
    nfloat UINavigationControllerHideShowBarDuration { get; }
}

// @interface UINavigationController : UIViewController
[iOS(2, 0)]
[BaseType(typeof(UIViewController))]
interface UINavigationController
{
    // -(instancetype _Nonnull)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("initWithNavigationBarClass:toolbarClass:")]
    IntPtr Constructor([NullAllowed] Class navigationBarClass, [NullAllowed] Class toolbarClass);

    // -(instancetype _Nonnull)initWithRootViewController:(UIViewController * _Nonnull)rootViewController;
    [Export("initWithRootViewController:")]
    IntPtr Constructor(UIViewController rootViewController);

    // -(void)pushViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
    [Export("pushViewController:animated:")]
    void PushViewController(UIViewController viewController, bool animated);

    // -(UIViewController * _Nullable)popViewControllerAnimated:(BOOL)animated;
    [Export("popViewControllerAnimated:")]
    [return: NullAllowed]
    UIViewController PopViewControllerAnimated(bool animated);

    // -(NSArray<__kindof UIViewController *> * _Nullable)popToViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
    [Export("popToViewController:animated:")]
    [return: NullAllowed]
    UIViewController[] PopToViewController(UIViewController viewController, bool animated);

    // -(NSArray<__kindof UIViewController *> * _Nullable)popToRootViewControllerAnimated:(BOOL)animated;
    [Export("popToRootViewControllerAnimated:")]
    [return: NullAllowed]
    UIViewController[] PopToRootViewControllerAnimated(bool animated);

    // @property (readonly, nonatomic, strong) UIViewController * _Nullable topViewController;
    [NullAllowed, Export("topViewController", ArgumentSemantic.Strong)]
    UIViewController TopViewController { get; }

    // @property (readonly, nonatomic, strong) UIViewController * _Nullable visibleViewController;
    [NullAllowed, Export("visibleViewController", ArgumentSemantic.Strong)]
    UIViewController VisibleViewController { get; }

    // @property (copy, nonatomic) NSArray<__kindof UIViewController *> * _Nonnull viewControllers;
    [Export("viewControllers", ArgumentSemantic.Copy)]
    UIViewController[] ViewControllers { get; set; }

    // -(void)setViewControllers:(NSArray<UIViewController *> * _Nonnull)viewControllers animated:(BOOL)animated __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("setViewControllers:animated:")]
    void SetViewControllers(UIViewController[] viewControllers, bool animated);

    // @property (getter = isNavigationBarHidden, nonatomic) BOOL navigationBarHidden;
    [Export("navigationBarHidden")]
    bool NavigationBarHidden { [Bind("isNavigationBarHidden")] get; set; }

    // -(void)setNavigationBarHidden:(BOOL)hidden animated:(BOOL)animated;
    [Export("setNavigationBarHidden:animated:")]
    void SetNavigationBarHidden(bool hidden, bool animated);

    // @property (readonly, nonatomic) UINavigationBar * _Nonnull navigationBar;
    [Export("navigationBar")]
    UINavigationBar NavigationBar { get; }

    // @property (getter = isToolbarHidden, nonatomic) BOOL toolbarHidden __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("toolbarHidden")]
    bool ToolbarHidden { [Bind("isToolbarHidden")] get; set; }

    // -(void)setToolbarHidden:(BOOL)hidden animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("setToolbarHidden:animated:")]
    void SetToolbarHidden(bool hidden, bool animated);

    // @property (readonly, nonatomic) UIToolbar * _Null_unspecified toolbar __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("toolbar")]
    UIToolbar Toolbar { get; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UINavigationControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UINavigationControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (readonly, nonatomic) UIGestureRecognizer * _Nullable interactivePopGestureRecognizer __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [NullAllowed, Export("interactivePopGestureRecognizer")]
    UIGestureRecognizer InteractivePopGestureRecognizer { get; }

    // -(void)showViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("showViewController:sender:")]
    void ShowViewController(UIViewController vc, [NullAllowed] NSObject sender);

    // @property (assign, readwrite, nonatomic) BOOL hidesBarsWhenKeyboardAppears __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0)));
    [NoTV, iOS(8, 0)]
    [Export("hidesBarsWhenKeyboardAppears")]
    bool HidesBarsWhenKeyboardAppears { get; set; }

    // @property (assign, readwrite, nonatomic) BOOL hidesBarsOnSwipe __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0)));
    [NoTV, iOS(8, 0)]
    [Export("hidesBarsOnSwipe")]
    bool HidesBarsOnSwipe { get; set; }

    // @property (readonly, nonatomic, strong) UIPanGestureRecognizer * _Nonnull barHideOnSwipeGestureRecognizer __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0)));
    [NoTV, iOS(8, 0)]
    [Export("barHideOnSwipeGestureRecognizer", ArgumentSemantic.Strong)]
    UIPanGestureRecognizer BarHideOnSwipeGestureRecognizer { get; }

    // @property (assign, readwrite, nonatomic) BOOL hidesBarsWhenVerticallyCompact __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0)));
    [NoTV, iOS(8, 0)]
    [Export("hidesBarsWhenVerticallyCompact")]
    bool HidesBarsWhenVerticallyCompact { get; set; }

    // @property (assign, readwrite, nonatomic) BOOL hidesBarsOnTap __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0)));
    [NoTV, iOS(8, 0)]
    [Export("hidesBarsOnTap")]
    bool HidesBarsOnTap { get; set; }

    // @property (readonly, assign, nonatomic) UITapGestureRecognizer * _Nonnull barHideOnTapGestureRecognizer __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0)));
    [NoTV, iOS(8, 0)]
    [Export("barHideOnTapGestureRecognizer", ArgumentSemantic.Assign)]
    UITapGestureRecognizer BarHideOnTapGestureRecognizer { get; }
}

// @protocol UINavigationControllerDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UINavigationControllerDelegate
{
    // @optional -(void)navigationController:(UINavigationController * _Nonnull)navigationController willShowViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
    [Export("navigationController:willShowViewController:animated:")]
    void NavigationController(UINavigationController navigationController, UIViewController viewController, bool animated);

    // @optional -(void)navigationController:(UINavigationController * _Nonnull)navigationController didShowViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
    [Export("navigationController:didShowViewController:animated:")]
    void NavigationController(UINavigationController navigationController, UIViewController viewController, bool animated);

    // @optional -(UIInterfaceOrientationMask)navigationControllerSupportedInterfaceOrientations:(UINavigationController * _Nonnull)navigationController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("navigationControllerSupportedInterfaceOrientations:")]
    UIInterfaceOrientationMask NavigationControllerSupportedInterfaceOrientations(UINavigationController navigationController);

    // @optional -(UIInterfaceOrientation)navigationControllerPreferredInterfaceOrientationForPresentation:(UINavigationController * _Nonnull)navigationController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("navigationControllerPreferredInterfaceOrientationForPresentation:")]
    UIInterfaceOrientation NavigationControllerPreferredInterfaceOrientationForPresentation(UINavigationController navigationController);

    // @optional -(id<UIViewControllerInteractiveTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController interactionControllerForAnimationController:(id<UIViewControllerAnimatedTransitioning> _Nonnull)animationController __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("navigationController:interactionControllerForAnimationController:")]
    [return: NullAllowed]
    UIViewControllerInteractiveTransitioning NavigationController(UINavigationController navigationController, UIViewControllerAnimatedTransitioning animationController);

    // @optional -(id<UIViewControllerAnimatedTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController animationControllerForOperation:(UINavigationControllerOperation)operation fromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("navigationController:animationControllerForOperation:fromViewController:toViewController:")]
    [return: NullAllowed]
    UIViewControllerAnimatedTransitioning NavigationController(UINavigationController navigationController, UINavigationControllerOperation operation, UIViewController fromVC, UIViewController toVC);
}

// @interface UINavigationControllerItem (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UINavigationControllerItem
{
    // @property (readonly, nonatomic, strong) UINavigationItem * _Nonnull navigationItem;
    [Export("navigationItem", ArgumentSemantic.Strong)]
    UINavigationItem NavigationItem { get; }

    // @property (nonatomic) BOOL hidesBottomBarWhenPushed __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("hidesBottomBarWhenPushed")]
    bool HidesBottomBarWhenPushed { get; set; }

    // @property (readonly, nonatomic, strong) UINavigationController * _Nullable navigationController;
    [NullAllowed, Export("navigationController", ArgumentSemantic.Strong)]
    UINavigationController NavigationController { get; }
}

// @interface UINavigationControllerContextualToolbarItems (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UINavigationControllerContextualToolbarItems
{
    // @property (nonatomic, strong) NSArray<__kindof UIBarButtonItem *> * _Nullable toolbarItems __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [NullAllowed, Export("toolbarItems", ArgumentSemantic.Strong)]
    UIBarButtonItem[] ToolbarItems { get; set; }

    // -(void)setToolbarItems:(NSArray<UIBarButtonItem *> * _Nullable)toolbarItems animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("setToolbarItems:animated:")]
    void SetToolbarItems([NullAllowed] UIBarButtonItem[] toolbarItems, bool animated);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UIImagePickerControllerInfoKey _Nonnull UIImagePickerControllerMediaType __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIImagePickerControllerMediaType", "__Internal")]
    NSString UIImagePickerControllerMediaType { get; }

    // extern const UIImagePickerControllerInfoKey _Nonnull UIImagePickerControllerOriginalImage __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIImagePickerControllerOriginalImage", "__Internal")]
    NSString UIImagePickerControllerOriginalImage { get; }

    // extern const UIImagePickerControllerInfoKey _Nonnull UIImagePickerControllerEditedImage __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIImagePickerControllerEditedImage", "__Internal")]
    NSString UIImagePickerControllerEditedImage { get; }

    // extern const UIImagePickerControllerInfoKey _Nonnull UIImagePickerControllerCropRect __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIImagePickerControllerCropRect", "__Internal")]
    NSString UIImagePickerControllerCropRect { get; }

    // extern const UIImagePickerControllerInfoKey _Nonnull UIImagePickerControllerMediaURL __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIImagePickerControllerMediaURL", "__Internal")]
    NSString UIImagePickerControllerMediaURL { get; }

    // extern const UIImagePickerControllerInfoKey _Nonnull UIImagePickerControllerReferenceURL __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_1, deprecated=11_0)));
    [Introduced(PlatformName.iOS, 4, 1, message: "Replace with public API: UIImagePickerControllerPHAsset")]
    [Deprecated(PlatformName.iOS, 11, 0, message: "Replace with public API: UIImagePickerControllerPHAsset")]
    [NoTV]
    [Field("UIImagePickerControllerReferenceURL", "__Internal")]
    NSString UIImagePickerControllerReferenceURL { get; }

    // extern const UIImagePickerControllerInfoKey _Nonnull UIImagePickerControllerMediaMetadata __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_1)));
    [NoTV, iOS(4, 1)]
    [Field("UIImagePickerControllerMediaMetadata", "__Internal")]
    NSString UIImagePickerControllerMediaMetadata { get; }

    // extern const UIImagePickerControllerInfoKey _Nonnull UIImagePickerControllerLivePhoto __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_1)));
    [NoTV, iOS(9, 1)]
    [Field("UIImagePickerControllerLivePhoto", "__Internal")]
    NSString UIImagePickerControllerLivePhoto { get; }

    // extern const UIImagePickerControllerInfoKey _Nonnull UIImagePickerControllerPHAsset __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11_0)));
    [NoTV, iOS(11, 0)]
    [Field("UIImagePickerControllerPHAsset", "__Internal")]
    NSString UIImagePickerControllerPHAsset { get; }

    // extern const UIImagePickerControllerInfoKey _Nonnull UIImagePickerControllerImageURL __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11_0)));
    [NoTV, iOS(11, 0)]
    [Field("UIImagePickerControllerImageURL", "__Internal")]
    NSString UIImagePickerControllerImageURL { get; }
}

// @interface UIImagePickerController : UINavigationController <NSCoding>
[NoTV, iOS(2, 0)]
[BaseType(typeof(UINavigationController))]
interface UIImagePickerController : INSCoding
{
    // +(BOOL)isSourceTypeAvailable:(UIImagePickerControllerSourceType)sourceType;
    [Static]
    [Export("isSourceTypeAvailable:")]
    bool IsSourceTypeAvailable(UIImagePickerControllerSourceType sourceType);

    // +(NSArray<NSString *> * _Nullable)availableMediaTypesForSourceType:(UIImagePickerControllerSourceType)sourceType;
    [Static]
    [Export("availableMediaTypesForSourceType:")]
    [return: NullAllowed]
    string[] AvailableMediaTypesForSourceType(UIImagePickerControllerSourceType sourceType);

    // +(BOOL)isCameraDeviceAvailable:(UIImagePickerControllerCameraDevice)cameraDevice __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Static]
    [Export("isCameraDeviceAvailable:")]
    bool IsCameraDeviceAvailable(UIImagePickerControllerCameraDevice cameraDevice);

    // +(BOOL)isFlashAvailableForCameraDevice:(UIImagePickerControllerCameraDevice)cameraDevice __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Static]
    [Export("isFlashAvailableForCameraDevice:")]
    bool IsFlashAvailableForCameraDevice(UIImagePickerControllerCameraDevice cameraDevice);

    // +(NSArray<NSNumber *> * _Nullable)availableCaptureModesForCameraDevice:(UIImagePickerControllerCameraDevice)cameraDevice __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Static]
    [Export("availableCaptureModesForCameraDevice:")]
    [return: NullAllowed]
    NSNumber[] AvailableCaptureModesForCameraDevice(UIImagePickerControllerCameraDevice cameraDevice);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    NSObject<UINavigationControllerDelegate, UIImagePickerControllerDelegate> Delegate { get; set; }

    // @property (nonatomic, weak) id<UINavigationControllerDelegate,UIImagePickerControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (nonatomic) UIImagePickerControllerSourceType sourceType;
    [Export("sourceType", ArgumentSemantic.Assign)]
    UIImagePickerControllerSourceType SourceType { get; set; }

    // @property (copy, nonatomic) NSArray<NSString *> * _Nonnull mediaTypes;
    [Export("mediaTypes", ArgumentSemantic.Copy)]
    string[] MediaTypes { get; set; }

    // @property (nonatomic) BOOL allowsEditing __attribute__((availability(ios, introduced=3_1)));
    [iOS(3, 1)]
    [Export("allowsEditing")]
    bool AllowsEditing { get; set; }

    // @property (nonatomic) BOOL allowsImageEditing __attribute__((availability(ios, introduced=2_0, deprecated=3_1)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 1)]
    [Export("allowsImageEditing")]
    bool AllowsImageEditing { get; set; }

    // @property (nonatomic) UIImagePickerControllerImageURLExportPreset imageExportPreset __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("imageExportPreset", ArgumentSemantic.Assign)]
    UIImagePickerControllerImageURLExportPreset ImageExportPreset { get; set; }

    // @property (nonatomic) NSTimeInterval videoMaximumDuration __attribute__((availability(ios, introduced=3_1)));
    [iOS(3, 1)]
    [Export("videoMaximumDuration")]
    double VideoMaximumDuration { get; set; }

    // @property (nonatomic) UIImagePickerControllerQualityType videoQuality __attribute__((availability(ios, introduced=3_1)));
    [iOS(3, 1)]
    [Export("videoQuality", ArgumentSemantic.Assign)]
    UIImagePickerControllerQualityType VideoQuality { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull videoExportPreset __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("videoExportPreset")]
    string VideoExportPreset { get; set; }

    // @property (nonatomic) BOOL showsCameraControls __attribute__((availability(ios, introduced=3_1)));
    [iOS(3, 1)]
    [Export("showsCameraControls")]
    bool ShowsCameraControls { get; set; }

    // @property (nonatomic, strong) __kindof UIView * _Nullable cameraOverlayView __attribute__((availability(ios, introduced=3_1)));
    [iOS(3, 1)]
    [Export("cameraOverlayView", ArgumentSemantic.Strong)]
    UIView CameraOverlayView { get; set; }

    // @property (nonatomic) CGAffineTransform cameraViewTransform __attribute__((availability(ios, introduced=3_1)));
    [iOS(3, 1)]
    [Export("cameraViewTransform", ArgumentSemantic.Assign)]
    CGAffineTransform CameraViewTransform { get; set; }

    // -(void)takePicture __attribute__((availability(ios, introduced=3_1)));
    [iOS(3, 1)]
    [Export("takePicture")]
    void TakePicture();

    // -(BOOL)startVideoCapture __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("startVideoCapture")]
    [Verify(MethodToProperty)]
    bool StartVideoCapture { get; }

    // -(void)stopVideoCapture __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("stopVideoCapture")]
    void StopVideoCapture();

    // @property (nonatomic) UIImagePickerControllerCameraCaptureMode cameraCaptureMode __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("cameraCaptureMode", ArgumentSemantic.Assign)]
    UIImagePickerControllerCameraCaptureMode CameraCaptureMode { get; set; }

    // @property (nonatomic) UIImagePickerControllerCameraDevice cameraDevice __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("cameraDevice", ArgumentSemantic.Assign)]
    UIImagePickerControllerCameraDevice CameraDevice { get; set; }

    // @property (nonatomic) UIImagePickerControllerCameraFlashMode cameraFlashMode __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("cameraFlashMode", ArgumentSemantic.Assign)]
    UIImagePickerControllerCameraFlashMode CameraFlashMode { get; set; }
}

// @protocol UIImagePickerControllerDelegate <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIImagePickerControllerDelegate
{
    // @optional -(void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingImage:(UIImage * _Nonnull)image editingInfo:(NSDictionary<UIImagePickerControllerInfoKey,id> * _Nullable)editingInfo __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [Export("imagePickerController:didFinishPickingImage:editingInfo:")]
    void ImagePickerController(UIImagePickerController picker, UIImage image, [NullAllowed] NSDictionary<NSString, NSObject> editingInfo);

    // @optional -(void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey,id> * _Nonnull)info;
    [Export("imagePickerController:didFinishPickingMediaWithInfo:")]
    void ImagePickerController(UIImagePickerController picker, NSDictionary<NSString, NSObject> info);

    // @optional -(void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
    [Export("imagePickerControllerDidCancel:")]
    void ImagePickerControllerDidCancel(UIImagePickerController picker);
}

// @interface UIInputView : UIView
[iOS(7, 0)]
[BaseType(typeof(UIView))]
interface UIInputView
{
    // @property (readonly, nonatomic) UIInputViewStyle inputViewStyle;
    [Export("inputViewStyle")]
    UIInputViewStyle InputViewStyle { get; }

    // @property (assign, nonatomic) BOOL allowsSelfSizing __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("allowsSelfSizing")]
    bool AllowsSelfSizing { get; set; }

    // -(instancetype _Nonnull)initWithFrame:(CGRect)frame inputViewStyle:(UIInputViewStyle)inputViewStyle __attribute__((objc_designated_initializer));
    [Export("initWithFrame:inputViewStyle:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect frame, UIInputViewStyle inputViewStyle);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);
}

// @protocol UITextDocumentProxy <UIKeyInput>
[Protocol, Model]
interface UITextDocumentProxy : IUIKeyInput
{
    // @required @property (readonly, nonatomic) NSString * _Nullable documentContextBeforeInput;
    [Abstract]
    [NullAllowed, Export("documentContextBeforeInput")]
    string DocumentContextBeforeInput { get; }

    // @required @property (readonly, nonatomic) NSString * _Nullable documentContextAfterInput;
    [Abstract]
    [NullAllowed, Export("documentContextAfterInput")]
    string DocumentContextAfterInput { get; }

    // @required @property (readonly, nonatomic) NSString * _Nullable selectedText __attribute__((availability(ios, introduced=11.0)));
    [iOS(11, 0)]
    [Abstract]
    [NullAllowed, Export("selectedText")]
    string SelectedText { get; }

    // @required @property (readonly, nonatomic) UITextInputMode * _Nullable documentInputMode __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Abstract]
    [NullAllowed, Export("documentInputMode")]
    UITextInputMode DocumentInputMode { get; }

    // @required @property (readonly, copy, nonatomic) NSUUID * _Nonnull documentIdentifier __attribute__((availability(ios, introduced=11.0)));
    [iOS(11, 0)]
    [Abstract]
    [Export("documentIdentifier", ArgumentSemantic.Copy)]
    NSUuid DocumentIdentifier { get; }

    // @required -(void)adjustTextPositionByCharacterOffset:(NSInteger)offset;
    [Abstract]
    [Export("adjustTextPositionByCharacterOffset:")]
    void AdjustTextPositionByCharacterOffset(nint offset);
}

// @interface UIInputViewController : UIViewController <UITextInputDelegate>
[iOS(8, 0)]
[BaseType(typeof(UIViewController))]
interface UIInputViewController : IUITextInputDelegate
{
    // @property (nonatomic, strong) UIInputView * _Nullable inputView;
    [NullAllowed, Export("inputView", ArgumentSemantic.Strong)]
    UIInputView InputView { get; set; }

    // @property (readonly, nonatomic) id<UITextDocumentProxy> _Nonnull textDocumentProxy;
    [Export("textDocumentProxy")]
    UITextDocumentProxy TextDocumentProxy { get; }

    // @property (copy, nonatomic) NSString * _Nullable primaryLanguage;
    [NullAllowed, Export("primaryLanguage")]
    string PrimaryLanguage { get; set; }

    // @property (nonatomic) BOOL hasDictationKey;
    [Export("hasDictationKey")]
    bool HasDictationKey { get; set; }

    // @property (readonly, nonatomic) BOOL hasFullAccess __attribute__((availability(ios, introduced=11.0)));
    [iOS(11, 0)]
    [Export("hasFullAccess")]
    bool HasFullAccess { get; }

    // @property (readonly, nonatomic) BOOL needsInputModeSwitchKey __attribute__((availability(ios, introduced=11.0)));
    [iOS(11, 0)]
    [Export("needsInputModeSwitchKey")]
    bool NeedsInputModeSwitchKey { get; }

    // -(void)dismissKeyboard;
    [Export("dismissKeyboard")]
    void DismissKeyboard();

    // -(void)advanceToNextInputMode;
    [Export("advanceToNextInputMode")]
    void AdvanceToNextInputMode();

    // -(void)handleInputModeListFromView:(UIView * _Nonnull)view withEvent:(UIEvent * _Nonnull)event __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("handleInputModeListFromView:withEvent:")]
    void HandleInputModeListFromView(UIView view, UIEvent @event);

    // -(void)requestSupplementaryLexiconWithCompletion:(void (^ _Nonnull)(UILexicon * _Nonnull))completionHandler;
    [Export("requestSupplementaryLexiconWithCompletion:")]
    void RequestSupplementaryLexiconWithCompletion(Action<UILexicon> completionHandler);
}

// @interface UILabel : UIView <NSCoding, UIContentSizeCategoryAdjusting>
[iOS(2, 0)]
[BaseType(typeof(UIView))]
interface UILabel : INSCoding, IUIContentSizeCategoryAdjusting
{
    // @property (copy, nonatomic) NSString * _Nullable text;
    [NullAllowed, Export("text")]
    string Text { get; set; }

    // @property (nonatomic, strong) UIFont * _Null_unspecified font;
    [Export("font", ArgumentSemantic.Strong)]
    UIFont Font { get; set; }

    // @property (nonatomic, strong) UIColor * _Null_unspecified textColor;
    [Export("textColor", ArgumentSemantic.Strong)]
    UIColor TextColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable shadowColor;
    [NullAllowed, Export("shadowColor", ArgumentSemantic.Strong)]
    UIColor ShadowColor { get; set; }

    // @property (nonatomic) CGSize shadowOffset;
    [Export("shadowOffset", ArgumentSemantic.Assign)]
    CGSize ShadowOffset { get; set; }

    // @property (nonatomic) NSTextAlignment textAlignment;
    [Export("textAlignment", ArgumentSemantic.Assign)]
    NSTextAlignment TextAlignment { get; set; }

    // @property (nonatomic) NSLineBreakMode lineBreakMode;
    [Export("lineBreakMode", ArgumentSemantic.Assign)]
    NSLineBreakMode LineBreakMode { get; set; }

    // @property (copy, nonatomic) NSAttributedString * _Nullable attributedText __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("attributedText", ArgumentSemantic.Copy)]
    NSAttributedString AttributedText { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable highlightedTextColor;
    [NullAllowed, Export("highlightedTextColor", ArgumentSemantic.Strong)]
    UIColor HighlightedTextColor { get; set; }

    // @property (getter = isHighlighted, nonatomic) BOOL highlighted;
    [Export("highlighted")]
    bool Highlighted { [Bind("isHighlighted")] get; set; }

    // @property (getter = isUserInteractionEnabled, nonatomic) BOOL userInteractionEnabled;
    [Export("userInteractionEnabled")]
    bool UserInteractionEnabled { [Bind("isUserInteractionEnabled")] get; set; }

    // @property (getter = isEnabled, nonatomic) BOOL enabled;
    [Export("enabled")]
    bool Enabled { [Bind("isEnabled")] get; set; }

    // @property (nonatomic) NSInteger numberOfLines;
    [Export("numberOfLines")]
    nint NumberOfLines { get; set; }

    // @property (nonatomic) BOOL adjustsFontSizeToFitWidth;
    [Export("adjustsFontSizeToFitWidth")]
    bool AdjustsFontSizeToFitWidth { get; set; }

    // @property (nonatomic) UIBaselineAdjustment baselineAdjustment;
    [Export("baselineAdjustment", ArgumentSemantic.Assign)]
    UIBaselineAdjustment BaselineAdjustment { get; set; }

    // @property (nonatomic) CGFloat minimumScaleFactor __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("minimumScaleFactor")]
    nfloat MinimumScaleFactor { get; set; }

    // @property (nonatomic) BOOL allowsDefaultTighteningForTruncation __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("allowsDefaultTighteningForTruncation")]
    bool AllowsDefaultTighteningForTruncation { get; set; }

    // -(CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)numberOfLines;
    [Export("textRectForBounds:limitedToNumberOfLines:")]
    CGRect TextRectForBounds(CGRect bounds, nint numberOfLines);

    // -(void)drawTextInRect:(CGRect)rect;
    [Export("drawTextInRect:")]
    void DrawTextInRect(CGRect rect);

    // @property (nonatomic) CGFloat preferredMaxLayoutWidth __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("preferredMaxLayoutWidth")]
    nfloat PreferredMaxLayoutWidth { get; set; }

    // @property (nonatomic) BOOL enablesMarqueeWhenAncestorFocused __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=12.0)));
    [TV(12, 0), NoWatch, NoiOS]
    [Export("enablesMarqueeWhenAncestorFocused")]
    bool EnablesMarqueeWhenAncestorFocused { get; set; }

    // @property (nonatomic) CGFloat minimumFontSize __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=6_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 6, 0)]
    [NoTV]
    [Export("minimumFontSize")]
    nfloat MinimumFontSize { get; set; }

    // @property (nonatomic) BOOL adjustsLetterSpacingToFitWidth __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 6, 0)]
    [Deprecated(PlatformName.iOS, 7, 0)]
    [NoTV]
    [Export("adjustsLetterSpacingToFitWidth")]
    bool AdjustsLetterSpacingToFitWidth { get; set; }
}

// @interface UILexiconEntry : NSObject <NSCopying>
[NoTV, iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface UILexiconEntry : INSCopying
{
    // @property (readonly, nonatomic) NSString * _Nonnull documentText;
    [Export("documentText")]
    string DocumentText { get; }

    // @property (readonly, nonatomic) NSString * _Nonnull userInput;
    [Export("userInput")]
    string UserInput { get; }
}

// @interface UILexicon : NSObject <NSCopying>
[NoTV, iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface UILexicon : INSCopying
{
    // @property (readonly, nonatomic) NSArray<UILexiconEntry *> * _Nonnull entries;
    [Export("entries")]
    UILexiconEntry[] Entries { get; }
}

// @interface UILocalNotification : NSObject <NSCopying, NSCoding>
[Introduced(PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's UNNotificationRequest")]
[Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationRequest")]
[NoTV]
[BaseType(typeof(NSObject))]
interface UILocalNotification : INSCopying, INSCoding
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (copy, nonatomic) NSDate * _Nullable fireDate;
    [NullAllowed, Export("fireDate", ArgumentSemantic.Copy)]
    NSDate FireDate { get; set; }

    // @property (copy, nonatomic) NSTimeZone * _Nullable timeZone;
    [NullAllowed, Export("timeZone", ArgumentSemantic.Copy)]
    NSTimeZone TimeZone { get; set; }

    // @property (nonatomic) NSCalendarUnit repeatInterval;
    [Export("repeatInterval", ArgumentSemantic.Assign)]
    NSCalendarUnit RepeatInterval { get; set; }

    // @property (copy, nonatomic) NSCalendar * _Nullable repeatCalendar;
    [NullAllowed, Export("repeatCalendar", ArgumentSemantic.Copy)]
    NSCalendar RepeatCalendar { get; set; }

    // @property (copy, nonatomic) CLRegion * _Nullable region __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("region", ArgumentSemantic.Copy)]
    CLRegion Region { get; set; }

    // @property (assign, nonatomic) BOOL regionTriggersOnce __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("regionTriggersOnce")]
    bool RegionTriggersOnce { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable alertBody;
    [NullAllowed, Export("alertBody")]
    string AlertBody { get; set; }

    // @property (nonatomic) BOOL hasAction;
    [Export("hasAction")]
    bool HasAction { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable alertAction;
    [NullAllowed, Export("alertAction")]
    string AlertAction { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable alertLaunchImage;
    [NullAllowed, Export("alertLaunchImage")]
    string AlertLaunchImage { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable alertTitle __attribute__((availability(ios, introduced=8_2)));
    [iOS(8, 2)]
    [NullAllowed, Export("alertTitle")]
    string AlertTitle { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable soundName;
    [NullAllowed, Export("soundName")]
    string SoundName { get; set; }

    // @property (nonatomic) NSInteger applicationIconBadgeNumber;
    [Export("applicationIconBadgeNumber")]
    nint ApplicationIconBadgeNumber { get; set; }

    // @property (copy, nonatomic) NSDictionary * _Nullable userInfo;
    [NullAllowed, Export("userInfo", ArgumentSemantic.Copy)]
    NSDictionary UserInfo { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable category __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [NullAllowed, Export("category")]
    string Category { get; set; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const _Nonnull UILocalNotificationDefaultSoundName __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 4, 0, message: "Use UserNotifications Framework's +[UNNotificationSound defaultSound]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's +[UNNotificationSound defaultSound]")]
    [NoTV]
    [Field("UILocalNotificationDefaultSoundName", "__Internal")]
    NSString UILocalNotificationDefaultSoundName { get; }
}

// @interface UIApplicationShortcutIcon : NSObject <NSCopying>
[NoTV, NoMac, iOS(9, 0)]
[BaseType(typeof(NSObject))]
interface UIApplicationShortcutIcon : INSCopying
{
    // +(instancetype _Nonnull)iconWithType:(UIApplicationShortcutIconType)type;
    [Static]
    [Export("iconWithType:")]
    UIApplicationShortcutIcon IconWithType(UIApplicationShortcutIconType type);

    // +(instancetype _Nonnull)iconWithTemplateImageName:(NSString * _Nonnull)templateImageName;
    [Static]
    [Export("iconWithTemplateImageName:")]
    UIApplicationShortcutIcon IconWithTemplateImageName(string templateImageName);
}

// @interface UIApplicationShortcutItem : NSObject <NSCopying, NSMutableCopying>
[NoTV, NoMac, iOS(9, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIApplicationShortcutItem : INSCopying, INSMutableCopying
{
    // -(instancetype _Nonnull)initWithType:(NSString * _Nonnull)type localizedTitle:(NSString * _Nonnull)localizedTitle localizedSubtitle:(NSString * _Nullable)localizedSubtitle icon:(UIApplicationShortcutIcon * _Nullable)icon userInfo:(NSDictionary<NSString *,id<NSSecureCoding>> * _Nullable)userInfo __attribute__((objc_designated_initializer));
    [Export("initWithType:localizedTitle:localizedSubtitle:icon:userInfo:")]
    [DesignatedInitializer]
    IntPtr Constructor(string type, string localizedTitle, [NullAllowed] string localizedSubtitle, [NullAllowed] UIApplicationShortcutIcon icon, [NullAllowed] NSDictionary<NSString, NSSecureCoding> userInfo);

    // -(instancetype _Nonnull)initWithType:(NSString * _Nonnull)type localizedTitle:(NSString * _Nonnull)localizedTitle;
    [Export("initWithType:localizedTitle:")]
    IntPtr Constructor(string type, string localizedTitle);

    // @property (readonly, copy, nonatomic) NSString * _Nonnull type;
    [Export("type")]
    string Type { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull localizedTitle;
    [Export("localizedTitle")]
    string LocalizedTitle { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nullable localizedSubtitle;
    [NullAllowed, Export("localizedSubtitle")]
    string LocalizedSubtitle { get; }

    // @property (readonly, copy, nonatomic) UIApplicationShortcutIcon * _Nullable icon;
    [NullAllowed, Export("icon", ArgumentSemantic.Copy)]
    UIApplicationShortcutIcon Icon { get; }

    // @property (readonly, copy, nonatomic) NSDictionary<NSString *,id<NSSecureCoding>> * _Nullable userInfo;
    [NullAllowed, Export("userInfo", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSSecureCoding> UserInfo { get; }
}

// @interface UIMutableApplicationShortcutItem : UIApplicationShortcutItem
[NoTV, NoMac, iOS(9, 0)]
[BaseType(typeof(UIApplicationShortcutItem))]
interface UIMutableApplicationShortcutItem
{
    // @property (copy, nonatomic) NSString * _Nonnull type;
    [Export("type")]
    string Type { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull localizedTitle;
    [Export("localizedTitle")]
    string LocalizedTitle { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable localizedSubtitle;
    [NullAllowed, Export("localizedSubtitle")]
    string LocalizedSubtitle { get; set; }

    // @property (copy, nonatomic) UIApplicationShortcutIcon * _Nullable icon;
    [NullAllowed, Export("icon", ArgumentSemantic.Copy)]
    UIApplicationShortcutIcon Icon { get; set; }

    // @property (copy, nonatomic) NSDictionary<NSString *,id<NSSecureCoding>> * _Nullable userInfo;
    [NullAllowed, Export("userInfo", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSSecureCoding> UserInfo { get; set; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const _Nonnull UIUserNotificationTextInputActionButtonTitleKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 9, 0, message: "Use UserNotifications Framework's -[UNTextInputNotificationAction textInputButtonTitle]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNTextInputNotificationAction textInputButtonTitle]")]
    [NoTV]
    [Field("UIUserNotificationTextInputActionButtonTitleKey", "__Internal")]
    NSString UIUserNotificationTextInputActionButtonTitleKey { get; }

    // extern NSString *const _Nonnull UIUserNotificationActionResponseTypedTextKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 9, 0, message: "Use UserNotifications Framework's -[UNTextInputNotificationResponse userText]")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNTextInputNotificationResponse userText]")]
    [NoTV]
    [Field("UIUserNotificationActionResponseTypedTextKey", "__Internal")]
    NSString UIUserNotificationActionResponseTypedTextKey { get; }
}

// @interface UIUserNotificationSettings : NSObject
[Introduced(PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's UNNotificationSettings")]
[Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationSettings")]
[NoTV]
[BaseType(typeof(NSObject))]
interface UIUserNotificationSettings
{
    // +(instancetype _Nonnull)settingsForTypes:(UIUserNotificationType)types categories:(NSSet<UIUserNotificationCategory *> * _Nullable)categories;
    [Static]
    [Export("settingsForTypes:categories:")]
    UIUserNotificationSettings SettingsForTypes(UIUserNotificationType types, [NullAllowed] NSSet<UIUserNotificationCategory> categories);

    // @property (readonly, nonatomic) UIUserNotificationType types;
    [Export("types")]
    UIUserNotificationType Types { get; }

    // @property (readonly, copy, nonatomic) NSSet<UIUserNotificationCategory *> * _Nullable categories;
    [NullAllowed, Export("categories", ArgumentSemantic.Copy)]
    NSSet<UIUserNotificationCategory> Categories { get; }
}

// @interface UIUserNotificationCategory : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
[Introduced(PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's UNNotificationCategory")]
[Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationCategory")]
[NoTV]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIUserNotificationCategory : INSCopying, INSMutableCopying, INSSecureCoding
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(tvos, unavailable))) __attribute__((objc_designated_initializer));
    [NoTV]
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (readonly, copy, nonatomic) NSString * _Nullable identifier __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [NullAllowed, Export("identifier")]
    string Identifier { get; }

    // -(NSArray<UIUserNotificationAction *> * _Nullable)actionsForContext:(UIUserNotificationActionContext)context __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("actionsForContext:")]
    [return: NullAllowed]
    UIUserNotificationAction[] ActionsForContext(UIUserNotificationActionContext context);
}

// @interface UIMutableUserNotificationCategory : UIUserNotificationCategory
[Introduced(PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's UNNotificationCategory")]
[Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationCategory")]
[NoTV]
[BaseType(typeof(UIUserNotificationCategory))]
interface UIMutableUserNotificationCategory
{
    // @property (copy, nonatomic) NSString * _Nullable identifier;
    [NullAllowed, Export("identifier")]
    string Identifier { get; set; }

    // -(void)setActions:(NSArray<UIUserNotificationAction *> * _Nullable)actions forContext:(UIUserNotificationActionContext)context;
    [Export("setActions:forContext:")]
    void SetActions([NullAllowed] UIUserNotificationAction[] actions, UIUserNotificationActionContext context);
}

// @interface UIUserNotificationAction : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
[Introduced(PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's UNNotificationAction")]
[Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationAction")]
[NoTV]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIUserNotificationAction : INSCopying, INSMutableCopying, INSSecureCoding
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(tvos, unavailable))) __attribute__((objc_designated_initializer));
    [NoTV]
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (readonly, copy, nonatomic) NSString * _Nullable identifier __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [NullAllowed, Export("identifier")]
    string Identifier { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nullable title __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [NullAllowed, Export("title")]
    string Title { get; }

    // @property (readonly, assign, nonatomic) UIUserNotificationActionBehavior behavior __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0)));
    [NoTV, iOS(9, 0)]
    [Export("behavior", ArgumentSemantic.Assign)]
    UIUserNotificationActionBehavior Behavior { get; }

    // @property (readonly, copy, nonatomic) NSDictionary * _Nonnull parameters __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0)));
    [NoTV, iOS(9, 0)]
    [Export("parameters", ArgumentSemantic.Copy)]
    NSDictionary Parameters { get; }

    // @property (readonly, assign, nonatomic) UIUserNotificationActivationMode activationMode __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("activationMode", ArgumentSemantic.Assign)]
    UIUserNotificationActivationMode ActivationMode { get; }

    // @property (readonly, getter = isAuthenticationRequired, assign, nonatomic) BOOL authenticationRequired __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("authenticationRequired")]
    bool AuthenticationRequired { [Bind("isAuthenticationRequired")] get; }

    // @property (readonly, getter = isDestructive, assign, nonatomic) BOOL destructive __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("destructive")]
    bool Destructive { [Bind("isDestructive")] get; }
}

// @interface UIMutableUserNotificationAction : UIUserNotificationAction
[Introduced(PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's UNNotificationAction")]
[Deprecated(PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationAction")]
[NoTV]
[BaseType(typeof(UIUserNotificationAction))]
interface UIMutableUserNotificationAction
{
    // @property (copy, nonatomic) NSString * _Nullable identifier;
    [NullAllowed, Export("identifier")]
    string Identifier { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable title;
    [NullAllowed, Export("title")]
    string Title { get; set; }

    // @property (assign, nonatomic) UIUserNotificationActionBehavior behavior __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("behavior", ArgumentSemantic.Assign)]
    UIUserNotificationActionBehavior Behavior { get; set; }

    // @property (copy, nonatomic) NSDictionary * _Nonnull parameters __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("parameters", ArgumentSemantic.Copy)]
    NSDictionary Parameters { get; set; }

    // @property (assign, nonatomic) UIUserNotificationActivationMode activationMode;
    [Export("activationMode", ArgumentSemantic.Assign)]
    UIUserNotificationActivationMode ActivationMode { get; set; }

    // @property (getter = isAuthenticationRequired, assign, nonatomic) BOOL authenticationRequired;
    [Export("authenticationRequired")]
    bool AuthenticationRequired { [Bind("isAuthenticationRequired")] get; set; }

    // @property (getter = isDestructive, assign, nonatomic) BOOL destructive;
    [Export("destructive")]
    bool Destructive { [Bind("isDestructive")] get; set; }
}

// @interface UIFocusSystem : NSObject
[iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIFocusSystem
{
    // @property (readonly, nonatomic, weak) id<UIFocusItem> _Nullable focusedItem __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
    [TV(12, 0), iOS(12, 0)]
    [NullAllowed, Export("focusedItem", ArgumentSemantic.Weak)]
    UIFocusItem FocusedItem { get; }

    // +(UIFocusSystem * _Nullable)focusSystemForEnvironment:(id<UIFocusEnvironment> _Nonnull)environment __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
    [TV(12, 0), iOS(12, 0)]
    [Static]
    [Export("focusSystemForEnvironment:")]
    [return: NullAllowed]
    UIFocusSystem FocusSystemForEnvironment(UIFocusEnvironment environment);

    // -(void)requestFocusUpdateToEnvironment:(id<UIFocusEnvironment> _Nonnull)environment __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
    [TV(12, 0), iOS(12, 0)]
    [Export("requestFocusUpdateToEnvironment:")]
    void RequestFocusUpdateToEnvironment(UIFocusEnvironment environment);

    // -(void)updateFocusIfNeeded __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0)));
    [TV(12, 0), iOS(12, 0)]
    [Export("updateFocusIfNeeded")]
    void UpdateFocusIfNeeded();

    // +(BOOL)environment:(id<UIFocusEnvironment> _Nonnull)environment containsEnvironment:(id<UIFocusEnvironment> _Nonnull)otherEnvironment;
    [Static]
    [Export("environment:containsEnvironment:")]
    bool Environment(UIFocusEnvironment environment, UIFocusEnvironment otherEnvironment);

    // +(void)registerURL:(NSURL * _Nonnull)soundFileURL forSoundIdentifier:(UIFocusSoundIdentifier _Nonnull)identifier __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, introduced=11.0)));
    [TV(11, 0), NoWatch, NoiOS]
    [Static]
    [Export("registerURL:forSoundIdentifier:")]
    void RegisterURL(NSUrl soundFileURL, string identifier);
}

// @interface UIFocusDebugger : NSObject
[iOS(11, 0)]
[BaseType(typeof(NSObject))]
interface UIFocusDebugger
{
    // +(id<UIFocusDebuggerOutput> _Nonnull)help;
    [Static]
    [Export("help")]
    [Verify(MethodToProperty)]
    UIFocusDebuggerOutput Help { get; }

    // +(id<UIFocusDebuggerOutput> _Nonnull)status;
    [Static]
    [Export("status")]
    [Verify(MethodToProperty)]
    UIFocusDebuggerOutput Status { get; }

    // +(id<UIFocusDebuggerOutput> _Nonnull)checkFocusabilityForItem:(id<UIFocusItem> _Nonnull)item;
    [Static]
    [Export("checkFocusabilityForItem:")]
    UIFocusDebuggerOutput CheckFocusabilityForItem(UIFocusItem item);

    // +(id<UIFocusDebuggerOutput> _Nonnull)simulateFocusUpdateRequestFromEnvironment:(id<UIFocusEnvironment> _Nonnull)environment;
    [Static]
    [Export("simulateFocusUpdateRequestFromEnvironment:")]
    UIFocusDebuggerOutput SimulateFocusUpdateRequestFromEnvironment(UIFocusEnvironment environment);
}

// @protocol UIFocusDebuggerOutput <NSObject>
[iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIFocusDebuggerOutput
{
}

// @interface UIFocusMovementHint : NSObject <NSCopying>
[iOS(12, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIFocusMovementHint : INSCopying
{
    // @property (readonly, nonatomic) CGVector movementDirection;
    [Export("movementDirection")]
    CGVector MovementDirection { get; }

    // @property (readonly, nonatomic) CATransform3D perspectiveTransform;
    [Export("perspectiveTransform")]
    CATransform3D PerspectiveTransform { get; }

    // @property (readonly, nonatomic) CGVector rotation;
    [Export("rotation")]
    CGVector Rotation { get; }

    // @property (readonly, nonatomic) CGVector translation;
    [Export("translation")]
    CGVector Translation { get; }

    // @property (readonly, nonatomic) CATransform3D interactionTransform;
    [Export("interactionTransform")]
    CATransform3D InteractionTransform { get; }
}

// @interface UILocalizedIndexedCollation : NSObject
[iOS(3, 0)]
[BaseType(typeof(NSObject))]
interface UILocalizedIndexedCollation
{
    // +(instancetype _Nonnull)currentCollation;
    [Static]
    [Export("currentCollation")]
    UILocalizedIndexedCollation CurrentCollation();

    // @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull sectionTitles;
    [Export("sectionTitles")]
    string[] SectionTitles { get; }

    // @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull sectionIndexTitles;
    [Export("sectionIndexTitles")]
    string[] SectionIndexTitles { get; }

    // -(NSInteger)sectionForSectionIndexTitleAtIndex:(NSInteger)indexTitleIndex;
    [Export("sectionForSectionIndexTitleAtIndex:")]
    nint SectionForSectionIndexTitleAtIndex(nint indexTitleIndex);

    // -(NSInteger)sectionForObject:(id _Nonnull)object collationStringSelector:(SEL _Nonnull)selector;
    [Export("sectionForObject:collationStringSelector:")]
    nint SectionForObject(NSObject @object, Selector selector);

    // -(NSArray * _Nonnull)sortedArrayFromArray:(NSArray * _Nonnull)array collationStringSelector:(SEL _Nonnull)selector;
    [Export("sortedArrayFromArray:collationStringSelector:")]
    [Verify(StronglyTypedNSArray), Verify(StronglyTypedNSArray)]
    NSObject[] SortedArrayFromArray(NSObject[] array, Selector selector);
}

// @interface UILongPressGestureRecognizer : UIGestureRecognizer
[iOS(3, 2)]
[BaseType(typeof(UIGestureRecognizer))]
interface UILongPressGestureRecognizer
{
    // @property (nonatomic) NSUInteger numberOfTapsRequired;
    [Export("numberOfTapsRequired")]
    nuint NumberOfTapsRequired { get; set; }

    // @property (nonatomic) NSUInteger numberOfTouchesRequired __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("numberOfTouchesRequired")]
    nuint NumberOfTouchesRequired { get; set; }

    // @property (nonatomic) NSTimeInterval minimumPressDuration;
    [Export("minimumPressDuration")]
    double MinimumPressDuration { get; set; }

    // @property (nonatomic) CGFloat allowableMovement;
    [Export("allowableMovement")]
    nfloat AllowableMovement { get; set; }
}

// @interface UIManagedDocument : UIDocument
[NoTV, iOS(5, 0)]
[BaseType(typeof(UIDocument))]
interface UIManagedDocument
{
    // @property (readonly, nonatomic, class) NSString * _Nonnull persistentStoreName;
    [Static]
    [Export("persistentStoreName")]
    string PersistentStoreName { get; }

    // @property (readonly, nonatomic, strong) NSManagedObjectContext * _Nonnull managedObjectContext;
    [Export("managedObjectContext", ArgumentSemantic.Strong)]
    NSManagedObjectContext ManagedObjectContext { get; }

    // @property (readonly, nonatomic, strong) NSManagedObjectModel * _Nonnull managedObjectModel;
    [Export("managedObjectModel", ArgumentSemantic.Strong)]
    NSManagedObjectModel ManagedObjectModel { get; }

    // @property (copy, nonatomic) NSDictionary * _Nullable persistentStoreOptions;
    [NullAllowed, Export("persistentStoreOptions", ArgumentSemantic.Copy)]
    NSDictionary PersistentStoreOptions { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable modelConfiguration;
    [NullAllowed, Export("modelConfiguration")]
    string ModelConfiguration { get; set; }

    // -(BOOL)configurePersistentStoreCoordinatorForURL:(NSURL * _Nonnull)storeURL ofType:(NSString * _Nonnull)fileType modelConfiguration:(NSString * _Nullable)configuration storeOptions:(NSDictionary * _Nullable)storeOptions error:(NSError * _Nullable * _Nullable)error;
    [Export("configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:")]
    bool ConfigurePersistentStoreCoordinatorForURL(NSUrl storeURL, string fileType, [NullAllowed] string configuration, [NullAllowed] NSDictionary storeOptions, [NullAllowed] out NSError error);

    // -(NSString * _Nonnull)persistentStoreTypeForFileType:(NSString * _Nonnull)fileType;
    [Export("persistentStoreTypeForFileType:")]
    string PersistentStoreTypeForFileType(string fileType);

    // -(BOOL)readAdditionalContentFromURL:(NSURL * _Nonnull)absoluteURL error:(NSError * _Nullable * _Nullable)error;
    [Export("readAdditionalContentFromURL:error:")]
    bool ReadAdditionalContentFromURL(NSUrl absoluteURL, [NullAllowed] out NSError error);

    // -(id _Nullable)additionalContentForURL:(NSURL * _Nonnull)absoluteURL error:(NSError * _Nullable * _Nullable)error;
    [Export("additionalContentForURL:error:")]
    [return: NullAllowed]
    NSObject AdditionalContentForURL(NSUrl absoluteURL, [NullAllowed] out NSError error);

    // -(BOOL)writeAdditionalContent:(id _Nonnull)content toURL:(NSURL * _Nonnull)absoluteURL originalContentsURL:(NSURL * _Nullable)absoluteOriginalContentsURL error:(NSError * _Nullable * _Nullable)error;
    [Export("writeAdditionalContent:toURL:originalContentsURL:error:")]
    bool WriteAdditionalContent(NSObject content, NSUrl absoluteURL, [NullAllowed] NSUrl absoluteOriginalContentsURL, [NullAllowed] out NSError error);
}

// @interface UIMenuController : NSObject
[NoTV, iOS(3, 0)]
[BaseType(typeof(NSObject))]
interface UIMenuController
{
    // @property (readonly, nonatomic, class) UIMenuController * _Nonnull sharedMenuController;
    [Static]
    [Export("sharedMenuController")]
    UIMenuController SharedMenuController { get; }

    // @property (getter = isMenuVisible, nonatomic) BOOL menuVisible;
    [Export("menuVisible")]
    bool MenuVisible { [Bind("isMenuVisible")] get; set; }

    // -(void)setMenuVisible:(BOOL)menuVisible animated:(BOOL)animated;
    [Export("setMenuVisible:animated:")]
    void SetMenuVisible(bool menuVisible, bool animated);

    // -(void)setTargetRect:(CGRect)targetRect inView:(UIView * _Nonnull)targetView;
    [Export("setTargetRect:inView:")]
    void SetTargetRect(CGRect targetRect, UIView targetView);

    // @property (nonatomic) UIMenuControllerArrowDirection arrowDirection __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Export("arrowDirection", ArgumentSemantic.Assign)]
    UIMenuControllerArrowDirection ArrowDirection { get; set; }

    // @property (copy, nonatomic) NSArray<UIMenuItem *> * _Nullable menuItems __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [NullAllowed, Export("menuItems", ArgumentSemantic.Copy)]
    UIMenuItem[] MenuItems { get; set; }

    // -(void)update;
    [Export("update")]
    void Update();

    // @property (readonly, nonatomic) CGRect menuFrame;
    [Export("menuFrame")]
    CGRect MenuFrame { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSNotificationName _Nonnull UIMenuControllerWillShowMenuNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIMenuControllerWillShowMenuNotification", "__Internal")]
    NSString UIMenuControllerWillShowMenuNotification { get; }

    // extern const NSNotificationName _Nonnull UIMenuControllerDidShowMenuNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIMenuControllerDidShowMenuNotification", "__Internal")]
    NSString UIMenuControllerDidShowMenuNotification { get; }

    // extern const NSNotificationName _Nonnull UIMenuControllerWillHideMenuNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIMenuControllerWillHideMenuNotification", "__Internal")]
    NSString UIMenuControllerWillHideMenuNotification { get; }

    // extern const NSNotificationName _Nonnull UIMenuControllerDidHideMenuNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIMenuControllerDidHideMenuNotification", "__Internal")]
    NSString UIMenuControllerDidHideMenuNotification { get; }

    // extern const NSNotificationName _Nonnull UIMenuControllerMenuFrameDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIMenuControllerMenuFrameDidChangeNotification", "__Internal")]
    NSString UIMenuControllerMenuFrameDidChangeNotification { get; }
}

// @interface UIMenuItem : NSObject
[NoTV, iOS(3, 2)]
[BaseType(typeof(NSObject))]
interface UIMenuItem
{
    // -(instancetype _Nonnull)initWithTitle:(NSString * _Nonnull)title action:(SEL _Nonnull)action __attribute__((objc_designated_initializer));
    [Export("initWithTitle:action:")]
    [DesignatedInitializer]
    IntPtr Constructor(string title, Selector action);

    // @property (copy, nonatomic) NSString * _Nonnull title;
    [Export("title")]
    string Title { get; set; }

    // @property (nonatomic) SEL _Nonnull action;
    [Export("action", ArgumentSemantic.Assign)]
    Selector Action { get; set; }
}

// @interface UIMotionEffect : NSObject <NSCopying, NSCoding>
[iOS(7, 0)]
[BaseType(typeof(NSObject))]
interface UIMotionEffect : INSCopying, INSCoding
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // -(NSDictionary<NSString *,id> * _Nullable)keyPathsAndRelativeValuesForViewerOffset:(UIOffset)viewerOffset;
    [Export("keyPathsAndRelativeValuesForViewerOffset:")]
    [return: NullAllowed]
    NSDictionary<NSString, NSObject> KeyPathsAndRelativeValuesForViewerOffset(UIOffset viewerOffset);
}

// @interface UIInterpolatingMotionEffect : UIMotionEffect
[iOS(7, 0)]
[BaseType(typeof(UIMotionEffect))]
interface UIInterpolatingMotionEffect
{
    // -(instancetype _Nonnull)initWithKeyPath:(NSString * _Nonnull)keyPath type:(UIInterpolatingMotionEffectType)type __attribute__((objc_designated_initializer));
    [Export("initWithKeyPath:type:")]
    [DesignatedInitializer]
    IntPtr Constructor(string keyPath, UIInterpolatingMotionEffectType type);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (readonly, nonatomic) NSString * _Nonnull keyPath;
    [Export("keyPath")]
    string KeyPath { get; }

    // @property (readonly, nonatomic) UIInterpolatingMotionEffectType type;
    [Export("type")]
    UIInterpolatingMotionEffectType Type { get; }

    // @property (nonatomic, strong) id _Nullable minimumRelativeValue;
    [NullAllowed, Export("minimumRelativeValue", ArgumentSemantic.Strong)]
    NSObject MinimumRelativeValue { get; set; }

    // @property (nonatomic, strong) id _Nullable maximumRelativeValue;
    [NullAllowed, Export("maximumRelativeValue", ArgumentSemantic.Strong)]
    NSObject MaximumRelativeValue { get; set; }
}

// @interface UIMotionEffectGroup : UIMotionEffect
[iOS(7, 0)]
[BaseType(typeof(UIMotionEffect))]
interface UIMotionEffectGroup
{
    // @property (copy, nonatomic) NSArray<__kindof UIMotionEffect *> * _Nullable motionEffects;
    [NullAllowed, Export("motionEffects", ArgumentSemantic.Copy)]
    UIMotionEffect[] MotionEffects { get; set; }
}

// @interface UINavigationItem : NSObject <NSCoding>
[iOS(2, 0)]
[BaseType(typeof(NSObject))]
interface UINavigationItem : INSCoding
{
    // -(instancetype _Nonnull)initWithTitle:(NSString * _Nonnull)title __attribute__((objc_designated_initializer));
    [Export("initWithTitle:")]
    [DesignatedInitializer]
    IntPtr Constructor(string title);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder coder);

    // @property (copy, nonatomic) NSString * _Nullable title;
    [NullAllowed, Export("title")]
    string Title { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable titleView;
    [NullAllowed, Export("titleView", ArgumentSemantic.Strong)]
    UIView TitleView { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable prompt __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [NullAllowed, Export("prompt")]
    string Prompt { get; set; }

    // @property (nonatomic, strong) UIBarButtonItem * _Nullable backBarButtonItem __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [NullAllowed, Export("backBarButtonItem", ArgumentSemantic.Strong)]
    UIBarButtonItem BackBarButtonItem { get; set; }

    // @property (assign, nonatomic) BOOL hidesBackButton __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("hidesBackButton")]
    bool HidesBackButton { get; set; }

    // -(void)setHidesBackButton:(BOOL)hidesBackButton animated:(BOOL)animated __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("setHidesBackButton:animated:")]
    void SetHidesBackButton(bool hidesBackButton, bool animated);

    // @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable leftBarButtonItems __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("leftBarButtonItems", ArgumentSemantic.Copy)]
    UIBarButtonItem[] LeftBarButtonItems { get; set; }

    // @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable rightBarButtonItems __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("rightBarButtonItems", ArgumentSemantic.Copy)]
    UIBarButtonItem[] RightBarButtonItems { get; set; }

    // -(void)setLeftBarButtonItems:(NSArray<UIBarButtonItem *> * _Nullable)items animated:(BOOL)animated __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setLeftBarButtonItems:animated:")]
    void SetLeftBarButtonItems([NullAllowed] UIBarButtonItem[] items, bool animated);

    // -(void)setRightBarButtonItems:(NSArray<UIBarButtonItem *> * _Nullable)items animated:(BOOL)animated __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setRightBarButtonItems:animated:")]
    void SetRightBarButtonItems([NullAllowed] UIBarButtonItem[] items, bool animated);

    // @property (nonatomic) BOOL leftItemsSupplementBackButton __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Export("leftItemsSupplementBackButton")]
    bool LeftItemsSupplementBackButton { get; set; }

    // @property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButtonItem;
    [NullAllowed, Export("leftBarButtonItem", ArgumentSemantic.Strong)]
    UIBarButtonItem LeftBarButtonItem { get; set; }

    // @property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButtonItem;
    [NullAllowed, Export("rightBarButtonItem", ArgumentSemantic.Strong)]
    UIBarButtonItem RightBarButtonItem { get; set; }

    // -(void)setLeftBarButtonItem:(UIBarButtonItem * _Nullable)item animated:(BOOL)animated;
    [Export("setLeftBarButtonItem:animated:")]
    void SetLeftBarButtonItem([NullAllowed] UIBarButtonItem item, bool animated);

    // -(void)setRightBarButtonItem:(UIBarButtonItem * _Nullable)item animated:(BOOL)animated;
    [Export("setRightBarButtonItem:animated:")]
    void SetRightBarButtonItem([NullAllowed] UIBarButtonItem item, bool animated);

    // @property (assign, readwrite, nonatomic) UINavigationItemLargeTitleDisplayMode largeTitleDisplayMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoTV, iOS(11, 0)]
    [Export("largeTitleDisplayMode", ArgumentSemantic.Assign)]
    UINavigationItemLargeTitleDisplayMode LargeTitleDisplayMode { get; set; }

    // @property (retain, nonatomic) UISearchController * _Nullable searchController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoTV, iOS(11, 0)]
    [NullAllowed, Export("searchController", ArgumentSemantic.Retain)]
    UISearchController SearchController { get; set; }

    // @property (nonatomic) BOOL hidesSearchBarWhenScrolling __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoTV, iOS(11, 0)]
    [Export("hidesSearchBarWhenScrolling")]
    bool HidesSearchBarWhenScrolling { get; set; }
}

// @interface UINavigationBar : UIView <NSCoding, UIBarPositioning>
[iOS(2, 0)]
[BaseType(typeof(UIView))]
interface UINavigationBar : INSCoding, IUIBarPositioning
{
    // @property (assign, nonatomic) UIBarStyle barStyle __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector")));
    [NoTV]
    [Export("barStyle", ArgumentSemantic.Assign)]
    UIBarStyle BarStyle { get; set; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UINavigationBarDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UINavigationBarDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (getter = isTranslucent, assign, nonatomic) BOOL translucent __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("translucent")]
    bool Translucent { [Bind("isTranslucent")] get; set; }

    // -(void)pushNavigationItem:(UINavigationItem * _Nonnull)item animated:(BOOL)animated;
    [Export("pushNavigationItem:animated:")]
    void PushNavigationItem(UINavigationItem item, bool animated);

    // -(UINavigationItem * _Nullable)popNavigationItemAnimated:(BOOL)animated;
    [Export("popNavigationItemAnimated:")]
    [return: NullAllowed]
    UINavigationItem PopNavigationItemAnimated(bool animated);

    // @property (readonly, nonatomic, strong) UINavigationItem * _Nullable topItem;
    [NullAllowed, Export("topItem", ArgumentSemantic.Strong)]
    UINavigationItem TopItem { get; }

    // @property (readonly, nonatomic, strong) UINavigationItem * _Nullable backItem;
    [NullAllowed, Export("backItem", ArgumentSemantic.Strong)]
    UINavigationItem BackItem { get; }

    // @property (copy, nonatomic) NSArray<UINavigationItem *> * _Nullable items;
    [NullAllowed, Export("items", ArgumentSemantic.Copy)]
    UINavigationItem[] Items { get; set; }

    // -(void)setItems:(NSArray<UINavigationItem *> * _Nullable)items animated:(BOOL)animated;
    [Export("setItems:animated:")]
    void SetItems([NullAllowed] UINavigationItem[] items, bool animated);

    // @property (assign, readwrite, nonatomic) BOOL prefersLargeTitles __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((annotate("ui_appearance_selector")));
    [NoTV, iOS(11, 0)]
    [Export("prefersLargeTitles")]
    bool PrefersLargeTitles { get; set; }

    // @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
    [Export("tintColor", ArgumentSemantic.Strong)]
    UIColor TintColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable barTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("barTintColor", ArgumentSemantic.Strong)]
    UIColor BarTintColor { get; set; }

    // -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("setBackgroundImage:forBarPosition:barMetrics:")]
    void SetBackgroundImage([NullAllowed] UIImage backgroundImage, UIBarPosition barPosition, UIBarMetrics barMetrics);

    // -(UIImage * _Nullable)backgroundImageForBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("backgroundImageForBarPosition:barMetrics:")]
    [return: NullAllowed]
    UIImage BackgroundImageForBarPosition(UIBarPosition barPosition, UIBarMetrics barMetrics);

    // -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setBackgroundImage:forBarMetrics:")]
    void SetBackgroundImage([NullAllowed] UIImage backgroundImage, UIBarMetrics barMetrics);

    // -(UIImage * _Nullable)backgroundImageForBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("backgroundImageForBarMetrics:")]
    [return: NullAllowed]
    UIImage BackgroundImageForBarMetrics(UIBarMetrics barMetrics);

    // @property (nonatomic, strong) UIImage * _Nullable shadowImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("shadowImage", ArgumentSemantic.Strong)]
    UIImage ShadowImage { get; set; }

    // @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nullable titleTextAttributes __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("titleTextAttributes", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> TitleTextAttributes { get; set; }

    // @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nullable largeTitleTextAttributes __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0))) __attribute__((annotate("ui_appearance_selector")));
    [NoTV, iOS(11, 0)]
    [NullAllowed, Export("largeTitleTextAttributes", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> LargeTitleTextAttributes { get; set; }

    // -(void)setTitleVerticalPositionAdjustment:(CGFloat)adjustment forBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setTitleVerticalPositionAdjustment:forBarMetrics:")]
    void SetTitleVerticalPositionAdjustment(nfloat adjustment, UIBarMetrics barMetrics);

    // -(CGFloat)titleVerticalPositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("titleVerticalPositionAdjustmentForBarMetrics:")]
    nfloat TitleVerticalPositionAdjustmentForBarMetrics(UIBarMetrics barMetrics);

    // @property (nonatomic, strong) UIImage * _Nullable backIndicatorImage __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [NullAllowed, Export("backIndicatorImage", ArgumentSemantic.Strong)]
    UIImage BackIndicatorImage { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable backIndicatorTransitionMaskImage __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [NullAllowed, Export("backIndicatorTransitionMaskImage", ArgumentSemantic.Strong)]
    UIImage BackIndicatorTransitionMaskImage { get; set; }
}

// @protocol UINavigationBarDelegate <UIBarPositioningDelegate>
[Protocol, Model]
interface UINavigationBarDelegate : IUIBarPositioningDelegate
{
    // @optional -(BOOL)navigationBar:(UINavigationBar * _Nonnull)navigationBar shouldPushItem:(UINavigationItem * _Nonnull)item;
    [Export("navigationBar:shouldPushItem:")]
    bool NavigationBar(UINavigationBar navigationBar, UINavigationItem item);

    // @optional -(void)navigationBar:(UINavigationBar * _Nonnull)navigationBar didPushItem:(UINavigationItem * _Nonnull)item;
    [Export("navigationBar:didPushItem:")]
    void NavigationBar(UINavigationBar navigationBar, UINavigationItem item);

    // @optional -(BOOL)navigationBar:(UINavigationBar * _Nonnull)navigationBar shouldPopItem:(UINavigationItem * _Nonnull)item;
    [Export("navigationBar:shouldPopItem:")]
    bool NavigationBar(UINavigationBar navigationBar, UINavigationItem item);

    // @optional -(void)navigationBar:(UINavigationBar * _Nonnull)navigationBar didPopItem:(UINavigationItem * _Nonnull)item;
    [Export("navigationBar:didPopItem:")]
    void NavigationBar(UINavigationBar navigationBar, UINavigationItem item);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UINibOptionsKey _Nonnull UINibExternalObjects __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Field("UINibExternalObjects", "__Internal")]
    NSString UINibExternalObjects { get; }
}

// @interface UINibLoadingAdditions (NSBundle)
[Category]
[BaseType(typeof(NSBundle))]
interface NSBundle_UINibLoadingAdditions
{
    // -(NSArray * _Nullable)loadNibNamed:(NSString * _Nonnull)name owner:(id _Nullable)owner options:(NSDictionary<UINibOptionsKey,id> * _Nullable)options;
    [Export("loadNibNamed:owner:options:")]
    [Verify(StronglyTypedNSArray)]
    [return: NullAllowed]
    NSObject[] LoadNibNamed(string name, [NullAllowed] NSObject owner, [NullAllowed] NSDictionary<NSString, NSObject> options);
}

// @interface UINibLoadingAdditions (NSObject)
[Category]
[BaseType(typeof(NSObject))]
interface NSObject_UINibLoadingAdditions
{
    // -(void)awakeFromNib __attribute__((objc_requires_super));
    [Export("awakeFromNib")]
    [RequiresSuper]
    void AwakeFromNib();

    // -(void)prepareForInterfaceBuilder __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("prepareForInterfaceBuilder")]
    void PrepareForInterfaceBuilder();
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const _Nonnull UINibProxiedObjectsKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [Field("UINibProxiedObjectsKey", "__Internal")]
    NSString UINibProxiedObjectsKey { get; }
}

// @interface UINib : NSObject
[iOS(4, 0)]
[BaseType(typeof(NSObject))]
interface UINib
{
    // +(UINib * _Nonnull)nibWithNibName:(NSString * _Nonnull)name bundle:(NSBundle * _Nullable)bundleOrNil;
    [Static]
    [Export("nibWithNibName:bundle:")]
    UINib NibWithNibName(string name, [NullAllowed] NSBundle bundleOrNil);

    // +(UINib * _Nonnull)nibWithData:(NSData * _Nonnull)data bundle:(NSBundle * _Nullable)bundleOrNil;
    [Static]
    [Export("nibWithData:bundle:")]
    UINib NibWithData(NSData data, [NullAllowed] NSBundle bundleOrNil);

    // -(NSArray * _Nonnull)instantiateWithOwner:(id _Nullable)ownerOrNil options:(NSDictionary<UINibOptionsKey,id> * _Nullable)optionsOrNil;
    [Export("instantiateWithOwner:options:")]
    [Verify(StronglyTypedNSArray)]
    NSObject[] InstantiateWithOwner([NullAllowed] NSObject ownerOrNil, [NullAllowed] NSDictionary<NSString, NSObject> optionsOrNil);
}

// @interface UIPageControl : UIControl
[iOS(2, 0)]
[BaseType(typeof(UIControl))]
interface UIPageControl
{
    // @property (nonatomic) NSInteger numberOfPages;
    [Export("numberOfPages")]
    nint NumberOfPages { get; set; }

    // @property (nonatomic) NSInteger currentPage;
    [Export("currentPage")]
    nint CurrentPage { get; set; }

    // @property (nonatomic) BOOL hidesForSinglePage;
    [Export("hidesForSinglePage")]
    bool HidesForSinglePage { get; set; }

    // @property (nonatomic) BOOL defersCurrentPageDisplay;
    [Export("defersCurrentPageDisplay")]
    bool DefersCurrentPageDisplay { get; set; }

    // -(void)updateCurrentPageDisplay;
    [Export("updateCurrentPageDisplay")]
    void UpdateCurrentPageDisplay();

    // -(CGSize)sizeForNumberOfPages:(NSInteger)pageCount;
    [Export("sizeForNumberOfPages:")]
    CGSize SizeForNumberOfPages(nint pageCount);

    // @property (nonatomic, strong) UIColor * _Nullable pageIndicatorTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("pageIndicatorTintColor", ArgumentSemantic.Strong)]
    UIColor PageIndicatorTintColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable currentPageIndicatorTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("currentPageIndicatorTintColor", ArgumentSemantic.Strong)]
    UIColor CurrentPageIndicatorTintColor { get; set; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UIPageViewControllerOptionsKey _Nonnull UIPageViewControllerOptionSpineLocationKey __attribute__((visibility("default")));
    [Field("UIPageViewControllerOptionSpineLocationKey", "__Internal")]
    NSString UIPageViewControllerOptionSpineLocationKey { get; }

    // extern const UIPageViewControllerOptionsKey _Nonnull UIPageViewControllerOptionInterPageSpacingKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("UIPageViewControllerOptionInterPageSpacingKey", "__Internal")]
    NSString UIPageViewControllerOptionInterPageSpacingKey { get; }
}

// @interface UIPageViewController : UIViewController
[iOS(5, 0)]
[BaseType(typeof(UIViewController))]
interface UIPageViewController
{
    // -(instancetype _Nonnull)initWithTransitionStyle:(UIPageViewControllerTransitionStyle)style navigationOrientation:(UIPageViewControllerNavigationOrientation)navigationOrientation options:(NSDictionary<UIPageViewControllerOptionsKey,id> * _Nullable)options __attribute__((objc_designated_initializer));
    [Export("initWithTransitionStyle:navigationOrientation:options:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIPageViewControllerTransitionStyle style, UIPageViewControllerNavigationOrientation navigationOrientation, [NullAllowed] NSDictionary<NSString, NSObject> options);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder coder);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIPageViewControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIPageViewControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (nonatomic, weak) id<UIPageViewControllerDataSource> _Nullable dataSource;
    [NullAllowed, Export("dataSource", ArgumentSemantic.Weak)]
    UIPageViewControllerDataSource DataSource { get; set; }

    // @property (readonly, nonatomic) UIPageViewControllerTransitionStyle transitionStyle;
    [Export("transitionStyle")]
    UIPageViewControllerTransitionStyle TransitionStyle { get; }

    // @property (readonly, nonatomic) UIPageViewControllerNavigationOrientation navigationOrientation;
    [Export("navigationOrientation")]
    UIPageViewControllerNavigationOrientation NavigationOrientation { get; }

    // @property (readonly, nonatomic) UIPageViewControllerSpineLocation spineLocation;
    [Export("spineLocation")]
    UIPageViewControllerSpineLocation SpineLocation { get; }

    // @property (getter = isDoubleSided, nonatomic) BOOL doubleSided;
    [Export("doubleSided")]
    bool DoubleSided { [Bind("isDoubleSided")] get; set; }

    // @property (readonly, nonatomic) NSArray<__kindof UIGestureRecognizer *> * _Nonnull gestureRecognizers;
    [Export("gestureRecognizers")]
    UIGestureRecognizer[] GestureRecognizers { get; }

    // @property (readonly, nonatomic) NSArray<__kindof UIViewController *> * _Nullable viewControllers;
    [NullAllowed, Export("viewControllers")]
    UIViewController[] ViewControllers { get; }

    // -(void)setViewControllers:(NSArray<UIViewController *> * _Nullable)viewControllers direction:(UIPageViewControllerNavigationDirection)direction animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
    [Export("setViewControllers:direction:animated:completion:")]
    void SetViewControllers([NullAllowed] UIViewController[] viewControllers, UIPageViewControllerNavigationDirection direction, bool animated, [NullAllowed] Action<bool> completion);
}

// @protocol UIPageViewControllerDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIPageViewControllerDelegate
{
    // @optional -(void)pageViewController:(UIPageViewController * _Nonnull)pageViewController willTransitionToViewControllers:(NSArray<UIViewController *> * _Nonnull)pendingViewControllers __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("pageViewController:willTransitionToViewControllers:")]
    void PageViewController(UIPageViewController pageViewController, UIViewController[] pendingViewControllers);

    // @optional -(void)pageViewController:(UIPageViewController * _Nonnull)pageViewController didFinishAnimating:(BOOL)finished previousViewControllers:(NSArray<UIViewController *> * _Nonnull)previousViewControllers transitionCompleted:(BOOL)completed;
    [Export("pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:")]
    void PageViewController(UIPageViewController pageViewController, bool finished, UIViewController[] previousViewControllers, bool completed);

    // @optional -(UIPageViewControllerSpineLocation)pageViewController:(UIPageViewController * _Nonnull)pageViewController spineLocationForInterfaceOrientation:(UIInterfaceOrientation)orientation __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("pageViewController:spineLocationForInterfaceOrientation:")]
    UIPageViewControllerSpineLocation PageViewController(UIPageViewController pageViewController, UIInterfaceOrientation orientation);

    // @optional -(UIInterfaceOrientationMask)pageViewControllerSupportedInterfaceOrientations:(UIPageViewController * _Nonnull)pageViewController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("pageViewControllerSupportedInterfaceOrientations:")]
    UIInterfaceOrientationMask PageViewControllerSupportedInterfaceOrientations(UIPageViewController pageViewController);

    // @optional -(UIInterfaceOrientation)pageViewControllerPreferredInterfaceOrientationForPresentation:(UIPageViewController * _Nonnull)pageViewController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("pageViewControllerPreferredInterfaceOrientationForPresentation:")]
    UIInterfaceOrientation PageViewControllerPreferredInterfaceOrientationForPresentation(UIPageViewController pageViewController);
}

// @protocol UIPageViewControllerDataSource <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIPageViewControllerDataSource
{
    // @required -(UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController;
    [Abstract]
    [Export("pageViewController:viewControllerBeforeViewController:")]
    [return: NullAllowed]
    UIViewController PageViewController(UIPageViewController pageViewController, UIViewController viewController);

    // @required -(UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController;
    [Abstract]
    [Export("pageViewController:viewControllerAfterViewController:")]
    [return: NullAllowed]
    UIViewController PageViewController(UIPageViewController pageViewController, UIViewController viewController);

    // @optional -(NSInteger)presentationCountForPageViewController:(UIPageViewController * _Nonnull)pageViewController __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("presentationCountForPageViewController:")]
    nint PresentationCountForPageViewController(UIPageViewController pageViewController);

    // @optional -(NSInteger)presentationIndexForPageViewController:(UIPageViewController * _Nonnull)pageViewController __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("presentationIndexForPageViewController:")]
    nint PresentationIndexForPageViewController(UIPageViewController pageViewController);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UIPasteboardName _Nonnull UIPasteboardNameGeneral __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [Field("UIPasteboardNameGeneral", "__Internal")]
    NSString UIPasteboardNameGeneral { get; }

    // extern NSString *const _Nonnull UIPasteboardNameFind __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3_0, deprecated=10_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [Introduced(PlatformName.iOS, 3, 0, message: "The Find pasteboard is no longer available.")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "The Find pasteboard is no longer available.")]
    [NoWatch, NoTV]
    [Field("UIPasteboardNameFind", "__Internal")]
    NSString UIPasteboardNameFind { get; }
}

// @interface UIPasteboard : NSObject
[NoWatch, NoTV, iOS(3, 0)]
[BaseType(typeof(NSObject))]
interface UIPasteboard
{
    // @property (readonly, nonatomic, class) UIPasteboard * _Nonnull generalPasteboard;
    [Static]
    [Export("generalPasteboard")]
    UIPasteboard GeneralPasteboard { get; }

    // +(UIPasteboard * _Nullable)pasteboardWithName:(UIPasteboardName _Nonnull)pasteboardName create:(BOOL)create;
    [Static]
    [Export("pasteboardWithName:create:")]
    [return: NullAllowed]
    UIPasteboard PasteboardWithName(string pasteboardName, bool create);

    // +(UIPasteboard * _Nonnull)pasteboardWithUniqueName;
    [Static]
    [Export("pasteboardWithUniqueName")]
    [Verify(MethodToProperty)]
    UIPasteboard PasteboardWithUniqueName { get; }

    // @property (readonly, nonatomic) UIPasteboardName _Nonnull name;
    [Export("name")]
    string Name { get; }

    // +(void)removePasteboardWithName:(UIPasteboardName _Nonnull)pasteboardName;
    [Static]
    [Export("removePasteboardWithName:")]
    void RemovePasteboardWithName(string pasteboardName);

    // @property (readonly, getter = isPersistent, nonatomic) BOOL persistent;
    [Export("persistent")]
    bool Persistent { [Bind("isPersistent")] get; }

    // -(void)setPersistent:(BOOL)persistent __attribute__((availability(ios, introduced=3_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 3, 0, message: "Do not set persistence on pasteboards. This property is set automatically.")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Do not set persistence on pasteboards. This property is set automatically.")]
    [Export("setPersistent:")]
    void SetPersistent(bool persistent);

    // @property (readonly, nonatomic) NSInteger changeCount;
    [Export("changeCount")]
    nint ChangeCount { get; }

    // @property (copy, nonatomic) NSArray<__kindof NSItemProvider *> * _Nonnull itemProviders __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("itemProviders", ArgumentSemantic.Copy)]
    NSItemProvider[] ItemProviders { get; set; }

    // -(void)setItemProviders:(NSArray<NSItemProvider *> * _Nonnull)itemProviders localOnly:(BOOL)localOnly expirationDate:(NSDate * _Nullable)expirationDate __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("setItemProviders:localOnly:expirationDate:")]
    void SetItemProviders(NSItemProvider[] itemProviders, bool localOnly, [NullAllowed] NSDate expirationDate);

    // -(void)setObjects:(NSArray<id<NSItemProviderWriting>> * _Nonnull)objects __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("setObjects:")]
    void SetObjects(NSItemProviderWriting[] objects);

    // -(void)setObjects:(NSArray<id<NSItemProviderWriting>> * _Nonnull)objects localOnly:(BOOL)localOnly expirationDate:(NSDate * _Nullable)expirationDate __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("setObjects:localOnly:expirationDate:")]
    void SetObjects(NSItemProviderWriting[] objects, bool localOnly, [NullAllowed] NSDate expirationDate);

    // @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull pasteboardTypes;
    [Export("pasteboardTypes")]
    string[] PasteboardTypes { get; }

    // -(BOOL)containsPasteboardTypes:(NSArray<NSString *> * _Nonnull)pasteboardTypes;
    [Export("containsPasteboardTypes:")]
    bool ContainsPasteboardTypes(string[] pasteboardTypes);

    // -(NSData * _Nullable)dataForPasteboardType:(NSString * _Nonnull)pasteboardType;
    [Export("dataForPasteboardType:")]
    [return: NullAllowed]
    NSData DataForPasteboardType(string pasteboardType);

    // -(id _Nullable)valueForPasteboardType:(NSString * _Nonnull)pasteboardType;
    [Export("valueForPasteboardType:")]
    [return: NullAllowed]
    NSObject ValueForPasteboardType(string pasteboardType);

    // -(void)setValue:(id _Nonnull)value forPasteboardType:(NSString * _Nonnull)pasteboardType;
    [Export("setValue:forPasteboardType:")]
    void SetValue(NSObject value, string pasteboardType);

    // -(void)setData:(NSData * _Nonnull)data forPasteboardType:(NSString * _Nonnull)pasteboardType;
    [Export("setData:forPasteboardType:")]
    void SetData(NSData data, string pasteboardType);

    // @property (readonly, nonatomic) NSInteger numberOfItems;
    [Export("numberOfItems")]
    nint NumberOfItems { get; }

    // -(NSArray<NSArray<NSString *> *> * _Nullable)pasteboardTypesForItemSet:(NSIndexSet * _Nullable)itemSet;
    [Export("pasteboardTypesForItemSet:")]
    [return: NullAllowed]
    NSArray<NSString>[] PasteboardTypesForItemSet([NullAllowed] NSIndexSet itemSet);

    // -(BOOL)containsPasteboardTypes:(NSArray<NSString *> * _Nonnull)pasteboardTypes inItemSet:(NSIndexSet * _Nullable)itemSet;
    [Export("containsPasteboardTypes:inItemSet:")]
    bool ContainsPasteboardTypes(string[] pasteboardTypes, [NullAllowed] NSIndexSet itemSet);

    // -(NSIndexSet * _Nullable)itemSetWithPasteboardTypes:(NSArray<NSString *> * _Nonnull)pasteboardTypes;
    [Export("itemSetWithPasteboardTypes:")]
    [return: NullAllowed]
    NSIndexSet ItemSetWithPasteboardTypes(string[] pasteboardTypes);

    // -(NSArray * _Nullable)valuesForPasteboardType:(NSString * _Nonnull)pasteboardType inItemSet:(NSIndexSet * _Nullable)itemSet;
    [Export("valuesForPasteboardType:inItemSet:")]
    [Verify(StronglyTypedNSArray)]
    [return: NullAllowed]
    NSObject[] ValuesForPasteboardType(string pasteboardType, [NullAllowed] NSIndexSet itemSet);

    // -(NSArray<NSData *> * _Nullable)dataForPasteboardType:(NSString * _Nonnull)pasteboardType inItemSet:(NSIndexSet * _Nullable)itemSet;
    [Export("dataForPasteboardType:inItemSet:")]
    [return: NullAllowed]
    NSData[] DataForPasteboardType(string pasteboardType, [NullAllowed] NSIndexSet itemSet);

    // @property (copy, nonatomic) NSArray<NSDictionary<NSString *,id> *> * _Nonnull items;
    [Export("items", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject>[] Items { get; set; }

    // -(void)addItems:(NSArray<NSDictionary<NSString *,id> *> * _Nonnull)items;
    [Export("addItems:")]
    void AddItems(NSDictionary<NSString, NSObject>[] items);

    // -(void)setItems:(NSArray<NSDictionary<NSString *,id> *> * _Nonnull)items options:(NSDictionary<UIPasteboardOption,id> * _Nonnull)options __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("setItems:options:")]
    void SetItems(NSDictionary<NSString, NSObject>[] items, NSDictionary<NSString, NSObject> options);

    // @property (copy, nonatomic) NSString * _Nullable string __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [NullAllowed, Export("string")]
    string String { get; set; }

    // @property (copy, nonatomic) NSArray<NSString *> * _Nullable strings __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [NullAllowed, Export("strings", ArgumentSemantic.Copy)]
    string[] Strings { get; set; }

    // @property (copy, nonatomic) NSURL * _Nullable URL __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [NullAllowed, Export("URL", ArgumentSemantic.Copy)]
    NSUrl URL { get; set; }

    // @property (copy, nonatomic) NSArray<NSURL *> * _Nullable URLs __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [NullAllowed, Export("URLs", ArgumentSemantic.Copy)]
    NSUrl[] URLs { get; set; }

    // @property (copy, nonatomic) UIImage * _Nullable image __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [NullAllowed, Export("image", ArgumentSemantic.Copy)]
    UIImage Image { get; set; }

    // @property (copy, nonatomic) NSArray<UIImage *> * _Nullable images __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [NullAllowed, Export("images", ArgumentSemantic.Copy)]
    UIImage[] Images { get; set; }

    // @property (copy, nonatomic) UIColor * _Nullable color __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [NullAllowed, Export("color", ArgumentSemantic.Copy)]
    UIColor Color { get; set; }

    // @property (copy, nonatomic) NSArray<UIColor *> * _Nullable colors __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [NullAllowed, Export("colors", ArgumentSemantic.Copy)]
    UIColor[] Colors { get; set; }

    // @property (readonly, nonatomic) BOOL hasStrings __attribute__((availability(ios, introduced=10_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV, iOS(10, 0)]
    [Export("hasStrings")]
    bool HasStrings { get; }

    // @property (readonly, nonatomic) BOOL hasURLs __attribute__((availability(ios, introduced=10_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV, iOS(10, 0)]
    [Export("hasURLs")]
    bool HasURLs { get; }

    // @property (readonly, nonatomic) BOOL hasImages __attribute__((availability(ios, introduced=10_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV, iOS(10, 0)]
    [Export("hasImages")]
    bool HasImages { get; }

    // @property (readonly, nonatomic) BOOL hasColors __attribute__((availability(ios, introduced=10_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV, iOS(10, 0)]
    [Export("hasColors")]
    bool HasColors { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UIPasteboardOption _Nonnull UIPasteboardOptionExpirationDate __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV, iOS(10, 0)]
    [Field("UIPasteboardOptionExpirationDate", "__Internal")]
    NSString UIPasteboardOptionExpirationDate { get; }

    // extern const UIPasteboardOption _Nonnull UIPasteboardOptionLocalOnly __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV, iOS(10, 0)]
    [Field("UIPasteboardOptionLocalOnly", "__Internal")]
    NSString UIPasteboardOptionLocalOnly { get; }

    // extern const NSNotificationName _Nonnull UIPasteboardChangedNotification __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [Field("UIPasteboardChangedNotification", "__Internal")]
    NSString UIPasteboardChangedNotification { get; }

    // extern NSString *const _Nonnull UIPasteboardChangedTypesAddedKey __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [Field("UIPasteboardChangedTypesAddedKey", "__Internal")]
    NSString UIPasteboardChangedTypesAddedKey { get; }

    // extern NSString *const _Nonnull UIPasteboardChangedTypesRemovedKey __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [Field("UIPasteboardChangedTypesRemovedKey", "__Internal")]
    NSString UIPasteboardChangedTypesRemovedKey { get; }

    // extern const NSNotificationName _Nonnull UIPasteboardRemovedNotification __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [Field("UIPasteboardRemovedNotification", "__Internal")]
    NSString UIPasteboardRemovedNotification { get; }

    // extern NSArray<NSString *> * _Nonnull UIPasteboardTypeListString __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [Field("UIPasteboardTypeListString", "__Internal")]
    NSString[] UIPasteboardTypeListString { get; }

    // extern NSArray<NSString *> * _Nonnull UIPasteboardTypeListURL __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [Field("UIPasteboardTypeListURL", "__Internal")]
    NSString[] UIPasteboardTypeListURL { get; }

    // extern NSArray<NSString *> * _Nonnull UIPasteboardTypeListImage __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [Field("UIPasteboardTypeListImage", "__Internal")]
    NSString[] UIPasteboardTypeListImage { get; }

    // extern NSArray<NSString *> * _Nonnull UIPasteboardTypeListColor __attribute__((visibility("default"))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV]
    [Field("UIPasteboardTypeListColor", "__Internal")]
    NSString[] UIPasteboardTypeListColor { get; }

    // extern NSString *const _Nonnull UIPasteboardTypeAutomatic __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10_0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
    [NoWatch, NoTV, iOS(10, 0)]
    [Field("UIPasteboardTypeAutomatic", "__Internal")]
    NSString UIPasteboardTypeAutomatic { get; }
}

// @interface UIPinchGestureRecognizer : UIGestureRecognizer
[NoTV, iOS(3, 2)]
[BaseType(typeof(UIGestureRecognizer))]
interface UIPinchGestureRecognizer
{
    // @property (nonatomic) CGFloat scale;
    [Export("scale")]
    nfloat Scale { get; set; }

    // @property (readonly, nonatomic) CGFloat velocity;
    [Export("velocity")]
    nfloat Velocity { get; }
}

// @interface UIPopoverController (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIPopoverController
{
    // @property (getter = isModalInPopover, readwrite, nonatomic) BOOL modalInPopover __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Export("modalInPopover")]
    bool ModalInPopover { [Bind("isModalInPopover")] get; set; }

    // @property (readwrite, nonatomic) CGSize contentSizeForViewInPopover __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_2, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 3, 2, message: "Use UIViewController.preferredContentSize instead.")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use UIViewController.preferredContentSize instead.")]
    [NoTV]
    [Export("contentSizeForViewInPopover", ArgumentSemantic.Assign)]
    CGSize ContentSizeForViewInPopover { get; set; }
}

// @interface UIPopoverController : NSObject <UIAppearanceContainer>
[Introduced(PlatformName.iOS, 3, 2, message: "UIPopoverController is deprecated. Popovers are now implemented as UIViewController presentations. Use a modal presentation style of UIModalPresentationPopover and UIPopoverPresentationController.")]
[Deprecated(PlatformName.iOS, 9, 0, message: "UIPopoverController is deprecated. Popovers are now implemented as UIViewController presentations. Use a modal presentation style of UIModalPresentationPopover and UIPopoverPresentationController.")]
[BaseType(typeof(NSObject))]
interface UIPopoverController : IUIAppearanceContainer
{
    // -(instancetype _Nonnull)initWithContentViewController:(UIViewController * _Nonnull)viewController;
    [Export("initWithContentViewController:")]
    IntPtr Constructor(UIViewController viewController);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIPopoverControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIPopoverControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (nonatomic, strong) UIViewController * _Nonnull contentViewController;
    [Export("contentViewController", ArgumentSemantic.Strong)]
    UIViewController ContentViewController { get; set; }

    // -(void)setContentViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
    [Export("setContentViewController:animated:")]
    void SetContentViewController(UIViewController viewController, bool animated);

    // @property (nonatomic) CGSize popoverContentSize;
    [Export("popoverContentSize", ArgumentSemantic.Assign)]
    CGSize PopoverContentSize { get; set; }

    // -(void)setPopoverContentSize:(CGSize)size animated:(BOOL)animated;
    [Export("setPopoverContentSize:animated:")]
    void SetPopoverContentSize(CGSize size, bool animated);

    // @property (readonly, getter = isPopoverVisible, nonatomic) BOOL popoverVisible;
    [Export("popoverVisible")]
    bool PopoverVisible { [Bind("isPopoverVisible")] get; }

    // @property (readonly, nonatomic) UIPopoverArrowDirection popoverArrowDirection;
    [Export("popoverArrowDirection")]
    UIPopoverArrowDirection PopoverArrowDirection { get; }

    // @property (copy, nonatomic) NSArray<__kindof UIView *> * _Nullable passthroughViews;
    [NullAllowed, Export("passthroughViews", ArgumentSemantic.Copy)]
    UIView[] PassthroughViews { get; set; }

    // -(void)presentPopoverFromRect:(CGRect)rect inView:(UIView * _Nonnull)view permittedArrowDirections:(UIPopoverArrowDirection)arrowDirections animated:(BOOL)animated;
    [Export("presentPopoverFromRect:inView:permittedArrowDirections:animated:")]
    void PresentPopoverFromRect(CGRect rect, UIView view, UIPopoverArrowDirection arrowDirections, bool animated);

    // -(void)presentPopoverFromBarButtonItem:(UIBarButtonItem * _Nonnull)item permittedArrowDirections:(UIPopoverArrowDirection)arrowDirections animated:(BOOL)animated;
    [Export("presentPopoverFromBarButtonItem:permittedArrowDirections:animated:")]
    void PresentPopoverFromBarButtonItem(UIBarButtonItem item, UIPopoverArrowDirection arrowDirections, bool animated);

    // -(void)dismissPopoverAnimated:(BOOL)animated;
    [Export("dismissPopoverAnimated:")]
    void DismissPopoverAnimated(bool animated);

    // @property (copy, nonatomic) UIColor * _Nullable backgroundColor __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("backgroundColor", ArgumentSemantic.Copy)]
    UIColor BackgroundColor { get; set; }

    // @property (readwrite, nonatomic) UIEdgeInsets popoverLayoutMargins __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("popoverLayoutMargins", ArgumentSemantic.Assign)]
    UIEdgeInsets PopoverLayoutMargins { get; set; }

    // @property (readwrite, nonatomic, strong) Class _Nullable popoverBackgroundViewClass __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("popoverBackgroundViewClass", ArgumentSemantic.Strong)]
    Class PopoverBackgroundViewClass { get; set; }
}

// @protocol UIPopoverControllerDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIPopoverControllerDelegate
{
    // @optional -(BOOL)popoverControllerShouldDismissPopover:(UIPopoverController * _Nonnull)popoverController __attribute__((availability(ios, introduced=3_2, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 3, 2)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("popoverControllerShouldDismissPopover:")]
    bool PopoverControllerShouldDismissPopover(UIPopoverController popoverController);

    // @optional -(void)popoverControllerDidDismissPopover:(UIPopoverController * _Nonnull)popoverController __attribute__((availability(ios, introduced=3_2, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 3, 2)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("popoverControllerDidDismissPopover:")]
    void PopoverControllerDidDismissPopover(UIPopoverController popoverController);

    // @optional -(void)popoverController:(UIPopoverController * _Nonnull)popoverController willRepositionPopoverToRect:(CGRect * _Nonnull)rect inView:(UIView * _Nonnull * _Nonnull)view __attribute__((availability(ios, introduced=7_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 7, 0)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("popoverController:willRepositionPopoverToRect:inView:")]
    unsafe void PopoverController(UIPopoverController popoverController, CGRect* rect, out UIView view);
}

// @protocol UIPopoverBackgroundViewMethods
[Protocol, Model]
interface UIPopoverBackgroundViewMethods
{
    // @required +(CGFloat)arrowBase;
    [Static, Abstract]
    [Export("arrowBase")]
    [Verify(MethodToProperty)]
    nfloat ArrowBase { get; }

    // @required +(UIEdgeInsets)contentViewInsets;
    [Static, Abstract]
    [Export("contentViewInsets")]
    [Verify(MethodToProperty)]
    UIEdgeInsets ContentViewInsets { get; }

    // @required +(CGFloat)arrowHeight;
    [Static, Abstract]
    [Export("arrowHeight")]
    [Verify(MethodToProperty)]
    nfloat ArrowHeight { get; }
}

// @interface UIPopoverBackgroundView : UIView <UIPopoverBackgroundViewMethods>
[iOS(5, 0)]
[BaseType(typeof(UIView))]
interface UIPopoverBackgroundView : IUIPopoverBackgroundViewMethods
{
    // @property (readwrite, nonatomic) CGFloat arrowOffset;
    [Export("arrowOffset")]
    nfloat ArrowOffset { get; set; }

    // @property (readwrite, nonatomic) UIPopoverArrowDirection arrowDirection;
    [Export("arrowDirection", ArgumentSemantic.Assign)]
    UIPopoverArrowDirection ArrowDirection { get; set; }

    // @property (readonly, nonatomic, class) BOOL wantsDefaultContentAppearance __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Static]
    [Export("wantsDefaultContentAppearance")]
    bool WantsDefaultContentAppearance { get; }
}

// @interface UIPress : NSObject
[iOS(9, 0)]
[BaseType(typeof(NSObject))]
interface UIPress
{
    // @property (readonly, nonatomic) NSTimeInterval timestamp;
    [Export("timestamp")]
    double Timestamp { get; }

    // @property (readonly, nonatomic) UIPressPhase phase;
    [Export("phase")]
    UIPressPhase Phase { get; }

    // @property (readonly, nonatomic) UIPressType type;
    [Export("type")]
    UIPressType Type { get; }

    // @property (readonly, nonatomic, strong) UIWindow * _Nullable window;
    [NullAllowed, Export("window", ArgumentSemantic.Strong)]
    UIWindow Window { get; }

    // @property (readonly, nonatomic, strong) UIResponder * _Nullable responder;
    [NullAllowed, Export("responder", ArgumentSemantic.Strong)]
    UIResponder Responder { get; }

    // @property (readonly, copy, nonatomic) NSArray<UIGestureRecognizer *> * _Nullable gestureRecognizers;
    [NullAllowed, Export("gestureRecognizers", ArgumentSemantic.Copy)]
    UIGestureRecognizer[] GestureRecognizers { get; }

    // @property (readonly, nonatomic) CGFloat force;
    [Export("force")]
    nfloat Force { get; }
}

// @interface UIPressesEvent : UIEvent
[iOS(9, 0)]
[BaseType(typeof(UIEvent))]
interface UIPressesEvent
{
    // @property (readonly, nonatomic) NSSet<UIPress *> * _Nonnull allPresses;
    [Export("allPresses")]
    NSSet<UIPress> AllPresses { get; }

    // -(NSSet<UIPress *> * _Nonnull)pressesForGestureRecognizer:(UIGestureRecognizer * _Nonnull)gesture;
    [Export("pressesForGestureRecognizer:")]
    NSSet<UIPress> PressesForGestureRecognizer(UIGestureRecognizer gesture);
}

// @interface UIPrinter : NSObject
[NoTV, iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface UIPrinter
{
    // +(UIPrinter * _Nonnull)printerWithURL:(NSURL * _Nonnull)url;
    [Static]
    [Export("printerWithURL:")]
    UIPrinter PrinterWithURL(NSUrl url);

    // @property (readonly, copy) NSURL * _Nonnull URL;
    [Export("URL", ArgumentSemantic.Copy)]
    NSUrl URL { get; }

    // @property (readonly, copy) NSString * _Nonnull displayName;
    [Export("displayName")]
    string DisplayName { get; }

    // @property (readonly, copy) NSString * _Nullable displayLocation;
    [NullAllowed, Export("displayLocation")]
    string DisplayLocation { get; }

    // @property (readonly) UIPrinterJobTypes supportedJobTypes;
    [Export("supportedJobTypes")]
    UIPrinterJobTypes SupportedJobTypes { get; }

    // @property (readonly, copy) NSString * _Nullable makeAndModel;
    [NullAllowed, Export("makeAndModel")]
    string MakeAndModel { get; }

    // @property (readonly) BOOL supportsColor;
    [Export("supportsColor")]
    bool SupportsColor { get; }

    // @property (readonly) BOOL supportsDuplex;
    [Export("supportsDuplex")]
    bool SupportsDuplex { get; }

    // -(void)contactPrinter:(void (^ _Nullable)(BOOL))completionHandler;
    [Export("contactPrinter:")]
    void ContactPrinter([NullAllowed] Action<bool> completionHandler);
}

// typedef void (^UIPrinterPickerCompletionHandler)(UIPrinterPickerController * _Nonnull, BOOL, NSError * _Nullable);
delegate void UIPrinterPickerCompletionHandler(UIPrinterPickerController arg0, bool arg1, [NullAllowed] NSError arg2);

// @protocol UIPrinterPickerControllerDelegate <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIPrinterPickerControllerDelegate
{
    // @optional -(UIViewController * _Nullable)printerPickerControllerParentViewController:(UIPrinterPickerController * _Nonnull)printerPickerController;
    [Export("printerPickerControllerParentViewController:")]
    [return: NullAllowed]
    UIViewController PrinterPickerControllerParentViewController(UIPrinterPickerController printerPickerController);

    // @optional -(BOOL)printerPickerController:(UIPrinterPickerController * _Nonnull)printerPickerController shouldShowPrinter:(UIPrinter * _Nonnull)printer;
    [Export("printerPickerController:shouldShowPrinter:")]
    bool PrinterPickerController(UIPrinterPickerController printerPickerController, UIPrinter printer);

    // @optional -(void)printerPickerControllerWillPresent:(UIPrinterPickerController * _Nonnull)printerPickerController;
    [Export("printerPickerControllerWillPresent:")]
    void PrinterPickerControllerWillPresent(UIPrinterPickerController printerPickerController);

    // @optional -(void)printerPickerControllerDidPresent:(UIPrinterPickerController * _Nonnull)printerPickerController;
    [Export("printerPickerControllerDidPresent:")]
    void PrinterPickerControllerDidPresent(UIPrinterPickerController printerPickerController);

    // @optional -(void)printerPickerControllerWillDismiss:(UIPrinterPickerController * _Nonnull)printerPickerController;
    [Export("printerPickerControllerWillDismiss:")]
    void PrinterPickerControllerWillDismiss(UIPrinterPickerController printerPickerController);

    // @optional -(void)printerPickerControllerDidDismiss:(UIPrinterPickerController * _Nonnull)printerPickerController;
    [Export("printerPickerControllerDidDismiss:")]
    void PrinterPickerControllerDidDismiss(UIPrinterPickerController printerPickerController);

    // @optional -(void)printerPickerControllerDidSelectPrinter:(UIPrinterPickerController * _Nonnull)printerPickerController;
    [Export("printerPickerControllerDidSelectPrinter:")]
    void PrinterPickerControllerDidSelectPrinter(UIPrinterPickerController printerPickerController);
}

// @interface UIPrinterPickerController : NSObject
[NoTV, iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface UIPrinterPickerController
{
    // +(UIPrinterPickerController * _Nonnull)printerPickerControllerWithInitiallySelectedPrinter:(UIPrinter * _Nullable)printer;
    [Static]
    [Export("printerPickerControllerWithInitiallySelectedPrinter:")]
    UIPrinterPickerController PrinterPickerControllerWithInitiallySelectedPrinter([NullAllowed] UIPrinter printer);

    // @property (readonly, nonatomic) UIPrinter * _Nullable selectedPrinter;
    [NullAllowed, Export("selectedPrinter")]
    UIPrinter SelectedPrinter { get; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIPrinterPickerControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIPrinterPickerControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // -(BOOL)presentAnimated:(BOOL)animated completionHandler:(UIPrinterPickerCompletionHandler _Nullable)completion;
    [Export("presentAnimated:completionHandler:")]
    bool PresentAnimated(bool animated, [NullAllowed] UIPrinterPickerCompletionHandler completion);

    // -(BOOL)presentFromRect:(CGRect)rect inView:(UIView * _Nonnull)view animated:(BOOL)animated completionHandler:(UIPrinterPickerCompletionHandler _Nullable)completion;
    [Export("presentFromRect:inView:animated:completionHandler:")]
    bool PresentFromRect(CGRect rect, UIView view, bool animated, [NullAllowed] UIPrinterPickerCompletionHandler completion);

    // -(BOOL)presentFromBarButtonItem:(UIBarButtonItem * _Nonnull)item animated:(BOOL)animated completionHandler:(UIPrinterPickerCompletionHandler _Nullable)completion;
    [Export("presentFromBarButtonItem:animated:completionHandler:")]
    bool PresentFromBarButtonItem(UIBarButtonItem item, bool animated, [NullAllowed] UIPrinterPickerCompletionHandler completion);

    // -(void)dismissAnimated:(BOOL)animated;
    [Export("dismissAnimated:")]
    void DismissAnimated(bool animated);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSErrorDomain _Nonnull UIPrintErrorDomain __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIPrintErrorDomain", "__Internal")]
    NSString UIPrintErrorDomain { get; }
}

// @interface UIPrintFormatter : NSObject <NSCopying>
[NoTV, iOS(4, 2)]
[BaseType(typeof(NSObject))]
interface UIPrintFormatter : INSCopying
{
    // @property (readonly, nonatomic, weak) UIPrintPageRenderer * _Nullable printPageRenderer __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [NullAllowed, Export("printPageRenderer", ArgumentSemantic.Weak)]
    UIPrintPageRenderer PrintPageRenderer { get; }

    // -(void)removeFromPrintPageRenderer __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("removeFromPrintPageRenderer")]
    void RemoveFromPrintPageRenderer();

    // @property (nonatomic) CGFloat maximumContentHeight __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("maximumContentHeight")]
    nfloat MaximumContentHeight { get; set; }

    // @property (nonatomic) CGFloat maximumContentWidth __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("maximumContentWidth")]
    nfloat MaximumContentWidth { get; set; }

    // @property (nonatomic) UIEdgeInsets contentInsets __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_2, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 4, 2, message: "Use perPageContentInsets instead.")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use perPageContentInsets instead.")]
    [NoTV]
    [Export("contentInsets", ArgumentSemantic.Assign)]
    UIEdgeInsets ContentInsets { get; set; }

    // @property (nonatomic) UIEdgeInsets perPageContentInsets __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("perPageContentInsets", ArgumentSemantic.Assign)]
    UIEdgeInsets PerPageContentInsets { get; set; }

    // @property (nonatomic) NSInteger startPage __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("startPage")]
    nint StartPage { get; set; }

    // @property (readonly, nonatomic) NSInteger pageCount __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("pageCount")]
    nint PageCount { get; }

    // -(CGRect)rectForPageAtIndex:(NSInteger)pageIndex __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("rectForPageAtIndex:")]
    CGRect RectForPageAtIndex(nint pageIndex);

    // -(void)drawInRect:(CGRect)rect forPageAtIndex:(NSInteger)pageIndex __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("drawInRect:forPageAtIndex:")]
    void DrawInRect(CGRect rect, nint pageIndex);
}

// @interface UISimpleTextPrintFormatter : UIPrintFormatter
[NoTV, iOS(4, 2)]
[BaseType(typeof(UIPrintFormatter))]
interface UISimpleTextPrintFormatter
{
    // -(instancetype _Nonnull)initWithText:(NSString * _Nonnull)text;
    [Export("initWithText:")]
    IntPtr Constructor(string text);

    // -(instancetype _Nonnull)initWithAttributedText:(NSAttributedString * _Nonnull)attributedText __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("initWithAttributedText:")]
    IntPtr Constructor(NSAttributedString attributedText);

    // @property (copy, nonatomic) NSString * _Nullable text;
    [NullAllowed, Export("text")]
    string Text { get; set; }

    // @property (copy, nonatomic) NSAttributedString * _Nullable attributedText __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("attributedText", ArgumentSemantic.Copy)]
    NSAttributedString AttributedText { get; set; }

    // @property (nonatomic, strong) UIFont * _Nullable font;
    [NullAllowed, Export("font", ArgumentSemantic.Strong)]
    UIFont Font { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable color;
    [NullAllowed, Export("color", ArgumentSemantic.Strong)]
    UIColor Color { get; set; }

    // @property (nonatomic) NSTextAlignment textAlignment;
    [Export("textAlignment", ArgumentSemantic.Assign)]
    NSTextAlignment TextAlignment { get; set; }
}

// @interface UIMarkupTextPrintFormatter : UIPrintFormatter
[NoTV, iOS(4, 2)]
[BaseType(typeof(UIPrintFormatter))]
interface UIMarkupTextPrintFormatter
{
    // -(instancetype _Nonnull)initWithMarkupText:(NSString * _Nonnull)markupText;
    [Export("initWithMarkupText:")]
    IntPtr Constructor(string markupText);

    // @property (copy, nonatomic) NSString * _Nullable markupText;
    [NullAllowed, Export("markupText")]
    string MarkupText { get; set; }
}

// @interface UIViewPrintFormatter : UIPrintFormatter
[NoTV, iOS(4, 2)]
[BaseType(typeof(UIPrintFormatter))]
interface UIViewPrintFormatter
{
    // @property (readonly, nonatomic) UIView * _Nonnull view;
    [Export("view")]
    UIView View { get; }
}

// @interface UIPrintFormatter (UIView)
[Category]
[BaseType(typeof(UIView))]
interface UIView_UIPrintFormatter
{
    // -(UIViewPrintFormatter * _Nonnull)viewPrintFormatter __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("viewPrintFormatter")]
    [Verify(MethodToProperty)]
    UIViewPrintFormatter ViewPrintFormatter { get; }

    // -(void)drawRect:(CGRect)rect forViewPrintFormatter:(UIViewPrintFormatter * _Nonnull)formatter __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("drawRect:forViewPrintFormatter:")]
    void DrawRect(CGRect rect, UIViewPrintFormatter formatter);
}

// @interface UIPrintInfo : NSObject <NSCopying, NSCoding>
[NoTV, iOS(4, 2)]
[BaseType(typeof(NSObject))]
interface UIPrintInfo : INSCopying, INSCoding
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // +(UIPrintInfo * _Nonnull)printInfo;
    [Static]
    [Export("printInfo")]
    [Verify(MethodToProperty)]
    UIPrintInfo PrintInfo { get; }

    // +(UIPrintInfo * _Nonnull)printInfoWithDictionary:(NSDictionary * _Nullable)dictionary;
    [Static]
    [Export("printInfoWithDictionary:")]
    UIPrintInfo PrintInfoWithDictionary([NullAllowed] NSDictionary dictionary);

    // @property (copy, nonatomic) NSString * _Nullable printerID;
    [NullAllowed, Export("printerID")]
    string PrinterID { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull jobName;
    [Export("jobName")]
    string JobName { get; set; }

    // @property (nonatomic) UIPrintInfoOutputType outputType;
    [Export("outputType", ArgumentSemantic.Assign)]
    UIPrintInfoOutputType OutputType { get; set; }

    // @property (nonatomic) UIPrintInfoOrientation orientation;
    [Export("orientation", ArgumentSemantic.Assign)]
    UIPrintInfoOrientation Orientation { get; set; }

    // @property (nonatomic) UIPrintInfoDuplex duplex;
    [Export("duplex", ArgumentSemantic.Assign)]
    UIPrintInfoDuplex Duplex { get; set; }

    // @property (readonly, nonatomic) NSDictionary * _Nonnull dictionaryRepresentation;
    [Export("dictionaryRepresentation")]
    NSDictionary DictionaryRepresentation { get; }
}

// typedef void (^UIPrintInteractionCompletionHandler)(UIPrintInteractionController * _Nonnull, BOOL, NSError * _Nullable);
delegate void UIPrintInteractionCompletionHandler(UIPrintInteractionController arg0, bool arg1, [NullAllowed] NSError arg2);

// @interface UIPrintInteractionController : NSObject
[NoTV, iOS(4, 2)]
[BaseType(typeof(NSObject))]
interface UIPrintInteractionController
{
    // @property (readonly, getter = isPrintingAvailable, nonatomic, class) BOOL printingAvailable;
    [Static]
    [Export("printingAvailable")]
    bool PrintingAvailable { [Bind("isPrintingAvailable")] get; }

    // @property (readonly, nonatomic, class) NSSet<NSString *> * _Nonnull printableUTIs;
    [Static]
    [Export("printableUTIs")]
    NSSet<NSString> PrintableUTIs { get; }

    // +(BOOL)canPrintURL:(NSURL * _Nonnull)url;
    [Static]
    [Export("canPrintURL:")]
    bool CanPrintURL(NSUrl url);

    // +(BOOL)canPrintData:(NSData * _Nonnull)data;
    [Static]
    [Export("canPrintData:")]
    bool CanPrintData(NSData data);

    // @property (readonly, nonatomic, class) UIPrintInteractionController * _Nonnull sharedPrintController;
    [Static]
    [Export("sharedPrintController")]
    UIPrintInteractionController SharedPrintController { get; }

    // @property (nonatomic, strong) UIPrintInfo * _Nullable printInfo;
    [NullAllowed, Export("printInfo", ArgumentSemantic.Strong)]
    UIPrintInfo PrintInfo { get; set; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIPrintInteractionControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIPrintInteractionControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (nonatomic) BOOL showsPageRange __attribute__((availability(ios, introduced=4_2, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 4, 2, message: "Pages can be removed from the print preview, so page range is always shown.")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Pages can be removed from the print preview, so page range is always shown.")]
    [Export("showsPageRange")]
    bool ShowsPageRange { get; set; }

    // @property (nonatomic) BOOL showsNumberOfCopies __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("showsNumberOfCopies")]
    bool ShowsNumberOfCopies { get; set; }

    // @property (nonatomic) BOOL showsPaperSelectionForLoadedPapers __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("showsPaperSelectionForLoadedPapers")]
    bool ShowsPaperSelectionForLoadedPapers { get; set; }

    // @property (readonly, nonatomic) UIPrintPaper * _Nullable printPaper;
    [NullAllowed, Export("printPaper")]
    UIPrintPaper PrintPaper { get; }

    // @property (nonatomic, strong) UIPrintPageRenderer * _Nullable printPageRenderer;
    [NullAllowed, Export("printPageRenderer", ArgumentSemantic.Strong)]
    UIPrintPageRenderer PrintPageRenderer { get; set; }

    // @property (nonatomic, strong) UIPrintFormatter * _Nullable printFormatter;
    [NullAllowed, Export("printFormatter", ArgumentSemantic.Strong)]
    UIPrintFormatter PrintFormatter { get; set; }

    // @property (copy, nonatomic) id _Nullable printingItem;
    [NullAllowed, Export("printingItem", ArgumentSemantic.Copy)]
    NSObject PrintingItem { get; set; }

    // @property (copy, nonatomic) NSArray * _Nullable printingItems;
    [NullAllowed, Export("printingItems", ArgumentSemantic.Copy)]
    [Verify(StronglyTypedNSArray)]
    NSObject[] PrintingItems { get; set; }

    // -(BOOL)presentAnimated:(BOOL)animated completionHandler:(UIPrintInteractionCompletionHandler _Nullable)completion;
    [Export("presentAnimated:completionHandler:")]
    bool PresentAnimated(bool animated, [NullAllowed] UIPrintInteractionCompletionHandler completion);

    // -(BOOL)presentFromRect:(CGRect)rect inView:(UIView * _Nonnull)view animated:(BOOL)animated completionHandler:(UIPrintInteractionCompletionHandler _Nullable)completion;
    [Export("presentFromRect:inView:animated:completionHandler:")]
    bool PresentFromRect(CGRect rect, UIView view, bool animated, [NullAllowed] UIPrintInteractionCompletionHandler completion);

    // -(BOOL)presentFromBarButtonItem:(UIBarButtonItem * _Nonnull)item animated:(BOOL)animated completionHandler:(UIPrintInteractionCompletionHandler _Nullable)completion;
    [Export("presentFromBarButtonItem:animated:completionHandler:")]
    bool PresentFromBarButtonItem(UIBarButtonItem item, bool animated, [NullAllowed] UIPrintInteractionCompletionHandler completion);

    // -(BOOL)printToPrinter:(UIPrinter * _Nonnull)printer completionHandler:(UIPrintInteractionCompletionHandler _Nullable)completion;
    [Export("printToPrinter:completionHandler:")]
    bool PrintToPrinter(UIPrinter printer, [NullAllowed] UIPrintInteractionCompletionHandler completion);

    // -(void)dismissAnimated:(BOOL)animated;
    [Export("dismissAnimated:")]
    void DismissAnimated(bool animated);
}

// @protocol UIPrintInteractionControllerDelegate <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIPrintInteractionControllerDelegate
{
    // @optional -(UIViewController * _Nullable)printInteractionControllerParentViewController:(UIPrintInteractionController * _Nonnull)printInteractionController;
    [Export("printInteractionControllerParentViewController:")]
    [return: NullAllowed]
    UIViewController PrintInteractionControllerParentViewController(UIPrintInteractionController printInteractionController);

    // @optional -(UIPrintPaper * _Nonnull)printInteractionController:(UIPrintInteractionController * _Nonnull)printInteractionController choosePaper:(NSArray<UIPrintPaper *> * _Nonnull)paperList;
    [Export("printInteractionController:choosePaper:")]
    UIPrintPaper PrintInteractionController(UIPrintInteractionController printInteractionController, UIPrintPaper[] paperList);

    // @optional -(void)printInteractionControllerWillPresentPrinterOptions:(UIPrintInteractionController * _Nonnull)printInteractionController;
    [Export("printInteractionControllerWillPresentPrinterOptions:")]
    void PrintInteractionControllerWillPresentPrinterOptions(UIPrintInteractionController printInteractionController);

    // @optional -(void)printInteractionControllerDidPresentPrinterOptions:(UIPrintInteractionController * _Nonnull)printInteractionController;
    [Export("printInteractionControllerDidPresentPrinterOptions:")]
    void PrintInteractionControllerDidPresentPrinterOptions(UIPrintInteractionController printInteractionController);

    // @optional -(void)printInteractionControllerWillDismissPrinterOptions:(UIPrintInteractionController * _Nonnull)printInteractionController;
    [Export("printInteractionControllerWillDismissPrinterOptions:")]
    void PrintInteractionControllerWillDismissPrinterOptions(UIPrintInteractionController printInteractionController);

    // @optional -(void)printInteractionControllerDidDismissPrinterOptions:(UIPrintInteractionController * _Nonnull)printInteractionController;
    [Export("printInteractionControllerDidDismissPrinterOptions:")]
    void PrintInteractionControllerDidDismissPrinterOptions(UIPrintInteractionController printInteractionController);

    // @optional -(void)printInteractionControllerWillStartJob:(UIPrintInteractionController * _Nonnull)printInteractionController;
    [Export("printInteractionControllerWillStartJob:")]
    void PrintInteractionControllerWillStartJob(UIPrintInteractionController printInteractionController);

    // @optional -(void)printInteractionControllerDidFinishJob:(UIPrintInteractionController * _Nonnull)printInteractionController;
    [Export("printInteractionControllerDidFinishJob:")]
    void PrintInteractionControllerDidFinishJob(UIPrintInteractionController printInteractionController);

    // @optional -(CGFloat)printInteractionController:(UIPrintInteractionController * _Nonnull)printInteractionController cutLengthForPaper:(UIPrintPaper * _Nonnull)paper __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("printInteractionController:cutLengthForPaper:")]
    nfloat PrintInteractionController(UIPrintInteractionController printInteractionController, UIPrintPaper paper);

    // @optional -(UIPrinterCutterBehavior)printInteractionController:(UIPrintInteractionController * _Nonnull)printInteractionController chooseCutterBehavior:(NSArray * _Nonnull)availableBehaviors __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("printInteractionController:chooseCutterBehavior:")]
    [Verify(StronglyTypedNSArray)]
    UIPrinterCutterBehavior PrintInteractionController(UIPrintInteractionController printInteractionController, NSObject[] availableBehaviors);
}

// @interface UIPrintPageRenderer : NSObject
[NoTV, iOS(4, 2)]
[BaseType(typeof(NSObject))]
interface UIPrintPageRenderer
{
    // @property (nonatomic) CGFloat headerHeight;
    [Export("headerHeight")]
    nfloat HeaderHeight { get; set; }

    // @property (nonatomic) CGFloat footerHeight;
    [Export("footerHeight")]
    nfloat FooterHeight { get; set; }

    // @property (readonly, nonatomic) CGRect paperRect;
    [Export("paperRect")]
    CGRect PaperRect { get; }

    // @property (readonly, nonatomic) CGRect printableRect;
    [Export("printableRect")]
    CGRect PrintableRect { get; }

    // @property (readonly, nonatomic) NSInteger numberOfPages;
    [Export("numberOfPages")]
    nint NumberOfPages { get; }

    // @property (copy, nonatomic) NSArray<UIPrintFormatter *> * _Nullable printFormatters;
    [NullAllowed, Export("printFormatters", ArgumentSemantic.Copy)]
    UIPrintFormatter[] PrintFormatters { get; set; }

    // -(NSArray<UIPrintFormatter *> * _Nullable)printFormattersForPageAtIndex:(NSInteger)pageIndex;
    [Export("printFormattersForPageAtIndex:")]
    [return: NullAllowed]
    UIPrintFormatter[] PrintFormattersForPageAtIndex(nint pageIndex);

    // -(void)addPrintFormatter:(UIPrintFormatter * _Nonnull)formatter startingAtPageAtIndex:(NSInteger)pageIndex;
    [Export("addPrintFormatter:startingAtPageAtIndex:")]
    void AddPrintFormatter(UIPrintFormatter formatter, nint pageIndex);

    // -(void)prepareForDrawingPages:(NSRange)range;
    [Export("prepareForDrawingPages:")]
    void PrepareForDrawingPages(NSRange range);

    // -(void)drawPageAtIndex:(NSInteger)pageIndex inRect:(CGRect)printableRect;
    [Export("drawPageAtIndex:inRect:")]
    void DrawPageAtIndex(nint pageIndex, CGRect printableRect);

    // -(void)drawPrintFormatter:(UIPrintFormatter * _Nonnull)printFormatter forPageAtIndex:(NSInteger)pageIndex;
    [Export("drawPrintFormatter:forPageAtIndex:")]
    void DrawPrintFormatter(UIPrintFormatter printFormatter, nint pageIndex);

    // -(void)drawHeaderForPageAtIndex:(NSInteger)pageIndex inRect:(CGRect)headerRect;
    [Export("drawHeaderForPageAtIndex:inRect:")]
    void DrawHeaderForPageAtIndex(nint pageIndex, CGRect headerRect);

    // -(void)drawContentForPageAtIndex:(NSInteger)pageIndex inRect:(CGRect)contentRect;
    [Export("drawContentForPageAtIndex:inRect:")]
    void DrawContentForPageAtIndex(nint pageIndex, CGRect contentRect);

    // -(void)drawFooterForPageAtIndex:(NSInteger)pageIndex inRect:(CGRect)footerRect;
    [Export("drawFooterForPageAtIndex:inRect:")]
    void DrawFooterForPageAtIndex(nint pageIndex, CGRect footerRect);
}

// @interface UIPrintPaper : NSObject
[NoTV, iOS(4, 2)]
[BaseType(typeof(NSObject))]
interface UIPrintPaper
{
    // +(UIPrintPaper * _Nonnull)bestPaperForPageSize:(CGSize)contentSize withPapersFromArray:(NSArray<UIPrintPaper *> * _Nonnull)paperList;
    [Static]
    [Export("bestPaperForPageSize:withPapersFromArray:")]
    UIPrintPaper BestPaperForPageSize(CGSize contentSize, UIPrintPaper[] paperList);

    // @property (readonly) CGSize paperSize;
    [Export("paperSize")]
    CGSize PaperSize { get; }

    // @property (readonly) CGRect printableRect;
    [Export("printableRect")]
    CGRect PrintableRect { get; }
}

// @interface Deprecated_Nonfunctional (UIPrintPaper)
[Category]
[BaseType(typeof(UIPrintPaper))]
interface UIPrintPaper_Deprecated_Nonfunctional
{
    // -(CGRect)printRect __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("printRect")]
    [Verify(MethodToProperty)]
    CGRect PrintRect { get; }
}

// @interface UIProgressView : UIView <NSCoding>
[iOS(2, 0)]
[BaseType(typeof(UIView))]
interface UIProgressView : INSCoding
{
    // -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
    [Export("initWithFrame:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect frame);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // -(instancetype _Nonnull)initWithProgressViewStyle:(UIProgressViewStyle)style;
    [Export("initWithProgressViewStyle:")]
    IntPtr Constructor(UIProgressViewStyle style);

    // @property (nonatomic) UIProgressViewStyle progressViewStyle;
    [Export("progressViewStyle", ArgumentSemantic.Assign)]
    UIProgressViewStyle ProgressViewStyle { get; set; }

    // @property (nonatomic) float progress;
    [Export("progress")]
    float Progress { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable progressTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("progressTintColor", ArgumentSemantic.Strong)]
    UIColor ProgressTintColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable trackTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("trackTintColor", ArgumentSemantic.Strong)]
    UIColor TrackTintColor { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable progressImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("progressImage", ArgumentSemantic.Strong)]
    UIImage ProgressImage { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable trackImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("trackImage", ArgumentSemantic.Strong)]
    UIImage TrackImage { get; set; }

    // -(void)setProgress:(float)progress animated:(BOOL)animated __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setProgress:animated:")]
    void SetProgress(float progress, bool animated);

    // @property (nonatomic, strong) NSProgress * _Nullable observedProgress __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [NullAllowed, Export("observedProgress", ArgumentSemantic.Strong)]
    NSProgress ObservedProgress { get; set; }
}

// @interface UIReferenceLibraryViewController : UIViewController
[NoTV, iOS(5, 0)]
[BaseType(typeof(UIViewController))]
[DisableDefaultCtor]
interface UIReferenceLibraryViewController
{
    // +(BOOL)dictionaryHasDefinitionForTerm:(NSString * _Nonnull)term;
    [Static]
    [Export("dictionaryHasDefinitionForTerm:")]
    bool DictionaryHasDefinitionForTerm(string term);

    // -(instancetype _Nonnull)initWithTerm:(NSString * _Nonnull)term __attribute__((objc_designated_initializer));
    [Export("initWithTerm:")]
    [DesignatedInitializer]
    IntPtr Constructor(string term);

    // -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);
}

// @interface UIRotationGestureRecognizer : UIGestureRecognizer
[NoTV, iOS(3, 2)]
[BaseType(typeof(UIGestureRecognizer))]
interface UIRotationGestureRecognizer
{
    // @property (nonatomic) CGFloat rotation;
    [Export("rotation")]
    nfloat Rotation { get; set; }

    // @property (readonly, nonatomic) CGFloat velocity;
    [Export("velocity")]
    nfloat Velocity { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSNotificationName _Nonnull UIScreenDidConnectNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Field("UIScreenDidConnectNotification", "__Internal")]
    NSString UIScreenDidConnectNotification { get; }

    // extern const NSNotificationName _Nonnull UIScreenDidDisconnectNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Field("UIScreenDidDisconnectNotification", "__Internal")]
    NSString UIScreenDidDisconnectNotification { get; }

    // extern const NSNotificationName _Nonnull UIScreenModeDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Field("UIScreenModeDidChangeNotification", "__Internal")]
    NSString UIScreenModeDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIScreenBrightnessDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Field("UIScreenBrightnessDidChangeNotification", "__Internal")]
    NSString UIScreenBrightnessDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UIScreenCapturedDidChangeNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Field("UIScreenCapturedDidChangeNotification", "__Internal")]
    NSString UIScreenCapturedDidChangeNotification { get; }
}

// @interface UIScreen : NSObject <UITraitEnvironment>
[iOS(2, 0)]
[BaseType(typeof(NSObject))]
interface UIScreen : IUITraitEnvironment
{
    // @property (readonly, nonatomic, class) NSArray<UIScreen *> * _Nonnull screens __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Static]
    [Export("screens")]
    UIScreen[] Screens { get; }

    // @property (readonly, nonatomic, class) UIScreen * _Nonnull mainScreen;
    [Static]
    [Export("mainScreen")]
    UIScreen MainScreen { get; }

    // @property (readonly, nonatomic) CGRect bounds;
    [Export("bounds")]
    CGRect Bounds { get; }

    // @property (readonly, nonatomic) CGFloat scale __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("scale")]
    nfloat Scale { get; }

    // @property (readonly, copy, nonatomic) NSArray<UIScreenMode *> * _Nonnull availableModes __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_2)));
    [NoTV, iOS(3, 2)]
    [Export("availableModes", ArgumentSemantic.Copy)]
    UIScreenMode[] AvailableModes { get; }

    // @property (readonly, nonatomic, strong) UIScreenMode * _Nullable preferredMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=4_3)));
    [NoTV, iOS(4, 3)]
    [NullAllowed, Export("preferredMode", ArgumentSemantic.Strong)]
    UIScreenMode PreferredMode { get; }

    // @property (nonatomic, strong) UIScreenMode * _Nullable currentMode __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [NullAllowed, Export("currentMode", ArgumentSemantic.Strong)]
    UIScreenMode CurrentMode { get; set; }

    // @property (nonatomic) UIScreenOverscanCompensation overscanCompensation __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("overscanCompensation", ArgumentSemantic.Assign)]
    UIScreenOverscanCompensation OverscanCompensation { get; set; }

    // @property (readonly, nonatomic) UIEdgeInsets overscanCompensationInsets __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("overscanCompensationInsets")]
    UIEdgeInsets OverscanCompensationInsets { get; }

    // @property (readonly, nonatomic, strong) UIScreen * _Nullable mirroredScreen __attribute__((availability(ios, introduced=4_3)));
    [iOS(4, 3)]
    [NullAllowed, Export("mirroredScreen", ArgumentSemantic.Strong)]
    UIScreen MirroredScreen { get; }

    // @property (readonly, getter = isCaptured, nonatomic) BOOL captured __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("captured")]
    bool Captured { [Bind("isCaptured")] get; }

    // @property (nonatomic) CGFloat brightness __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Export("brightness")]
    nfloat Brightness { get; set; }

    // @property (nonatomic) BOOL wantsSoftwareDimming __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Export("wantsSoftwareDimming")]
    bool WantsSoftwareDimming { get; set; }

    // @property (readonly) id<UICoordinateSpace> _Nonnull coordinateSpace __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("coordinateSpace")]
    UICoordinateSpace CoordinateSpace { get; }

    // @property (readonly) id<UICoordinateSpace> _Nonnull fixedCoordinateSpace __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("fixedCoordinateSpace")]
    UICoordinateSpace FixedCoordinateSpace { get; }

    // @property (readonly, nonatomic) CGRect nativeBounds __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("nativeBounds")]
    CGRect NativeBounds { get; }

    // @property (readonly, nonatomic) CGFloat nativeScale __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("nativeScale")]
    nfloat NativeScale { get; }

    // -(CADisplayLink * _Nullable)displayLinkWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)sel __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("displayLinkWithTarget:selector:")]
    [return: NullAllowed]
    CADisplayLink DisplayLinkWithTarget(NSObject target, Selector sel);

    // @property (readonly) NSInteger maximumFramesPerSecond __attribute__((availability(ios, introduced=10_3)));
    [iOS(10, 3)]
    [Export("maximumFramesPerSecond")]
    nint MaximumFramesPerSecond { get; }

    // @property (readonly, nonatomic, weak) id<UIFocusItem> _Nullable focusedItem __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [NullAllowed, Export("focusedItem", ArgumentSemantic.Weak)]
    UIFocusItem FocusedItem { get; }

    // @property (readonly, nonatomic, weak) UIView * _Nullable focusedView __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [NullAllowed, Export("focusedView", ArgumentSemantic.Weak)]
    UIView FocusedView { get; }

    // @property (readonly, nonatomic) BOOL supportsFocus __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("supportsFocus")]
    bool SupportsFocus { get; }

    // @property (readonly, nonatomic) CGRect applicationFrame __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use -[UIScreen bounds]")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Use -[UIScreen bounds]")]
    [NoTV]
    [Export("applicationFrame")]
    CGRect ApplicationFrame { get; }
}

// @interface UISnapshotting (UIScreen)
[Category]
[BaseType(typeof(UIScreen))]
interface UIScreen_UISnapshotting
{
    // -(UIView * _Nonnull)snapshotViewAfterScreenUpdates:(BOOL)afterUpdates __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("snapshotViewAfterScreenUpdates:")]
    UIView SnapshotViewAfterScreenUpdates(bool afterUpdates);
}

// @interface UIScreenEdgePanGestureRecognizer : UIPanGestureRecognizer
[NoTV, iOS(7, 0)]
[BaseType(typeof(UIPanGestureRecognizer))]
interface UIScreenEdgePanGestureRecognizer
{
    // @property (assign, readwrite, nonatomic) UIRectEdge edges;
    [Export("edges", ArgumentSemantic.Assign)]
    UIRectEdge Edges { get; set; }
}

// @interface UIScreenMode : NSObject
[iOS(3, 2)]
[BaseType(typeof(NSObject))]
interface UIScreenMode
{
    // @property (readonly, nonatomic) CGSize size;
    [Export("size")]
    CGSize Size { get; }

    // @property (readonly, nonatomic) CGFloat pixelAspectRatio;
    [Export("pixelAspectRatio")]
    nfloat PixelAspectRatio { get; }
}

// @interface UISearchBar : UIView <UIBarPositioning, UITextInputTraits>
[iOS(2, 0)]
[BaseType(typeof(UIView))]
[DisableDefaultCtor]
interface UISearchBar : IUIBarPositioning, IUITextInputTraits
{
    // -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((availability(tvos, unavailable))) __attribute__((objc_designated_initializer));
    [NoTV]
    [Export("initWithFrame:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect frame);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((availability(tvos, unavailable))) __attribute__((objc_designated_initializer));
    [NoTV]
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (nonatomic) UIBarStyle barStyle __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("barStyle", ArgumentSemantic.Assign)]
    UIBarStyle BarStyle { get; set; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UISearchBarDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UISearchBarDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable text;
    [NullAllowed, Export("text")]
    string Text { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable prompt;
    [NullAllowed, Export("prompt")]
    string Prompt { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable placeholder;
    [NullAllowed, Export("placeholder")]
    string Placeholder { get; set; }

    // @property (nonatomic) BOOL showsBookmarkButton __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("showsBookmarkButton")]
    bool ShowsBookmarkButton { get; set; }

    // @property (nonatomic) BOOL showsCancelButton __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("showsCancelButton")]
    bool ShowsCancelButton { get; set; }

    // @property (nonatomic) BOOL showsSearchResultsButton __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_2)));
    [NoTV, iOS(3, 2)]
    [Export("showsSearchResultsButton")]
    bool ShowsSearchResultsButton { get; set; }

    // @property (getter = isSearchResultsButtonSelected, nonatomic) BOOL searchResultsButtonSelected __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_2)));
    [NoTV, iOS(3, 2)]
    [Export("searchResultsButtonSelected")]
    bool SearchResultsButtonSelected { [Bind("isSearchResultsButtonSelected")] get; set; }

    // -(void)setShowsCancelButton:(BOOL)showsCancelButton animated:(BOOL)animated __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("setShowsCancelButton:animated:")]
    void SetShowsCancelButton(bool showsCancelButton, bool animated);

    // @property (readonly, nonatomic, strong) UITextInputAssistantItem * _Nonnull inputAssistantItem __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0)));
    [NoWatch, NoTV, iOS(9, 0)]
    [Export("inputAssistantItem", ArgumentSemantic.Strong)]
    UITextInputAssistantItem InputAssistantItem { get; }

    // @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
    [Export("tintColor", ArgumentSemantic.Strong)]
    UIColor TintColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable barTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("barTintColor", ArgumentSemantic.Strong)]
    UIColor BarTintColor { get; set; }

    // @property (nonatomic) UISearchBarStyle searchBarStyle __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("searchBarStyle", ArgumentSemantic.Assign)]
    UISearchBarStyle SearchBarStyle { get; set; }

    // @property (getter = isTranslucent, assign, nonatomic) BOOL translucent __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("translucent")]
    bool Translucent { [Bind("isTranslucent")] get; set; }

    // @property (copy, nonatomic) NSArray<NSString *> * _Nullable scopeButtonTitles __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [NullAllowed, Export("scopeButtonTitles", ArgumentSemantic.Copy)]
    string[] ScopeButtonTitles { get; set; }

    // @property (nonatomic) NSInteger selectedScopeButtonIndex __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("selectedScopeButtonIndex")]
    nint SelectedScopeButtonIndex { get; set; }

    // @property (nonatomic) BOOL showsScopeBar __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("showsScopeBar")]
    bool ShowsScopeBar { get; set; }

    // @property (readwrite, nonatomic, strong) UIView * _Nullable inputAccessoryView;
    [NullAllowed, Export("inputAccessoryView", ArgumentSemantic.Strong)]
    UIView InputAccessoryView { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable backgroundImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("backgroundImage", ArgumentSemantic.Strong)]
    UIImage BackgroundImage { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable scopeBarBackgroundImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("scopeBarBackgroundImage", ArgumentSemantic.Strong)]
    UIImage ScopeBarBackgroundImage { get; set; }

    // -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("setBackgroundImage:forBarPosition:barMetrics:")]
    void SetBackgroundImage([NullAllowed] UIImage backgroundImage, UIBarPosition barPosition, UIBarMetrics barMetrics);

    // -(UIImage * _Nullable)backgroundImageForBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("backgroundImageForBarPosition:barMetrics:")]
    [return: NullAllowed]
    UIImage BackgroundImageForBarPosition(UIBarPosition barPosition, UIBarMetrics barMetrics);

    // -(void)setSearchFieldBackgroundImage:(UIImage * _Nullable)backgroundImage forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setSearchFieldBackgroundImage:forState:")]
    void SetSearchFieldBackgroundImage([NullAllowed] UIImage backgroundImage, UIControlState state);

    // -(UIImage * _Nullable)searchFieldBackgroundImageForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("searchFieldBackgroundImageForState:")]
    [return: NullAllowed]
    UIImage SearchFieldBackgroundImageForState(UIControlState state);

    // -(void)setImage:(UIImage * _Nullable)iconImage forSearchBarIcon:(UISearchBarIcon)icon state:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setImage:forSearchBarIcon:state:")]
    void SetImage([NullAllowed] UIImage iconImage, UISearchBarIcon icon, UIControlState state);

    // -(UIImage * _Nullable)imageForSearchBarIcon:(UISearchBarIcon)icon state:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("imageForSearchBarIcon:state:")]
    [return: NullAllowed]
    UIImage ImageForSearchBarIcon(UISearchBarIcon icon, UIControlState state);

    // -(void)setScopeBarButtonBackgroundImage:(UIImage * _Nullable)backgroundImage forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setScopeBarButtonBackgroundImage:forState:")]
    void SetScopeBarButtonBackgroundImage([NullAllowed] UIImage backgroundImage, UIControlState state);

    // -(UIImage * _Nullable)scopeBarButtonBackgroundImageForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("scopeBarButtonBackgroundImageForState:")]
    [return: NullAllowed]
    UIImage ScopeBarButtonBackgroundImageForState(UIControlState state);

    // -(void)setScopeBarButtonDividerImage:(UIImage * _Nullable)dividerImage forLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setScopeBarButtonDividerImage:forLeftSegmentState:rightSegmentState:")]
    void SetScopeBarButtonDividerImage([NullAllowed] UIImage dividerImage, UIControlState leftState, UIControlState rightState);

    // -(UIImage * _Nullable)scopeBarButtonDividerImageForLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("scopeBarButtonDividerImageForLeftSegmentState:rightSegmentState:")]
    [return: NullAllowed]
    UIImage ScopeBarButtonDividerImageForLeftSegmentState(UIControlState leftState, UIControlState rightState);

    // -(void)setScopeBarButtonTitleTextAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attributes forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setScopeBarButtonTitleTextAttributes:forState:")]
    void SetScopeBarButtonTitleTextAttributes([NullAllowed] NSDictionary<NSString, NSObject> attributes, UIControlState state);

    // -(NSDictionary<NSAttributedStringKey,id> * _Nullable)scopeBarButtonTitleTextAttributesForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("scopeBarButtonTitleTextAttributesForState:")]
    [return: NullAllowed]
    NSDictionary<NSString, NSObject> ScopeBarButtonTitleTextAttributesForState(UIControlState state);

    // @property (nonatomic) UIOffset searchFieldBackgroundPositionAdjustment __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("searchFieldBackgroundPositionAdjustment", ArgumentSemantic.Assign)]
    UIOffset SearchFieldBackgroundPositionAdjustment { get; set; }

    // @property (nonatomic) UIOffset searchTextPositionAdjustment __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("searchTextPositionAdjustment", ArgumentSemantic.Assign)]
    UIOffset SearchTextPositionAdjustment { get; set; }

    // -(void)setPositionAdjustment:(UIOffset)adjustment forSearchBarIcon:(UISearchBarIcon)icon __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setPositionAdjustment:forSearchBarIcon:")]
    void SetPositionAdjustment(UIOffset adjustment, UISearchBarIcon icon);

    // -(UIOffset)positionAdjustmentForSearchBarIcon:(UISearchBarIcon)icon __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("positionAdjustmentForSearchBarIcon:")]
    UIOffset PositionAdjustmentForSearchBarIcon(UISearchBarIcon icon);
}

// @protocol UISearchBarDelegate <UIBarPositioningDelegate>
[Protocol, Model]
interface UISearchBarDelegate : IUIBarPositioningDelegate
{
    // @optional -(BOOL)searchBarShouldBeginEditing:(UISearchBar * _Nonnull)searchBar;
    [Export("searchBarShouldBeginEditing:")]
    bool SearchBarShouldBeginEditing(UISearchBar searchBar);

    // @optional -(void)searchBarTextDidBeginEditing:(UISearchBar * _Nonnull)searchBar;
    [Export("searchBarTextDidBeginEditing:")]
    void SearchBarTextDidBeginEditing(UISearchBar searchBar);

    // @optional -(BOOL)searchBarShouldEndEditing:(UISearchBar * _Nonnull)searchBar;
    [Export("searchBarShouldEndEditing:")]
    bool SearchBarShouldEndEditing(UISearchBar searchBar);

    // @optional -(void)searchBarTextDidEndEditing:(UISearchBar * _Nonnull)searchBar;
    [Export("searchBarTextDidEndEditing:")]
    void SearchBarTextDidEndEditing(UISearchBar searchBar);

    // @optional -(void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
    [Export("searchBar:textDidChange:")]
    void SearchBar(UISearchBar searchBar, string searchText);

    // @optional -(BOOL)searchBar:(UISearchBar * _Nonnull)searchBar shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("searchBar:shouldChangeTextInRange:replacementText:")]
    bool SearchBar(UISearchBar searchBar, NSRange range, string text);

    // @optional -(void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
    [Export("searchBarSearchButtonClicked:")]
    void SearchBarSearchButtonClicked(UISearchBar searchBar);

    // @optional -(void)searchBarBookmarkButtonClicked:(UISearchBar * _Nonnull)searchBar __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("searchBarBookmarkButtonClicked:")]
    void SearchBarBookmarkButtonClicked(UISearchBar searchBar);

    // @optional -(void)searchBarCancelButtonClicked:(UISearchBar * _Nonnull)searchBar __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("searchBarCancelButtonClicked:")]
    void SearchBarCancelButtonClicked(UISearchBar searchBar);

    // @optional -(void)searchBarResultsListButtonClicked:(UISearchBar * _Nonnull)searchBar __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_2)));
    [NoTV, iOS(3, 2)]
    [Export("searchBarResultsListButtonClicked:")]
    void SearchBarResultsListButtonClicked(UISearchBar searchBar);

    // @optional -(void)searchBar:(UISearchBar * _Nonnull)searchBar selectedScopeButtonIndexDidChange:(NSInteger)selectedScope __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("searchBar:selectedScopeButtonIndexDidChange:")]
    void SearchBar(UISearchBar searchBar, nint selectedScope);
}

// @interface UISearchContainerViewController : UIViewController
[TV(9, 0), NoWatch, iOS(9, 1)]
[BaseType(typeof(UIViewController))]
interface UISearchContainerViewController
{
    // @property (readonly, nonatomic, strong) UISearchController * _Nonnull searchController;
    [Export("searchController", ArgumentSemantic.Strong)]
    UISearchController SearchController { get; }

    // -(instancetype _Nonnull)initWithSearchController:(UISearchController * _Nonnull)searchController;
    [Export("initWithSearchController:")]
    IntPtr Constructor(UISearchController searchController);
}

// @protocol UIViewControllerTransitionCoordinatorContext <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIViewControllerTransitionCoordinatorContext
{
    // @required @property (readonly, getter = isAnimated, nonatomic) BOOL animated;
    [Abstract]
    [Export("animated")]
    bool Animated { [Bind("isAnimated")] get; }

    // @required @property (readonly, nonatomic) UIModalPresentationStyle presentationStyle;
    [Abstract]
    [Export("presentationStyle")]
    UIModalPresentationStyle PresentationStyle { get; }

    // @required @property (readonly, nonatomic) BOOL initiallyInteractive;
    [Abstract]
    [Export("initiallyInteractive")]
    bool InitiallyInteractive { get; }

    // @required @property (readonly, nonatomic) BOOL isInterruptible __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Abstract]
    [Export("isInterruptible")]
    bool IsInterruptible { get; }

    // @required @property (readonly, getter = isInteractive, nonatomic) BOOL interactive;
    [Abstract]
    [Export("interactive")]
    bool Interactive { [Bind("isInteractive")] get; }

    // @required @property (readonly, getter = isCancelled, nonatomic) BOOL cancelled;
    [Abstract]
    [Export("cancelled")]
    bool Cancelled { [Bind("isCancelled")] get; }

    // @required @property (readonly, nonatomic) NSTimeInterval transitionDuration;
    [Abstract]
    [Export("transitionDuration")]
    double TransitionDuration { get; }

    // @required @property (readonly, nonatomic) CGFloat percentComplete;
    [Abstract]
    [Export("percentComplete")]
    nfloat PercentComplete { get; }

    // @required @property (readonly, nonatomic) CGFloat completionVelocity;
    [Abstract]
    [Export("completionVelocity")]
    nfloat CompletionVelocity { get; }

    // @required @property (readonly, nonatomic) UIViewAnimationCurve completionCurve;
    [Abstract]
    [Export("completionCurve")]
    UIViewAnimationCurve CompletionCurve { get; }

    // @required -(__kindof UIViewController * _Nullable)viewControllerForKey:(UITransitionContextViewControllerKey _Nonnull)key;
    [Abstract]
    [Export("viewControllerForKey:")]
    UIViewController ViewControllerForKey(string key);

    // @required -(__kindof UIView * _Nullable)viewForKey:(UITransitionContextViewKey _Nonnull)key __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("viewForKey:")]
    UIView ViewForKey(string key);

    // @required @property (readonly, nonatomic) UIView * _Nonnull containerView;
    [Abstract]
    [Export("containerView")]
    UIView ContainerView { get; }

    // @required @property (readonly, nonatomic) CGAffineTransform targetTransform __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("targetTransform")]
    CGAffineTransform TargetTransform { get; }
}

// @protocol UIViewControllerTransitionCoordinator <UIViewControllerTransitionCoordinatorContext>
[Protocol, Model]
interface UIViewControllerTransitionCoordinator : IUIViewControllerTransitionCoordinatorContext
{
    // @required -(BOOL)animateAlongsideTransition:(void (^ _Nullable)(id<UIViewControllerTransitionCoordinatorContext> _Nonnull))animation completion:(void (^ _Nullable)(id<UIViewControllerTransitionCoordinatorContext> _Nonnull))completion;
    [Abstract]
    [Export("animateAlongsideTransition:completion:")]
    bool AnimateAlongsideTransition([NullAllowed] Action<UIViewControllerTransitionCoordinatorContext> animation, [NullAllowed] Action<UIViewControllerTransitionCoordinatorContext> completion);

    // @required -(BOOL)animateAlongsideTransitionInView:(UIView * _Nullable)view animation:(void (^ _Nullable)(id<UIViewControllerTransitionCoordinatorContext> _Nonnull))animation completion:(void (^ _Nullable)(id<UIViewControllerTransitionCoordinatorContext> _Nonnull))completion;
    [Abstract]
    [Export("animateAlongsideTransitionInView:animation:completion:")]
    bool AnimateAlongsideTransitionInView([NullAllowed] UIView view, [NullAllowed] Action<UIViewControllerTransitionCoordinatorContext> animation, [NullAllowed] Action<UIViewControllerTransitionCoordinatorContext> completion);

    // @required -(void)notifyWhenInteractionEndsUsingBlock:(void (^ _Nonnull)(id<UIViewControllerTransitionCoordinatorContext> _Nonnull))handler __attribute__((availability(ios, introduced=7_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 7, 0, message: "Use notifyWhenInteractionChangesUsingBlock")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use notifyWhenInteractionChangesUsingBlock")]
    [Abstract]
    [Export("notifyWhenInteractionEndsUsingBlock:")]
    void NotifyWhenInteractionEndsUsingBlock(Action<UIViewControllerTransitionCoordinatorContext> handler);

    // @required -(void)notifyWhenInteractionChangesUsingBlock:(void (^ _Nonnull)(id<UIViewControllerTransitionCoordinatorContext> _Nonnull))handler __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Abstract]
    [Export("notifyWhenInteractionChangesUsingBlock:")]
    void NotifyWhenInteractionChangesUsingBlock(Action<UIViewControllerTransitionCoordinatorContext> handler);
}

// @interface UIViewControllerTransitionCoordinator (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UIViewControllerTransitionCoordinator
{
    // @property (readonly, nonatomic) id<UIViewControllerTransitionCoordinator> _Nullable transitionCoordinator __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("transitionCoordinator")]
    UIViewControllerTransitionCoordinator TransitionCoordinator { get; }
}

// @protocol UIAdaptivePresentationControllerDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIAdaptivePresentationControllerDelegate
{
    // @optional -(UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController * _Nonnull)controller;
    [Export("adaptivePresentationStyleForPresentationController:")]
    UIModalPresentationStyle AdaptivePresentationStyleForPresentationController(UIPresentationController controller);

    // @optional -(UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController * _Nonnull)controller traitCollection:(UITraitCollection * _Nonnull)traitCollection __attribute__((availability(ios, introduced=8_3)));
    [iOS(8, 3)]
    [Export("adaptivePresentationStyleForPresentationController:traitCollection:")]
    UIModalPresentationStyle AdaptivePresentationStyleForPresentationController(UIPresentationController controller, UITraitCollection traitCollection);

    // @optional -(UIViewController * _Nullable)presentationController:(UIPresentationController * _Nonnull)controller viewControllerForAdaptivePresentationStyle:(UIModalPresentationStyle)style;
    [Export("presentationController:viewControllerForAdaptivePresentationStyle:")]
    [return: NullAllowed]
    UIViewController PresentationController(UIPresentationController controller, UIModalPresentationStyle style);

    // @optional -(void)presentationController:(UIPresentationController * _Nonnull)presentationController willPresentWithAdaptiveStyle:(UIModalPresentationStyle)style transitionCoordinator:(id<UIViewControllerTransitionCoordinator> _Nullable)transitionCoordinator __attribute__((availability(ios, introduced=8_3)));
    [iOS(8, 3)]
    [Export("presentationController:willPresentWithAdaptiveStyle:transitionCoordinator:")]
    void PresentationController(UIPresentationController presentationController, UIModalPresentationStyle style, [NullAllowed] UIViewControllerTransitionCoordinator transitionCoordinator);
}

// @interface UIPresentationController : NSObject <UIAppearanceContainer, UITraitEnvironment, UIContentContainer, UIFocusEnvironment>
[iOS(8, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIPresentationController : IUIAppearanceContainer, IUITraitEnvironment, IUIContentContainer, IUIFocusEnvironment
{
    // @property (readonly, nonatomic, strong) UIViewController * _Nonnull presentingViewController;
    [Export("presentingViewController", ArgumentSemantic.Strong)]
    UIViewController PresentingViewController { get; }

    // @property (readonly, nonatomic, strong) UIViewController * _Nonnull presentedViewController;
    [Export("presentedViewController", ArgumentSemantic.Strong)]
    UIViewController PresentedViewController { get; }

    // @property (readonly, nonatomic) UIModalPresentationStyle presentationStyle;
    [Export("presentationStyle")]
    UIModalPresentationStyle PresentationStyle { get; }

    // @property (readonly, nonatomic, strong) UIView * _Nullable containerView;
    [NullAllowed, Export("containerView", ArgumentSemantic.Strong)]
    UIView ContainerView { get; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIAdaptivePresentationControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIAdaptivePresentationControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // -(instancetype _Nonnull)initWithPresentedViewController:(UIViewController * _Nonnull)presentedViewController presentingViewController:(UIViewController * _Nullable)presentingViewController __attribute__((objc_designated_initializer));
    [Export("initWithPresentedViewController:presentingViewController:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIViewController presentedViewController, [NullAllowed] UIViewController presentingViewController);

    // @property (readonly, nonatomic) UIModalPresentationStyle adaptivePresentationStyle;
    [Export("adaptivePresentationStyle")]
    UIModalPresentationStyle AdaptivePresentationStyle { get; }

    // -(UIModalPresentationStyle)adaptivePresentationStyleForTraitCollection:(UITraitCollection * _Nonnull)traitCollection __attribute__((availability(ios, introduced=8_3)));
    [iOS(8, 3)]
    [Export("adaptivePresentationStyleForTraitCollection:")]
    UIModalPresentationStyle AdaptivePresentationStyleForTraitCollection(UITraitCollection traitCollection);

    // -(void)containerViewWillLayoutSubviews;
    [Export("containerViewWillLayoutSubviews")]
    void ContainerViewWillLayoutSubviews();

    // -(void)containerViewDidLayoutSubviews;
    [Export("containerViewDidLayoutSubviews")]
    void ContainerViewDidLayoutSubviews();

    // @property (readonly, nonatomic) UIView * _Nullable presentedView;
    [NullAllowed, Export("presentedView")]
    UIView PresentedView { get; }

    // @property (readonly, nonatomic) CGRect frameOfPresentedViewInContainerView;
    [Export("frameOfPresentedViewInContainerView")]
    CGRect FrameOfPresentedViewInContainerView { get; }

    // @property (readonly, nonatomic) BOOL shouldPresentInFullscreen;
    [Export("shouldPresentInFullscreen")]
    bool ShouldPresentInFullscreen { get; }

    // @property (readonly, nonatomic) BOOL shouldRemovePresentersView;
    [Export("shouldRemovePresentersView")]
    bool ShouldRemovePresentersView { get; }

    // -(void)presentationTransitionWillBegin;
    [Export("presentationTransitionWillBegin")]
    void PresentationTransitionWillBegin();

    // -(void)presentationTransitionDidEnd:(BOOL)completed;
    [Export("presentationTransitionDidEnd:")]
    void PresentationTransitionDidEnd(bool completed);

    // -(void)dismissalTransitionWillBegin;
    [Export("dismissalTransitionWillBegin")]
    void DismissalTransitionWillBegin();

    // -(void)dismissalTransitionDidEnd:(BOOL)completed;
    [Export("dismissalTransitionDidEnd:")]
    void DismissalTransitionDidEnd(bool completed);

    // @property (copy, nonatomic) UITraitCollection * _Nullable overrideTraitCollection;
    [NullAllowed, Export("overrideTraitCollection", ArgumentSemantic.Copy)]
    UITraitCollection OverrideTraitCollection { get; set; }
}

// @protocol UITimingCurveProvider <NSCoding, NSCopying>
[Protocol, Model]
interface UITimingCurveProvider : INSCoding, INSCopying
{
    // @required @property (readonly, nonatomic) UITimingCurveType timingCurveType;
    [Abstract]
    [Export("timingCurveType")]
    UITimingCurveType TimingCurveType { get; }

    // @required @property (readonly, nonatomic) UICubicTimingParameters * _Nullable cubicTimingParameters;
    [Abstract]
    [NullAllowed, Export("cubicTimingParameters")]
    UICubicTimingParameters CubicTimingParameters { get; }

    // @required @property (readonly, nonatomic) UISpringTimingParameters * _Nullable springTimingParameters;
    [Abstract]
    [NullAllowed, Export("springTimingParameters")]
    UISpringTimingParameters SpringTimingParameters { get; }
}

// @interface UICubicTimingParameters : NSObject <UITimingCurveProvider>
[iOS(10, 0)]
[BaseType(typeof(NSObject))]
interface UICubicTimingParameters : IUITimingCurveProvider
{
    // @property (readonly, nonatomic) UIViewAnimationCurve animationCurve;
    [Export("animationCurve")]
    UIViewAnimationCurve AnimationCurve { get; }

    // @property (readonly, nonatomic) CGPoint controlPoint1;
    [Export("controlPoint1")]
    CGPoint ControlPoint1 { get; }

    // @property (readonly, nonatomic) CGPoint controlPoint2;
    [Export("controlPoint2")]
    CGPoint ControlPoint2 { get; }

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // -(instancetype _Nonnull)initWithAnimationCurve:(UIViewAnimationCurve)curve __attribute__((objc_designated_initializer));
    [Export("initWithAnimationCurve:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIViewAnimationCurve curve);

    // -(instancetype _Nonnull)initWithControlPoint1:(CGPoint)point1 controlPoint2:(CGPoint)point2 __attribute__((objc_designated_initializer));
    [Export("initWithControlPoint1:controlPoint2:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGPoint point1, CGPoint point2);
}

// @interface UISpringTimingParameters : NSObject <UITimingCurveProvider>
[iOS(10, 0)]
[BaseType(typeof(NSObject))]
interface UISpringTimingParameters : IUITimingCurveProvider
{
    // @property (readonly, nonatomic) CGVector initialVelocity;
    [Export("initialVelocity")]
    CGVector InitialVelocity { get; }

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // -(instancetype _Nonnull)initWithDampingRatio:(CGFloat)ratio initialVelocity:(CGVector)velocity __attribute__((objc_designated_initializer));
    [Export("initWithDampingRatio:initialVelocity:")]
    [DesignatedInitializer]
    IntPtr Constructor(nfloat ratio, CGVector velocity);

    // -(instancetype _Nonnull)initWithMass:(CGFloat)mass stiffness:(CGFloat)stiffness damping:(CGFloat)damping initialVelocity:(CGVector)velocity __attribute__((objc_designated_initializer));
    [Export("initWithMass:stiffness:damping:initialVelocity:")]
    [DesignatedInitializer]
    IntPtr Constructor(nfloat mass, nfloat stiffness, nfloat damping, CGVector velocity);

    // -(instancetype _Nonnull)initWithDampingRatio:(CGFloat)ratio;
    [Export("initWithDampingRatio:")]
    IntPtr Constructor(nfloat ratio);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UITransitionContextViewControllerKey _Nonnull UITransitionContextFromViewControllerKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UITransitionContextFromViewControllerKey", "__Internal")]
    NSString UITransitionContextFromViewControllerKey { get; }

    // extern const UITransitionContextViewControllerKey _Nonnull UITransitionContextToViewControllerKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("UITransitionContextToViewControllerKey", "__Internal")]
    NSString UITransitionContextToViewControllerKey { get; }

    // extern const UITransitionContextViewKey _Nonnull UITransitionContextFromViewKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UITransitionContextFromViewKey", "__Internal")]
    NSString UITransitionContextFromViewKey { get; }

    // extern const UITransitionContextViewKey _Nonnull UITransitionContextToViewKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UITransitionContextToViewKey", "__Internal")]
    NSString UITransitionContextToViewKey { get; }
}

// @protocol UIViewControllerContextTransitioning <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIViewControllerContextTransitioning
{
    // @required @property (readonly, nonatomic) UIView * _Nonnull containerView;
    [Abstract]
    [Export("containerView")]
    UIView ContainerView { get; }

    // @required @property (readonly, getter = isAnimated, nonatomic) BOOL animated;
    [Abstract]
    [Export("animated")]
    bool Animated { [Bind("isAnimated")] get; }

    // @required @property (readonly, getter = isInteractive, nonatomic) BOOL interactive;
    [Abstract]
    [Export("interactive")]
    bool Interactive { [Bind("isInteractive")] get; }

    // @required @property (readonly, nonatomic) BOOL transitionWasCancelled;
    [Abstract]
    [Export("transitionWasCancelled")]
    bool TransitionWasCancelled { get; }

    // @required @property (readonly, nonatomic) UIModalPresentationStyle presentationStyle;
    [Abstract]
    [Export("presentationStyle")]
    UIModalPresentationStyle PresentationStyle { get; }

    // @required -(void)updateInteractiveTransition:(CGFloat)percentComplete;
    [Abstract]
    [Export("updateInteractiveTransition:")]
    void UpdateInteractiveTransition(nfloat percentComplete);

    // @required -(void)finishInteractiveTransition;
    [Abstract]
    [Export("finishInteractiveTransition")]
    void FinishInteractiveTransition();

    // @required -(void)cancelInteractiveTransition;
    [Abstract]
    [Export("cancelInteractiveTransition")]
    void CancelInteractiveTransition();

    // @required -(void)pauseInteractiveTransition __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Abstract]
    [Export("pauseInteractiveTransition")]
    void PauseInteractiveTransition();

    // @required -(void)completeTransition:(BOOL)didComplete;
    [Abstract]
    [Export("completeTransition:")]
    void CompleteTransition(bool didComplete);

    // @required -(__kindof UIViewController * _Nullable)viewControllerForKey:(UITransitionContextViewControllerKey _Nonnull)key;
    [Abstract]
    [Export("viewControllerForKey:")]
    UIViewController ViewControllerForKey(string key);

    // @required -(__kindof UIView * _Nullable)viewForKey:(UITransitionContextViewKey _Nonnull)key __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("viewForKey:")]
    UIView ViewForKey(string key);

    // @required @property (readonly, nonatomic) CGAffineTransform targetTransform __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Abstract]
    [Export("targetTransform")]
    CGAffineTransform TargetTransform { get; }

    // @required -(CGRect)initialFrameForViewController:(UIViewController * _Nonnull)vc;
    [Abstract]
    [Export("initialFrameForViewController:")]
    CGRect InitialFrameForViewController(UIViewController vc);

    // @required -(CGRect)finalFrameForViewController:(UIViewController * _Nonnull)vc;
    [Abstract]
    [Export("finalFrameForViewController:")]
    CGRect FinalFrameForViewController(UIViewController vc);
}

// @protocol UIViewControllerAnimatedTransitioning <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIViewControllerAnimatedTransitioning
{
    // @required -(NSTimeInterval)transitionDuration:(id<UIViewControllerContextTransitioning> _Nullable)transitionContext;
    [Abstract]
    [Export("transitionDuration:")]
    double TransitionDuration([NullAllowed] UIViewControllerContextTransitioning transitionContext);

    // @required -(void)animateTransition:(id<UIViewControllerContextTransitioning> _Nonnull)transitionContext;
    [Abstract]
    [Export("animateTransition:")]
    void AnimateTransition(UIViewControllerContextTransitioning transitionContext);

    // @optional -(id<UIViewImplicitlyAnimating> _Nonnull)interruptibleAnimatorForTransition:(id<UIViewControllerContextTransitioning> _Nonnull)transitionContext __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("interruptibleAnimatorForTransition:")]
    UIViewImplicitlyAnimating InterruptibleAnimatorForTransition(UIViewControllerContextTransitioning transitionContext);

    // @optional -(void)animationEnded:(BOOL)transitionCompleted;
    [Export("animationEnded:")]
    void AnimationEnded(bool transitionCompleted);
}

// @protocol UIViewControllerInteractiveTransitioning <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIViewControllerInteractiveTransitioning
{
    // @required -(void)startInteractiveTransition:(id<UIViewControllerContextTransitioning> _Nonnull)transitionContext;
    [Abstract]
    [Export("startInteractiveTransition:")]
    void StartInteractiveTransition(UIViewControllerContextTransitioning transitionContext);

    // @optional @property (readonly, nonatomic) CGFloat completionSpeed;
    [Export("completionSpeed")]
    nfloat CompletionSpeed { get; }

    // @optional @property (readonly, nonatomic) UIViewAnimationCurve completionCurve;
    [Export("completionCurve")]
    UIViewAnimationCurve CompletionCurve { get; }

    // @optional @property (readonly, nonatomic) BOOL wantsInteractiveStart __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("wantsInteractiveStart")]
    bool WantsInteractiveStart { get; }
}

// @protocol UIViewControllerTransitioningDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIViewControllerTransitioningDelegate
{
    // @optional -(id<UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source;
    [Export("animationControllerForPresentedController:presentingController:sourceController:")]
    [return: NullAllowed]
    UIViewControllerAnimatedTransitioning AnimationControllerForPresentedController(UIViewController presented, UIViewController presenting, UIViewController source);

    // @optional -(id<UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed;
    [Export("animationControllerForDismissedController:")]
    [return: NullAllowed]
    UIViewControllerAnimatedTransitioning AnimationControllerForDismissedController(UIViewController dismissed);

    // @optional -(id<UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForPresentation:(id<UIViewControllerAnimatedTransitioning> _Nonnull)animator;
    [Export("interactionControllerForPresentation:")]
    [return: NullAllowed]
    UIViewControllerInteractiveTransitioning InteractionControllerForPresentation(UIViewControllerAnimatedTransitioning animator);

    // @optional -(id<UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForDismissal:(id<UIViewControllerAnimatedTransitioning> _Nonnull)animator;
    [Export("interactionControllerForDismissal:")]
    [return: NullAllowed]
    UIViewControllerInteractiveTransitioning InteractionControllerForDismissal(UIViewControllerAnimatedTransitioning animator);

    // @optional -(UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("presentationControllerForPresentedViewController:presentingViewController:sourceViewController:")]
    [return: NullAllowed]
    UIPresentationController PresentationControllerForPresentedViewController(UIViewController presented, [NullAllowed] UIViewController presenting, UIViewController source);
}

// @interface UIPercentDrivenInteractiveTransition : NSObject <UIViewControllerInteractiveTransitioning>
[iOS(7, 0)]
[BaseType(typeof(NSObject))]
interface UIPercentDrivenInteractiveTransition : IUIViewControllerInteractiveTransitioning
{
    // @property (readonly) CGFloat duration;
    [Export("duration")]
    nfloat Duration { get; }

    // @property (readonly) CGFloat percentComplete;
    [Export("percentComplete")]
    nfloat PercentComplete { get; }

    // @property (assign, nonatomic) CGFloat completionSpeed;
    [Export("completionSpeed")]
    nfloat CompletionSpeed { get; set; }

    // @property (assign, nonatomic) UIViewAnimationCurve completionCurve;
    [Export("completionCurve", ArgumentSemantic.Assign)]
    UIViewAnimationCurve CompletionCurve { get; set; }

    // @property (nonatomic, strong) id<UITimingCurveProvider> _Nullable timingCurve __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [NullAllowed, Export("timingCurve", ArgumentSemantic.Strong)]
    UITimingCurveProvider TimingCurve { get; set; }

    // @property (nonatomic) BOOL wantsInteractiveStart __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("wantsInteractiveStart")]
    bool WantsInteractiveStart { get; set; }

    // -(void)pauseInteractiveTransition __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("pauseInteractiveTransition")]
    void PauseInteractiveTransition();

    // -(void)updateInteractiveTransition:(CGFloat)percentComplete;
    [Export("updateInteractiveTransition:")]
    void UpdateInteractiveTransition(nfloat percentComplete);

    // -(void)cancelInteractiveTransition;
    [Export("cancelInteractiveTransition")]
    void CancelInteractiveTransition();

    // -(void)finishInteractiveTransition;
    [Export("finishInteractiveTransition")]
    void FinishInteractiveTransition();
}

// @protocol UISearchControllerDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UISearchControllerDelegate
{
    // @optional -(void)willPresentSearchController:(UISearchController * _Nonnull)searchController;
    [Export("willPresentSearchController:")]
    void WillPresentSearchController(UISearchController searchController);

    // @optional -(void)didPresentSearchController:(UISearchController * _Nonnull)searchController;
    [Export("didPresentSearchController:")]
    void DidPresentSearchController(UISearchController searchController);

    // @optional -(void)willDismissSearchController:(UISearchController * _Nonnull)searchController;
    [Export("willDismissSearchController:")]
    void WillDismissSearchController(UISearchController searchController);

    // @optional -(void)didDismissSearchController:(UISearchController * _Nonnull)searchController;
    [Export("didDismissSearchController:")]
    void DidDismissSearchController(UISearchController searchController);

    // @optional -(void)presentSearchController:(UISearchController * _Nonnull)searchController;
    [Export("presentSearchController:")]
    void PresentSearchController(UISearchController searchController);
}

// @protocol UISearchResultsUpdating <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UISearchResultsUpdating
{
    // @required -(void)updateSearchResultsForSearchController:(UISearchController * _Nonnull)searchController;
    [Abstract]
    [Export("updateSearchResultsForSearchController:")]
    void UpdateSearchResultsForSearchController(UISearchController searchController);
}

// @interface UISearchController : UIViewController <UIViewControllerTransitioningDelegate, UIViewControllerAnimatedTransitioning>
[iOS(8, 0)]
[BaseType(typeof(UIViewController))]
interface UISearchController : IUIViewControllerTransitioningDelegate, IUIViewControllerAnimatedTransitioning
{
    // -(instancetype _Nonnull)initWithSearchResultsController:(UIViewController * _Nullable)searchResultsController;
    [Export("initWithSearchResultsController:")]
    IntPtr Constructor([NullAllowed] UIViewController searchResultsController);

    // @property (nonatomic, weak) id<UISearchResultsUpdating> _Nullable searchResultsUpdater;
    [NullAllowed, Export("searchResultsUpdater", ArgumentSemantic.Weak)]
    UISearchResultsUpdating SearchResultsUpdater { get; set; }

    // @property (getter = isActive, assign, nonatomic) BOOL active;
    [Export("active")]
    bool Active { [Bind("isActive")] get; set; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UISearchControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UISearchControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (assign, nonatomic) BOOL dimsBackgroundDuringPresentation __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("dimsBackgroundDuringPresentation")]
    bool DimsBackgroundDuringPresentation { get; set; }

    // @property (assign, nonatomic) BOOL obscuresBackgroundDuringPresentation __attribute__((availability(ios, introduced=9_1)));
    [iOS(9, 1)]
    [Export("obscuresBackgroundDuringPresentation")]
    bool ObscuresBackgroundDuringPresentation { get; set; }

    // @property (assign, nonatomic) BOOL hidesNavigationBarDuringPresentation;
    [Export("hidesNavigationBarDuringPresentation")]
    bool HidesNavigationBarDuringPresentation { get; set; }

    // @property (readonly, nonatomic, strong) UIViewController * _Nullable searchResultsController;
    [NullAllowed, Export("searchResultsController", ArgumentSemantic.Strong)]
    UIViewController SearchResultsController { get; }

    // @property (readonly, nonatomic, strong) UISearchBar * _Nonnull searchBar;
    [Export("searchBar", ArgumentSemantic.Strong)]
    UISearchBar SearchBar { get; }
}

// @interface UISwipeGestureRecognizer : UIGestureRecognizer
[iOS(3, 2)]
[BaseType(typeof(UIGestureRecognizer))]
interface UISwipeGestureRecognizer
{
    // @property (nonatomic) NSUInteger numberOfTouchesRequired __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("numberOfTouchesRequired")]
    nuint NumberOfTouchesRequired { get; set; }

    // @property (nonatomic) UISwipeGestureRecognizerDirection direction;
    [Export("direction", ArgumentSemantic.Assign)]
    UISwipeGestureRecognizerDirection Direction { get; set; }
}

// typedef void (^UIContextualActionHandler)(UIContextualAction * _Nonnull, __kindof UIView * _Nonnull, void (^ _Nonnull)(BOOL));
delegate void UIContextualActionHandler(UIContextualAction arg0, UIView arg1, Action<bool> arg2);

// @interface UIContextualAction : NSObject
[NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
interface UIContextualAction
{
    // +(instancetype _Nonnull)contextualActionWithStyle:(UIContextualActionStyle)style title:(NSString * _Nullable)title handler:(UIContextualActionHandler _Nonnull)handler;
    [Static]
    [Export("contextualActionWithStyle:title:handler:")]
    UIContextualAction ContextualActionWithStyle(UIContextualActionStyle style, [NullAllowed] string title, UIContextualActionHandler handler);

    // @property (readonly, nonatomic) UIContextualActionStyle style;
    [Export("style")]
    UIContextualActionStyle Style { get; }

    // @property (readonly, copy, nonatomic) UIContextualActionHandler _Nonnull handler;
    [Export("handler", ArgumentSemantic.Copy)]
    UIContextualActionHandler Handler { get; }

    // @property (copy, nonatomic) NSString * _Nullable title;
    [NullAllowed, Export("title")]
    string Title { get; set; }

    // @property (copy, nonatomic) UIColor * _Null_unspecified backgroundColor;
    [Export("backgroundColor", ArgumentSemantic.Copy)]
    UIColor BackgroundColor { get; set; }

    // @property (copy, nonatomic) UIImage * _Nullable image;
    [NullAllowed, Export("image", ArgumentSemantic.Copy)]
    UIImage Image { get; set; }
}

// @interface UISwipeActionsConfiguration : NSObject
[NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
interface UISwipeActionsConfiguration
{
    // +(instancetype _Nonnull)configurationWithActions:(NSArray<UIContextualAction *> * _Nonnull)actions;
    [Static]
    [Export("configurationWithActions:")]
    UISwipeActionsConfiguration ConfigurationWithActions(UIContextualAction[] actions);

    // @property (readonly, copy, nonatomic) NSArray<UIContextualAction *> * _Nonnull actions;
    [Export("actions", ArgumentSemantic.Copy)]
    UIContextualAction[] Actions { get; }

    // @property (nonatomic) BOOL performsFirstActionWithFullSwipe;
    [Export("performsFirstActionWithFullSwipe")]
    bool PerformsFirstActionWithFullSwipe { get; set; }
}

// @interface UITableViewCell : UIView <NSCoding, UIGestureRecognizerDelegate>
[iOS(2, 0)]
[BaseType(typeof(UIView))]
interface UITableViewCell : INSCoding, IUIGestureRecognizerDelegate
{
    // -(instancetype _Nonnull)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier __attribute__((objc_designated_initializer)) __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("initWithStyle:reuseIdentifier:")]
    [DesignatedInitializer]
    IntPtr Constructor(UITableViewCellStyle style, [NullAllowed] string reuseIdentifier);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (readonly, nonatomic, strong) UIImageView * _Nullable imageView __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [NullAllowed, Export("imageView", ArgumentSemantic.Strong)]
    UIImageView ImageView { get; }

    // @property (readonly, nonatomic, strong) UILabel * _Nullable textLabel __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [NullAllowed, Export("textLabel", ArgumentSemantic.Strong)]
    UILabel TextLabel { get; }

    // @property (readonly, nonatomic, strong) UILabel * _Nullable detailTextLabel __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [NullAllowed, Export("detailTextLabel", ArgumentSemantic.Strong)]
    UILabel DetailTextLabel { get; }

    // @property (readonly, nonatomic, strong) UIView * _Nonnull contentView;
    [Export("contentView", ArgumentSemantic.Strong)]
    UIView ContentView { get; }

    // @property (nonatomic, strong) UIView * _Nullable backgroundView;
    [NullAllowed, Export("backgroundView", ArgumentSemantic.Strong)]
    UIView BackgroundView { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable selectedBackgroundView;
    [NullAllowed, Export("selectedBackgroundView", ArgumentSemantic.Strong)]
    UIView SelectedBackgroundView { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable multipleSelectionBackgroundView __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("multipleSelectionBackgroundView", ArgumentSemantic.Strong)]
    UIView MultipleSelectionBackgroundView { get; set; }

    // @property (readonly, copy, nonatomic) NSString * _Nullable reuseIdentifier;
    [NullAllowed, Export("reuseIdentifier")]
    string ReuseIdentifier { get; }

    // -(void)prepareForReuse __attribute__((objc_requires_super));
    [Export("prepareForReuse")]
    [RequiresSuper]
    void PrepareForReuse();

    // @property (nonatomic) UITableViewCellSelectionStyle selectionStyle;
    [Export("selectionStyle", ArgumentSemantic.Assign)]
    UITableViewCellSelectionStyle SelectionStyle { get; set; }

    // @property (getter = isSelected, nonatomic) BOOL selected;
    [Export("selected")]
    bool Selected { [Bind("isSelected")] get; set; }

    // @property (getter = isHighlighted, nonatomic) BOOL highlighted;
    [Export("highlighted")]
    bool Highlighted { [Bind("isHighlighted")] get; set; }

    // -(void)setSelected:(BOOL)selected animated:(BOOL)animated;
    [Export("setSelected:animated:")]
    void SetSelected(bool selected, bool animated);

    // -(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
    [Export("setHighlighted:animated:")]
    void SetHighlighted(bool highlighted, bool animated);

    // @property (readonly, nonatomic) UITableViewCellEditingStyle editingStyle;
    [Export("editingStyle")]
    UITableViewCellEditingStyle EditingStyle { get; }

    // @property (nonatomic) BOOL showsReorderControl;
    [Export("showsReorderControl")]
    bool ShowsReorderControl { get; set; }

    // @property (nonatomic) BOOL shouldIndentWhileEditing;
    [Export("shouldIndentWhileEditing")]
    bool ShouldIndentWhileEditing { get; set; }

    // @property (nonatomic) UITableViewCellAccessoryType accessoryType;
    [Export("accessoryType", ArgumentSemantic.Assign)]
    UITableViewCellAccessoryType AccessoryType { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable accessoryView;
    [NullAllowed, Export("accessoryView", ArgumentSemantic.Strong)]
    UIView AccessoryView { get; set; }

    // @property (nonatomic) UITableViewCellAccessoryType editingAccessoryType;
    [Export("editingAccessoryType", ArgumentSemantic.Assign)]
    UITableViewCellAccessoryType EditingAccessoryType { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable editingAccessoryView;
    [NullAllowed, Export("editingAccessoryView", ArgumentSemantic.Strong)]
    UIView EditingAccessoryView { get; set; }

    // @property (nonatomic) NSInteger indentationLevel;
    [Export("indentationLevel")]
    nint IndentationLevel { get; set; }

    // @property (nonatomic) CGFloat indentationWidth;
    [Export("indentationWidth")]
    nfloat IndentationWidth { get; set; }

    // @property (nonatomic) UIEdgeInsets separatorInset __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("separatorInset", ArgumentSemantic.Assign)]
    UIEdgeInsets SeparatorInset { get; set; }

    // @property (getter = isEditing, nonatomic) BOOL editing;
    [Export("editing")]
    bool Editing { [Bind("isEditing")] get; set; }

    // -(void)setEditing:(BOOL)editing animated:(BOOL)animated;
    [Export("setEditing:animated:")]
    void SetEditing(bool editing, bool animated);

    // @property (readonly, nonatomic) BOOL showingDeleteConfirmation;
    [Export("showingDeleteConfirmation")]
    bool ShowingDeleteConfirmation { get; }

    // @property (nonatomic) UITableViewCellFocusStyle focusStyle __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("focusStyle", ArgumentSemantic.Assign)]
    UITableViewCellFocusStyle FocusStyle { get; set; }

    // -(void)willTransitionToState:(UITableViewCellStateMask)state __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("willTransitionToState:")]
    void WillTransitionToState(UITableViewCellStateMask state);

    // -(void)didTransitionToState:(UITableViewCellStateMask)state __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("didTransitionToState:")]
    void DidTransitionToState(UITableViewCellStateMask state);

    // -(void)dragStateDidChange:(UITableViewCellDragState)dragState __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("dragStateDidChange:")]
    void DragStateDidChange(UITableViewCellDragState dragState);

    // @property (nonatomic) BOOL userInteractionEnabledWhileDragging __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("userInteractionEnabledWhileDragging")]
    bool UserInteractionEnabledWhileDragging { get; set; }
}

// @interface UIDeprecated (UITableViewCell)
[Category]
[BaseType(typeof(UITableViewCell))]
interface UITableViewCell_UIDeprecated
{
    // -(id _Nonnull)initWithFrame:(CGRect)frame reuseIdentifier:(NSString * _Nullable)reuseIdentifier __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [Export("initWithFrame:reuseIdentifier:")]
    IntPtr Constructor(CGRect frame, [NullAllowed] string reuseIdentifier);

    // @property (copy, nonatomic) NSString * _Nullable text __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [NullAllowed, Export("text")]
    string Text { get; set; }

    // @property (nonatomic, strong) UIFont * _Nullable font __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [NullAllowed, Export("font", ArgumentSemantic.Strong)]
    UIFont Font { get; set; }

    // @property (nonatomic) NSTextAlignment textAlignment __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [Export("textAlignment", ArgumentSemantic.Assign)]
    NSTextAlignment TextAlignment { get; set; }

    // @property (nonatomic) NSLineBreakMode lineBreakMode __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [Export("lineBreakMode", ArgumentSemantic.Assign)]
    NSLineBreakMode LineBreakMode { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable textColor __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [NullAllowed, Export("textColor", ArgumentSemantic.Strong)]
    UIColor TextColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable selectedTextColor __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [NullAllowed, Export("selectedTextColor", ArgumentSemantic.Strong)]
    UIColor SelectedTextColor { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable image __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [NullAllowed, Export("image", ArgumentSemantic.Strong)]
    UIImage Image { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable selectedImage __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [NullAllowed, Export("selectedImage", ArgumentSemantic.Strong)]
    UIImage SelectedImage { get; set; }

    // @property (nonatomic) BOOL hidesAccessoryWhenEditing __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [Export("hidesAccessoryWhenEditing")]
    bool HidesAccessoryWhenEditing { get; set; }

    // @property (assign, nonatomic) id _Nullable target __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [NullAllowed, Export("target", ArgumentSemantic.Assign)]
    NSObject Target { get; set; }

    // @property (nonatomic) SEL _Nullable editAction __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [NullAllowed, Export("editAction", ArgumentSemantic.Assign)]
    Selector EditAction { get; set; }

    // @property (nonatomic) SEL _Nullable accessoryAction __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [NullAllowed, Export("accessoryAction", ArgumentSemantic.Assign)]
    Selector AccessoryAction { get; set; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const _Nonnull UITableViewIndexSearch __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Field("UITableViewIndexSearch", "__Internal")]
    NSString UITableViewIndexSearch { get; }

    // extern const CGFloat UITableViewAutomaticDimension __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Field("UITableViewAutomaticDimension", "__Internal")]
    nfloat UITableViewAutomaticDimension { get; }
}

// @interface UITableViewRowAction : NSObject <NSCopying>
[NoTV, iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface UITableViewRowAction : INSCopying
{
    // +(instancetype _Nonnull)rowActionWithStyle:(UITableViewRowActionStyle)style title:(NSString * _Nullable)title handler:(void (^ _Nonnull)(UITableViewRowAction * _Nonnull, NSIndexPath * _Nonnull))handler;
    [Static]
    [Export("rowActionWithStyle:title:handler:")]
    UITableViewRowAction RowActionWithStyle(UITableViewRowActionStyle style, [NullAllowed] string title, Action<UITableViewRowAction, NSIndexPath> handler);

    // @property (readonly, nonatomic) UITableViewRowActionStyle style;
    [Export("style")]
    UITableViewRowActionStyle Style { get; }

    // @property (copy, nonatomic) NSString * _Nullable title;
    [NullAllowed, Export("title")]
    string Title { get; set; }

    // @property (copy, nonatomic) UIColor * _Nullable backgroundColor;
    [NullAllowed, Export("backgroundColor", ArgumentSemantic.Copy)]
    UIColor BackgroundColor { get; set; }

    // @property (copy, nonatomic) UIVisualEffect * _Nullable backgroundEffect;
    [NullAllowed, Export("backgroundEffect", ArgumentSemantic.Copy)]
    UIVisualEffect BackgroundEffect { get; set; }
}

// @interface UITableViewFocusUpdateContext : UIFocusUpdateContext
[iOS(9, 0)]
[BaseType(typeof(UIFocusUpdateContext))]
interface UITableViewFocusUpdateContext
{
    // @property (readonly, nonatomic, strong) NSIndexPath * _Nullable previouslyFocusedIndexPath;
    [NullAllowed, Export("previouslyFocusedIndexPath", ArgumentSemantic.Strong)]
    NSIndexPath PreviouslyFocusedIndexPath { get; }

    // @property (readonly, nonatomic, strong) NSIndexPath * _Nullable nextFocusedIndexPath;
    [NullAllowed, Export("nextFocusedIndexPath", ArgumentSemantic.Strong)]
    NSIndexPath NextFocusedIndexPath { get; }
}

// @protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITableViewDelegate : IUIScrollViewDelegate
{
    // @optional -(void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:willDisplayCell:forRowAtIndexPath:")]
    void TableView(UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView willDisplayHeaderView:(UIView * _Nonnull)view forSection:(NSInteger)section __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("tableView:willDisplayHeaderView:forSection:")]
    void TableView(UITableView tableView, UIView view, nint section);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView willDisplayFooterView:(UIView * _Nonnull)view forSection:(NSInteger)section __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("tableView:willDisplayFooterView:forSection:")]
    void TableView(UITableView tableView, UIView view, nint section);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView didEndDisplayingCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("tableView:didEndDisplayingCell:forRowAtIndexPath:")]
    void TableView(UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView didEndDisplayingHeaderView:(UIView * _Nonnull)view forSection:(NSInteger)section __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("tableView:didEndDisplayingHeaderView:forSection:")]
    void TableView(UITableView tableView, UIView view, nint section);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView didEndDisplayingFooterView:(UIView * _Nonnull)view forSection:(NSInteger)section __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("tableView:didEndDisplayingFooterView:forSection:")]
    void TableView(UITableView tableView, UIView view, nint section);

    // @optional -(CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:heightForRowAtIndexPath:")]
    nfloat TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section;
    [Export("tableView:heightForHeaderInSection:")]
    nfloat TableView(UITableView tableView, nint section);

    // @optional -(CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section;
    [Export("tableView:heightForFooterInSection:")]
    nfloat TableView(UITableView tableView, nint section);

    // @optional -(CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("tableView:estimatedHeightForRowAtIndexPath:")]
    nfloat TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForHeaderInSection:(NSInteger)section __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("tableView:estimatedHeightForHeaderInSection:")]
    nfloat TableView(UITableView tableView, nint section);

    // @optional -(CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForFooterInSection:(NSInteger)section __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("tableView:estimatedHeightForFooterInSection:")]
    nfloat TableView(UITableView tableView, nint section);

    // @optional -(UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section;
    [Export("tableView:viewForHeaderInSection:")]
    [return: NullAllowed]
    UIView TableView(UITableView tableView, nint section);

    // @optional -(UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForFooterInSection:(NSInteger)section;
    [Export("tableView:viewForFooterInSection:")]
    [return: NullAllowed]
    UIView TableView(UITableView tableView, nint section);

    // @optional -(UITableViewCellAccessoryType)tableView:(UITableView * _Nonnull)tableView accessoryTypeForRowWithIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [NoTV]
    [Export("tableView:accessoryTypeForRowWithIndexPath:")]
    UITableViewCellAccessoryType TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:accessoryButtonTappedForRowWithIndexPath:")]
    void TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView shouldHighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("tableView:shouldHighlightRowAtIndexPath:")]
    bool TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView didHighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("tableView:didHighlightRowAtIndexPath:")]
    void TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView didUnhighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("tableView:didUnhighlightRowAtIndexPath:")]
    void TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:willSelectRowAtIndexPath:")]
    [return: NullAllowed]
    NSIndexPath TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willDeselectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("tableView:willDeselectRowAtIndexPath:")]
    [return: NullAllowed]
    NSIndexPath TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:didSelectRowAtIndexPath:")]
    void TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView didDeselectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("tableView:didDeselectRowAtIndexPath:")]
    void TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(UITableViewCellEditingStyle)tableView:(UITableView * _Nonnull)tableView editingStyleForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:editingStyleForRowAtIndexPath:")]
    UITableViewCellEditingStyle TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:")]
    [return: NullAllowed]
    string TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(NSArray<UITableViewRowAction *> * _Nullable)tableView:(UITableView * _Nonnull)tableView editActionsForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=8_0)));
    [NoTV, iOS(8, 0)]
    [Export("tableView:editActionsForRowAtIndexPath:")]
    [return: NullAllowed]
    UITableViewRowAction[] TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(UISwipeActionsConfiguration * _Nullable)tableView:(UITableView * _Nonnull)tableView leadingSwipeActionsConfigurationForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoTV, iOS(11, 0)]
    [Export("tableView:leadingSwipeActionsConfigurationForRowAtIndexPath:")]
    [return: NullAllowed]
    UISwipeActionsConfiguration TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(UISwipeActionsConfiguration * _Nullable)tableView:(UITableView * _Nonnull)tableView trailingSwipeActionsConfigurationForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoTV, iOS(11, 0)]
    [Export("tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:")]
    [return: NullAllowed]
    UISwipeActionsConfiguration TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:shouldIndentWhileEditingRowAtIndexPath:")]
    bool TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView willBeginEditingRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("tableView:willBeginEditingRowAtIndexPath:")]
    void TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView didEndEditingRowAtIndexPath:(NSIndexPath * _Nullable)indexPath __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("tableView:didEndEditingRowAtIndexPath:")]
    void TableView(UITableView tableView, [NullAllowed] NSIndexPath indexPath);

    // @optional -(NSIndexPath * _Nonnull)tableView:(UITableView * _Nonnull)tableView targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath * _Nonnull)sourceIndexPath toProposedIndexPath:(NSIndexPath * _Nonnull)proposedDestinationIndexPath;
    [Export("tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:")]
    NSIndexPath TableView(UITableView tableView, NSIndexPath sourceIndexPath, NSIndexPath proposedDestinationIndexPath);

    // @optional -(NSInteger)tableView:(UITableView * _Nonnull)tableView indentationLevelForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:indentationLevelForRowAtIndexPath:")]
    nint TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView shouldShowMenuForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("tableView:shouldShowMenuForRowAtIndexPath:")]
    bool TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView canPerformAction:(SEL _Nonnull)action forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath withSender:(id _Nullable)sender __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("tableView:canPerformAction:forRowAtIndexPath:withSender:")]
    bool TableView(UITableView tableView, Selector action, NSIndexPath indexPath, [NullAllowed] NSObject sender);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView performAction:(SEL _Nonnull)action forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath withSender:(id _Nullable)sender __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("tableView:performAction:forRowAtIndexPath:withSender:")]
    void TableView(UITableView tableView, Selector action, NSIndexPath indexPath, [NullAllowed] NSObject sender);

    // @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView canFocusRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("tableView:canFocusRowAtIndexPath:")]
    bool TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView shouldUpdateFocusInContext:(UITableViewFocusUpdateContext * _Nonnull)context __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("tableView:shouldUpdateFocusInContext:")]
    bool TableView(UITableView tableView, UITableViewFocusUpdateContext context);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView didUpdateFocusInContext:(UITableViewFocusUpdateContext * _Nonnull)context withAnimationCoordinator:(UIFocusAnimationCoordinator * _Nonnull)coordinator __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("tableView:didUpdateFocusInContext:withAnimationCoordinator:")]
    void TableView(UITableView tableView, UITableViewFocusUpdateContext context, UIFocusAnimationCoordinator coordinator);

    // @optional -(NSIndexPath * _Nullable)indexPathForPreferredFocusedViewInTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("indexPathForPreferredFocusedViewInTableView:")]
    [return: NullAllowed]
    NSIndexPath IndexPathForPreferredFocusedViewInTableView(UITableView tableView);

    // @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView shouldSpringLoadRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath withContext:(id<UISpringLoadedInteractionContext> _Nonnull)context __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("tableView:shouldSpringLoadRowAtIndexPath:withContext:")]
    bool TableView(UITableView tableView, NSIndexPath indexPath, UISpringLoadedInteractionContext context);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSNotificationName _Nonnull UITableViewSelectionDidChangeNotification __attribute__((visibility("default")));
    [Field("UITableViewSelectionDidChangeNotification", "__Internal")]
    NSString UITableViewSelectionDidChangeNotification { get; }
}

// @interface UITableView : UIScrollView <NSCoding, UIDataSourceTranslating>
[iOS(2, 0)]
[BaseType(typeof(UIScrollView))]
interface UITableView : INSCoding, IUIDataSourceTranslating
{
    // -(instancetype _Nonnull)initWithFrame:(CGRect)frame style:(UITableViewStyle)style __attribute__((objc_designated_initializer));
    [Export("initWithFrame:style:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect frame, UITableViewStyle style);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (readonly, nonatomic) UITableViewStyle style;
    [Export("style")]
    UITableViewStyle Style { get; }

    // @property (nonatomic, weak) id<UITableViewDataSource> _Nullable dataSource;
    [NullAllowed, Export("dataSource", ArgumentSemantic.Weak)]
    UITableViewDataSource DataSource { get; set; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UITableViewDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UITableViewDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (nonatomic, weak) id<UITableViewDataSourcePrefetching> _Nullable prefetchDataSource __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [NullAllowed, Export("prefetchDataSource", ArgumentSemantic.Weak)]
    UITableViewDataSourcePrefetching PrefetchDataSource { get; set; }

    [Wrap("WeakDragDelegate")]
    [NullAllowed]
    UITableViewDragDelegate DragDelegate { get; set; }

    // @property (nonatomic, weak) id<UITableViewDragDelegate> _Nullable dragDelegate __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [NullAllowed, Export("dragDelegate", ArgumentSemantic.Weak)]
    NSObject WeakDragDelegate { get; set; }

    [Wrap("WeakDropDelegate")]
    [NullAllowed]
    UITableViewDropDelegate DropDelegate { get; set; }

    // @property (nonatomic, weak) id<UITableViewDropDelegate> _Nullable dropDelegate __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [NullAllowed, Export("dropDelegate", ArgumentSemantic.Weak)]
    NSObject WeakDropDelegate { get; set; }

    // @property (nonatomic) CGFloat rowHeight;
    [Export("rowHeight")]
    nfloat RowHeight { get; set; }

    // @property (nonatomic) CGFloat sectionHeaderHeight;
    [Export("sectionHeaderHeight")]
    nfloat SectionHeaderHeight { get; set; }

    // @property (nonatomic) CGFloat sectionFooterHeight;
    [Export("sectionFooterHeight")]
    nfloat SectionFooterHeight { get; set; }

    // @property (nonatomic) CGFloat estimatedRowHeight __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("estimatedRowHeight")]
    nfloat EstimatedRowHeight { get; set; }

    // @property (nonatomic) CGFloat estimatedSectionHeaderHeight __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("estimatedSectionHeaderHeight")]
    nfloat EstimatedSectionHeaderHeight { get; set; }

    // @property (nonatomic) CGFloat estimatedSectionFooterHeight __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("estimatedSectionFooterHeight")]
    nfloat EstimatedSectionFooterHeight { get; set; }

    // @property (nonatomic) UIEdgeInsets separatorInset __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("separatorInset", ArgumentSemantic.Assign)]
    UIEdgeInsets SeparatorInset { get; set; }

    // @property (nonatomic) UITableViewSeparatorInsetReference separatorInsetReference __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("separatorInsetReference", ArgumentSemantic.Assign)]
    UITableViewSeparatorInsetReference SeparatorInsetReference { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable backgroundView __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [NullAllowed, Export("backgroundView", ArgumentSemantic.Strong)]
    UIView BackgroundView { get; set; }

    // @property (readonly, nonatomic) NSInteger numberOfSections;
    [Export("numberOfSections")]
    nint NumberOfSections { get; }

    // -(NSInteger)numberOfRowsInSection:(NSInteger)section;
    [Export("numberOfRowsInSection:")]
    nint NumberOfRowsInSection(nint section);

    // -(CGRect)rectForSection:(NSInteger)section;
    [Export("rectForSection:")]
    CGRect RectForSection(nint section);

    // -(CGRect)rectForHeaderInSection:(NSInteger)section;
    [Export("rectForHeaderInSection:")]
    CGRect RectForHeaderInSection(nint section);

    // -(CGRect)rectForFooterInSection:(NSInteger)section;
    [Export("rectForFooterInSection:")]
    CGRect RectForFooterInSection(nint section);

    // -(CGRect)rectForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("rectForRowAtIndexPath:")]
    CGRect RectForRowAtIndexPath(NSIndexPath indexPath);

    // -(NSIndexPath * _Nullable)indexPathForRowAtPoint:(CGPoint)point;
    [Export("indexPathForRowAtPoint:")]
    [return: NullAllowed]
    NSIndexPath IndexPathForRowAtPoint(CGPoint point);

    // -(NSIndexPath * _Nullable)indexPathForCell:(UITableViewCell * _Nonnull)cell;
    [Export("indexPathForCell:")]
    [return: NullAllowed]
    NSIndexPath IndexPathForCell(UITableViewCell cell);

    // -(NSArray<NSIndexPath *> * _Nullable)indexPathsForRowsInRect:(CGRect)rect;
    [Export("indexPathsForRowsInRect:")]
    [return: NullAllowed]
    NSIndexPath[] IndexPathsForRowsInRect(CGRect rect);

    // -(__kindof UITableViewCell * _Nullable)cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("cellForRowAtIndexPath:")]
    UITableViewCell CellForRowAtIndexPath(NSIndexPath indexPath);

    // @property (readonly, nonatomic) NSArray<__kindof UITableViewCell *> * _Nonnull visibleCells;
    [Export("visibleCells")]
    UITableViewCell[] VisibleCells { get; }

    // @property (readonly, nonatomic) NSArray<NSIndexPath *> * _Nullable indexPathsForVisibleRows;
    [NullAllowed, Export("indexPathsForVisibleRows")]
    NSIndexPath[] IndexPathsForVisibleRows { get; }

    // -(UITableViewHeaderFooterView * _Nullable)headerViewForSection:(NSInteger)section __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("headerViewForSection:")]
    [return: NullAllowed]
    UITableViewHeaderFooterView HeaderViewForSection(nint section);

    // -(UITableViewHeaderFooterView * _Nullable)footerViewForSection:(NSInteger)section __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("footerViewForSection:")]
    [return: NullAllowed]
    UITableViewHeaderFooterView FooterViewForSection(nint section);

    // -(void)scrollToRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath atScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated;
    [Export("scrollToRowAtIndexPath:atScrollPosition:animated:")]
    void ScrollToRowAtIndexPath(NSIndexPath indexPath, UITableViewScrollPosition scrollPosition, bool animated);

    // -(void)scrollToNearestSelectedRowAtScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated;
    [Export("scrollToNearestSelectedRowAtScrollPosition:animated:")]
    void ScrollToNearestSelectedRowAtScrollPosition(UITableViewScrollPosition scrollPosition, bool animated);

    // -(void)performBatchUpdates:(void (^ _Nullable)(void))updates completion:(void (^ _Nullable)(BOOL))completion __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("performBatchUpdates:completion:")]
    void PerformBatchUpdates([NullAllowed] Action updates, [NullAllowed] Action<bool> completion);

    // -(void)beginUpdates;
    [Export("beginUpdates")]
    void BeginUpdates();

    // -(void)endUpdates;
    [Export("endUpdates")]
    void EndUpdates();

    // -(void)insertSections:(NSIndexSet * _Nonnull)sections withRowAnimation:(UITableViewRowAnimation)animation;
    [Export("insertSections:withRowAnimation:")]
    void InsertSections(NSIndexSet sections, UITableViewRowAnimation animation);

    // -(void)deleteSections:(NSIndexSet * _Nonnull)sections withRowAnimation:(UITableViewRowAnimation)animation;
    [Export("deleteSections:withRowAnimation:")]
    void DeleteSections(NSIndexSet sections, UITableViewRowAnimation animation);

    // -(void)reloadSections:(NSIndexSet * _Nonnull)sections withRowAnimation:(UITableViewRowAnimation)animation __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("reloadSections:withRowAnimation:")]
    void ReloadSections(NSIndexSet sections, UITableViewRowAnimation animation);

    // -(void)moveSection:(NSInteger)section toSection:(NSInteger)newSection __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("moveSection:toSection:")]
    void MoveSection(nint section, nint newSection);

    // -(void)insertRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths withRowAnimation:(UITableViewRowAnimation)animation;
    [Export("insertRowsAtIndexPaths:withRowAnimation:")]
    void InsertRowsAtIndexPaths(NSIndexPath[] indexPaths, UITableViewRowAnimation animation);

    // -(void)deleteRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths withRowAnimation:(UITableViewRowAnimation)animation;
    [Export("deleteRowsAtIndexPaths:withRowAnimation:")]
    void DeleteRowsAtIndexPaths(NSIndexPath[] indexPaths, UITableViewRowAnimation animation);

    // -(void)reloadRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths withRowAnimation:(UITableViewRowAnimation)animation __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("reloadRowsAtIndexPaths:withRowAnimation:")]
    void ReloadRowsAtIndexPaths(NSIndexPath[] indexPaths, UITableViewRowAnimation animation);

    // -(void)moveRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath toIndexPath:(NSIndexPath * _Nonnull)newIndexPath __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("moveRowAtIndexPath:toIndexPath:")]
    void MoveRowAtIndexPath(NSIndexPath indexPath, NSIndexPath newIndexPath);

    // @property (readonly, nonatomic) BOOL hasUncommittedUpdates __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("hasUncommittedUpdates")]
    bool HasUncommittedUpdates { get; }

    // -(void)reloadData;
    [Export("reloadData")]
    void ReloadData();

    // -(void)reloadSectionIndexTitles __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("reloadSectionIndexTitles")]
    void ReloadSectionIndexTitles();

    // @property (getter = isEditing, nonatomic) BOOL editing;
    [Export("editing")]
    bool Editing { [Bind("isEditing")] get; set; }

    // -(void)setEditing:(BOOL)editing animated:(BOOL)animated;
    [Export("setEditing:animated:")]
    void SetEditing(bool editing, bool animated);

    // @property (nonatomic) BOOL allowsSelection __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("allowsSelection")]
    bool AllowsSelection { get; set; }

    // @property (nonatomic) BOOL allowsSelectionDuringEditing;
    [Export("allowsSelectionDuringEditing")]
    bool AllowsSelectionDuringEditing { get; set; }

    // @property (nonatomic) BOOL allowsMultipleSelection __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("allowsMultipleSelection")]
    bool AllowsMultipleSelection { get; set; }

    // @property (nonatomic) BOOL allowsMultipleSelectionDuringEditing __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("allowsMultipleSelectionDuringEditing")]
    bool AllowsMultipleSelectionDuringEditing { get; set; }

    // @property (readonly, nonatomic) NSIndexPath * _Nullable indexPathForSelectedRow;
    [NullAllowed, Export("indexPathForSelectedRow")]
    NSIndexPath IndexPathForSelectedRow { get; }

    // @property (readonly, nonatomic) NSArray<NSIndexPath *> * _Nullable indexPathsForSelectedRows __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("indexPathsForSelectedRows")]
    NSIndexPath[] IndexPathsForSelectedRows { get; }

    // -(void)selectRowAtIndexPath:(NSIndexPath * _Nullable)indexPath animated:(BOOL)animated scrollPosition:(UITableViewScrollPosition)scrollPosition;
    [Export("selectRowAtIndexPath:animated:scrollPosition:")]
    void SelectRowAtIndexPath([NullAllowed] NSIndexPath indexPath, bool animated, UITableViewScrollPosition scrollPosition);

    // -(void)deselectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath animated:(BOOL)animated;
    [Export("deselectRowAtIndexPath:animated:")]
    void DeselectRowAtIndexPath(NSIndexPath indexPath, bool animated);

    // @property (nonatomic) NSInteger sectionIndexMinimumDisplayRowCount;
    [Export("sectionIndexMinimumDisplayRowCount")]
    nint SectionIndexMinimumDisplayRowCount { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable sectionIndexColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("sectionIndexColor", ArgumentSemantic.Strong)]
    UIColor SectionIndexColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable sectionIndexBackgroundColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("sectionIndexBackgroundColor", ArgumentSemantic.Strong)]
    UIColor SectionIndexBackgroundColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable sectionIndexTrackingBackgroundColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("sectionIndexTrackingBackgroundColor", ArgumentSemantic.Strong)]
    UIColor SectionIndexTrackingBackgroundColor { get; set; }

    // @property (nonatomic) UITableViewCellSeparatorStyle separatorStyle __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("separatorStyle", ArgumentSemantic.Assign)]
    UITableViewCellSeparatorStyle SeparatorStyle { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable separatorColor __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector")));
    [NoTV]
    [NullAllowed, Export("separatorColor", ArgumentSemantic.Strong)]
    UIColor SeparatorColor { get; set; }

    // @property (copy, nonatomic) UIVisualEffect * _Nullable separatorEffect __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=8_0)));
    [NoTV, iOS(8, 0)]
    [NullAllowed, Export("separatorEffect", ArgumentSemantic.Copy)]
    UIVisualEffect SeparatorEffect { get; set; }

    // @property (nonatomic) BOOL cellLayoutMarginsFollowReadableWidth __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("cellLayoutMarginsFollowReadableWidth")]
    bool CellLayoutMarginsFollowReadableWidth { get; set; }

    // @property (nonatomic) BOOL insetsContentViewsToSafeArea __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("insetsContentViewsToSafeArea")]
    bool InsetsContentViewsToSafeArea { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable tableHeaderView;
    [NullAllowed, Export("tableHeaderView", ArgumentSemantic.Strong)]
    UIView TableHeaderView { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable tableFooterView;
    [NullAllowed, Export("tableFooterView", ArgumentSemantic.Strong)]
    UIView TableFooterView { get; set; }

    // -(__kindof UITableViewCell * _Nullable)dequeueReusableCellWithIdentifier:(NSString * _Nonnull)identifier;
    [Export("dequeueReusableCellWithIdentifier:")]
    UITableViewCell DequeueReusableCellWithIdentifier(string identifier);

    // -(__kindof UITableViewCell * _Nonnull)dequeueReusableCellWithIdentifier:(NSString * _Nonnull)identifier forIndexPath:(NSIndexPath * _Nonnull)indexPath __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("dequeueReusableCellWithIdentifier:forIndexPath:")]
    UITableViewCell DequeueReusableCellWithIdentifier(string identifier, NSIndexPath indexPath);

    // -(__kindof UITableViewHeaderFooterView * _Nullable)dequeueReusableHeaderFooterViewWithIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("dequeueReusableHeaderFooterViewWithIdentifier:")]
    UITableViewHeaderFooterView DequeueReusableHeaderFooterViewWithIdentifier(string identifier);

    // -(void)registerNib:(UINib * _Nullable)nib forCellReuseIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("registerNib:forCellReuseIdentifier:")]
    void RegisterNib([NullAllowed] UINib nib, string identifier);

    // -(void)registerClass:(Class _Nullable)cellClass forCellReuseIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("registerClass:forCellReuseIdentifier:")]
    void RegisterClass([NullAllowed] Class cellClass, string identifier);

    // -(void)registerNib:(UINib * _Nullable)nib forHeaderFooterViewReuseIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("registerNib:forHeaderFooterViewReuseIdentifier:")]
    void RegisterNib([NullAllowed] UINib nib, string identifier);

    // -(void)registerClass:(Class _Nullable)aClass forHeaderFooterViewReuseIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("registerClass:forHeaderFooterViewReuseIdentifier:")]
    void RegisterClass([NullAllowed] Class aClass, string identifier);

    // @property (nonatomic) BOOL remembersLastFocusedIndexPath __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("remembersLastFocusedIndexPath")]
    bool RemembersLastFocusedIndexPath { get; set; }

    // @property (nonatomic) BOOL dragInteractionEnabled __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("dragInteractionEnabled")]
    bool DragInteractionEnabled { get; set; }

    // @property (readonly, nonatomic) BOOL hasActiveDrag __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("hasActiveDrag")]
    bool HasActiveDrag { get; }

    // @property (readonly, nonatomic) BOOL hasActiveDrop __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Export("hasActiveDrop")]
    bool HasActiveDrop { get; }
}

// @interface UIDragAndDrop (UITableView) <UISpringLoadedInteractionSupporting>
[Category]
[BaseType(typeof(UITableView))]
interface UITableView_UIDragAndDrop : IUISpringLoadedInteractionSupporting
{
}

// @protocol UITableViewDataSource <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITableViewDataSource
{
    // @required -(NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
    [Abstract]
    [Export("tableView:numberOfRowsInSection:")]
    nint TableView(UITableView tableView, nint section);

    // @required -(UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Abstract]
    [Export("tableView:cellForRowAtIndexPath:")]
    UITableViewCell TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView;
    [Export("numberOfSectionsInTableView:")]
    nint NumberOfSectionsInTableView(UITableView tableView);

    // @optional -(NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section;
    [Export("tableView:titleForHeaderInSection:")]
    [return: NullAllowed]
    string TableView(UITableView tableView, nint section);

    // @optional -(NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForFooterInSection:(NSInteger)section;
    [Export("tableView:titleForFooterInSection:")]
    [return: NullAllowed]
    string TableView(UITableView tableView, nint section);

    // @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView canEditRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:canEditRowAtIndexPath:")]
    bool TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView canMoveRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:canMoveRowAtIndexPath:")]
    bool TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(NSArray<NSString *> * _Nullable)sectionIndexTitlesForTableView:(UITableView * _Nonnull)tableView;
    [Export("sectionIndexTitlesForTableView:")]
    [return: NullAllowed]
    string[] SectionIndexTitlesForTableView(UITableView tableView);

    // @optional -(NSInteger)tableView:(UITableView * _Nonnull)tableView sectionForSectionIndexTitle:(NSString * _Nonnull)title atIndex:(NSInteger)index;
    [Export("tableView:sectionForSectionIndexTitle:atIndex:")]
    nint TableView(UITableView tableView, string title, nint index);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:commitEditingStyle:forRowAtIndexPath:")]
    void TableView(UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView moveRowAtIndexPath:(NSIndexPath * _Nonnull)sourceIndexPath toIndexPath:(NSIndexPath * _Nonnull)destinationIndexPath;
    [Export("tableView:moveRowAtIndexPath:toIndexPath:")]
    void TableView(UITableView tableView, NSIndexPath sourceIndexPath, NSIndexPath destinationIndexPath);
}

// @protocol UITableViewDataSourcePrefetching <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITableViewDataSourcePrefetching
{
    // @required -(void)tableView:(UITableView * _Nonnull)tableView prefetchRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
    [Abstract]
    [Export("tableView:prefetchRowsAtIndexPaths:")]
    void PrefetchRowsAtIndexPaths(UITableView tableView, NSIndexPath[] indexPaths);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView cancelPrefetchingForRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
    [Export("tableView:cancelPrefetchingForRowsAtIndexPaths:")]
    void CancelPrefetchingForRowsAtIndexPaths(UITableView tableView, NSIndexPath[] indexPaths);
}

// @protocol UITableViewDragDelegate <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITableViewDragDelegate
{
    // @required -(NSArray<UIDragItem *> * _Nonnull)tableView:(UITableView * _Nonnull)tableView itemsForBeginningDragSession:(id<UIDragSession> _Nonnull)session atIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Abstract]
    [Export("tableView:itemsForBeginningDragSession:atIndexPath:")]
    UIDragItem[] TableView(UITableView tableView, UIDragSession session, NSIndexPath indexPath);

    // @optional -(NSArray<UIDragItem *> * _Nonnull)tableView:(UITableView * _Nonnull)tableView itemsForAddingToDragSession:(id<UIDragSession> _Nonnull)session atIndexPath:(NSIndexPath * _Nonnull)indexPath point:(CGPoint)point;
    [Export("tableView:itemsForAddingToDragSession:atIndexPath:point:")]
    UIDragItem[] TableView(UITableView tableView, UIDragSession session, NSIndexPath indexPath, CGPoint point);

    // @optional -(UIDragPreviewParameters * _Nullable)tableView:(UITableView * _Nonnull)tableView dragPreviewParametersForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:dragPreviewParametersForRowAtIndexPath:")]
    [return: NullAllowed]
    UIDragPreviewParameters TableView(UITableView tableView, NSIndexPath indexPath);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView dragSessionWillBegin:(id<UIDragSession> _Nonnull)session;
    [Export("tableView:dragSessionWillBegin:")]
    void TableView(UITableView tableView, UIDragSession session);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView dragSessionDidEnd:(id<UIDragSession> _Nonnull)session;
    [Export("tableView:dragSessionDidEnd:")]
    void TableView(UITableView tableView, UIDragSession session);

    // @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView dragSessionAllowsMoveOperation:(id<UIDragSession> _Nonnull)session;
    [Export("tableView:dragSessionAllowsMoveOperation:")]
    bool TableView(UITableView tableView, UIDragSession session);

    // @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView dragSessionIsRestrictedToDraggingApplication:(id<UIDragSession> _Nonnull)session;
    [Export("tableView:dragSessionIsRestrictedToDraggingApplication:")]
    bool TableView(UITableView tableView, UIDragSession session);
}

// @protocol UITableViewDropDelegate <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITableViewDropDelegate
{
    // @required -(void)tableView:(UITableView * _Nonnull)tableView performDropWithCoordinator:(id<UITableViewDropCoordinator> _Nonnull)coordinator;
    [Abstract]
    [Export("tableView:performDropWithCoordinator:")]
    void TableView(UITableView tableView, UITableViewDropCoordinator coordinator);

    // @optional -(BOOL)tableView:(UITableView * _Nonnull)tableView canHandleDropSession:(id<UIDropSession> _Nonnull)session;
    [Export("tableView:canHandleDropSession:")]
    bool TableView(UITableView tableView, UIDropSession session);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView dropSessionDidEnter:(id<UIDropSession> _Nonnull)session;
    [Export("tableView:dropSessionDidEnter:")]
    void TableView(UITableView tableView, UIDropSession session);

    // @optional -(UITableViewDropProposal * _Nonnull)tableView:(UITableView * _Nonnull)tableView dropSessionDidUpdate:(id<UIDropSession> _Nonnull)session withDestinationIndexPath:(NSIndexPath * _Nullable)destinationIndexPath;
    [Export("tableView:dropSessionDidUpdate:withDestinationIndexPath:")]
    UITableViewDropProposal TableView(UITableView tableView, UIDropSession session, [NullAllowed] NSIndexPath destinationIndexPath);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView dropSessionDidExit:(id<UIDropSession> _Nonnull)session;
    [Export("tableView:dropSessionDidExit:")]
    void TableView(UITableView tableView, UIDropSession session);

    // @optional -(void)tableView:(UITableView * _Nonnull)tableView dropSessionDidEnd:(id<UIDropSession> _Nonnull)session;
    [Export("tableView:dropSessionDidEnd:")]
    void TableView(UITableView tableView, UIDropSession session);

    // @optional -(UIDragPreviewParameters * _Nullable)tableView:(UITableView * _Nonnull)tableView dropPreviewParametersForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("tableView:dropPreviewParametersForRowAtIndexPath:")]
    [return: NullAllowed]
    UIDragPreviewParameters TableView(UITableView tableView, NSIndexPath indexPath);
}

// @interface UITableViewDropProposal : UIDropProposal
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(UIDropProposal))]
interface UITableViewDropProposal
{
    // -(instancetype _Nonnull)initWithDropOperation:(UIDropOperation)operation intent:(UITableViewDropIntent)intent;
    [Export("initWithDropOperation:intent:")]
    IntPtr Constructor(UIDropOperation operation, UITableViewDropIntent intent);

    // @property (readonly, nonatomic) UITableViewDropIntent intent;
    [Export("intent")]
    UITableViewDropIntent Intent { get; }
}

// @protocol UITableViewDropCoordinator <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITableViewDropCoordinator
{
    // @required @property (readonly, nonatomic) NSArray<id<UITableViewDropItem>> * _Nonnull items;
    [Abstract]
    [Export("items")]
    UITableViewDropItem[] Items { get; }

    // @required @property (readonly, nonatomic) NSIndexPath * _Nullable destinationIndexPath;
    [Abstract]
    [NullAllowed, Export("destinationIndexPath")]
    NSIndexPath DestinationIndexPath { get; }

    // @required @property (readonly, nonatomic) UITableViewDropProposal * _Nonnull proposal;
    [Abstract]
    [Export("proposal")]
    UITableViewDropProposal Proposal { get; }

    // @required @property (readonly, nonatomic) id<UIDropSession> _Nonnull session;
    [Abstract]
    [Export("session")]
    UIDropSession Session { get; }

    // @required -(id<UITableViewDropPlaceholderContext> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem toPlaceholder:(UITableViewDropPlaceholder * _Nonnull)placeholder;
    [Abstract]
    [Export("dropItem:toPlaceholder:")]
    UITableViewDropPlaceholderContext DropItem(UIDragItem dragItem, UITableViewDropPlaceholder placeholder);

    // @required -(id<UIDragAnimating> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem toRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Abstract]
    [Export("dropItem:toRowAtIndexPath:")]
    UIDragAnimating DropItem(UIDragItem dragItem, NSIndexPath indexPath);

    // @required -(id<UIDragAnimating> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem intoRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath rect:(CGRect)rect;
    [Abstract]
    [Export("dropItem:intoRowAtIndexPath:rect:")]
    UIDragAnimating DropItem(UIDragItem dragItem, NSIndexPath indexPath, CGRect rect);

    // @required -(id<UIDragAnimating> _Nonnull)dropItem:(UIDragItem * _Nonnull)dragItem toTarget:(UIDragPreviewTarget * _Nonnull)target;
    [Abstract]
    [Export("dropItem:toTarget:")]
    UIDragAnimating DropItem(UIDragItem dragItem, UIDragPreviewTarget target);
}

// @interface UITableViewPlaceholder : NSObject
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UITableViewPlaceholder
{
    // -(instancetype _Nonnull)initWithInsertionIndexPath:(NSIndexPath * _Nonnull)insertionIndexPath reuseIdentifier:(NSString * _Nonnull)reuseIdentifier rowHeight:(CGFloat)rowHeight __attribute__((objc_designated_initializer));
    [Export("initWithInsertionIndexPath:reuseIdentifier:rowHeight:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSIndexPath insertionIndexPath, string reuseIdentifier, nfloat rowHeight);

    // @property (copy, nonatomic) void (^ _Nullable)(__kindof UITableViewCell * _Nonnull) cellUpdateHandler;
    [NullAllowed, Export("cellUpdateHandler", ArgumentSemantic.Copy)]
    Action<UITableViewCell> CellUpdateHandler { get; set; }
}

// @interface UITableViewDropPlaceholder : UITableViewPlaceholder
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(UITableViewPlaceholder))]
interface UITableViewDropPlaceholder
{
    // @property (copy, nonatomic) UIDragPreviewParameters * _Nullable (^ _Nullable)(__kindof UITableViewCell * _Nonnull) previewParametersProvider;
    [NullAllowed, Export("previewParametersProvider", ArgumentSemantic.Copy)]
    Func<UITableViewCell, UIDragPreviewParameters> PreviewParametersProvider { get; set; }
}

// @protocol UITableViewDropItem <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITableViewDropItem
{
    // @required @property (readonly, nonatomic) UIDragItem * _Nonnull dragItem;
    [Abstract]
    [Export("dragItem")]
    UIDragItem DragItem { get; }

    // @required @property (readonly, nonatomic) NSIndexPath * _Nullable sourceIndexPath;
    [Abstract]
    [NullAllowed, Export("sourceIndexPath")]
    NSIndexPath SourceIndexPath { get; }

    // @required @property (readonly, nonatomic) CGSize previewSize;
    [Abstract]
    [Export("previewSize")]
    CGSize PreviewSize { get; }
}

// @protocol UITableViewDropPlaceholderContext <UIDragAnimating>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
interface UITableViewDropPlaceholderContext : IUIDragAnimating
{
    // @required @property (readonly, nonatomic) UIDragItem * _Nonnull dragItem;
    [Abstract]
    [Export("dragItem")]
    UIDragItem DragItem { get; }

    // @required -(BOOL)commitInsertionWithDataSourceUpdates:(void (^ _Nonnull)(NSIndexPath * _Nonnull))dataSourceUpdates;
    [Abstract]
    [Export("commitInsertionWithDataSourceUpdates:")]
    bool CommitInsertionWithDataSourceUpdates(Action<NSIndexPath> dataSourceUpdates);

    // @required -(BOOL)deletePlaceholder;
    [Abstract]
    [Export("deletePlaceholder")]
    [Verify(MethodToProperty)]
    bool DeletePlaceholder { get; }
}

// @interface UISearchDisplayController : NSObject
[Introduced(PlatformName.iOS, 3, 0, message: "UISearchDisplayController has been replaced with UISearchController")]
[Deprecated(PlatformName.iOS, 8, 0, message: "UISearchDisplayController has been replaced with UISearchController")]
[NoTV]
[BaseType(typeof(NSObject))]
interface UISearchDisplayController
{
    // -(instancetype _Nonnull)initWithSearchBar:(UISearchBar * _Nonnull)searchBar contentsController:(UIViewController * _Nonnull)viewController;
    [Export("initWithSearchBar:contentsController:")]
    IntPtr Constructor(UISearchBar searchBar, UIViewController viewController);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UISearchDisplayDelegate Delegate { get; set; }

    // @property (assign, nonatomic) id<UISearchDisplayDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
    NSObject WeakDelegate { get; set; }

    // @property (getter = isActive, nonatomic) BOOL active;
    [Export("active")]
    bool Active { [Bind("isActive")] get; set; }

    // -(void)setActive:(BOOL)visible animated:(BOOL)animated;
    [Export("setActive:animated:")]
    void SetActive(bool visible, bool animated);

    // @property (readonly, nonatomic) UISearchBar * _Nonnull searchBar;
    [Export("searchBar")]
    UISearchBar SearchBar { get; }

    // @property (readonly, nonatomic) UIViewController * _Nonnull searchContentsController;
    [Export("searchContentsController")]
    UIViewController SearchContentsController { get; }

    // @property (readonly, nonatomic) UITableView * _Nonnull searchResultsTableView;
    [Export("searchResultsTableView")]
    UITableView SearchResultsTableView { get; }

    // @property (nonatomic, weak) id<UITableViewDataSource> _Nullable searchResultsDataSource;
    [NullAllowed, Export("searchResultsDataSource", ArgumentSemantic.Weak)]
    UITableViewDataSource SearchResultsDataSource { get; set; }

    [Wrap("WeakSearchResultsDelegate")]
    [NullAllowed]
    UITableViewDelegate SearchResultsDelegate { get; set; }

    // @property (nonatomic, weak) id<UITableViewDelegate> _Nullable searchResultsDelegate;
    [NullAllowed, Export("searchResultsDelegate", ArgumentSemantic.Weak)]
    NSObject WeakSearchResultsDelegate { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable searchResultsTitle __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("searchResultsTitle")]
    string SearchResultsTitle { get; set; }

    // @property (assign, nonatomic) BOOL displaysSearchBarInNavigationBar __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("displaysSearchBarInNavigationBar")]
    bool DisplaysSearchBarInNavigationBar { get; set; }

    // @property (readonly, nonatomic) UINavigationItem * _Nullable navigationItem __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("navigationItem")]
    UINavigationItem NavigationItem { get; }
}

// @protocol UISearchDisplayDelegate <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UISearchDisplayDelegate
{
    // @optional -(void)searchDisplayControllerWillBeginSearch:(UISearchDisplayController * _Nonnull)controller __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [Export("searchDisplayControllerWillBeginSearch:")]
    void SearchDisplayControllerWillBeginSearch(UISearchDisplayController controller);

    // @optional -(void)searchDisplayControllerDidBeginSearch:(UISearchDisplayController * _Nonnull)controller __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [Export("searchDisplayControllerDidBeginSearch:")]
    void SearchDisplayControllerDidBeginSearch(UISearchDisplayController controller);

    // @optional -(void)searchDisplayControllerWillEndSearch:(UISearchDisplayController * _Nonnull)controller __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [Export("searchDisplayControllerWillEndSearch:")]
    void SearchDisplayControllerWillEndSearch(UISearchDisplayController controller);

    // @optional -(void)searchDisplayControllerDidEndSearch:(UISearchDisplayController * _Nonnull)controller __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [Export("searchDisplayControllerDidEndSearch:")]
    void SearchDisplayControllerDidEndSearch(UISearchDisplayController controller);

    // @optional -(void)searchDisplayController:(UISearchDisplayController * _Nonnull)controller didLoadSearchResultsTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [Export("searchDisplayController:didLoadSearchResultsTableView:")]
    void SearchDisplayController(UISearchDisplayController controller, UITableView tableView);

    // @optional -(void)searchDisplayController:(UISearchDisplayController * _Nonnull)controller willUnloadSearchResultsTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [Export("searchDisplayController:willUnloadSearchResultsTableView:")]
    void SearchDisplayController(UISearchDisplayController controller, UITableView tableView);

    // @optional -(void)searchDisplayController:(UISearchDisplayController * _Nonnull)controller willShowSearchResultsTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [Export("searchDisplayController:willShowSearchResultsTableView:")]
    void SearchDisplayController(UISearchDisplayController controller, UITableView tableView);

    // @optional -(void)searchDisplayController:(UISearchDisplayController * _Nonnull)controller didShowSearchResultsTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [Export("searchDisplayController:didShowSearchResultsTableView:")]
    void SearchDisplayController(UISearchDisplayController controller, UITableView tableView);

    // @optional -(void)searchDisplayController:(UISearchDisplayController * _Nonnull)controller willHideSearchResultsTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [Export("searchDisplayController:willHideSearchResultsTableView:")]
    void SearchDisplayController(UISearchDisplayController controller, UITableView tableView);

    // @optional -(void)searchDisplayController:(UISearchDisplayController * _Nonnull)controller didHideSearchResultsTableView:(UITableView * _Nonnull)tableView __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [Export("searchDisplayController:didHideSearchResultsTableView:")]
    void SearchDisplayController(UISearchDisplayController controller, UITableView tableView);

    // @optional -(BOOL)searchDisplayController:(UISearchDisplayController * _Nonnull)controller shouldReloadTableForSearchString:(NSString * _Nullable)searchString __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [Export("searchDisplayController:shouldReloadTableForSearchString:")]
    bool SearchDisplayController(UISearchDisplayController controller, [NullAllowed] string searchString);

    // @optional -(BOOL)searchDisplayController:(UISearchDisplayController * _Nonnull)controller shouldReloadTableForSearchScope:(NSInteger)searchOption __attribute__((availability(ios, introduced=3_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 3, 0)]
    [Deprecated(PlatformName.iOS, 8, 0)]
    [Export("searchDisplayController:shouldReloadTableForSearchScope:")]
    bool SearchDisplayController(UISearchDisplayController controller, nint searchOption);
}

// @interface UISegmentedControl : UIControl <NSCoding>
[iOS(2, 0)]
[BaseType(typeof(UIControl))]
interface UISegmentedControl : INSCoding
{
    // -(instancetype _Nonnull)initWithItems:(NSArray * _Nullable)items;
    [Export("initWithItems:")]
    [Verify(StronglyTypedNSArray)]
    IntPtr Constructor([NullAllowed] NSObject[] items);

    // @property (nonatomic) UISegmentedControlStyle segmentedControlStyle __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "The segmentedControlStyle property no longer has any effect")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "The segmentedControlStyle property no longer has any effect")]
    [NoTV]
    [Export("segmentedControlStyle", ArgumentSemantic.Assign)]
    UISegmentedControlStyle SegmentedControlStyle { get; set; }

    // @property (getter = isMomentary, nonatomic) BOOL momentary;
    [Export("momentary")]
    bool Momentary { [Bind("isMomentary")] get; set; }

    // @property (readonly, nonatomic) NSUInteger numberOfSegments;
    [Export("numberOfSegments")]
    nuint NumberOfSegments { get; }

    // @property (nonatomic) BOOL apportionsSegmentWidthsByContent __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("apportionsSegmentWidthsByContent")]
    bool ApportionsSegmentWidthsByContent { get; set; }

    // -(void)insertSegmentWithTitle:(NSString * _Nullable)title atIndex:(NSUInteger)segment animated:(BOOL)animated;
    [Export("insertSegmentWithTitle:atIndex:animated:")]
    void InsertSegmentWithTitle([NullAllowed] string title, nuint segment, bool animated);

    // -(void)insertSegmentWithImage:(UIImage * _Nullable)image atIndex:(NSUInteger)segment animated:(BOOL)animated;
    [Export("insertSegmentWithImage:atIndex:animated:")]
    void InsertSegmentWithImage([NullAllowed] UIImage image, nuint segment, bool animated);

    // -(void)removeSegmentAtIndex:(NSUInteger)segment animated:(BOOL)animated;
    [Export("removeSegmentAtIndex:animated:")]
    void RemoveSegmentAtIndex(nuint segment, bool animated);

    // -(void)removeAllSegments;
    [Export("removeAllSegments")]
    void RemoveAllSegments();

    // -(void)setTitle:(NSString * _Nullable)title forSegmentAtIndex:(NSUInteger)segment;
    [Export("setTitle:forSegmentAtIndex:")]
    void SetTitle([NullAllowed] string title, nuint segment);

    // -(NSString * _Nullable)titleForSegmentAtIndex:(NSUInteger)segment;
    [Export("titleForSegmentAtIndex:")]
    [return: NullAllowed]
    string TitleForSegmentAtIndex(nuint segment);

    // -(void)setImage:(UIImage * _Nullable)image forSegmentAtIndex:(NSUInteger)segment;
    [Export("setImage:forSegmentAtIndex:")]
    void SetImage([NullAllowed] UIImage image, nuint segment);

    // -(UIImage * _Nullable)imageForSegmentAtIndex:(NSUInteger)segment;
    [Export("imageForSegmentAtIndex:")]
    [return: NullAllowed]
    UIImage ImageForSegmentAtIndex(nuint segment);

    // -(void)setWidth:(CGFloat)width forSegmentAtIndex:(NSUInteger)segment;
    [Export("setWidth:forSegmentAtIndex:")]
    void SetWidth(nfloat width, nuint segment);

    // -(CGFloat)widthForSegmentAtIndex:(NSUInteger)segment;
    [Export("widthForSegmentAtIndex:")]
    nfloat WidthForSegmentAtIndex(nuint segment);

    // -(void)setContentOffset:(CGSize)offset forSegmentAtIndex:(NSUInteger)segment;
    [Export("setContentOffset:forSegmentAtIndex:")]
    void SetContentOffset(CGSize offset, nuint segment);

    // -(CGSize)contentOffsetForSegmentAtIndex:(NSUInteger)segment;
    [Export("contentOffsetForSegmentAtIndex:")]
    CGSize ContentOffsetForSegmentAtIndex(nuint segment);

    // -(void)setEnabled:(BOOL)enabled forSegmentAtIndex:(NSUInteger)segment;
    [Export("setEnabled:forSegmentAtIndex:")]
    void SetEnabled(bool enabled, nuint segment);

    // -(BOOL)isEnabledForSegmentAtIndex:(NSUInteger)segment;
    [Export("isEnabledForSegmentAtIndex:")]
    bool IsEnabledForSegmentAtIndex(nuint segment);

    // @property (nonatomic) NSInteger selectedSegmentIndex;
    [Export("selectedSegmentIndex")]
    nint SelectedSegmentIndex { get; set; }

    // @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
    [Export("tintColor", ArgumentSemantic.Strong)]
    UIColor TintColor { get; set; }

    // -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setBackgroundImage:forState:barMetrics:")]
    void SetBackgroundImage([NullAllowed] UIImage backgroundImage, UIControlState state, UIBarMetrics barMetrics);

    // -(UIImage * _Nullable)backgroundImageForState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("backgroundImageForState:barMetrics:")]
    [return: NullAllowed]
    UIImage BackgroundImageForState(UIControlState state, UIBarMetrics barMetrics);

    // -(void)setDividerImage:(UIImage * _Nullable)dividerImage forLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setDividerImage:forLeftSegmentState:rightSegmentState:barMetrics:")]
    void SetDividerImage([NullAllowed] UIImage dividerImage, UIControlState leftState, UIControlState rightState, UIBarMetrics barMetrics);

    // -(UIImage * _Nullable)dividerImageForLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("dividerImageForLeftSegmentState:rightSegmentState:barMetrics:")]
    [return: NullAllowed]
    UIImage DividerImageForLeftSegmentState(UIControlState leftState, UIControlState rightState, UIBarMetrics barMetrics);

    // -(void)setTitleTextAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attributes forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setTitleTextAttributes:forState:")]
    void SetTitleTextAttributes([NullAllowed] NSDictionary<NSString, NSObject> attributes, UIControlState state);

    // -(NSDictionary<NSAttributedStringKey,id> * _Nullable)titleTextAttributesForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("titleTextAttributesForState:")]
    [return: NullAllowed]
    NSDictionary<NSString, NSObject> TitleTextAttributesForState(UIControlState state);

    // -(void)setContentPositionAdjustment:(UIOffset)adjustment forSegmentType:(UISegmentedControlSegment)leftCenterRightOrAlone barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setContentPositionAdjustment:forSegmentType:barMetrics:")]
    void SetContentPositionAdjustment(UIOffset adjustment, UISegmentedControlSegment leftCenterRightOrAlone, UIBarMetrics barMetrics);

    // -(UIOffset)contentPositionAdjustmentForSegmentType:(UISegmentedControlSegment)leftCenterRightOrAlone barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("contentPositionAdjustmentForSegmentType:barMetrics:")]
    UIOffset ContentPositionAdjustmentForSegmentType(UISegmentedControlSegment leftCenterRightOrAlone, UIBarMetrics barMetrics);
}

// @interface SpringLoading (UISegmentedControl) <UISpringLoadedInteractionSupporting>
[Category]
[BaseType(typeof(UISegmentedControl))]
interface UISegmentedControl_SpringLoading : IUISpringLoadedInteractionSupporting
{
}

// @interface UISlider : UIControl <NSCoding>
[NoTV, iOS(2, 0)]
[BaseType(typeof(UIControl))]
interface UISlider : INSCoding
{
    // @property (nonatomic) float value;
    [Export("value")]
    float Value { get; set; }

    // @property (nonatomic) float minimumValue;
    [Export("minimumValue")]
    float MinimumValue { get; set; }

    // @property (nonatomic) float maximumValue;
    [Export("maximumValue")]
    float MaximumValue { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable minimumValueImage;
    [NullAllowed, Export("minimumValueImage", ArgumentSemantic.Strong)]
    UIImage MinimumValueImage { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable maximumValueImage;
    [NullAllowed, Export("maximumValueImage", ArgumentSemantic.Strong)]
    UIImage MaximumValueImage { get; set; }

    // @property (getter = isContinuous, nonatomic) BOOL continuous;
    [Export("continuous")]
    bool Continuous { [Bind("isContinuous")] get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable minimumTrackTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("minimumTrackTintColor", ArgumentSemantic.Strong)]
    UIColor MinimumTrackTintColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable maximumTrackTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("maximumTrackTintColor", ArgumentSemantic.Strong)]
    UIColor MaximumTrackTintColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable thumbTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("thumbTintColor", ArgumentSemantic.Strong)]
    UIColor ThumbTintColor { get; set; }

    // -(void)setValue:(float)value animated:(BOOL)animated;
    [Export("setValue:animated:")]
    void SetValue(float value, bool animated);

    // -(void)setThumbImage:(UIImage * _Nullable)image forState:(UIControlState)state;
    [Export("setThumbImage:forState:")]
    void SetThumbImage([NullAllowed] UIImage image, UIControlState state);

    // -(void)setMinimumTrackImage:(UIImage * _Nullable)image forState:(UIControlState)state;
    [Export("setMinimumTrackImage:forState:")]
    void SetMinimumTrackImage([NullAllowed] UIImage image, UIControlState state);

    // -(void)setMaximumTrackImage:(UIImage * _Nullable)image forState:(UIControlState)state;
    [Export("setMaximumTrackImage:forState:")]
    void SetMaximumTrackImage([NullAllowed] UIImage image, UIControlState state);

    // -(UIImage * _Nullable)thumbImageForState:(UIControlState)state;
    [Export("thumbImageForState:")]
    [return: NullAllowed]
    UIImage ThumbImageForState(UIControlState state);

    // -(UIImage * _Nullable)minimumTrackImageForState:(UIControlState)state;
    [Export("minimumTrackImageForState:")]
    [return: NullAllowed]
    UIImage MinimumTrackImageForState(UIControlState state);

    // -(UIImage * _Nullable)maximumTrackImageForState:(UIControlState)state;
    [Export("maximumTrackImageForState:")]
    [return: NullAllowed]
    UIImage MaximumTrackImageForState(UIControlState state);

    // @property (readonly, nonatomic) UIImage * _Nullable currentThumbImage;
    [NullAllowed, Export("currentThumbImage")]
    UIImage CurrentThumbImage { get; }

    // @property (readonly, nonatomic) UIImage * _Nullable currentMinimumTrackImage;
    [NullAllowed, Export("currentMinimumTrackImage")]
    UIImage CurrentMinimumTrackImage { get; }

    // @property (readonly, nonatomic) UIImage * _Nullable currentMaximumTrackImage;
    [NullAllowed, Export("currentMaximumTrackImage")]
    UIImage CurrentMaximumTrackImage { get; }

    // -(CGRect)minimumValueImageRectForBounds:(CGRect)bounds;
    [Export("minimumValueImageRectForBounds:")]
    CGRect MinimumValueImageRectForBounds(CGRect bounds);

    // -(CGRect)maximumValueImageRectForBounds:(CGRect)bounds;
    [Export("maximumValueImageRectForBounds:")]
    CGRect MaximumValueImageRectForBounds(CGRect bounds);

    // -(CGRect)trackRectForBounds:(CGRect)bounds;
    [Export("trackRectForBounds:")]
    CGRect TrackRectForBounds(CGRect bounds);

    // -(CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value;
    [Export("thumbRectForBounds:trackRect:value:")]
    CGRect ThumbRectForBounds(CGRect bounds, CGRect rect, float value);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const CGFloat UISplitViewControllerAutomaticDimension __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Field("UISplitViewControllerAutomaticDimension", "__Internal")]
    nfloat UISplitViewControllerAutomaticDimension { get; }
}

// @interface UISplitViewController : UIViewController
[iOS(3, 2)]
[BaseType(typeof(UIViewController))]
interface UISplitViewController
{
    // @property (copy, nonatomic) NSArray<__kindof UIViewController *> * _Nonnull viewControllers;
    [Export("viewControllers", ArgumentSemantic.Copy)]
    UIViewController[] ViewControllers { get; set; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UISplitViewControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UISplitViewControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (nonatomic) BOOL presentsWithGesture __attribute__((availability(ios, introduced=5_1)));
    [iOS(5, 1)]
    [Export("presentsWithGesture")]
    bool PresentsWithGesture { get; set; }

    // @property (readonly, getter = isCollapsed, nonatomic) BOOL collapsed __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("collapsed")]
    bool Collapsed { [Bind("isCollapsed")] get; }

    // @property (nonatomic) UISplitViewControllerDisplayMode preferredDisplayMode __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("preferredDisplayMode", ArgumentSemantic.Assign)]
    UISplitViewControllerDisplayMode PreferredDisplayMode { get; set; }

    // @property (readonly, nonatomic) UISplitViewControllerDisplayMode displayMode __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("displayMode")]
    UISplitViewControllerDisplayMode DisplayMode { get; }

    // @property (readonly, nonatomic) UIBarButtonItem * _Nonnull displayModeButtonItem __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("displayModeButtonItem")]
    UIBarButtonItem DisplayModeButtonItem { get; }

    // @property (assign, nonatomic) CGFloat preferredPrimaryColumnWidthFraction __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("preferredPrimaryColumnWidthFraction")]
    nfloat PreferredPrimaryColumnWidthFraction { get; set; }

    // @property (assign, nonatomic) CGFloat minimumPrimaryColumnWidth __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("minimumPrimaryColumnWidth")]
    nfloat MinimumPrimaryColumnWidth { get; set; }

    // @property (assign, nonatomic) CGFloat maximumPrimaryColumnWidth __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("maximumPrimaryColumnWidth")]
    nfloat MaximumPrimaryColumnWidth { get; set; }

    // @property (readonly, nonatomic) CGFloat primaryColumnWidth __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("primaryColumnWidth")]
    nfloat PrimaryColumnWidth { get; }

    // @property (nonatomic) UISplitViewControllerPrimaryEdge primaryEdge __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("primaryEdge", ArgumentSemantic.Assign)]
    UISplitViewControllerPrimaryEdge PrimaryEdge { get; set; }

    // -(void)showViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("showViewController:sender:")]
    void ShowViewController(UIViewController vc, [NullAllowed] NSObject sender);

    // -(void)showDetailViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("showDetailViewController:sender:")]
    void ShowDetailViewController(UIViewController vc, [NullAllowed] NSObject sender);
}

// @protocol UISplitViewControllerDelegate
[Protocol, Model]
interface UISplitViewControllerDelegate
{
    // @optional -(void)splitViewController:(UISplitViewController * _Nonnull)svc willChangeToDisplayMode:(UISplitViewControllerDisplayMode)displayMode __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("splitViewController:willChangeToDisplayMode:")]
    void SplitViewController(UISplitViewController svc, UISplitViewControllerDisplayMode displayMode);

    // @optional -(UISplitViewControllerDisplayMode)targetDisplayModeForActionInSplitViewController:(UISplitViewController * _Nonnull)svc __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("targetDisplayModeForActionInSplitViewController:")]
    UISplitViewControllerDisplayMode TargetDisplayModeForActionInSplitViewController(UISplitViewController svc);

    // @optional -(BOOL)splitViewController:(UISplitViewController * _Nonnull)splitViewController showViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("splitViewController:showViewController:sender:")]
    bool SplitViewController(UISplitViewController splitViewController, UIViewController vc, [NullAllowed] NSObject sender);

    // @optional -(BOOL)splitViewController:(UISplitViewController * _Nonnull)splitViewController showDetailViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("splitViewController:showDetailViewController:sender:")]
    bool SplitViewController(UISplitViewController splitViewController, UIViewController vc, [NullAllowed] NSObject sender);

    // @optional -(UIViewController * _Nullable)primaryViewControllerForCollapsingSplitViewController:(UISplitViewController * _Nonnull)splitViewController __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("primaryViewControllerForCollapsingSplitViewController:")]
    [return: NullAllowed]
    UIViewController PrimaryViewControllerForCollapsingSplitViewController(UISplitViewController splitViewController);

    // @optional -(UIViewController * _Nullable)primaryViewControllerForExpandingSplitViewController:(UISplitViewController * _Nonnull)splitViewController __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("primaryViewControllerForExpandingSplitViewController:")]
    [return: NullAllowed]
    UIViewController PrimaryViewControllerForExpandingSplitViewController(UISplitViewController splitViewController);

    // @optional -(BOOL)splitViewController:(UISplitViewController * _Nonnull)splitViewController collapseSecondaryViewController:(UIViewController * _Nonnull)secondaryViewController ontoPrimaryViewController:(UIViewController * _Nonnull)primaryViewController __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("splitViewController:collapseSecondaryViewController:ontoPrimaryViewController:")]
    bool SplitViewController(UISplitViewController splitViewController, UIViewController secondaryViewController, UIViewController primaryViewController);

    // @optional -(UIViewController * _Nullable)splitViewController:(UISplitViewController * _Nonnull)splitViewController separateSecondaryViewControllerFromPrimaryViewController:(UIViewController * _Nonnull)primaryViewController __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("splitViewController:separateSecondaryViewControllerFromPrimaryViewController:")]
    [return: NullAllowed]
    UIViewController SplitViewController(UISplitViewController splitViewController, UIViewController primaryViewController);

    // @optional -(UIInterfaceOrientationMask)splitViewControllerSupportedInterfaceOrientations:(UISplitViewController * _Nonnull)splitViewController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("splitViewControllerSupportedInterfaceOrientations:")]
    UIInterfaceOrientationMask SplitViewControllerSupportedInterfaceOrientations(UISplitViewController splitViewController);

    // @optional -(UIInterfaceOrientation)splitViewControllerPreferredInterfaceOrientationForPresentation:(UISplitViewController * _Nonnull)splitViewController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("splitViewControllerPreferredInterfaceOrientationForPresentation:")]
    UIInterfaceOrientation SplitViewControllerPreferredInterfaceOrientationForPresentation(UISplitViewController splitViewController);

    // @optional -(void)splitViewController:(UISplitViewController * _Nonnull)svc willHideViewController:(UIViewController * _Nonnull)aViewController withBarButtonItem:(UIBarButtonItem * _Nonnull)barButtonItem forPopoverController:(UIPopoverController * _Nonnull)pc __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use splitViewController:willChangeToDisplayMode: and displayModeButtonItem instead")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Use splitViewController:willChangeToDisplayMode: and displayModeButtonItem instead")]
    [NoTV]
    [Export("splitViewController:willHideViewController:withBarButtonItem:forPopoverController:")]
    void SplitViewController(UISplitViewController svc, UIViewController aViewController, UIBarButtonItem barButtonItem, UIPopoverController pc);

    // @optional -(void)splitViewController:(UISplitViewController * _Nonnull)svc willShowViewController:(UIViewController * _Nonnull)aViewController invalidatingBarButtonItem:(UIBarButtonItem * _Nonnull)barButtonItem __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use splitViewController:willChangeToDisplayMode: and displayModeButtonItem instead")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Use splitViewController:willChangeToDisplayMode: and displayModeButtonItem instead")]
    [NoTV]
    [Export("splitViewController:willShowViewController:invalidatingBarButtonItem:")]
    void SplitViewController(UISplitViewController svc, UIViewController aViewController, UIBarButtonItem barButtonItem);

    // @optional -(void)splitViewController:(UISplitViewController * _Nonnull)svc popoverController:(UIPopoverController * _Nonnull)pc willPresentViewController:(UIViewController * _Nonnull)aViewController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "Use splitViewController:willChangeToDisplayMode: instead")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Use splitViewController:willChangeToDisplayMode: instead")]
    [NoTV]
    [Export("splitViewController:popoverController:willPresentViewController:")]
    void SplitViewController(UISplitViewController svc, UIPopoverController pc, UIViewController aViewController);

    // @optional -(BOOL)splitViewController:(UISplitViewController * _Nonnull)svc shouldHideViewController:(UIViewController * _Nonnull)vc inOrientation:(UIInterfaceOrientation)orientation __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 5, 0, message: "Use preferredDisplayMode instead")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Use preferredDisplayMode instead")]
    [NoTV]
    [Export("splitViewController:shouldHideViewController:inOrientation:")]
    bool SplitViewController(UISplitViewController svc, UIViewController vc, UIInterfaceOrientation orientation);
}

// @interface UISplitViewController (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UISplitViewController
{
    // @property (readonly, nonatomic, strong) UISplitViewController * _Nullable splitViewController;
    [NullAllowed, Export("splitViewController", ArgumentSemantic.Strong)]
    UISplitViewController SplitViewController { get; }

    // -(void)collapseSecondaryViewController:(UIViewController * _Nonnull)secondaryViewController forSplitViewController:(UISplitViewController * _Nonnull)splitViewController __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("collapseSecondaryViewController:forSplitViewController:")]
    void CollapseSecondaryViewController(UIViewController secondaryViewController, UISplitViewController splitViewController);

    // -(UIViewController * _Nullable)separateSecondaryViewControllerForSplitViewController:(UISplitViewController * _Nonnull)splitViewController __attribute__((availability(ios, introduced=8_0)));
    [iOS(8, 0)]
    [Export("separateSecondaryViewControllerForSplitViewController:")]
    [return: NullAllowed]
    UIViewController SeparateSecondaryViewControllerForSplitViewController(UISplitViewController splitViewController);
}

// @interface UIStepper : UIControl
[NoTV, iOS(5, 0)]
[BaseType(typeof(UIControl))]
interface UIStepper
{
    // @property (getter = isContinuous, nonatomic) BOOL continuous;
    [Export("continuous")]
    bool Continuous { [Bind("isContinuous")] get; set; }

    // @property (nonatomic) BOOL autorepeat;
    [Export("autorepeat")]
    bool Autorepeat { get; set; }

    // @property (nonatomic) BOOL wraps;
    [Export("wraps")]
    bool Wraps { get; set; }

    // @property (nonatomic) double value;
    [Export("value")]
    double Value { get; set; }

    // @property (nonatomic) double minimumValue;
    [Export("minimumValue")]
    double MinimumValue { get; set; }

    // @property (nonatomic) double maximumValue;
    [Export("maximumValue")]
    double MaximumValue { get; set; }

    // @property (nonatomic) double stepValue;
    [Export("stepValue")]
    double StepValue { get; set; }

    // @property (nonatomic, strong) UIColor * _Null_unspecified tintColor __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("tintColor", ArgumentSemantic.Strong)]
    UIColor TintColor { get; set; }

    // -(void)setBackgroundImage:(UIImage * _Nullable)image forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("setBackgroundImage:forState:")]
    void SetBackgroundImage([NullAllowed] UIImage image, UIControlState state);

    // -(UIImage * _Nullable)backgroundImageForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("backgroundImageForState:")]
    [return: NullAllowed]
    UIImage BackgroundImageForState(UIControlState state);

    // -(void)setDividerImage:(UIImage * _Nullable)image forLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("setDividerImage:forLeftSegmentState:rightSegmentState:")]
    void SetDividerImage([NullAllowed] UIImage image, UIControlState leftState, UIControlState rightState);

    // -(UIImage * _Nullable)dividerImageForLeftSegmentState:(UIControlState)state rightSegmentState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("dividerImageForLeftSegmentState:rightSegmentState:")]
    [return: NullAllowed]
    UIImage DividerImageForLeftSegmentState(UIControlState state, UIControlState state);

    // -(void)setIncrementImage:(UIImage * _Nullable)image forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("setIncrementImage:forState:")]
    void SetIncrementImage([NullAllowed] UIImage image, UIControlState state);

    // -(UIImage * _Nullable)incrementImageForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("incrementImageForState:")]
    [return: NullAllowed]
    UIImage IncrementImageForState(UIControlState state);

    // -(void)setDecrementImage:(UIImage * _Nullable)image forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("setDecrementImage:forState:")]
    void SetDecrementImage([NullAllowed] UIImage image, UIControlState state);

    // -(UIImage * _Nullable)decrementImageForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("decrementImageForState:")]
    [return: NullAllowed]
    UIImage DecrementImageForState(UIControlState state);
}

// @interface UIStoryboard : NSObject
[iOS(5, 0)]
[BaseType(typeof(NSObject))]
interface UIStoryboard
{
    // +(UIStoryboard * _Nonnull)storyboardWithName:(NSString * _Nonnull)name bundle:(NSBundle * _Nullable)storyboardBundleOrNil;
    [Static]
    [Export("storyboardWithName:bundle:")]
    UIStoryboard StoryboardWithName(string name, [NullAllowed] NSBundle storyboardBundleOrNil);

    // -(__kindof UIViewController * _Nullable)instantiateInitialViewController;
    [Export("instantiateInitialViewController")]
    [Verify(MethodToProperty)]
    UIViewController InstantiateInitialViewController { get; }

    // -(__kindof UIViewController * _Nonnull)instantiateViewControllerWithIdentifier:(NSString * _Nonnull)identifier;
    [Export("instantiateViewControllerWithIdentifier:")]
    UIViewController InstantiateViewControllerWithIdentifier(string identifier);
}

// @interface UIStoryboardSegue : NSObject
[iOS(5, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIStoryboardSegue
{
    // +(instancetype _Nonnull)segueWithIdentifier:(NSString * _Nullable)identifier source:(UIViewController * _Nonnull)source destination:(UIViewController * _Nonnull)destination performHandler:(void (^ _Nonnull)(void))performHandler __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Static]
    [Export("segueWithIdentifier:source:destination:performHandler:")]
    UIStoryboardSegue SegueWithIdentifier([NullAllowed] string identifier, UIViewController source, UIViewController destination, Action performHandler);

    // -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nullable)identifier source:(UIViewController * _Nonnull)source destination:(UIViewController * _Nonnull)destination __attribute__((objc_designated_initializer));
    [Export("initWithIdentifier:source:destination:")]
    [DesignatedInitializer]
    IntPtr Constructor([NullAllowed] string identifier, UIViewController source, UIViewController destination);

    // @property (readonly, copy, nonatomic) NSString * _Nullable identifier;
    [NullAllowed, Export("identifier")]
    string Identifier { get; }

    // @property (readonly, nonatomic) __kindof UIViewController * _Nonnull sourceViewController;
    [Export("sourceViewController")]
    UIViewController SourceViewController { get; }

    // @property (readonly, nonatomic) __kindof UIViewController * _Nonnull destinationViewController;
    [Export("destinationViewController")]
    UIViewController DestinationViewController { get; }

    // -(void)perform;
    [Export("perform")]
    void Perform();
}

// @interface UIStoryboardUnwindSegueSource : NSObject
[iOS(9, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIStoryboardUnwindSegueSource
{
    // @property (readonly) UIViewController * _Nonnull sourceViewController;
    [Export("sourceViewController")]
    UIViewController SourceViewController { get; }

    // @property (readonly) SEL _Nonnull unwindAction;
    [Export("unwindAction")]
    Selector UnwindAction { get; }

    // @property (readonly) id _Nullable sender;
    [NullAllowed, Export("sender")]
    NSObject Sender { get; }
}

// @interface UIStoryboardPopoverSegue : UIStoryboardSegue
[Introduced(PlatformName.iOS, 5, 0, message: "Access destinationViewController.popoverPresentationController from your segue's performHandler or override of -perform")]
[Deprecated(PlatformName.iOS, 9, 0, message: "Access destinationViewController.popoverPresentationController from your segue's performHandler or override of -perform")]
[BaseType(typeof(UIStoryboardSegue))]
interface UIStoryboardPopoverSegue
{
    // @property (readonly, nonatomic, strong) UIPopoverController * _Nonnull popoverController;
    [Export("popoverController", ArgumentSemantic.Strong)]
    UIPopoverController PopoverController { get; }
}

// @interface UISwitch : UIControl <NSCoding>
[NoTV, iOS(2, 0)]
[BaseType(typeof(UIControl))]
interface UISwitch : INSCoding
{
    // @property (nonatomic, strong) UIColor * _Nullable onTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("onTintColor", ArgumentSemantic.Strong)]
    UIColor OnTintColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Null_unspecified tintColor __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("tintColor", ArgumentSemantic.Strong)]
    UIColor TintColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable thumbTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("thumbTintColor", ArgumentSemantic.Strong)]
    UIColor ThumbTintColor { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable onImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("onImage", ArgumentSemantic.Strong)]
    UIImage OnImage { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable offImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("offImage", ArgumentSemantic.Strong)]
    UIImage OffImage { get; set; }

    // @property (getter = isOn, nonatomic) BOOL on;
    [Export("on")]
    bool On { [Bind("isOn")] get; set; }

    // -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
    [Export("initWithFrame:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect frame);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // -(void)setOn:(BOOL)on animated:(BOOL)animated;
    [Export("setOn:animated:")]
    void SetOn(bool on, bool animated);
}

// @interface UITabBar : UIView
[iOS(2, 0)]
[BaseType(typeof(UIView))]
interface UITabBar
{
    [Wrap("WeakDelegate")]
    [NullAllowed]
    UITabBarDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UITabBarDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (copy, nonatomic) NSArray<UITabBarItem *> * _Nullable items;
    [NullAllowed, Export("items", ArgumentSemantic.Copy)]
    UITabBarItem[] Items { get; set; }

    // @property (nonatomic, weak) UITabBarItem * _Nullable selectedItem;
    [NullAllowed, Export("selectedItem", ArgumentSemantic.Weak)]
    UITabBarItem SelectedItem { get; set; }

    // -(void)setItems:(NSArray<UITabBarItem *> * _Nullable)items animated:(BOOL)animated;
    [Export("setItems:animated:")]
    void SetItems([NullAllowed] UITabBarItem[] items, bool animated);

    // -(void)beginCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("beginCustomizingItems:")]
    void BeginCustomizingItems(UITabBarItem[] items);

    // -(BOOL)endCustomizingAnimated:(BOOL)animated __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("endCustomizingAnimated:")]
    bool EndCustomizingAnimated(bool animated);

    // @property (readonly, getter = isCustomizing, nonatomic) BOOL customizing __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("customizing")]
    bool Customizing { [Bind("isCustomizing")] get; }

    // @property (nonatomic, strong) UIColor * _Null_unspecified tintColor __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("tintColor", ArgumentSemantic.Strong)]
    UIColor TintColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable barTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("barTintColor", ArgumentSemantic.Strong)]
    UIColor BarTintColor { get; set; }

    // @property (readwrite, copy, nonatomic) UIColor * _Nullable unselectedItemTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [NullAllowed, Export("unselectedItemTintColor", ArgumentSemantic.Copy)]
    UIColor UnselectedItemTintColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable selectedImageTintColor __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0, deprecated=8_0)));
    [Introduced(PlatformName.iOS, 5, 0, message: "Use tintColor")]
    [Deprecated(PlatformName.iOS, 8, 0, message: "Use tintColor")]
    [NoTV]
    [NullAllowed, Export("selectedImageTintColor", ArgumentSemantic.Strong)]
    UIColor SelectedImageTintColor { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable backgroundImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("backgroundImage", ArgumentSemantic.Strong)]
    UIImage BackgroundImage { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable selectionIndicatorImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [NullAllowed, Export("selectionIndicatorImage", ArgumentSemantic.Strong)]
    UIImage SelectionIndicatorImage { get; set; }

    // @property (nonatomic, strong) UIImage * _Nullable shadowImage __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [NullAllowed, Export("shadowImage", ArgumentSemantic.Strong)]
    UIImage ShadowImage { get; set; }

    // @property (nonatomic) UITabBarItemPositioning itemPositioning __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("itemPositioning", ArgumentSemantic.Assign)]
    UITabBarItemPositioning ItemPositioning { get; set; }

    // @property (nonatomic) CGFloat itemWidth __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("itemWidth")]
    nfloat ItemWidth { get; set; }

    // @property (nonatomic) CGFloat itemSpacing __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("itemSpacing")]
    nfloat ItemSpacing { get; set; }

    // @property (nonatomic) UIBarStyle barStyle __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("barStyle", ArgumentSemantic.Assign)]
    UIBarStyle BarStyle { get; set; }

    // @property (getter = isTranslucent, nonatomic) BOOL translucent __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("translucent")]
    bool Translucent { [Bind("isTranslucent")] get; set; }
}

// @protocol UITabBarDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITabBarDelegate
{
    // @optional -(void)tabBar:(UITabBar * _Nonnull)tabBar didSelectItem:(UITabBarItem * _Nonnull)item;
    [Export("tabBar:didSelectItem:")]
    void DidSelectItem(UITabBar tabBar, UITabBarItem item);

    // @optional -(void)tabBar:(UITabBar * _Nonnull)tabBar willBeginCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("tabBar:willBeginCustomizingItems:")]
    void WillBeginCustomizingItems(UITabBar tabBar, UITabBarItem[] items);

    // @optional -(void)tabBar:(UITabBar * _Nonnull)tabBar didBeginCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("tabBar:didBeginCustomizingItems:")]
    void DidBeginCustomizingItems(UITabBar tabBar, UITabBarItem[] items);

    // @optional -(void)tabBar:(UITabBar * _Nonnull)tabBar willEndCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items changed:(BOOL)changed __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("tabBar:willEndCustomizingItems:changed:")]
    void WillEndCustomizingItems(UITabBar tabBar, UITabBarItem[] items, bool changed);

    // @optional -(void)tabBar:(UITabBar * _Nonnull)tabBar didEndCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items changed:(BOOL)changed __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("tabBar:didEndCustomizingItems:changed:")]
    void DidEndCustomizingItems(UITabBar tabBar, UITabBarItem[] items, bool changed);
}

// @interface SpringLoading (UITabBar) <UISpringLoadedInteractionSupporting>
[Category]
[BaseType(typeof(UITabBar))]
interface UITabBar_SpringLoading : IUISpringLoadedInteractionSupporting
{
}

// @interface UITabBarController : UIViewController <UITabBarDelegate, NSCoding>
[iOS(2, 0)]
[BaseType(typeof(UIViewController))]
interface UITabBarController : IUITabBarDelegate, INSCoding
{
    // @property (copy, nonatomic) NSArray<__kindof UIViewController *> * _Nullable viewControllers;
    [NullAllowed, Export("viewControllers", ArgumentSemantic.Copy)]
    UIViewController[] ViewControllers { get; set; }

    // -(void)setViewControllers:(NSArray<__kindof UIViewController *> * _Nullable)viewControllers animated:(BOOL)animated;
    [Export("setViewControllers:animated:")]
    void SetViewControllers([NullAllowed] UIViewController[] viewControllers, bool animated);

    // @property (assign, nonatomic) __kindof UIViewController * _Nullable selectedViewController;
    [Export("selectedViewController", ArgumentSemantic.Assign)]
    UIViewController SelectedViewController { get; set; }

    // @property (nonatomic) NSUInteger selectedIndex;
    [Export("selectedIndex")]
    nuint SelectedIndex { get; set; }

    // @property (readonly, nonatomic) UINavigationController * _Nonnull moreNavigationController __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("moreNavigationController")]
    UINavigationController MoreNavigationController { get; }

    // @property (copy, nonatomic) NSArray<__kindof UIViewController *> * _Nullable customizableViewControllers __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [NullAllowed, Export("customizableViewControllers", ArgumentSemantic.Copy)]
    UIViewController[] CustomizableViewControllers { get; set; }

    // @property (readonly, nonatomic) UITabBar * _Nonnull tabBar __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("tabBar")]
    UITabBar TabBar { get; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UITabBarControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UITabBarControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }
}

// @protocol UITabBarControllerDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITabBarControllerDelegate
{
    // @optional -(BOOL)tabBarController:(UITabBarController * _Nonnull)tabBarController shouldSelectViewController:(UIViewController * _Nonnull)viewController __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("tabBarController:shouldSelectViewController:")]
    bool TabBarController(UITabBarController tabBarController, UIViewController viewController);

    // @optional -(void)tabBarController:(UITabBarController * _Nonnull)tabBarController didSelectViewController:(UIViewController * _Nonnull)viewController;
    [Export("tabBarController:didSelectViewController:")]
    void TabBarController(UITabBarController tabBarController, UIViewController viewController);

    // @optional -(void)tabBarController:(UITabBarController * _Nonnull)tabBarController willBeginCustomizingViewControllers:(NSArray<__kindof UIViewController *> * _Nonnull)viewControllers __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("tabBarController:willBeginCustomizingViewControllers:")]
    void TabBarController(UITabBarController tabBarController, UIViewController[] viewControllers);

    // @optional -(void)tabBarController:(UITabBarController * _Nonnull)tabBarController willEndCustomizingViewControllers:(NSArray<__kindof UIViewController *> * _Nonnull)viewControllers changed:(BOOL)changed __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("tabBarController:willEndCustomizingViewControllers:changed:")]
    void TabBarController(UITabBarController tabBarController, UIViewController[] viewControllers, bool changed);

    // @optional -(void)tabBarController:(UITabBarController * _Nonnull)tabBarController didEndCustomizingViewControllers:(NSArray<__kindof UIViewController *> * _Nonnull)viewControllers changed:(BOOL)changed __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("tabBarController:didEndCustomizingViewControllers:changed:")]
    void TabBarController(UITabBarController tabBarController, UIViewController[] viewControllers, bool changed);

    // @optional -(UIInterfaceOrientationMask)tabBarControllerSupportedInterfaceOrientations:(UITabBarController * _Nonnull)tabBarController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("tabBarControllerSupportedInterfaceOrientations:")]
    UIInterfaceOrientationMask TabBarControllerSupportedInterfaceOrientations(UITabBarController tabBarController);

    // @optional -(UIInterfaceOrientation)tabBarControllerPreferredInterfaceOrientationForPresentation:(UITabBarController * _Nonnull)tabBarController __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0)));
    [NoTV, iOS(7, 0)]
    [Export("tabBarControllerPreferredInterfaceOrientationForPresentation:")]
    UIInterfaceOrientation TabBarControllerPreferredInterfaceOrientationForPresentation(UITabBarController tabBarController);

    // @optional -(id<UIViewControllerInteractiveTransitioning> _Nullable)tabBarController:(UITabBarController * _Nonnull)tabBarController interactionControllerForAnimationController:(id<UIViewControllerAnimatedTransitioning> _Nonnull)animationController __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("tabBarController:interactionControllerForAnimationController:")]
    [return: NullAllowed]
    UIViewControllerInteractiveTransitioning TabBarController(UITabBarController tabBarController, UIViewControllerAnimatedTransitioning animationController);

    // @optional -(id<UIViewControllerAnimatedTransitioning> _Nullable)tabBarController:(UITabBarController * _Nonnull)tabBarController animationControllerForTransitionFromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("tabBarController:animationControllerForTransitionFromViewController:toViewController:")]
    [return: NullAllowed]
    UIViewControllerAnimatedTransitioning TabBarController(UITabBarController tabBarController, UIViewController fromVC, UIViewController toVC);
}

// @interface UITabBarControllerItem (UIViewController)
[Category]
[BaseType(typeof(UIViewController))]
interface UIViewController_UITabBarControllerItem
{
    // @property (nonatomic, strong) UITabBarItem * _Null_unspecified tabBarItem;
    [Export("tabBarItem", ArgumentSemantic.Strong)]
    UITabBarItem TabBarItem { get; set; }

    // @property (readonly, nonatomic, strong) UITabBarController * _Nullable tabBarController;
    [NullAllowed, Export("tabBarController", ArgumentSemantic.Strong)]
    UITabBarController TabBarController { get; }
}

// @interface UITabBarItem : UIBarItem
[iOS(2, 0)]
[BaseType(typeof(UIBarItem))]
interface UITabBarItem
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // -(instancetype _Nonnull)initWithTitle:(NSString * _Nullable)title image:(UIImage * _Nullable)image tag:(NSInteger)tag;
    [Export("initWithTitle:image:tag:")]
    IntPtr Constructor([NullAllowed] string title, [NullAllowed] UIImage image, nint tag);

    // -(instancetype _Nonnull)initWithTitle:(NSString * _Nullable)title image:(UIImage * _Nullable)image selectedImage:(UIImage * _Nullable)selectedImage __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("initWithTitle:image:selectedImage:")]
    IntPtr Constructor([NullAllowed] string title, [NullAllowed] UIImage image, [NullAllowed] UIImage selectedImage);

    // -(instancetype _Nonnull)initWithTabBarSystemItem:(UITabBarSystemItem)systemItem tag:(NSInteger)tag;
    [Export("initWithTabBarSystemItem:tag:")]
    IntPtr Constructor(UITabBarSystemItem systemItem, nint tag);

    // @property (nonatomic, strong) UIImage * _Nullable selectedImage __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("selectedImage", ArgumentSemantic.Strong)]
    UIImage SelectedImage { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable badgeValue;
    [NullAllowed, Export("badgeValue")]
    string BadgeValue { get; set; }

    // -(void)setFinishedSelectedImage:(UIImage * _Nullable)selectedImage withFinishedUnselectedImage:(UIImage * _Nullable)unselectedImage __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 5, 0, message: "Use initWithTitle:image:selectedImage: or the image and selectedImage properties along with UIImageRenderingModeAlwaysOriginal")]
    [Deprecated(PlatformName.iOS, 7, 0, message: "Use initWithTitle:image:selectedImage: or the image and selectedImage properties along with UIImageRenderingModeAlwaysOriginal")]
    [NoTV]
    [Export("setFinishedSelectedImage:withFinishedUnselectedImage:")]
    void SetFinishedSelectedImage([NullAllowed] UIImage selectedImage, [NullAllowed] UIImage unselectedImage);

    // -(UIImage * _Nullable)finishedSelectedImage __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 5, 0)]
    [Deprecated(PlatformName.iOS, 7, 0)]
    [NoTV]
    [NullAllowed, Export("finishedSelectedImage")]
    [Verify(MethodToProperty)]
    UIImage FinishedSelectedImage { get; }

    // -(UIImage * _Nullable)finishedUnselectedImage __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 5, 0)]
    [Deprecated(PlatformName.iOS, 7, 0)]
    [NoTV]
    [NullAllowed, Export("finishedUnselectedImage")]
    [Verify(MethodToProperty)]
    UIImage FinishedUnselectedImage { get; }

    // @property (assign, readwrite, nonatomic) UIOffset titlePositionAdjustment __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("titlePositionAdjustment", ArgumentSemantic.Assign)]
    UIOffset TitlePositionAdjustment { get; set; }

    // @property (readwrite, copy, nonatomic) UIColor * _Nullable badgeColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [NullAllowed, Export("badgeColor", ArgumentSemantic.Copy)]
    UIColor BadgeColor { get; set; }

    // -(void)setBadgeTextAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)textAttributes forState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("setBadgeTextAttributes:forState:")]
    void SetBadgeTextAttributes([NullAllowed] NSDictionary<NSString, NSObject> textAttributes, UIControlState state);

    // -(NSDictionary<NSAttributedStringKey,id> * _Nullable)badgeTextAttributesForState:(UIControlState)state __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("badgeTextAttributesForState:")]
    [return: NullAllowed]
    NSDictionary<NSString, NSObject> BadgeTextAttributesForState(UIControlState state);
}

// @interface SpringLoading (UITabBarItem) <UISpringLoadedInteractionSupporting>
[Category]
[BaseType(typeof(UITabBarItem))]
interface UITabBarItem_SpringLoading : IUISpringLoadedInteractionSupporting
{
}

// @interface UITableViewHeaderFooterView : UIView
[iOS(6, 0)]
[BaseType(typeof(UIView))]
interface UITableViewHeaderFooterView
{
    // -(instancetype _Nonnull)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier __attribute__((objc_designated_initializer));
    [Export("initWithReuseIdentifier:")]
    [DesignatedInitializer]
    IntPtr Constructor([NullAllowed] string reuseIdentifier);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (readonly, nonatomic, strong) UILabel * _Nullable textLabel;
    [NullAllowed, Export("textLabel", ArgumentSemantic.Strong)]
    UILabel TextLabel { get; }

    // @property (readonly, nonatomic, strong) UILabel * _Nullable detailTextLabel;
    [NullAllowed, Export("detailTextLabel", ArgumentSemantic.Strong)]
    UILabel DetailTextLabel { get; }

    // @property (readonly, nonatomic, strong) UIView * _Nonnull contentView;
    [Export("contentView", ArgumentSemantic.Strong)]
    UIView ContentView { get; }

    // @property (nonatomic, strong) UIView * _Nullable backgroundView;
    [NullAllowed, Export("backgroundView", ArgumentSemantic.Strong)]
    UIView BackgroundView { get; set; }

    // @property (readonly, copy, nonatomic) NSString * _Nullable reuseIdentifier;
    [NullAllowed, Export("reuseIdentifier")]
    string ReuseIdentifier { get; }

    // -(void)prepareForReuse __attribute__((objc_requires_super));
    [Export("prepareForReuse")]
    [RequiresSuper]
    void PrepareForReuse();
}

// @interface UITableViewController : UIViewController <UITableViewDelegate, UITableViewDataSource>
[iOS(2, 0)]
[BaseType(typeof(UIViewController))]
interface UITableViewController : IUITableViewDelegate, IUITableViewDataSource
{
    // -(instancetype _Nonnull)initWithStyle:(UITableViewStyle)style __attribute__((objc_designated_initializer));
    [Export("initWithStyle:")]
    [DesignatedInitializer]
    IntPtr Constructor(UITableViewStyle style);

    // -(instancetype _Nonnull)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil __attribute__((objc_designated_initializer));
    [Export("initWithNibName:bundle:")]
    [DesignatedInitializer]
    IntPtr Constructor([NullAllowed] string nibNameOrNil, [NullAllowed] NSBundle nibBundleOrNil);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (nonatomic, strong) UITableView * _Null_unspecified tableView;
    [Export("tableView", ArgumentSemantic.Strong)]
    UITableView TableView { get; set; }

    // @property (nonatomic) BOOL clearsSelectionOnViewWillAppear __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Export("clearsSelectionOnViewWillAppear")]
    bool ClearsSelectionOnViewWillAppear { get; set; }

    // @property (nonatomic, strong) UIRefreshControl * _Nullable refreshControl __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0)));
    [NoTV, iOS(6, 0)]
    [NullAllowed, Export("refreshControl", ArgumentSemantic.Strong)]
    UIRefreshControl RefreshControl { get; set; }
}

// @interface UITextChecker : NSObject
[iOS(3, 2)]
[BaseType(typeof(NSObject))]
interface UITextChecker
{
    // -(NSRange)rangeOfMisspelledWordInString:(NSString * _Nonnull)stringToCheck range:(NSRange)range startingAt:(NSInteger)startingOffset wrap:(BOOL)wrapFlag language:(NSString * _Nonnull)language;
    [Export("rangeOfMisspelledWordInString:range:startingAt:wrap:language:")]
    NSRange RangeOfMisspelledWordInString(string stringToCheck, NSRange range, nint startingOffset, bool wrapFlag, string language);

    // -(NSArray<NSString *> * _Nullable)guessesForWordRange:(NSRange)range inString:(NSString * _Nonnull)string language:(NSString * _Nonnull)language;
    [Export("guessesForWordRange:inString:language:")]
    [return: NullAllowed]
    string[] GuessesForWordRange(NSRange range, string @string, string language);

    // -(NSArray<NSString *> * _Nullable)completionsForPartialWordRange:(NSRange)range inString:(NSString * _Nonnull)string language:(NSString * _Nonnull)language;
    [Export("completionsForPartialWordRange:inString:language:")]
    [return: NullAllowed]
    string[] CompletionsForPartialWordRange(NSRange range, string @string, string language);

    // -(void)ignoreWord:(NSString * _Nonnull)wordToIgnore;
    [Export("ignoreWord:")]
    void IgnoreWord(string wordToIgnore);

    // @property (nonatomic, strong) NSArray<NSString *> * _Nullable ignoredWords;
    [NullAllowed, Export("ignoredWords", ArgumentSemantic.Strong)]
    string[] IgnoredWords { get; set; }

    // +(void)learnWord:(NSString * _Nonnull)word;
    [Static]
    [Export("learnWord:")]
    void LearnWord(string word);

    // +(BOOL)hasLearnedWord:(NSString * _Nonnull)word;
    [Static]
    [Export("hasLearnedWord:")]
    bool HasLearnedWord(string word);

    // +(void)unlearnWord:(NSString * _Nonnull)word;
    [Static]
    [Export("unlearnWord:")]
    void UnlearnWord(string word);

    // @property (readonly, nonatomic, class) NSArray<NSString *> * _Nonnull availableLanguages;
    [Static]
    [Export("availableLanguages")]
    string[] AvailableLanguages { get; }
}

// @protocol UITextViewDelegate <NSObject, UIScrollViewDelegate>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UITextViewDelegate : IUIScrollViewDelegate
{
    // @optional -(BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView;
    [Export("textViewShouldBeginEditing:")]
    bool TextViewShouldBeginEditing(UITextView textView);

    // @optional -(BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView;
    [Export("textViewShouldEndEditing:")]
    bool TextViewShouldEndEditing(UITextView textView);

    // @optional -(void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
    [Export("textViewDidBeginEditing:")]
    void TextViewDidBeginEditing(UITextView textView);

    // @optional -(void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
    [Export("textViewDidEndEditing:")]
    void TextViewDidEndEditing(UITextView textView);

    // @optional -(BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text;
    [Export("textView:shouldChangeTextInRange:replacementText:")]
    bool TextView(UITextView textView, NSRange range, string text);

    // @optional -(void)textViewDidChange:(UITextView * _Nonnull)textView;
    [Export("textViewDidChange:")]
    void TextViewDidChange(UITextView textView);

    // @optional -(void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
    [Export("textViewDidChangeSelection:")]
    void TextViewDidChangeSelection(UITextView textView);

    // @optional -(BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("textView:shouldInteractWithURL:inRange:interaction:")]
    bool TextView(UITextView textView, NSUrl URL, NSRange characterRange, UITextItemInteraction interaction);

    // @optional -(BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("textView:shouldInteractWithTextAttachment:inRange:interaction:")]
    bool TextView(UITextView textView, NSTextAttachment textAttachment, NSRange characterRange, UITextItemInteraction interaction);

    // @optional -(BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange __attribute__((availability(ios, introduced=7_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 7, 0, message: "Use textView:shouldInteractWithURL:inRange:forInteractionType: instead")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use textView:shouldInteractWithURL:inRange:forInteractionType: instead")]
    [Export("textView:shouldInteractWithURL:inRange:")]
    bool TextView(UITextView textView, NSUrl URL, NSRange characterRange);

    // @optional -(BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange __attribute__((availability(ios, introduced=7_0, deprecated=10_0)));
    [Introduced(PlatformName.iOS, 7, 0, message: "Use textView:shouldInteractWithTextAttachment:inRange:forInteractionType: instead")]
    [Deprecated(PlatformName.iOS, 10, 0, message: "Use textView:shouldInteractWithTextAttachment:inRange:forInteractionType: instead")]
    [Export("textView:shouldInteractWithTextAttachment:inRange:")]
    bool TextView(UITextView textView, NSTextAttachment textAttachment, NSRange characterRange);
}

// @interface UITextView : UIScrollView <UITextInput, UIContentSizeCategoryAdjusting>
[iOS(2, 0)]
[BaseType(typeof(UIScrollView))]
interface UITextView : IUITextInput, IUIContentSizeCategoryAdjusting
{
    [Wrap("WeakDelegate")]
    [NullAllowed]
    UITextViewDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UITextViewDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (copy, nonatomic) NSString * _Null_unspecified text;
    [Export("text")]
    string Text { get; set; }

    // @property (nonatomic, strong) UIFont * _Nullable font;
    [NullAllowed, Export("font", ArgumentSemantic.Strong)]
    UIFont Font { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable textColor;
    [NullAllowed, Export("textColor", ArgumentSemantic.Strong)]
    UIColor TextColor { get; set; }

    // @property (nonatomic) NSTextAlignment textAlignment;
    [Export("textAlignment", ArgumentSemantic.Assign)]
    NSTextAlignment TextAlignment { get; set; }

    // @property (nonatomic) NSRange selectedRange;
    [Export("selectedRange", ArgumentSemantic.Assign)]
    NSRange SelectedRange { get; set; }

    // @property (getter = isEditable, nonatomic) BOOL editable __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Export("editable")]
    bool Editable { [Bind("isEditable")] get; set; }

    // @property (getter = isSelectable, nonatomic) BOOL selectable __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("selectable")]
    bool Selectable { [Bind("isSelectable")] get; set; }

    // @property (nonatomic) UIDataDetectorTypes dataDetectorTypes __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Export("dataDetectorTypes", ArgumentSemantic.Assign)]
    UIDataDetectorTypes DataDetectorTypes { get; set; }

    // @property (nonatomic) BOOL allowsEditingTextAttributes __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("allowsEditingTextAttributes")]
    bool AllowsEditingTextAttributes { get; set; }

    // @property (copy) NSAttributedString * _Null_unspecified attributedText __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("attributedText", ArgumentSemantic.Copy)]
    NSAttributedString AttributedText { get; set; }

    // @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nonnull typingAttributes __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("typingAttributes", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> TypingAttributes { get; set; }

    // -(void)scrollRangeToVisible:(NSRange)range;
    [Export("scrollRangeToVisible:")]
    void ScrollRangeToVisible(NSRange range);

    // @property (readwrite, strong) UIView * _Nullable inputView;
    [NullAllowed, Export("inputView", ArgumentSemantic.Strong)]
    UIView InputView { get; set; }

    // @property (readwrite, strong) UIView * _Nullable inputAccessoryView;
    [NullAllowed, Export("inputAccessoryView", ArgumentSemantic.Strong)]
    UIView InputAccessoryView { get; set; }

    // @property (nonatomic) BOOL clearsOnInsertion __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("clearsOnInsertion")]
    bool ClearsOnInsertion { get; set; }

    // -(instancetype _Nonnull)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer __attribute__((objc_designated_initializer)) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("initWithFrame:textContainer:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect frame, [NullAllowed] NSTextContainer textContainer);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (readonly, nonatomic) NSTextContainer * _Nonnull textContainer __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("textContainer")]
    NSTextContainer TextContainer { get; }

    // @property (assign, nonatomic) UIEdgeInsets textContainerInset __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("textContainerInset", ArgumentSemantic.Assign)]
    UIEdgeInsets TextContainerInset { get; set; }

    // @property (readonly, nonatomic) NSLayoutManager * _Nonnull layoutManager __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("layoutManager")]
    NSLayoutManager LayoutManager { get; }

    // @property (readonly, nonatomic, strong) NSTextStorage * _Nonnull textStorage __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("textStorage", ArgumentSemantic.Strong)]
    NSTextStorage TextStorage { get; }

    // @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Null_unspecified linkTextAttributes __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("linkTextAttributes", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> LinkTextAttributes { get; set; }
}

// @interface  (UITextView) <UITextDraggable, UITextDroppable, UITextPasteConfigurationSupporting>
[Category]
[BaseType(typeof(UITextView))]
interface UITextView_ : IUITextDraggable, IUITextDroppable, IUITextPasteConfigurationSupporting
{
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSNotificationName _Nonnull UITextViewTextDidBeginEditingNotification __attribute__((visibility("default")));
    [Field("UITextViewTextDidBeginEditingNotification", "__Internal")]
    NSString UITextViewTextDidBeginEditingNotification { get; }

    // extern const NSNotificationName _Nonnull UITextViewTextDidChangeNotification __attribute__((visibility("default")));
    [Field("UITextViewTextDidChangeNotification", "__Internal")]
    NSString UITextViewTextDidChangeNotification { get; }

    // extern const NSNotificationName _Nonnull UITextViewTextDidEndEditingNotification __attribute__((visibility("default")));
    [Field("UITextViewTextDidEndEditingNotification", "__Internal")]
    NSString UITextViewTextDidEndEditingNotification { get; }
}

// @interface UIToolbar : UIView <UIBarPositioning>
[NoTV, iOS(2, 0)]
[BaseType(typeof(UIView))]
interface UIToolbar : IUIBarPositioning
{
    // @property (nonatomic) UIBarStyle barStyle __attribute__((availability(tvos, unavailable))) __attribute__((annotate("ui_appearance_selector")));
    [NoTV]
    [Export("barStyle", ArgumentSemantic.Assign)]
    UIBarStyle BarStyle { get; set; }

    // @property (copy, nonatomic) NSArray<UIBarButtonItem *> * _Nullable items;
    [NullAllowed, Export("items", ArgumentSemantic.Copy)]
    UIBarButtonItem[] Items { get; set; }

    // @property (getter = isTranslucent, assign, nonatomic) BOOL translucent __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("translucent")]
    bool Translucent { [Bind("isTranslucent")] get; set; }

    // -(void)setItems:(NSArray<UIBarButtonItem *> * _Nullable)items animated:(BOOL)animated;
    [Export("setItems:animated:")]
    void SetItems([NullAllowed] UIBarButtonItem[] items, bool animated);

    // @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
    [Export("tintColor", ArgumentSemantic.Strong)]
    UIColor TintColor { get; set; }

    // @property (nonatomic, strong) UIColor * _Nullable barTintColor __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("barTintColor", ArgumentSemantic.Strong)]
    UIColor BarTintColor { get; set; }

    // -(void)setBackgroundImage:(UIImage * _Nullable)backgroundImage forToolbarPosition:(UIBarPosition)topOrBottom barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("setBackgroundImage:forToolbarPosition:barMetrics:")]
    void SetBackgroundImage([NullAllowed] UIImage backgroundImage, UIBarPosition topOrBottom, UIBarMetrics barMetrics);

    // -(UIImage * _Nullable)backgroundImageForToolbarPosition:(UIBarPosition)topOrBottom barMetrics:(UIBarMetrics)barMetrics __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("backgroundImageForToolbarPosition:barMetrics:")]
    [return: NullAllowed]
    UIImage BackgroundImageForToolbarPosition(UIBarPosition topOrBottom, UIBarMetrics barMetrics);

    // -(void)setShadowImage:(UIImage * _Nullable)shadowImage forToolbarPosition:(UIBarPosition)topOrBottom __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("setShadowImage:forToolbarPosition:")]
    void SetShadowImage([NullAllowed] UIImage shadowImage, UIBarPosition topOrBottom);

    // -(UIImage * _Nullable)shadowImageForToolbarPosition:(UIBarPosition)topOrBottom __attribute__((annotate("ui_appearance_selector"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("shadowImageForToolbarPosition:")]
    [return: NullAllowed]
    UIImage ShadowImageForToolbarPosition(UIBarPosition topOrBottom);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIToolbarDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIToolbarDelegate> _Nullable delegate __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }
}

// @protocol UIToolbarDelegate <UIBarPositioningDelegate>
[NoTV]
[Protocol, Model]
interface UIToolbarDelegate : IUIBarPositioningDelegate
{
}

// @interface UIVideoEditorController : UINavigationController
[NoTV, iOS(3, 1)]
[BaseType(typeof(UINavigationController))]
interface UIVideoEditorController
{
    // +(BOOL)canEditVideoAtPath:(NSString * _Nonnull)videoPath __attribute__((availability(ios, introduced=3_1)));
    [iOS(3, 1)]
    [Static]
    [Export("canEditVideoAtPath:")]
    bool CanEditVideoAtPath(string videoPath);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    NSObject<UINavigationControllerDelegate, UIVideoEditorControllerDelegate> Delegate { get; set; }

    // @property (assign, nonatomic) id<UINavigationControllerDelegate,UIVideoEditorControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
    NSObject WeakDelegate { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull videoPath;
    [Export("videoPath")]
    string VideoPath { get; set; }

    // @property (nonatomic) NSTimeInterval videoMaximumDuration;
    [Export("videoMaximumDuration")]
    double VideoMaximumDuration { get; set; }

    // @property (nonatomic) UIImagePickerControllerQualityType videoQuality;
    [Export("videoQuality", ArgumentSemantic.Assign)]
    UIImagePickerControllerQualityType VideoQuality { get; set; }
}

// @protocol UIVideoEditorControllerDelegate <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIVideoEditorControllerDelegate
{
    // @optional -(void)videoEditorController:(UIVideoEditorController * _Nonnull)editor didSaveEditedVideoToPath:(NSString * _Nonnull)editedVideoPath;
    [Export("videoEditorController:didSaveEditedVideoToPath:")]
    void VideoEditorController(UIVideoEditorController editor, string editedVideoPath);

    // @optional -(void)videoEditorController:(UIVideoEditorController * _Nonnull)editor didFailWithError:(NSError * _Nonnull)error;
    [Export("videoEditorController:didFailWithError:")]
    void VideoEditorController(UIVideoEditorController editor, NSError error);

    // @optional -(void)videoEditorControllerDidCancel:(UIVideoEditorController * _Nonnull)editor;
    [Export("videoEditorControllerDidCancel:")]
    void VideoEditorControllerDidCancel(UIVideoEditorController editor);
}

// @interface UIWebView : UIView <NSCoding, UIScrollViewDelegate>
[Introduced(PlatformName.iOS, 2, 0, message: "No longer supported; please adopt WKWebView.")]
[Deprecated(PlatformName.iOS, 12, 0, message: "No longer supported; please adopt WKWebView.")]
[NoTV, NoMac]
[BaseType(typeof(UIView))]
interface UIWebView : INSCoding, IUIScrollViewDelegate
{
    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIWebViewDelegate Delegate { get; set; }

    // @property (assign, nonatomic) id<UIWebViewDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
    NSObject WeakDelegate { get; set; }

    // @property (readonly, nonatomic, strong) UIScrollView * _Nonnull scrollView __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("scrollView", ArgumentSemantic.Strong)]
    UIScrollView ScrollView { get; }

    // -(void)loadRequest:(NSURLRequest * _Nonnull)request;
    [Export("loadRequest:")]
    void LoadRequest(NSUrlRequest request);

    // -(void)loadHTMLString:(NSString * _Nonnull)string baseURL:(NSURL * _Nullable)baseURL;
    [Export("loadHTMLString:baseURL:")]
    void LoadHTMLString(string @string, [NullAllowed] NSUrl baseURL);

    // -(void)loadData:(NSData * _Nonnull)data MIMEType:(NSString * _Nonnull)MIMEType textEncodingName:(NSString * _Nonnull)textEncodingName baseURL:(NSURL * _Nonnull)baseURL;
    [Export("loadData:MIMEType:textEncodingName:baseURL:")]
    void LoadData(NSData data, string MIMEType, string textEncodingName, NSUrl baseURL);

    // @property (readonly, nonatomic, strong) NSURLRequest * _Nullable request;
    [NullAllowed, Export("request", ArgumentSemantic.Strong)]
    NSUrlRequest Request { get; }

    // -(void)reload;
    [Export("reload")]
    void Reload();

    // -(void)stopLoading;
    [Export("stopLoading")]
    void StopLoading();

    // -(void)goBack;
    [Export("goBack")]
    void GoBack();

    // -(void)goForward;
    [Export("goForward")]
    void GoForward();

    // @property (readonly, getter = canGoBack, nonatomic) BOOL canGoBack;
    [Export("canGoBack")]
    bool CanGoBack { [Bind("canGoBack")] get; }

    // @property (readonly, getter = canGoForward, nonatomic) BOOL canGoForward;
    [Export("canGoForward")]
    bool CanGoForward { [Bind("canGoForward")] get; }

    // @property (readonly, getter = isLoading, nonatomic) BOOL loading;
    [Export("loading")]
    bool Loading { [Bind("isLoading")] get; }

    // -(NSString * _Nullable)stringByEvaluatingJavaScriptFromString:(NSString * _Nonnull)script;
    [Export("stringByEvaluatingJavaScriptFromString:")]
    [return: NullAllowed]
    string StringByEvaluatingJavaScriptFromString(string script);

    // @property (nonatomic) BOOL scalesPageToFit;
    [Export("scalesPageToFit")]
    bool ScalesPageToFit { get; set; }

    // @property (nonatomic) BOOL detectsPhoneNumbers __attribute__((availability(ios, introduced=2_0, deprecated=3_0)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 0)]
    [Export("detectsPhoneNumbers")]
    bool DetectsPhoneNumbers { get; set; }

    // @property (nonatomic) UIDataDetectorTypes dataDetectorTypes __attribute__((availability(ios, introduced=3_0)));
    [iOS(3, 0)]
    [Export("dataDetectorTypes", ArgumentSemantic.Assign)]
    UIDataDetectorTypes DataDetectorTypes { get; set; }

    // @property (nonatomic) BOOL allowsInlineMediaPlayback __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("allowsInlineMediaPlayback")]
    bool AllowsInlineMediaPlayback { get; set; }

    // @property (nonatomic) BOOL mediaPlaybackRequiresUserAction __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [Export("mediaPlaybackRequiresUserAction")]
    bool MediaPlaybackRequiresUserAction { get; set; }

    // @property (nonatomic) BOOL mediaPlaybackAllowsAirPlay __attribute__((availability(ios, introduced=5_0)));
    [iOS(5, 0)]
    [Export("mediaPlaybackAllowsAirPlay")]
    bool MediaPlaybackAllowsAirPlay { get; set; }

    // @property (nonatomic) BOOL suppressesIncrementalRendering __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("suppressesIncrementalRendering")]
    bool SuppressesIncrementalRendering { get; set; }

    // @property (nonatomic) BOOL keyboardDisplayRequiresUserAction __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("keyboardDisplayRequiresUserAction")]
    bool KeyboardDisplayRequiresUserAction { get; set; }

    // @property (nonatomic) UIWebPaginationMode paginationMode __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("paginationMode", ArgumentSemantic.Assign)]
    UIWebPaginationMode PaginationMode { get; set; }

    // @property (nonatomic) UIWebPaginationBreakingMode paginationBreakingMode __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("paginationBreakingMode", ArgumentSemantic.Assign)]
    UIWebPaginationBreakingMode PaginationBreakingMode { get; set; }

    // @property (nonatomic) CGFloat pageLength __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("pageLength")]
    nfloat PageLength { get; set; }

    // @property (nonatomic) CGFloat gapBetweenPages __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("gapBetweenPages")]
    nfloat GapBetweenPages { get; set; }

    // @property (readonly, nonatomic) NSUInteger pageCount __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("pageCount")]
    nuint PageCount { get; }

    // @property (nonatomic) BOOL allowsPictureInPictureMediaPlayback __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("allowsPictureInPictureMediaPlayback")]
    bool AllowsPictureInPictureMediaPlayback { get; set; }

    // @property (nonatomic) BOOL allowsLinkPreview __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("allowsLinkPreview")]
    bool AllowsLinkPreview { get; set; }
}

// @protocol UIWebViewDelegate <NSObject>
[NoTV]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIWebViewDelegate
{
    // @optional -(BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWithRequest:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType __attribute__((availability(ios, introduced=2.0, deprecated=12.0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "No longer supported.")]
    [Deprecated(PlatformName.iOS, 12, 0, message: "No longer supported.")]
    [Export("webView:shouldStartLoadWithRequest:navigationType:")]
    bool WebView(UIWebView webView, NSUrlRequest request, UIWebViewNavigationType navigationType);

    // @optional -(void)webViewDidStartLoad:(UIWebView * _Nonnull)webView __attribute__((availability(ios, introduced=2.0, deprecated=12.0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "No longer supported.")]
    [Deprecated(PlatformName.iOS, 12, 0, message: "No longer supported.")]
    [Export("webViewDidStartLoad:")]
    void WebViewDidStartLoad(UIWebView webView);

    // @optional -(void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView __attribute__((availability(ios, introduced=2.0, deprecated=12.0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "No longer supported.")]
    [Deprecated(PlatformName.iOS, 12, 0, message: "No longer supported.")]
    [Export("webViewDidFinishLoad:")]
    void WebViewDidFinishLoad(UIWebView webView);

    // @optional -(void)webView:(UIWebView * _Nonnull)webView didFailLoadWithError:(NSError * _Nonnull)error __attribute__((availability(ios, introduced=2.0, deprecated=12.0)));
    [Introduced(PlatformName.iOS, 2, 0, message: "No longer supported.")]
    [Deprecated(PlatformName.iOS, 12, 0, message: "No longer supported.")]
    [Export("webView:didFailLoadWithError:")]
    void WebView(UIWebView webView, NSError error);
}

// @interface UIWindow : UIView
[iOS(2, 0)]
[BaseType(typeof(UIView))]
interface UIWindow
{
    // @property (nonatomic, strong) UIScreen * _Nonnull screen __attribute__((availability(ios, introduced=3_2)));
    [iOS(3, 2)]
    [Export("screen", ArgumentSemantic.Strong)]
    UIScreen Screen { get; set; }

    // @property (nonatomic) UIWindowLevel windowLevel;
    [Export("windowLevel")]
    double WindowLevel { get; set; }

    // @property (readonly, getter = isKeyWindow, nonatomic) BOOL keyWindow;
    [Export("keyWindow")]
    bool KeyWindow { [Bind("isKeyWindow")] get; }

    // -(void)becomeKeyWindow;
    [Export("becomeKeyWindow")]
    void BecomeKeyWindow();

    // -(void)resignKeyWindow;
    [Export("resignKeyWindow")]
    void ResignKeyWindow();

    // -(void)makeKeyWindow;
    [Export("makeKeyWindow")]
    void MakeKeyWindow();

    // -(void)makeKeyAndVisible;
    [Export("makeKeyAndVisible")]
    void MakeKeyAndVisible();

    // @property (nonatomic, strong) UIViewController * _Nullable rootViewController __attribute__((availability(ios, introduced=4_0)));
    [iOS(4, 0)]
    [NullAllowed, Export("rootViewController", ArgumentSemantic.Strong)]
    UIViewController RootViewController { get; set; }

    // -(void)sendEvent:(UIEvent * _Nonnull)event;
    [Export("sendEvent:")]
    void SendEvent(UIEvent @event);

    // -(CGPoint)convertPoint:(CGPoint)point toWindow:(UIWindow * _Nullable)window;
    [Export("convertPoint:toWindow:")]
    CGPoint ConvertPoint(CGPoint point, [NullAllowed] UIWindow window);

    // -(CGPoint)convertPoint:(CGPoint)point fromWindow:(UIWindow * _Nullable)window;
    [Export("convertPoint:fromWindow:")]
    CGPoint ConvertPoint(CGPoint point, [NullAllowed] UIWindow window);

    // -(CGRect)convertRect:(CGRect)rect toWindow:(UIWindow * _Nullable)window;
    [Export("convertRect:toWindow:")]
    CGRect ConvertRect(CGRect rect, [NullAllowed] UIWindow window);

    // -(CGRect)convertRect:(CGRect)rect fromWindow:(UIWindow * _Nullable)window;
    [Export("convertRect:fromWindow:")]
    CGRect ConvertRect(CGRect rect, [NullAllowed] UIWindow window);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UIWindowLevel UIWindowLevelNormal __attribute__((visibility("default")));
    [Field("UIWindowLevelNormal", "__Internal")]
    double UIWindowLevelNormal { get; }

    // extern const UIWindowLevel UIWindowLevelAlert __attribute__((visibility("default")));
    [Field("UIWindowLevelAlert", "__Internal")]
    double UIWindowLevelAlert { get; }

    // extern const UIWindowLevel UIWindowLevelStatusBar __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIWindowLevelStatusBar", "__Internal")]
    double UIWindowLevelStatusBar { get; }

    // extern const NSNotificationName _Nonnull UIWindowDidBecomeVisibleNotification __attribute__((visibility("default")));
    [Field("UIWindowDidBecomeVisibleNotification", "__Internal")]
    NSString UIWindowDidBecomeVisibleNotification { get; }

    // extern const NSNotificationName _Nonnull UIWindowDidBecomeHiddenNotification __attribute__((visibility("default")));
    [Field("UIWindowDidBecomeHiddenNotification", "__Internal")]
    NSString UIWindowDidBecomeHiddenNotification { get; }

    // extern const NSNotificationName _Nonnull UIWindowDidBecomeKeyNotification __attribute__((visibility("default")));
    [Field("UIWindowDidBecomeKeyNotification", "__Internal")]
    NSString UIWindowDidBecomeKeyNotification { get; }

    // extern const NSNotificationName _Nonnull UIWindowDidResignKeyNotification __attribute__((visibility("default")));
    [Field("UIWindowDidResignKeyNotification", "__Internal")]
    NSString UIWindowDidResignKeyNotification { get; }

    // extern const NSNotificationName _Nonnull UIKeyboardWillShowNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIKeyboardWillShowNotification", "__Internal")]
    NSString UIKeyboardWillShowNotification { get; }

    // extern const NSNotificationName _Nonnull UIKeyboardDidShowNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIKeyboardDidShowNotification", "__Internal")]
    NSString UIKeyboardDidShowNotification { get; }

    // extern const NSNotificationName _Nonnull UIKeyboardWillHideNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIKeyboardWillHideNotification", "__Internal")]
    NSString UIKeyboardWillHideNotification { get; }

    // extern const NSNotificationName _Nonnull UIKeyboardDidHideNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
    [NoTV]
    [Field("UIKeyboardDidHideNotification", "__Internal")]
    NSString UIKeyboardDidHideNotification { get; }

    // extern NSString *const _Nonnull UIKeyboardFrameBeginUserInfoKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_2)));
    [NoTV, iOS(3, 2)]
    [Field("UIKeyboardFrameBeginUserInfoKey", "__Internal")]
    NSString UIKeyboardFrameBeginUserInfoKey { get; }

    // extern NSString *const _Nonnull UIKeyboardFrameEndUserInfoKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_2)));
    [NoTV, iOS(3, 2)]
    [Field("UIKeyboardFrameEndUserInfoKey", "__Internal")]
    NSString UIKeyboardFrameEndUserInfoKey { get; }

    // extern NSString *const _Nonnull UIKeyboardAnimationDurationUserInfoKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Field("UIKeyboardAnimationDurationUserInfoKey", "__Internal")]
    NSString UIKeyboardAnimationDurationUserInfoKey { get; }

    // extern NSString *const _Nonnull UIKeyboardAnimationCurveUserInfoKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=3_0)));
    [NoTV, iOS(3, 0)]
    [Field("UIKeyboardAnimationCurveUserInfoKey", "__Internal")]
    NSString UIKeyboardAnimationCurveUserInfoKey { get; }

    // extern NSString *const _Nonnull UIKeyboardIsLocalUserInfoKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=9_0)));
    [NoTV, iOS(9, 0)]
    [Field("UIKeyboardIsLocalUserInfoKey", "__Internal")]
    NSString UIKeyboardIsLocalUserInfoKey { get; }

    // extern const NSNotificationName _Nonnull UIKeyboardWillChangeFrameNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Field("UIKeyboardWillChangeFrameNotification", "__Internal")]
    NSString UIKeyboardWillChangeFrameNotification { get; }

    // extern const NSNotificationName _Nonnull UIKeyboardDidChangeFrameNotification __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=5_0)));
    [NoTV, iOS(5, 0)]
    [Field("UIKeyboardDidChangeFrameNotification", "__Internal")]
    NSString UIKeyboardDidChangeFrameNotification { get; }

    // extern NSString *const _Nonnull UIKeyboardCenterBeginUserInfoKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_2)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 2)]
    [NoTV]
    [Field("UIKeyboardCenterBeginUserInfoKey", "__Internal")]
    NSString UIKeyboardCenterBeginUserInfoKey { get; }

    // extern NSString *const _Nonnull UIKeyboardCenterEndUserInfoKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_2)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 2)]
    [NoTV]
    [Field("UIKeyboardCenterEndUserInfoKey", "__Internal")]
    NSString UIKeyboardCenterEndUserInfoKey { get; }

    // extern NSString *const _Nonnull UIKeyboardBoundsUserInfoKey __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=2_0, deprecated=3_2)));
    [Introduced(PlatformName.iOS, 2, 0)]
    [Deprecated(PlatformName.iOS, 3, 2)]
    [NoTV]
    [Field("UIKeyboardBoundsUserInfoKey", "__Internal")]
    NSString UIKeyboardBoundsUserInfoKey { get; }
}

// @interface UIDragItem : NSObject
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIDragItem
{
    // -(instancetype _Nonnull)initWithItemProvider:(NSItemProvider * _Nonnull)itemProvider __attribute__((objc_designated_initializer));
    [Export("initWithItemProvider:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSItemProvider itemProvider);

    // @property (readonly, nonatomic) __kindof NSItemProvider * _Nonnull itemProvider;
    [Export("itemProvider")]
    NSItemProvider ItemProvider { get; }

    // @property (nonatomic, strong) id _Nullable localObject;
    [NullAllowed, Export("localObject", ArgumentSemantic.Strong)]
    NSObject LocalObject { get; set; }

    // @property (copy, nonatomic) UIDragPreview * _Nullable (^ _Nullable)(void) previewProvider;
    [NullAllowed, Export("previewProvider", ArgumentSemantic.Copy)]
    Func<UIDragPreview> PreviewProvider { get; set; }
}

// @interface UIDragPreview : NSObject <NSCopying>
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIDragPreview : INSCopying
{
    // -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view parameters:(UIDragPreviewParameters * _Nonnull)parameters __attribute__((objc_designated_initializer));
    [Export("initWithView:parameters:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIView view, UIDragPreviewParameters parameters);

    // -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view;
    [Export("initWithView:")]
    IntPtr Constructor(UIView view);

    // @property (readonly, nonatomic) UIView * _Nonnull view;
    [Export("view")]
    UIView View { get; }

    // @property (readonly, copy, nonatomic) UIDragPreviewParameters * _Nonnull parameters;
    [Export("parameters", ArgumentSemantic.Copy)]
    UIDragPreviewParameters Parameters { get; }
}

// @interface UIDragPreviewParameters : NSObject <NSCopying>
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
interface UIDragPreviewParameters : INSCopying
{
    // -(instancetype _Nonnull)initWithTextLineRects:(NSArray<NSValue *> * _Nonnull)textLineRects;
    [Export("initWithTextLineRects:")]
    IntPtr Constructor(NSValue[] textLineRects);

    // @property (copy, nonatomic) UIBezierPath * _Nullable visiblePath;
    [NullAllowed, Export("visiblePath", ArgumentSemantic.Copy)]
    UIBezierPath VisiblePath { get; set; }

    // @property (copy, nonatomic) UIColor * _Null_unspecified backgroundColor;
    [Export("backgroundColor", ArgumentSemantic.Copy)]
    UIColor BackgroundColor { get; set; }
}

// @protocol UIDragDropSession <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIDragDropSession
{
    // @required @property (readonly, nonatomic) NSArray<UIDragItem *> * _Nonnull items;
    [Abstract]
    [Export("items")]
    UIDragItem[] Items { get; }

    // @required -(CGPoint)locationInView:(UIView * _Nonnull)view;
    [Abstract]
    [Export("locationInView:")]
    CGPoint LocationInView(UIView view);

    // @required @property (readonly, nonatomic) BOOL allowsMoveOperation;
    [Abstract]
    [Export("allowsMoveOperation")]
    bool AllowsMoveOperation { get; }

    // @required @property (readonly, getter = isRestrictedToDraggingApplication, nonatomic) BOOL restrictedToDraggingApplication;
    [Abstract]
    [Export("restrictedToDraggingApplication")]
    bool RestrictedToDraggingApplication { [Bind("isRestrictedToDraggingApplication")] get; }

    // @required -(BOOL)hasItemsConformingToTypeIdentifiers:(NSArray<NSString *> * _Nonnull)typeIdentifiers;
    [Abstract]
    [Export("hasItemsConformingToTypeIdentifiers:")]
    bool HasItemsConformingToTypeIdentifiers(string[] typeIdentifiers);

    // @required -(BOOL)canLoadObjectsOfClass:(Class<NSItemProviderReading> _Nonnull)aClass;
    [Abstract]
    [Export("canLoadObjectsOfClass:")]
    bool CanLoadObjectsOfClass(NSItemProviderReading aClass);
}

// @protocol UIDragSession <UIDragDropSession>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
interface UIDragSession : IUIDragDropSession
{
    // @required @property (nonatomic, strong) id _Nullable localContext;
    [Abstract]
    [NullAllowed, Export("localContext", ArgumentSemantic.Strong)]
    NSObject LocalContext { get; set; }
}

// @protocol UIDropSession <UIDragDropSession, NSProgressReporting>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
interface UIDropSession : IUIDragDropSession, INSProgressReporting
{
    // @required @property (readonly, nonatomic) id<UIDragSession> _Nullable localDragSession;
    [Abstract]
    [NullAllowed, Export("localDragSession")]
    UIDragSession LocalDragSession { get; }

    // @required @property (nonatomic) UIDropSessionProgressIndicatorStyle progressIndicatorStyle;
    [Abstract]
    [Export("progressIndicatorStyle", ArgumentSemantic.Assign)]
    UIDropSessionProgressIndicatorStyle ProgressIndicatorStyle { get; set; }

    // @required -(NSProgress * _Nonnull)loadObjectsOfClass:(Class<NSItemProviderReading> _Nonnull)aClass completion:(void (^ _Nonnull)(NSArray<__kindof id<NSItemProviderReading>> * _Nonnull))completion;
    [Abstract]
    [Export("loadObjectsOfClass:completion:")]
    NSProgress Completion(NSItemProviderReading aClass, Action<NSArray<NSItemProviderReading>> completion);
}

// @interface UIDragPreviewTarget : NSObject <NSCopying>
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIDragPreviewTarget : INSCopying
{
    // -(instancetype _Nonnull)initWithContainer:(UIView * _Nonnull)container center:(CGPoint)center transform:(CGAffineTransform)transform __attribute__((objc_designated_initializer));
    [Export("initWithContainer:center:transform:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIView container, CGPoint center, CGAffineTransform transform);

    // -(instancetype _Nonnull)initWithContainer:(UIView * _Nonnull)container center:(CGPoint)center;
    [Export("initWithContainer:center:")]
    IntPtr Constructor(UIView container, CGPoint center);

    // @property (readonly, nonatomic) UIView * _Nonnull container;
    [Export("container")]
    UIView Container { get; }

    // @property (readonly, nonatomic) CGPoint center;
    [Export("center")]
    CGPoint Center { get; }

    // @property (readonly, nonatomic) CGAffineTransform transform;
    [Export("transform")]
    CGAffineTransform Transform { get; }
}

// @interface UITargetedDragPreview : NSObject <NSCopying>
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UITargetedDragPreview : INSCopying
{
    // -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view parameters:(UIDragPreviewParameters * _Nonnull)parameters target:(UIDragPreviewTarget * _Nonnull)target __attribute__((objc_designated_initializer));
    [Export("initWithView:parameters:target:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIView view, UIDragPreviewParameters parameters, UIDragPreviewTarget target);

    // -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view parameters:(UIDragPreviewParameters * _Nonnull)parameters;
    [Export("initWithView:parameters:")]
    IntPtr Constructor(UIView view, UIDragPreviewParameters parameters);

    // -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view;
    [Export("initWithView:")]
    IntPtr Constructor(UIView view);

    // @property (readonly, nonatomic) UIDragPreviewTarget * _Nonnull target;
    [Export("target")]
    UIDragPreviewTarget Target { get; }

    // @property (readonly, nonatomic) UIView * _Nonnull view;
    [Export("view")]
    UIView View { get; }

    // @property (readonly, copy, nonatomic) UIDragPreviewParameters * _Nonnull parameters;
    [Export("parameters", ArgumentSemantic.Copy)]
    UIDragPreviewParameters Parameters { get; }

    // @property (readonly, nonatomic) CGSize size;
    [Export("size")]
    CGSize Size { get; }

    // -(UITargetedDragPreview * _Nonnull)retargetedPreviewWithTarget:(UIDragPreviewTarget * _Nonnull)newTarget;
    [Export("retargetedPreviewWithTarget:")]
    UITargetedDragPreview RetargetedPreviewWithTarget(UIDragPreviewTarget newTarget);
}

// @interface UISpringLoadedInteraction : NSObject <UIInteraction>
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UISpringLoadedInteraction : IUIInteraction
{
    // -(instancetype _Nonnull)initWithInteractionBehavior:(id<UISpringLoadedInteractionBehavior> _Nullable)interactionBehavior interactionEffect:(id<UISpringLoadedInteractionEffect> _Nullable)interactionEffect activationHandler:(void (^ _Nonnull)(UISpringLoadedInteraction * _Nonnull, id<UISpringLoadedInteractionContext> _Nonnull))handler __attribute__((objc_designated_initializer));
    [Export("initWithInteractionBehavior:interactionEffect:activationHandler:")]
    [DesignatedInitializer]
    IntPtr Constructor([NullAllowed] UISpringLoadedInteractionBehavior interactionBehavior, [NullAllowed] UISpringLoadedInteractionEffect interactionEffect, Action<UISpringLoadedInteraction, UISpringLoadedInteractionContext> handler);

    // -(instancetype _Nonnull)initWithActivationHandler:(void (^ _Nonnull)(UISpringLoadedInteraction * _Nonnull, id<UISpringLoadedInteractionContext> _Nonnull))handler;
    [Export("initWithActivationHandler:")]
    IntPtr Constructor(Action<UISpringLoadedInteraction, UISpringLoadedInteractionContext> handler);

    // @property (readonly, nonatomic, strong) id<UISpringLoadedInteractionBehavior> _Nonnull interactionBehavior;
    [Export("interactionBehavior", ArgumentSemantic.Strong)]
    UISpringLoadedInteractionBehavior InteractionBehavior { get; }

    // @property (readonly, nonatomic, strong) id<UISpringLoadedInteractionEffect> _Nonnull interactionEffect;
    [Export("interactionEffect", ArgumentSemantic.Strong)]
    UISpringLoadedInteractionEffect InteractionEffect { get; }
}

// @protocol UISpringLoadedInteractionBehavior <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UISpringLoadedInteractionBehavior
{
    // @required -(BOOL)shouldAllowInteraction:(UISpringLoadedInteraction * _Nonnull)interaction withContext:(id<UISpringLoadedInteractionContext> _Nonnull)context;
    [Abstract]
    [Export("shouldAllowInteraction:withContext:")]
    bool ShouldAllowInteraction(UISpringLoadedInteraction interaction, UISpringLoadedInteractionContext context);

    // @optional -(void)interactionDidFinish:(UISpringLoadedInteraction * _Nonnull)interaction;
    [Export("interactionDidFinish:")]
    void InteractionDidFinish(UISpringLoadedInteraction interaction);
}

// @protocol UISpringLoadedInteractionEffect <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UISpringLoadedInteractionEffect
{
    // @required -(void)interaction:(UISpringLoadedInteraction * _Nonnull)interaction didChangeWithContext:(id<UISpringLoadedInteractionContext> _Nonnull)context;
    [Abstract]
    [Export("interaction:didChangeWithContext:")]
    void DidChangeWithContext(UISpringLoadedInteraction interaction, UISpringLoadedInteractionContext context);
}

// @protocol UISpringLoadedInteractionContext <NSObject>
[NoWatch, NoTV, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UISpringLoadedInteractionContext
{
    // @required @property (readonly, nonatomic) UISpringLoadedInteractionEffectState state;
    [Abstract]
    [Export("state")]
    UISpringLoadedInteractionEffectState State { get; }

    // @required @property (nonatomic, strong) UIView * _Nullable targetView;
    [Abstract]
    [NullAllowed, Export("targetView", ArgumentSemantic.Strong)]
    UIView TargetView { get; set; }

    // @required @property (nonatomic, strong) id _Nullable targetItem;
    [Abstract]
    [NullAllowed, Export("targetItem", ArgumentSemantic.Strong)]
    NSObject TargetItem { get; set; }

    // @required -(CGPoint)locationInView:(UIView * _Nullable)view;
    [Abstract]
    [Export("locationInView:")]
    CGPoint LocationInView([NullAllowed] UIView view);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSAttributedStringKey _Nonnull NSFontAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("NSFontAttributeName", "__Internal")]
    NSString NSFontAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSParagraphStyleAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("NSParagraphStyleAttributeName", "__Internal")]
    NSString NSParagraphStyleAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSForegroundColorAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("NSForegroundColorAttributeName", "__Internal")]
    NSString NSForegroundColorAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSBackgroundColorAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("NSBackgroundColorAttributeName", "__Internal")]
    NSString NSBackgroundColorAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSLigatureAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("NSLigatureAttributeName", "__Internal")]
    NSString NSLigatureAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSKernAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("NSKernAttributeName", "__Internal")]
    NSString NSKernAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSStrikethroughStyleAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("NSStrikethroughStyleAttributeName", "__Internal")]
    NSString NSStrikethroughStyleAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSUnderlineStyleAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("NSUnderlineStyleAttributeName", "__Internal")]
    NSString NSUnderlineStyleAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSStrokeColorAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("NSStrokeColorAttributeName", "__Internal")]
    NSString NSStrokeColorAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSStrokeWidthAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("NSStrokeWidthAttributeName", "__Internal")]
    NSString NSStrokeWidthAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSShadowAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("NSShadowAttributeName", "__Internal")]
    NSString NSShadowAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSTextEffectAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSTextEffectAttributeName", "__Internal")]
    NSString NSTextEffectAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSAttachmentAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSAttachmentAttributeName", "__Internal")]
    NSString NSAttachmentAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSLinkAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSLinkAttributeName", "__Internal")]
    NSString NSLinkAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSBaselineOffsetAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSBaselineOffsetAttributeName", "__Internal")]
    NSString NSBaselineOffsetAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSUnderlineColorAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSUnderlineColorAttributeName", "__Internal")]
    NSString NSUnderlineColorAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSStrikethroughColorAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSStrikethroughColorAttributeName", "__Internal")]
    NSString NSStrikethroughColorAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSObliquenessAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSObliquenessAttributeName", "__Internal")]
    NSString NSObliquenessAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSExpansionAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSExpansionAttributeName", "__Internal")]
    NSString NSExpansionAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSWritingDirectionAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSWritingDirectionAttributeName", "__Internal")]
    NSString NSWritingDirectionAttributeName { get; }

    // extern const NSAttributedStringKey _Nonnull NSVerticalGlyphFormAttributeName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Field("NSVerticalGlyphFormAttributeName", "__Internal")]
    NSString NSVerticalGlyphFormAttributeName { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSTextEffectStyle _Nonnull NSTextEffectLetterpressStyle __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSTextEffectLetterpressStyle", "__Internal")]
    NSString NSTextEffectLetterpressStyle { get; }
}

// @interface NSAttributedStringAttributeFixing (NSMutableAttributedString)
[Category]
[BaseType(typeof(NSMutableAttributedString))]
interface NSMutableAttributedString_NSAttributedStringAttributeFixing
{
    // -(void)fixAttributesInRange:(NSRange)range __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("fixAttributesInRange:")]
    void FixAttributesInRange(NSRange range);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSAttributedStringDocumentType _Nonnull NSPlainTextDocumentType __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSPlainTextDocumentType", "__Internal")]
    NSString NSPlainTextDocumentType { get; }

    // extern const NSAttributedStringDocumentType _Nonnull NSRTFTextDocumentType __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSRTFTextDocumentType", "__Internal")]
    NSString NSRTFTextDocumentType { get; }

    // extern const NSAttributedStringDocumentType _Nonnull NSRTFDTextDocumentType __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSRTFDTextDocumentType", "__Internal")]
    NSString NSRTFDTextDocumentType { get; }

    // extern const NSAttributedStringDocumentType _Nonnull NSHTMLTextDocumentType __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSHTMLTextDocumentType", "__Internal")]
    NSString NSHTMLTextDocumentType { get; }

    // extern const NSTextLayoutSectionKey _Nonnull NSTextLayoutSectionOrientation __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSTextLayoutSectionOrientation", "__Internal")]
    NSString NSTextLayoutSectionOrientation { get; }

    // extern const NSTextLayoutSectionKey _Nonnull NSTextLayoutSectionRange __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSTextLayoutSectionRange", "__Internal")]
    NSString NSTextLayoutSectionRange { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSDocumentTypeDocumentAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSDocumentTypeDocumentAttribute", "__Internal")]
    NSString NSDocumentTypeDocumentAttribute { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSCharacterEncodingDocumentAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSCharacterEncodingDocumentAttribute", "__Internal")]
    NSString NSCharacterEncodingDocumentAttribute { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSDefaultAttributesDocumentAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSDefaultAttributesDocumentAttribute", "__Internal")]
    NSString NSDefaultAttributesDocumentAttribute { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSPaperSizeDocumentAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSPaperSizeDocumentAttribute", "__Internal")]
    NSString NSPaperSizeDocumentAttribute { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSPaperMarginDocumentAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSPaperMarginDocumentAttribute", "__Internal")]
    NSString NSPaperMarginDocumentAttribute { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSViewSizeDocumentAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSViewSizeDocumentAttribute", "__Internal")]
    NSString NSViewSizeDocumentAttribute { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSViewZoomDocumentAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSViewZoomDocumentAttribute", "__Internal")]
    NSString NSViewZoomDocumentAttribute { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSViewModeDocumentAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSViewModeDocumentAttribute", "__Internal")]
    NSString NSViewModeDocumentAttribute { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSReadOnlyDocumentAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSReadOnlyDocumentAttribute", "__Internal")]
    NSString NSReadOnlyDocumentAttribute { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSBackgroundColorDocumentAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSBackgroundColorDocumentAttribute", "__Internal")]
    NSString NSBackgroundColorDocumentAttribute { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSHyphenationFactorDocumentAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSHyphenationFactorDocumentAttribute", "__Internal")]
    NSString NSHyphenationFactorDocumentAttribute { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSDefaultTabIntervalDocumentAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSDefaultTabIntervalDocumentAttribute", "__Internal")]
    NSString NSDefaultTabIntervalDocumentAttribute { get; }

    // extern const NSAttributedStringDocumentAttributeKey _Nonnull NSTextLayoutSectionsAttribute __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSTextLayoutSectionsAttribute", "__Internal")]
    NSString NSTextLayoutSectionsAttribute { get; }

    // extern const NSAttributedStringDocumentReadingOptionKey _Nonnull NSDocumentTypeDocumentOption __attribute__((visibility("default")));
    [Field("NSDocumentTypeDocumentOption", "__Internal")]
    NSString NSDocumentTypeDocumentOption { get; }

    // extern const NSAttributedStringDocumentReadingOptionKey _Nonnull NSDefaultAttributesDocumentOption __attribute__((visibility("default")));
    [Field("NSDefaultAttributesDocumentOption", "__Internal")]
    NSString NSDefaultAttributesDocumentOption { get; }

    // extern const NSAttributedStringDocumentReadingOptionKey _Nonnull NSCharacterEncodingDocumentOption __attribute__((visibility("default")));
    [Field("NSCharacterEncodingDocumentOption", "__Internal")]
    NSString NSCharacterEncodingDocumentOption { get; }
}

// @interface NSAttributedStringDocumentFormats (NSAttributedString)
[Category]
[BaseType(typeof(NSAttributedString))]
interface NSAttributedString_NSAttributedStringDocumentFormats
{
    // -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url options:(NSDictionary<NSAttributedStringDocumentReadingOptionKey,id> * _Nonnull)options documentAttributes:(NSDictionary<NSAttributedStringDocumentAttributeKey,id> * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("initWithURL:options:documentAttributes:error:")]
    IntPtr Constructor(NSUrl url, NSDictionary<NSString, NSObject> options, [NullAllowed] out NSDictionary<NSString, NSObject> dict, [NullAllowed] out NSError error);

    // -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data options:(NSDictionary<NSAttributedStringDocumentReadingOptionKey,id> * _Nonnull)options documentAttributes:(NSDictionary<NSAttributedStringDocumentAttributeKey,id> * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("initWithData:options:documentAttributes:error:")]
    IntPtr Constructor(NSData data, NSDictionary<NSString, NSObject> options, [NullAllowed] out NSDictionary<NSString, NSObject> dict, [NullAllowed] out NSError error);

    // -(NSData * _Nullable)dataFromRange:(NSRange)range documentAttributes:(NSDictionary<NSAttributedStringDocumentAttributeKey,id> * _Nonnull)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("dataFromRange:documentAttributes:error:")]
    [return: NullAllowed]
    NSData DataFromRange(NSRange range, NSDictionary<NSString, NSObject> dict, [NullAllowed] out NSError error);

    // -(NSFileWrapper * _Nullable)fileWrapperFromRange:(NSRange)range documentAttributes:(NSDictionary<NSAttributedStringDocumentAttributeKey,id> * _Nonnull)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("fileWrapperFromRange:documentAttributes:error:")]
    [return: NullAllowed]
    NSFileWrapper FileWrapperFromRange(NSRange range, NSDictionary<NSString, NSObject> dict, [NullAllowed] out NSError error);
}

// @interface NSMutableAttributedStringDocumentFormats (NSMutableAttributedString)
[Category]
[BaseType(typeof(NSMutableAttributedString))]
interface NSMutableAttributedString_NSMutableAttributedStringDocumentFormats
{
    // -(BOOL)readFromURL:(NSURL * _Nonnull)url options:(NSDictionary<NSAttributedStringDocumentReadingOptionKey,id> * _Nonnull)opts documentAttributes:(NSDictionary<NSAttributedStringDocumentAttributeKey,id> * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.5)));
    [Watch(2, 0), TV(9, 0), Mac(10, 5), iOS(9, 0)]
    [Export("readFromURL:options:documentAttributes:error:")]
    bool ReadFromURL(NSUrl url, NSDictionary<NSString, NSObject> opts, [NullAllowed] out NSDictionary<NSString, NSObject> dict, [NullAllowed] out NSError error);

    // -(BOOL)readFromData:(NSData * _Nonnull)data options:(NSDictionary<NSAttributedStringDocumentReadingOptionKey,id> * _Nonnull)opts documentAttributes:(NSDictionary<NSAttributedStringDocumentAttributeKey,id> * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("readFromData:options:documentAttributes:error:")]
    bool ReadFromData(NSData data, NSDictionary<NSString, NSObject> opts, [NullAllowed] out NSDictionary<NSString, NSObject> dict, [NullAllowed] out NSError error);
}

// @interface NSAttributedStringKitAdditions (NSAttributedString)
[Category]
[BaseType(typeof(NSAttributedString))]
interface NSAttributedString_NSAttributedStringKitAdditions
{
    // -(BOOL)containsAttachmentsInRange:(NSRange)range __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("containsAttachmentsInRange:")]
    bool ContainsAttachmentsInRange(NSRange range);
}

// @interface NSAttributedString_ItemProvider (NSAttributedString) <NSItemProviderReading, NSItemProviderWriting>
[Category]
[BaseType(typeof(NSAttributedString))]
interface NSAttributedString_NSAttributedString_ItemProvider : INSItemProviderReading, INSItemProviderWriting
{
}

// @interface NSDeprecatedKitAdditions (NSAttributedString)
[Category]
[BaseType(typeof(NSAttributedString))]
interface NSAttributedString_NSDeprecatedKitAdditions
{
    // -(instancetype _Nullable)initWithFileURL:(NSURL * _Nonnull)url options:(NSDictionary * _Nonnull)options documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 7, 0, message: "Use -initWithURL:options:documentAttributes:error: instead")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Use -initWithURL:options:documentAttributes:error: instead")]
    [NoTV]
    [Export("initWithFileURL:options:documentAttributes:error:")]
    IntPtr Constructor(NSUrl url, NSDictionary options, [NullAllowed] out NSDictionary dict, [NullAllowed] out NSError error);
}

// @interface NSDeprecatedKitAdditions (NSMutableAttributedString)
[Category]
[BaseType(typeof(NSMutableAttributedString))]
interface NSMutableAttributedString_NSDeprecatedKitAdditions
{
    // -(BOOL)readFromFileURL:(NSURL * _Nonnull)url options:(NSDictionary * _Nonnull)opts documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=7_0, deprecated=9_0)));
    [Introduced(PlatformName.iOS, 7, 0, message: "Use -readFromURL:options:documentAttributes:error: instead")]
    [Deprecated(PlatformName.iOS, 9, 0, message: "Use -readFromURL:options:documentAttributes:error: instead")]
    [NoTV]
    [Export("readFromFileURL:options:documentAttributes:error:")]
    bool ReadFromFileURL(NSUrl url, NSDictionary opts, [NullAllowed] out NSDictionary dict, [NullAllowed] out NSError error);
}

// audit-objc-generics: @interface NSLayoutAnchor<AnchorType> : NSObject
[iOS(9, 0)]
[BaseType(typeof(NSObject))]
interface NSLayoutAnchor
{
    // -(NSLayoutConstraint * _Nonnull)constraintEqualToAnchor:(NSLayoutAnchor<AnchorType> * _Nonnull)anchor;
    [Export("constraintEqualToAnchor:")]
    NSLayoutConstraint ConstraintEqualToAnchor(NSLayoutAnchor`1<NSObject> anchor);

    // -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToAnchor:(NSLayoutAnchor<AnchorType> * _Nonnull)anchor;
    [Export("constraintGreaterThanOrEqualToAnchor:")]
    NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor(NSLayoutAnchor`1<NSObject> anchor);

    // -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToAnchor:(NSLayoutAnchor<AnchorType> * _Nonnull)anchor;
    [Export("constraintLessThanOrEqualToAnchor:")]
    NSLayoutConstraint ConstraintLessThanOrEqualToAnchor(NSLayoutAnchor`1<NSObject> anchor);

    // -(NSLayoutConstraint * _Nonnull)constraintEqualToAnchor:(NSLayoutAnchor<AnchorType> * _Nonnull)anchor constant:(CGFloat)c;
    [Export("constraintEqualToAnchor:constant:")]
    NSLayoutConstraint ConstraintEqualToAnchor(NSLayoutAnchor`1<NSObject> anchor, nfloat c);

    // -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToAnchor:(NSLayoutAnchor<AnchorType> * _Nonnull)anchor constant:(CGFloat)c;
    [Export("constraintGreaterThanOrEqualToAnchor:constant:")]
    NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor(NSLayoutAnchor`1<NSObject> anchor, nfloat c);

    // -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToAnchor:(NSLayoutAnchor<AnchorType> * _Nonnull)anchor constant:(CGFloat)c;
    [Export("constraintLessThanOrEqualToAnchor:constant:")]
    NSLayoutConstraint ConstraintLessThanOrEqualToAnchor(NSLayoutAnchor`1<NSObject> anchor, nfloat c);
}

// @interface NSLayoutXAxisAnchor : NSLayoutAnchor
[iOS(9, 0)]
[BaseType(typeof(NSLayoutAnchor`1))]
interface NSLayoutXAxisAnchor
{
    // -(NSLayoutDimension * _Nonnull)anchorWithOffsetToAnchor:(NSLayoutXAxisAnchor * _Nonnull)otherAnchor __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0)));
    [TV(10, 0), iOS(10, 0)]
    [Export("anchorWithOffsetToAnchor:")]
    NSLayoutDimension AnchorWithOffsetToAnchor(NSLayoutXAxisAnchor otherAnchor);
}

// @interface UIViewDynamicSystemSpacingSupport (NSLayoutXAxisAnchor)
[Category]
[BaseType(typeof(NSLayoutXAxisAnchor))]
interface NSLayoutXAxisAnchor_UIViewDynamicSystemSpacingSupport
{
    // -(NSLayoutConstraint * _Nonnull)constraintEqualToSystemSpacingAfterAnchor:(NSLayoutXAxisAnchor * _Nonnull)anchor multiplier:(CGFloat)multiplier __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("constraintEqualToSystemSpacingAfterAnchor:multiplier:")]
    NSLayoutConstraint ConstraintEqualToSystemSpacingAfterAnchor(NSLayoutXAxisAnchor anchor, nfloat multiplier);

    // -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:(NSLayoutXAxisAnchor * _Nonnull)anchor multiplier:(CGFloat)multiplier __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:multiplier:")]
    NSLayoutConstraint ConstraintGreaterThanOrEqualToSystemSpacingAfterAnchor(NSLayoutXAxisAnchor anchor, nfloat multiplier);

    // -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToSystemSpacingAfterAnchor:(NSLayoutXAxisAnchor * _Nonnull)anchor multiplier:(CGFloat)multiplier __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("constraintLessThanOrEqualToSystemSpacingAfterAnchor:multiplier:")]
    NSLayoutConstraint ConstraintLessThanOrEqualToSystemSpacingAfterAnchor(NSLayoutXAxisAnchor anchor, nfloat multiplier);
}

// @interface NSLayoutYAxisAnchor : NSLayoutAnchor
[iOS(9, 0)]
[BaseType(typeof(NSLayoutAnchor`1))]
interface NSLayoutYAxisAnchor
{
    // -(NSLayoutDimension * _Nonnull)anchorWithOffsetToAnchor:(NSLayoutYAxisAnchor * _Nonnull)otherAnchor __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(ios, introduced=10.0)));
    [TV(10, 0), iOS(10, 0)]
    [Export("anchorWithOffsetToAnchor:")]
    NSLayoutDimension AnchorWithOffsetToAnchor(NSLayoutYAxisAnchor otherAnchor);
}

// @interface UIViewDynamicSystemSpacingSupport (NSLayoutYAxisAnchor)
[Category]
[BaseType(typeof(NSLayoutYAxisAnchor))]
interface NSLayoutYAxisAnchor_UIViewDynamicSystemSpacingSupport
{
    // -(NSLayoutConstraint * _Nonnull)constraintEqualToSystemSpacingBelowAnchor:(NSLayoutYAxisAnchor * _Nonnull)anchor multiplier:(CGFloat)multiplier __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("constraintEqualToSystemSpacingBelowAnchor:multiplier:")]
    NSLayoutConstraint ConstraintEqualToSystemSpacingBelowAnchor(NSLayoutYAxisAnchor anchor, nfloat multiplier);

    // -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToSystemSpacingBelowAnchor:(NSLayoutYAxisAnchor * _Nonnull)anchor multiplier:(CGFloat)multiplier __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("constraintGreaterThanOrEqualToSystemSpacingBelowAnchor:multiplier:")]
    NSLayoutConstraint ConstraintGreaterThanOrEqualToSystemSpacingBelowAnchor(NSLayoutYAxisAnchor anchor, nfloat multiplier);

    // -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToSystemSpacingBelowAnchor:(NSLayoutYAxisAnchor * _Nonnull)anchor multiplier:(CGFloat)multiplier __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("constraintLessThanOrEqualToSystemSpacingBelowAnchor:multiplier:")]
    NSLayoutConstraint ConstraintLessThanOrEqualToSystemSpacingBelowAnchor(NSLayoutYAxisAnchor anchor, nfloat multiplier);
}

// @interface NSLayoutDimension : NSLayoutAnchor
[iOS(9, 0)]
[BaseType(typeof(NSLayoutAnchor`1))]
interface NSLayoutDimension
{
    // -(NSLayoutConstraint * _Nonnull)constraintEqualToConstant:(CGFloat)c;
    [Export("constraintEqualToConstant:")]
    NSLayoutConstraint ConstraintEqualToConstant(nfloat c);

    // -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToConstant:(CGFloat)c;
    [Export("constraintGreaterThanOrEqualToConstant:")]
    NSLayoutConstraint ConstraintGreaterThanOrEqualToConstant(nfloat c);

    // -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToConstant:(CGFloat)c;
    [Export("constraintLessThanOrEqualToConstant:")]
    NSLayoutConstraint ConstraintLessThanOrEqualToConstant(nfloat c);

    // -(NSLayoutConstraint * _Nonnull)constraintEqualToAnchor:(NSLayoutDimension * _Nonnull)anchor multiplier:(CGFloat)m;
    [Export("constraintEqualToAnchor:multiplier:")]
    NSLayoutConstraint ConstraintEqualToAnchor(NSLayoutDimension anchor, nfloat m);

    // -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToAnchor:(NSLayoutDimension * _Nonnull)anchor multiplier:(CGFloat)m;
    [Export("constraintGreaterThanOrEqualToAnchor:multiplier:")]
    NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor(NSLayoutDimension anchor, nfloat m);

    // -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToAnchor:(NSLayoutDimension * _Nonnull)anchor multiplier:(CGFloat)m;
    [Export("constraintLessThanOrEqualToAnchor:multiplier:")]
    NSLayoutConstraint ConstraintLessThanOrEqualToAnchor(NSLayoutDimension anchor, nfloat m);

    // -(NSLayoutConstraint * _Nonnull)constraintEqualToAnchor:(NSLayoutDimension * _Nonnull)anchor multiplier:(CGFloat)m constant:(CGFloat)c;
    [Export("constraintEqualToAnchor:multiplier:constant:")]
    NSLayoutConstraint ConstraintEqualToAnchor(NSLayoutDimension anchor, nfloat m, nfloat c);

    // -(NSLayoutConstraint * _Nonnull)constraintGreaterThanOrEqualToAnchor:(NSLayoutDimension * _Nonnull)anchor multiplier:(CGFloat)m constant:(CGFloat)c;
    [Export("constraintGreaterThanOrEqualToAnchor:multiplier:constant:")]
    NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor(NSLayoutDimension anchor, nfloat m, nfloat c);

    // -(NSLayoutConstraint * _Nonnull)constraintLessThanOrEqualToAnchor:(NSLayoutDimension * _Nonnull)anchor multiplier:(CGFloat)m constant:(CGFloat)c;
    [Export("constraintLessThanOrEqualToAnchor:multiplier:constant:")]
    NSLayoutConstraint ConstraintLessThanOrEqualToAnchor(NSLayoutDimension anchor, nfloat m, nfloat c);
}

// @interface UIStackView : UIView
[iOS(9, 0)]
[BaseType(typeof(UIView))]
interface UIStackView
{
    // -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
    [Export("initWithFrame:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect frame);

    // -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder coder);

    // -(instancetype _Nonnull)initWithArrangedSubviews:(NSArray<__kindof UIView *> * _Nonnull)views;
    [Export("initWithArrangedSubviews:")]
    IntPtr Constructor(UIView[] views);

    // @property (readonly, copy, nonatomic) NSArray<__kindof UIView *> * _Nonnull arrangedSubviews;
    [Export("arrangedSubviews", ArgumentSemantic.Copy)]
    UIView[] ArrangedSubviews { get; }

    // -(void)addArrangedSubview:(UIView * _Nonnull)view;
    [Export("addArrangedSubview:")]
    void AddArrangedSubview(UIView view);

    // -(void)removeArrangedSubview:(UIView * _Nonnull)view;
    [Export("removeArrangedSubview:")]
    void RemoveArrangedSubview(UIView view);

    // -(void)insertArrangedSubview:(UIView * _Nonnull)view atIndex:(NSUInteger)stackIndex;
    [Export("insertArrangedSubview:atIndex:")]
    void InsertArrangedSubview(UIView view, nuint stackIndex);

    // @property (nonatomic) UILayoutConstraintAxis axis;
    [Export("axis", ArgumentSemantic.Assign)]
    UILayoutConstraintAxis Axis { get; set; }

    // @property (nonatomic) UIStackViewDistribution distribution;
    [Export("distribution", ArgumentSemantic.Assign)]
    UIStackViewDistribution Distribution { get; set; }

    // @property (nonatomic) UIStackViewAlignment alignment;
    [Export("alignment", ArgumentSemantic.Assign)]
    UIStackViewAlignment Alignment { get; set; }

    // @property (nonatomic) CGFloat spacing;
    [Export("spacing")]
    nfloat Spacing { get; set; }

    // -(void)setCustomSpacing:(CGFloat)spacing afterView:(UIView * _Nonnull)arrangedSubview __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("setCustomSpacing:afterView:")]
    void SetCustomSpacing(nfloat spacing, UIView arrangedSubview);

    // -(CGFloat)customSpacingAfterView:(UIView * _Nonnull)arrangedSubview __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(ios, introduced=11.0)));
    [TV(11, 0), iOS(11, 0)]
    [Export("customSpacingAfterView:")]
    nfloat CustomSpacingAfterView(UIView arrangedSubview);

    // @property (getter = isBaselineRelativeArrangement, nonatomic) BOOL baselineRelativeArrangement;
    [Export("baselineRelativeArrangement")]
    bool BaselineRelativeArrangement { [Bind("isBaselineRelativeArrangement")] get; set; }

    // @property (getter = isLayoutMarginsRelativeArrangement, nonatomic) BOOL layoutMarginsRelativeArrangement;
    [Export("layoutMarginsRelativeArrangement")]
    bool LayoutMarginsRelativeArrangement { [Bind("isLayoutMarginsRelativeArrangement")] get; set; }
}

// @interface NSTextStorage : NSMutableAttributedString
[iOS(7, 0)]
[BaseType(typeof(NSMutableAttributedString))]
interface NSTextStorage
{
    // @property (readonly, copy, nonatomic) NSArray<NSLayoutManager *> * _Nonnull layoutManagers;
    [Export("layoutManagers", ArgumentSemantic.Copy)]
    NSLayoutManager[] LayoutManagers { get; }

    // -(void)addLayoutManager:(NSLayoutManager * _Nonnull)aLayoutManager;
    [Export("addLayoutManager:")]
    void AddLayoutManager(NSLayoutManager aLayoutManager);

    // -(void)removeLayoutManager:(NSLayoutManager * _Nonnull)aLayoutManager;
    [Export("removeLayoutManager:")]
    void RemoveLayoutManager(NSLayoutManager aLayoutManager);

    // @property (readonly, nonatomic) NSTextStorageEditActions editedMask;
    [Export("editedMask")]
    NSTextStorageEditActions EditedMask { get; }

    // @property (readonly, nonatomic) NSRange editedRange;
    [Export("editedRange")]
    NSRange EditedRange { get; }

    // @property (readonly, nonatomic) NSInteger changeInLength;
    [Export("changeInLength")]
    nint ChangeInLength { get; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    NSTextStorageDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<NSTextStorageDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // -(void)edited:(NSTextStorageEditActions)editedMask range:(NSRange)editedRange changeInLength:(NSInteger)delta;
    [Export("edited:range:changeInLength:")]
    void Edited(NSTextStorageEditActions editedMask, NSRange editedRange, nint delta);

    // -(void)processEditing;
    [Export("processEditing")]
    void ProcessEditing();

    // @property (readonly, nonatomic) BOOL fixesAttributesLazily;
    [Export("fixesAttributesLazily")]
    bool FixesAttributesLazily { get; }

    // -(void)invalidateAttributesInRange:(NSRange)range;
    [Export("invalidateAttributesInRange:")]
    void InvalidateAttributesInRange(NSRange range);

    // -(void)ensureAttributesAreFixedInRange:(NSRange)range;
    [Export("ensureAttributesAreFixedInRange:")]
    void EnsureAttributesAreFixedInRange(NSRange range);
}

// @protocol NSTextStorageDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface NSTextStorageDelegate
{
    // @optional -(void)textStorage:(NSTextStorage * _Nonnull)textStorage willProcessEditing:(NSTextStorageEditActions)editedMask range:(NSRange)editedRange changeInLength:(NSInteger)delta __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("textStorage:willProcessEditing:range:changeInLength:")]
    void WillProcessEditing(NSTextStorage textStorage, NSTextStorageEditActions editedMask, NSRange editedRange, nint delta);

    // @optional -(void)textStorage:(NSTextStorage * _Nonnull)textStorage didProcessEditing:(NSTextStorageEditActions)editedMask range:(NSRange)editedRange changeInLength:(NSInteger)delta __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("textStorage:didProcessEditing:range:changeInLength:")]
    void DidProcessEditing(NSTextStorage textStorage, NSTextStorageEditActions editedMask, NSRange editedRange, nint delta);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const NSNotificationName _Nonnull NSTextStorageWillProcessEditingNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSTextStorageWillProcessEditingNotification", "__Internal")]
    NSString NSTextStorageWillProcessEditingNotification { get; }

    // extern const NSNotificationName _Nonnull NSTextStorageDidProcessEditingNotification __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Field("NSTextStorageDidProcessEditingNotification", "__Internal")]
    NSString NSTextStorageDidProcessEditingNotification { get; }
}

// @protocol NSTextLayoutOrientationProvider
[Protocol, Model]
interface NSTextLayoutOrientationProvider
{
    // @required @property (readonly, nonatomic) NSTextLayoutOrientation layoutOrientation __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Abstract]
    [Export("layoutOrientation")]
    NSTextLayoutOrientation LayoutOrientation { get; }
}

// @interface NSLayoutManager : NSObject <NSCoding>
[iOS(7, 0)]
[BaseType(typeof(NSObject))]
interface NSLayoutManager : INSCoding
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder coder);

    // @property (assign, nonatomic) NSTextStorage * _Nullable textStorage;
    [NullAllowed, Export("textStorage", ArgumentSemantic.Assign)]
    NSTextStorage TextStorage { get; set; }

    // @property (readonly, nonatomic) NSArray<NSTextContainer *> * _Nonnull textContainers;
    [Export("textContainers")]
    NSTextContainer[] TextContainers { get; }

    // -(void)addTextContainer:(NSTextContainer * _Nonnull)container;
    [Export("addTextContainer:")]
    void AddTextContainer(NSTextContainer container);

    // -(void)insertTextContainer:(NSTextContainer * _Nonnull)container atIndex:(NSUInteger)index;
    [Export("insertTextContainer:atIndex:")]
    void InsertTextContainer(NSTextContainer container, nuint index);

    // -(void)removeTextContainerAtIndex:(NSUInteger)index;
    [Export("removeTextContainerAtIndex:")]
    void RemoveTextContainerAtIndex(nuint index);

    // -(void)textContainerChangedGeometry:(NSTextContainer * _Nonnull)container;
    [Export("textContainerChangedGeometry:")]
    void TextContainerChangedGeometry(NSTextContainer container);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    NSLayoutManagerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<NSLayoutManagerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (nonatomic) BOOL showsInvisibleCharacters;
    [Export("showsInvisibleCharacters")]
    bool ShowsInvisibleCharacters { get; set; }

    // @property (nonatomic) BOOL showsControlCharacters;
    [Export("showsControlCharacters")]
    bool ShowsControlCharacters { get; set; }

    // @property (nonatomic) CGFloat hyphenationFactor;
    [Export("hyphenationFactor")]
    nfloat HyphenationFactor { get; set; }

    // @property (nonatomic) BOOL usesFontLeading;
    [Export("usesFontLeading")]
    bool UsesFontLeading { get; set; }

    // @property (nonatomic) BOOL allowsNonContiguousLayout __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("allowsNonContiguousLayout")]
    bool AllowsNonContiguousLayout { get; set; }

    // @property (readonly, nonatomic) BOOL hasNonContiguousLayout __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("hasNonContiguousLayout")]
    bool HasNonContiguousLayout { get; }

    // @property BOOL limitsLayoutForSuspiciousContents __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(macos, introduced=10.14)));
    [Watch(5, 0), TV(12, 0), Mac(10, 14), iOS(12, 0)]
    [Export("limitsLayoutForSuspiciousContents")]
    bool LimitsLayoutForSuspiciousContents { get; set; }

    // -(void)invalidateGlyphsForCharacterRange:(NSRange)charRange changeInLength:(NSInteger)delta actualCharacterRange:(NSRangePointer _Nullable)actualCharRange;
    [Export("invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:")]
    unsafe void InvalidateGlyphsForCharacterRange(NSRange charRange, nint delta, [NullAllowed] NSRangePointer* actualCharRange);

    // -(void)invalidateLayoutForCharacterRange:(NSRange)charRange actualCharacterRange:(NSRangePointer _Nullable)actualCharRange __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("invalidateLayoutForCharacterRange:actualCharacterRange:")]
    unsafe void InvalidateLayoutForCharacterRange(NSRange charRange, [NullAllowed] NSRangePointer* actualCharRange);

    // -(void)invalidateDisplayForCharacterRange:(NSRange)charRange;
    [Export("invalidateDisplayForCharacterRange:")]
    void InvalidateDisplayForCharacterRange(NSRange charRange);

    // -(void)invalidateDisplayForGlyphRange:(NSRange)glyphRange;
    [Export("invalidateDisplayForGlyphRange:")]
    void InvalidateDisplayForGlyphRange(NSRange glyphRange);

    // -(void)processEditingForTextStorage:(NSTextStorage * _Nonnull)textStorage edited:(NSTextStorageEditActions)editMask range:(NSRange)newCharRange changeInLength:(NSInteger)delta invalidatedRange:(NSRange)invalidatedCharRange __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:")]
    void ProcessEditingForTextStorage(NSTextStorage textStorage, NSTextStorageEditActions editMask, NSRange newCharRange, nint delta, NSRange invalidatedCharRange);

    // -(void)ensureGlyphsForCharacterRange:(NSRange)charRange;
    [Export("ensureGlyphsForCharacterRange:")]
    void EnsureGlyphsForCharacterRange(NSRange charRange);

    // -(void)ensureGlyphsForGlyphRange:(NSRange)glyphRange;
    [Export("ensureGlyphsForGlyphRange:")]
    void EnsureGlyphsForGlyphRange(NSRange glyphRange);

    // -(void)ensureLayoutForCharacterRange:(NSRange)charRange;
    [Export("ensureLayoutForCharacterRange:")]
    void EnsureLayoutForCharacterRange(NSRange charRange);

    // -(void)ensureLayoutForGlyphRange:(NSRange)glyphRange;
    [Export("ensureLayoutForGlyphRange:")]
    void EnsureLayoutForGlyphRange(NSRange glyphRange);

    // -(void)ensureLayoutForTextContainer:(NSTextContainer * _Nonnull)container;
    [Export("ensureLayoutForTextContainer:")]
    void EnsureLayoutForTextContainer(NSTextContainer container);

    // -(void)ensureLayoutForBoundingRect:(CGRect)bounds inTextContainer:(NSTextContainer * _Nonnull)container;
    [Export("ensureLayoutForBoundingRect:inTextContainer:")]
    void EnsureLayoutForBoundingRect(CGRect bounds, NSTextContainer container);

    // -(void)setGlyphs:(const CGGlyph * _Nonnull)glyphs properties:(const NSGlyphProperty * _Nonnull)props characterIndexes:(const NSUInteger * _Nonnull)charIndexes font:(UIFont * _Nonnull)aFont forGlyphRange:(NSRange)glyphRange __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("setGlyphs:properties:characterIndexes:font:forGlyphRange:")]
    unsafe void SetGlyphs(ushort* glyphs, NSGlyphProperty* props, nuint* charIndexes, UIFont aFont, NSRange glyphRange);

    // @property (readonly, nonatomic) NSUInteger numberOfGlyphs;
    [Export("numberOfGlyphs")]
    nuint NumberOfGlyphs { get; }

    // -(CGGlyph)CGGlyphAtIndex:(NSUInteger)glyphIndex isValidIndex:(BOOL * _Nullable)isValidIndex __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("CGGlyphAtIndex:isValidIndex:")]
    unsafe ushort CGGlyphAtIndex(nuint glyphIndex, [NullAllowed] bool* isValidIndex);

    // -(CGGlyph)CGGlyphAtIndex:(NSUInteger)glyphIndex __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("CGGlyphAtIndex:")]
    ushort CGGlyphAtIndex(nuint glyphIndex);

    // -(BOOL)isValidGlyphIndex:(NSUInteger)glyphIndex __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(macos, introduced=10.0)));
    [Watch(2, 0), TV(9, 0), Mac(10, 0), iOS(7, 0)]
    [Export("isValidGlyphIndex:")]
    bool IsValidGlyphIndex(nuint glyphIndex);

    // -(NSGlyphProperty)propertyForGlyphAtIndex:(NSUInteger)glyphIndex __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("propertyForGlyphAtIndex:")]
    NSGlyphProperty PropertyForGlyphAtIndex(nuint glyphIndex);

    // -(NSUInteger)characterIndexForGlyphAtIndex:(NSUInteger)glyphIndex;
    [Export("characterIndexForGlyphAtIndex:")]
    nuint CharacterIndexForGlyphAtIndex(nuint glyphIndex);

    // -(NSUInteger)glyphIndexForCharacterAtIndex:(NSUInteger)charIndex;
    [Export("glyphIndexForCharacterAtIndex:")]
    nuint GlyphIndexForCharacterAtIndex(nuint charIndex);

    // -(NSUInteger)getGlyphsInRange:(NSRange)glyphRange glyphs:(CGGlyph * _Nullable)glyphBuffer properties:(NSGlyphProperty * _Nullable)props characterIndexes:(NSUInteger * _Nullable)charIndexBuffer bidiLevels:(unsigned char * _Nullable)bidiLevelBuffer __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("getGlyphsInRange:glyphs:properties:characterIndexes:bidiLevels:")]
    unsafe nuint GetGlyphsInRange(NSRange glyphRange, [NullAllowed] ushort* glyphBuffer, [NullAllowed] NSGlyphProperty* props, [NullAllowed] nuint* charIndexBuffer, [NullAllowed] byte* bidiLevelBuffer);

    // -(void)setTextContainer:(NSTextContainer * _Nonnull)container forGlyphRange:(NSRange)glyphRange;
    [Export("setTextContainer:forGlyphRange:")]
    void SetTextContainer(NSTextContainer container, NSRange glyphRange);

    // -(void)setLineFragmentRect:(CGRect)fragmentRect forGlyphRange:(NSRange)glyphRange usedRect:(CGRect)usedRect;
    [Export("setLineFragmentRect:forGlyphRange:usedRect:")]
    void SetLineFragmentRect(CGRect fragmentRect, NSRange glyphRange, CGRect usedRect);

    // -(void)setExtraLineFragmentRect:(CGRect)fragmentRect usedRect:(CGRect)usedRect textContainer:(NSTextContainer * _Nonnull)container;
    [Export("setExtraLineFragmentRect:usedRect:textContainer:")]
    void SetExtraLineFragmentRect(CGRect fragmentRect, CGRect usedRect, NSTextContainer container);

    // -(void)setLocation:(CGPoint)location forStartOfGlyphRange:(NSRange)glyphRange;
    [Export("setLocation:forStartOfGlyphRange:")]
    void SetLocation(CGPoint location, NSRange glyphRange);

    // -(void)setNotShownAttribute:(BOOL)flag forGlyphAtIndex:(NSUInteger)glyphIndex;
    [Export("setNotShownAttribute:forGlyphAtIndex:")]
    void SetNotShownAttribute(bool flag, nuint glyphIndex);

    // -(void)setDrawsOutsideLineFragment:(BOOL)flag forGlyphAtIndex:(NSUInteger)glyphIndex;
    [Export("setDrawsOutsideLineFragment:forGlyphAtIndex:")]
    void SetDrawsOutsideLineFragment(bool flag, nuint glyphIndex);

    // -(void)setAttachmentSize:(CGSize)attachmentSize forGlyphRange:(NSRange)glyphRange;
    [Export("setAttachmentSize:forGlyphRange:")]
    void SetAttachmentSize(CGSize attachmentSize, NSRange glyphRange);

    // -(void)getFirstUnlaidCharacterIndex:(NSUInteger * _Nullable)charIndex glyphIndex:(NSUInteger * _Nullable)glyphIndex;
    [Export("getFirstUnlaidCharacterIndex:glyphIndex:")]
    unsafe void GetFirstUnlaidCharacterIndex([NullAllowed] nuint* charIndex, [NullAllowed] nuint* glyphIndex);

    // -(NSUInteger)firstUnlaidCharacterIndex;
    [Export("firstUnlaidCharacterIndex")]
    [Verify(MethodToProperty)]
    nuint FirstUnlaidCharacterIndex { get; }

    // -(NSUInteger)firstUnlaidGlyphIndex;
    [Export("firstUnlaidGlyphIndex")]
    [Verify(MethodToProperty)]
    nuint FirstUnlaidGlyphIndex { get; }

    // -(NSTextContainer * _Nullable)textContainerForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer _Nullable)effectiveGlyphRange;
    [Export("textContainerForGlyphAtIndex:effectiveRange:")]
    [return: NullAllowed]
    unsafe NSTextContainer TextContainerForGlyphAtIndex(nuint glyphIndex, [NullAllowed] NSRangePointer* effectiveGlyphRange);

    // -(NSTextContainer * _Nullable)textContainerForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer _Nullable)effectiveGlyphRange withoutAdditionalLayout:(BOOL)flag __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:")]
    [return: NullAllowed]
    unsafe NSTextContainer TextContainerForGlyphAtIndex(nuint glyphIndex, [NullAllowed] NSRangePointer* effectiveGlyphRange, bool flag);

    // -(CGRect)usedRectForTextContainer:(NSTextContainer * _Nonnull)container;
    [Export("usedRectForTextContainer:")]
    CGRect UsedRectForTextContainer(NSTextContainer container);

    // -(CGRect)lineFragmentRectForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer _Nullable)effectiveGlyphRange;
    [Export("lineFragmentRectForGlyphAtIndex:effectiveRange:")]
    unsafe CGRect LineFragmentRectForGlyphAtIndex(nuint glyphIndex, [NullAllowed] NSRangePointer* effectiveGlyphRange);

    // -(CGRect)lineFragmentRectForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer _Nullable)effectiveGlyphRange withoutAdditionalLayout:(BOOL)flag __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:")]
    unsafe CGRect LineFragmentRectForGlyphAtIndex(nuint glyphIndex, [NullAllowed] NSRangePointer* effectiveGlyphRange, bool flag);

    // -(CGRect)lineFragmentUsedRectForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer _Nullable)effectiveGlyphRange;
    [Export("lineFragmentUsedRectForGlyphAtIndex:effectiveRange:")]
    unsafe CGRect LineFragmentUsedRectForGlyphAtIndex(nuint glyphIndex, [NullAllowed] NSRangePointer* effectiveGlyphRange);

    // -(CGRect)lineFragmentUsedRectForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer _Nullable)effectiveGlyphRange withoutAdditionalLayout:(BOOL)flag __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:")]
    unsafe CGRect LineFragmentUsedRectForGlyphAtIndex(nuint glyphIndex, [NullAllowed] NSRangePointer* effectiveGlyphRange, bool flag);

    // @property (readonly, nonatomic) CGRect extraLineFragmentRect;
    [Export("extraLineFragmentRect")]
    CGRect ExtraLineFragmentRect { get; }

    // @property (readonly, nonatomic) CGRect extraLineFragmentUsedRect;
    [Export("extraLineFragmentUsedRect")]
    CGRect ExtraLineFragmentUsedRect { get; }

    // @property (readonly, nonatomic) NSTextContainer * _Nullable extraLineFragmentTextContainer;
    [NullAllowed, Export("extraLineFragmentTextContainer")]
    NSTextContainer ExtraLineFragmentTextContainer { get; }

    // -(CGPoint)locationForGlyphAtIndex:(NSUInteger)glyphIndex;
    [Export("locationForGlyphAtIndex:")]
    CGPoint LocationForGlyphAtIndex(nuint glyphIndex);

    // -(BOOL)notShownAttributeForGlyphAtIndex:(NSUInteger)glyphIndex;
    [Export("notShownAttributeForGlyphAtIndex:")]
    bool NotShownAttributeForGlyphAtIndex(nuint glyphIndex);

    // -(BOOL)drawsOutsideLineFragmentForGlyphAtIndex:(NSUInteger)glyphIndex;
    [Export("drawsOutsideLineFragmentForGlyphAtIndex:")]
    bool DrawsOutsideLineFragmentForGlyphAtIndex(nuint glyphIndex);

    // -(CGSize)attachmentSizeForGlyphAtIndex:(NSUInteger)glyphIndex;
    [Export("attachmentSizeForGlyphAtIndex:")]
    CGSize AttachmentSizeForGlyphAtIndex(nuint glyphIndex);

    // -(NSRange)truncatedGlyphRangeInLineFragmentForGlyphAtIndex:(NSUInteger)glyphIndex __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("truncatedGlyphRangeInLineFragmentForGlyphAtIndex:")]
    NSRange TruncatedGlyphRangeInLineFragmentForGlyphAtIndex(nuint glyphIndex);

    // -(NSRange)glyphRangeForCharacterRange:(NSRange)charRange actualCharacterRange:(NSRangePointer _Nullable)actualCharRange;
    [Export("glyphRangeForCharacterRange:actualCharacterRange:")]
    unsafe NSRange GlyphRangeForCharacterRange(NSRange charRange, [NullAllowed] NSRangePointer* actualCharRange);

    // -(NSRange)characterRangeForGlyphRange:(NSRange)glyphRange actualGlyphRange:(NSRangePointer _Nullable)actualGlyphRange;
    [Export("characterRangeForGlyphRange:actualGlyphRange:")]
    unsafe NSRange CharacterRangeForGlyphRange(NSRange glyphRange, [NullAllowed] NSRangePointer* actualGlyphRange);

    // -(NSRange)glyphRangeForTextContainer:(NSTextContainer * _Nonnull)container;
    [Export("glyphRangeForTextContainer:")]
    NSRange GlyphRangeForTextContainer(NSTextContainer container);

    // -(NSRange)rangeOfNominallySpacedGlyphsContainingIndex:(NSUInteger)glyphIndex;
    [Export("rangeOfNominallySpacedGlyphsContainingIndex:")]
    NSRange RangeOfNominallySpacedGlyphsContainingIndex(nuint glyphIndex);

    // -(CGRect)boundingRectForGlyphRange:(NSRange)glyphRange inTextContainer:(NSTextContainer * _Nonnull)container;
    [Export("boundingRectForGlyphRange:inTextContainer:")]
    CGRect BoundingRectForGlyphRange(NSRange glyphRange, NSTextContainer container);

    // -(NSRange)glyphRangeForBoundingRect:(CGRect)bounds inTextContainer:(NSTextContainer * _Nonnull)container;
    [Export("glyphRangeForBoundingRect:inTextContainer:")]
    NSRange GlyphRangeForBoundingRect(CGRect bounds, NSTextContainer container);

    // -(NSRange)glyphRangeForBoundingRectWithoutAdditionalLayout:(CGRect)bounds inTextContainer:(NSTextContainer * _Nonnull)container;
    [Export("glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:")]
    NSRange GlyphRangeForBoundingRectWithoutAdditionalLayout(CGRect bounds, NSTextContainer container);

    // -(NSUInteger)glyphIndexForPoint:(CGPoint)point inTextContainer:(NSTextContainer * _Nonnull)container fractionOfDistanceThroughGlyph:(CGFloat * _Nullable)partialFraction;
    [Export("glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:")]
    unsafe nuint GlyphIndexForPoint(CGPoint point, NSTextContainer container, [NullAllowed] nfloat* partialFraction);

    // -(NSUInteger)glyphIndexForPoint:(CGPoint)point inTextContainer:(NSTextContainer * _Nonnull)container;
    [Export("glyphIndexForPoint:inTextContainer:")]
    nuint GlyphIndexForPoint(CGPoint point, NSTextContainer container);

    // -(CGFloat)fractionOfDistanceThroughGlyphForPoint:(CGPoint)point inTextContainer:(NSTextContainer * _Nonnull)container;
    [Export("fractionOfDistanceThroughGlyphForPoint:inTextContainer:")]
    nfloat FractionOfDistanceThroughGlyphForPoint(CGPoint point, NSTextContainer container);

    // -(NSUInteger)characterIndexForPoint:(CGPoint)point inTextContainer:(NSTextContainer * _Nonnull)container fractionOfDistanceBetweenInsertionPoints:(CGFloat * _Nullable)partialFraction;
    [Export("characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:")]
    unsafe nuint CharacterIndexForPoint(CGPoint point, NSTextContainer container, [NullAllowed] nfloat* partialFraction);

    // -(NSUInteger)getLineFragmentInsertionPointsForCharacterAtIndex:(NSUInteger)charIndex alternatePositions:(BOOL)aFlag inDisplayOrder:(BOOL)dFlag positions:(CGFloat * _Nullable)positions characterIndexes:(NSUInteger * _Nullable)charIndexes;
    [Export("getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:")]
    unsafe nuint GetLineFragmentInsertionPointsForCharacterAtIndex(nuint charIndex, bool aFlag, bool dFlag, [NullAllowed] nfloat* positions, [NullAllowed] nuint* charIndexes);

    // -(void)enumerateLineFragmentsForGlyphRange:(NSRange)glyphRange usingBlock:(void (^ _Nonnull)(CGRect, CGRect, NSTextContainer * _Nonnull, NSRange, BOOL * _Nonnull))block __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("enumerateLineFragmentsForGlyphRange:usingBlock:")]
    unsafe void EnumerateLineFragmentsForGlyphRange(NSRange glyphRange, Action<CGRect, CGRect, NSTextContainer, NSRange, bool*> block);

    // -(void)enumerateEnclosingRectsForGlyphRange:(NSRange)glyphRange withinSelectedGlyphRange:(NSRange)selectedRange inTextContainer:(NSTextContainer * _Nonnull)textContainer usingBlock:(void (^ _Nonnull)(CGRect, BOOL * _Nonnull))block __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("enumerateEnclosingRectsForGlyphRange:withinSelectedGlyphRange:inTextContainer:usingBlock:")]
    unsafe void EnumerateEnclosingRectsForGlyphRange(NSRange glyphRange, NSRange selectedRange, NSTextContainer textContainer, Action<CGRect, bool*> block);

    // -(void)drawBackgroundForGlyphRange:(NSRange)glyphsToShow atPoint:(CGPoint)origin;
    [Export("drawBackgroundForGlyphRange:atPoint:")]
    void DrawBackgroundForGlyphRange(NSRange glyphsToShow, CGPoint origin);

    // -(void)drawGlyphsForGlyphRange:(NSRange)glyphsToShow atPoint:(CGPoint)origin;
    [Export("drawGlyphsForGlyphRange:atPoint:")]
    void DrawGlyphsForGlyphRange(NSRange glyphsToShow, CGPoint origin);

    // -(void)showCGGlyphs:(const CGGlyph * _Nonnull)glyphs positions:(const CGPoint * _Nonnull)positions count:(NSUInteger)glyphCount font:(UIFont * _Nonnull)font matrix:(CGAffineTransform)textMatrix attributes:(NSDictionary<NSAttributedStringKey,id> * _Nonnull)attributes inContext:(CGContextRef _Nonnull)graphicsContext __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("showCGGlyphs:positions:count:font:matrix:attributes:inContext:")]
    unsafe void ShowCGGlyphs(ushort* glyphs, CGPoint* positions, nuint glyphCount, UIFont font, CGAffineTransform textMatrix, NSDictionary<NSString, NSObject> attributes, CGContextRef* graphicsContext);

    // -(void)fillBackgroundRectArray:(const CGRect * _Nonnull)rectArray count:(NSUInteger)rectCount forCharacterRange:(NSRange)charRange color:(UIColor * _Nonnull)color __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("fillBackgroundRectArray:count:forCharacterRange:color:")]
    unsafe void FillBackgroundRectArray(CGRect* rectArray, nuint rectCount, NSRange charRange, UIColor color);

    // -(void)drawUnderlineForGlyphRange:(NSRange)glyphRange underlineType:(NSUnderlineStyle)underlineVal baselineOffset:(CGFloat)baselineOffset lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin;
    [Export("drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")]
    void DrawUnderlineForGlyphRange(NSRange glyphRange, NSUnderlineStyle underlineVal, nfloat baselineOffset, CGRect lineRect, NSRange lineGlyphRange, CGPoint containerOrigin);

    // -(void)underlineGlyphRange:(NSRange)glyphRange underlineType:(NSUnderlineStyle)underlineVal lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin;
    [Export("underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")]
    void UnderlineGlyphRange(NSRange glyphRange, NSUnderlineStyle underlineVal, CGRect lineRect, NSRange lineGlyphRange, CGPoint containerOrigin);

    // -(void)drawStrikethroughForGlyphRange:(NSRange)glyphRange strikethroughType:(NSUnderlineStyle)strikethroughVal baselineOffset:(CGFloat)baselineOffset lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin;
    [Export("drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")]
    void DrawStrikethroughForGlyphRange(NSRange glyphRange, NSUnderlineStyle strikethroughVal, nfloat baselineOffset, CGRect lineRect, NSRange lineGlyphRange, CGPoint containerOrigin);

    // -(void)strikethroughGlyphRange:(NSRange)glyphRange strikethroughType:(NSUnderlineStyle)strikethroughVal lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin;
    [Export("strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")]
    void StrikethroughGlyphRange(NSRange glyphRange, NSUnderlineStyle strikethroughVal, CGRect lineRect, NSRange lineGlyphRange, CGPoint containerOrigin);
}

// @protocol NSLayoutManagerDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface NSLayoutManagerDelegate
{
    // @optional -(NSUInteger)layoutManager:(NSLayoutManager * _Nonnull)layoutManager shouldGenerateGlyphs:(const CGGlyph * _Nonnull)glyphs properties:(const NSGlyphProperty * _Nonnull)props characterIndexes:(const NSUInteger * _Nonnull)charIndexes font:(UIFont * _Nonnull)aFont forGlyphRange:(NSRange)glyphRange __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("layoutManager:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:")]
    unsafe nuint LayoutManager(NSLayoutManager layoutManager, ushort* glyphs, NSGlyphProperty* props, nuint* charIndexes, UIFont aFont, NSRange glyphRange);

    // @optional -(CGFloat)layoutManager:(NSLayoutManager * _Nonnull)layoutManager lineSpacingAfterGlyphAtIndex:(NSUInteger)glyphIndex withProposedLineFragmentRect:(CGRect)rect __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("layoutManager:lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:")]
    nfloat LayoutManager(NSLayoutManager layoutManager, nuint glyphIndex, CGRect rect);

    // @optional -(CGFloat)layoutManager:(NSLayoutManager * _Nonnull)layoutManager paragraphSpacingBeforeGlyphAtIndex:(NSUInteger)glyphIndex withProposedLineFragmentRect:(CGRect)rect __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("layoutManager:paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:")]
    nfloat LayoutManager(NSLayoutManager layoutManager, nuint glyphIndex, CGRect rect);

    // @optional -(CGFloat)layoutManager:(NSLayoutManager * _Nonnull)layoutManager paragraphSpacingAfterGlyphAtIndex:(NSUInteger)glyphIndex withProposedLineFragmentRect:(CGRect)rect __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("layoutManager:paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:")]
    nfloat LayoutManager(NSLayoutManager layoutManager, nuint glyphIndex, CGRect rect);

    // @optional -(NSControlCharacterAction)layoutManager:(NSLayoutManager * _Nonnull)layoutManager shouldUseAction:(NSControlCharacterAction)action forControlCharacterAtIndex:(NSUInteger)charIndex __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("layoutManager:shouldUseAction:forControlCharacterAtIndex:")]
    NSControlCharacterAction LayoutManager(NSLayoutManager layoutManager, NSControlCharacterAction action, nuint charIndex);

    // @optional -(BOOL)layoutManager:(NSLayoutManager * _Nonnull)layoutManager shouldBreakLineByWordBeforeCharacterAtIndex:(NSUInteger)charIndex __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("layoutManager:shouldBreakLineByWordBeforeCharacterAtIndex:")]
    bool LayoutManager(NSLayoutManager layoutManager, nuint charIndex);

    // @optional -(BOOL)layoutManager:(NSLayoutManager * _Nonnull)layoutManager shouldBreakLineByHyphenatingBeforeCharacterAtIndex:(NSUInteger)charIndex __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("layoutManager:shouldBreakLineByHyphenatingBeforeCharacterAtIndex:")]
    bool LayoutManager(NSLayoutManager layoutManager, nuint charIndex);

    // @optional -(CGRect)layoutManager:(NSLayoutManager * _Nonnull)layoutManager boundingBoxForControlGlyphAtIndex:(NSUInteger)glyphIndex forTextContainer:(NSTextContainer * _Nonnull)textContainer proposedLineFragment:(CGRect)proposedRect glyphPosition:(CGPoint)glyphPosition characterIndex:(NSUInteger)charIndex __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("layoutManager:boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:")]
    CGRect LayoutManager(NSLayoutManager layoutManager, nuint glyphIndex, NSTextContainer textContainer, CGRect proposedRect, CGPoint glyphPosition, nuint charIndex);

    // @optional -(BOOL)layoutManager:(NSLayoutManager * _Nonnull)layoutManager shouldSetLineFragmentRect:(CGRect * _Nonnull)lineFragmentRect lineFragmentUsedRect:(CGRect * _Nonnull)lineFragmentUsedRect baselineOffset:(CGFloat * _Nonnull)baselineOffset inTextContainer:(NSTextContainer * _Nonnull)textContainer forGlyphRange:(NSRange)glyphRange __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("layoutManager:shouldSetLineFragmentRect:lineFragmentUsedRect:baselineOffset:inTextContainer:forGlyphRange:")]
    unsafe bool LayoutManager(NSLayoutManager layoutManager, CGRect* lineFragmentRect, CGRect* lineFragmentUsedRect, nfloat* baselineOffset, NSTextContainer textContainer, NSRange glyphRange);

    // @optional -(void)layoutManagerDidInvalidateLayout:(NSLayoutManager * _Nonnull)sender __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("layoutManagerDidInvalidateLayout:")]
    void LayoutManagerDidInvalidateLayout(NSLayoutManager sender);

    // @optional -(void)layoutManager:(NSLayoutManager * _Nonnull)layoutManager didCompleteLayoutForTextContainer:(NSTextContainer * _Nullable)textContainer atEnd:(BOOL)layoutFinishedFlag __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("layoutManager:didCompleteLayoutForTextContainer:atEnd:")]
    void LayoutManager(NSLayoutManager layoutManager, [NullAllowed] NSTextContainer textContainer, bool layoutFinishedFlag);

    // @optional -(void)layoutManager:(NSLayoutManager * _Nonnull)layoutManager textContainer:(NSTextContainer * _Nonnull)textContainer didChangeGeometryFromSize:(CGSize)oldSize __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("layoutManager:textContainer:didChangeGeometryFromSize:")]
    void LayoutManager(NSLayoutManager layoutManager, NSTextContainer textContainer, CGSize oldSize);
}

// @interface NSLayoutManagerDeprecated (NSLayoutManager)
[Category]
[BaseType(typeof(NSLayoutManager))]
interface NSLayoutManager_NSLayoutManagerDeprecated
{
    // -(CGGlyph)glyphAtIndex:(NSUInteger)glyphIndex isValidIndex:(BOOL * _Nullable)isValidIndex;
    [Export("glyphAtIndex:isValidIndex:")]
    unsafe ushort GlyphAtIndex(nuint glyphIndex, [NullAllowed] bool* isValidIndex);

    // -(CGGlyph)glyphAtIndex:(NSUInteger)glyphIndex;
    [Export("glyphAtIndex:")]
    ushort GlyphAtIndex(nuint glyphIndex);
}

// @interface NSShadow : NSObject <NSCopying, NSSecureCoding>
[iOS(6, 0)]
[BaseType(typeof(NSObject))]
interface NSShadow : INSCopying, INSSecureCoding
{
    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder aDecoder);

    // @property (assign, nonatomic) CGSize shadowOffset;
    [Export("shadowOffset", ArgumentSemantic.Assign)]
    CGSize ShadowOffset { get; set; }

    // @property (assign, nonatomic) CGFloat shadowBlurRadius;
    [Export("shadowBlurRadius")]
    nfloat ShadowBlurRadius { get; set; }

    // @property (nonatomic, strong) id _Nullable shadowColor;
    [NullAllowed, Export("shadowColor", ArgumentSemantic.Strong)]
    NSObject ShadowColor { get; set; }
}

// @interface NSStringDrawingContext : NSObject
[iOS(6, 0)]
[BaseType(typeof(NSObject))]
interface NSStringDrawingContext
{
    // @property (nonatomic) CGFloat minimumScaleFactor;
    [Export("minimumScaleFactor")]
    nfloat MinimumScaleFactor { get; set; }

    // @property (readonly, nonatomic) CGFloat actualScaleFactor;
    [Export("actualScaleFactor")]
    nfloat ActualScaleFactor { get; }

    // @property (readonly, nonatomic) CGRect totalBounds;
    [Export("totalBounds")]
    CGRect TotalBounds { get; }
}

// @interface NSStringDrawing (NSString)
[Category]
[BaseType(typeof(NSString))]
interface NSString_NSStringDrawing
{
    // -(CGSize)sizeWithAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("sizeWithAttributes:")]
    CGSize SizeWithAttributes([NullAllowed] NSDictionary<NSString, NSObject> attrs);

    // -(void)drawAtPoint:(CGPoint)point withAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("drawAtPoint:withAttributes:")]
    void DrawAtPoint(CGPoint point, [NullAllowed] NSDictionary<NSString, NSObject> attrs);

    // -(void)drawInRect:(CGRect)rect withAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("drawInRect:withAttributes:")]
    void DrawInRect(CGRect rect, [NullAllowed] NSDictionary<NSString, NSObject> attrs);
}

// @interface NSStringDrawing (NSAttributedString)
[Category]
[BaseType(typeof(NSAttributedString))]
interface NSAttributedString_NSStringDrawing
{
    // -(CGSize)size __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("size")]
    [Verify(MethodToProperty)]
    CGSize Size { get; }

    // -(void)drawAtPoint:(CGPoint)point __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("drawAtPoint:")]
    void DrawAtPoint(CGPoint point);

    // -(void)drawInRect:(CGRect)rect __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("drawInRect:")]
    void DrawInRect(CGRect rect);
}

// @interface NSExtendedStringDrawing (NSString)
[Category]
[BaseType(typeof(NSString))]
interface NSString_NSExtendedStringDrawing
{
    // -(void)drawWithRect:(CGRect)rect options:(NSStringDrawingOptions)options attributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attributes context:(NSStringDrawingContext * _Nullable)context __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("drawWithRect:options:attributes:context:")]
    void DrawWithRect(CGRect rect, NSStringDrawingOptions options, [NullAllowed] NSDictionary<NSString, NSObject> attributes, [NullAllowed] NSStringDrawingContext context);

    // -(CGRect)boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options attributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attributes context:(NSStringDrawingContext * _Nullable)context __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("boundingRectWithSize:options:attributes:context:")]
    CGRect BoundingRectWithSize(CGSize size, NSStringDrawingOptions options, [NullAllowed] NSDictionary<NSString, NSObject> attributes, [NullAllowed] NSStringDrawingContext context);
}

// @interface NSExtendedStringDrawing (NSAttributedString)
[Category]
[BaseType(typeof(NSAttributedString))]
interface NSAttributedString_NSExtendedStringDrawing
{
    // -(void)drawWithRect:(CGRect)rect options:(NSStringDrawingOptions)options context:(NSStringDrawingContext * _Nullable)context __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("drawWithRect:options:context:")]
    void DrawWithRect(CGRect rect, NSStringDrawingOptions options, [NullAllowed] NSStringDrawingContext context);

    // -(CGRect)boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options context:(NSStringDrawingContext * _Nullable)context __attribute__((availability(ios, introduced=6_0)));
    [iOS(6, 0)]
    [Export("boundingRectWithSize:options:context:")]
    CGRect BoundingRectWithSize(CGSize size, NSStringDrawingOptions options, [NullAllowed] NSStringDrawingContext context);
}

// @interface NSStringDrawingContextDeprecated (NSStringDrawingContext)
[Category]
[BaseType(typeof(NSStringDrawingContext))]
interface NSStringDrawingContext_NSStringDrawingContextDeprecated
{
    // @property (nonatomic) CGFloat minimumTrackingAdjustment __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 6, 0)]
    [Deprecated(PlatformName.iOS, 7, 0)]
    [NoTV, NoMac]
    [Export("minimumTrackingAdjustment")]
    nfloat MinimumTrackingAdjustment { get; set; }

    // @property (readonly, nonatomic) CGFloat actualTrackingAdjustment __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, introduced=6_0, deprecated=7_0)));
    [Introduced(PlatformName.iOS, 6, 0)]
    [Deprecated(PlatformName.iOS, 7, 0)]
    [NoTV, NoMac]
    [Export("actualTrackingAdjustment")]
    nfloat ActualTrackingAdjustment { get; }
}

// @interface NSTextContainer : NSObject <NSCoding, NSTextLayoutOrientationProvider>
[iOS(7, 0)]
[BaseType(typeof(NSObject))]
interface NSTextContainer : INSCoding, INSTextLayoutOrientationProvider
{
    // -(instancetype _Nonnull)initWithSize:(CGSize)size __attribute__((availability(ios, introduced=7_0))) __attribute__((objc_designated_initializer));
    [iOS(7, 0)]
    [Export("initWithSize:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGSize size);

    // -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder coder);

    // @property (assign, nonatomic) NSLayoutManager * _Nullable layoutManager;
    [NullAllowed, Export("layoutManager", ArgumentSemantic.Assign)]
    NSLayoutManager LayoutManager { get; set; }

    // -(void)replaceLayoutManager:(NSLayoutManager * _Nonnull)newLayoutManager __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("replaceLayoutManager:")]
    void ReplaceLayoutManager(NSLayoutManager newLayoutManager);

    // @property (nonatomic) CGSize size __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("size", ArgumentSemantic.Assign)]
    CGSize Size { get; set; }

    // @property (copy, nonatomic) NSArray<UIBezierPath *> * _Nonnull exclusionPaths __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("exclusionPaths", ArgumentSemantic.Copy)]
    UIBezierPath[] ExclusionPaths { get; set; }

    // @property (nonatomic) NSLineBreakMode lineBreakMode __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("lineBreakMode", ArgumentSemantic.Assign)]
    NSLineBreakMode LineBreakMode { get; set; }

    // @property (nonatomic) CGFloat lineFragmentPadding;
    [Export("lineFragmentPadding")]
    nfloat LineFragmentPadding { get; set; }

    // @property (nonatomic) NSUInteger maximumNumberOfLines __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("maximumNumberOfLines")]
    nuint MaximumNumberOfLines { get; set; }

    // -(CGRect)lineFragmentRectForProposedRect:(CGRect)proposedRect atIndex:(NSUInteger)characterIndex writingDirection:(NSWritingDirection)baseWritingDirection remainingRect:(CGRect * _Nullable)remainingRect __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("lineFragmentRectForProposedRect:atIndex:writingDirection:remainingRect:")]
    unsafe CGRect LineFragmentRectForProposedRect(CGRect proposedRect, nuint characterIndex, NSWritingDirection baseWritingDirection, [NullAllowed] CGRect* remainingRect);

    // @property (readonly, getter = isSimpleRectangularTextContainer, nonatomic) BOOL simpleRectangularTextContainer __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("simpleRectangularTextContainer")]
    bool SimpleRectangularTextContainer { [Bind("isSimpleRectangularTextContainer")] get; }

    // @property (nonatomic) BOOL widthTracksTextView;
    [Export("widthTracksTextView")]
    bool WidthTracksTextView { get; set; }

    // @property (nonatomic) BOOL heightTracksTextView;
    [Export("heightTracksTextView")]
    bool HeightTracksTextView { get; set; }
}

// @interface UIPreviewInteraction : NSObject
[NoWatch, NoTV, iOS(10, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIPreviewInteraction
{
    // -(instancetype _Nonnull)initWithView:(UIView * _Nonnull)view __attribute__((objc_designated_initializer));
    [Export("initWithView:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIView view);

    // @property (readonly, nonatomic, weak) UIView * _Nullable view;
    [NullAllowed, Export("view", ArgumentSemantic.Weak)]
    UIView View { get; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIPreviewInteractionDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIPreviewInteractionDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // -(CGPoint)locationInCoordinateSpace:(id<UICoordinateSpace> _Nullable)coordinateSpace;
    [Export("locationInCoordinateSpace:")]
    CGPoint LocationInCoordinateSpace([NullAllowed] UICoordinateSpace coordinateSpace);

    // -(void)cancelInteraction;
    [Export("cancelInteraction")]
    void CancelInteraction();
}

// @protocol UIPreviewInteractionDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIPreviewInteractionDelegate
{
    // @required -(void)previewInteraction:(UIPreviewInteraction * _Nonnull)previewInteraction didUpdatePreviewTransition:(CGFloat)transitionProgress ended:(BOOL)ended __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=10_0)));
    [NoWatch, NoTV, iOS(10, 0)]
    [Abstract]
    [Export("previewInteraction:didUpdatePreviewTransition:ended:")]
    void PreviewInteraction(UIPreviewInteraction previewInteraction, nfloat transitionProgress, bool ended);

    // @required -(void)previewInteractionDidCancel:(UIPreviewInteraction * _Nonnull)previewInteraction __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=10_0)));
    [NoWatch, NoTV, iOS(10, 0)]
    [Abstract]
    [Export("previewInteractionDidCancel:")]
    void PreviewInteractionDidCancel(UIPreviewInteraction previewInteraction);

    // @optional -(BOOL)previewInteractionShouldBegin:(UIPreviewInteraction * _Nonnull)previewInteraction __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=10_0)));
    [NoWatch, NoTV, iOS(10, 0)]
    [Export("previewInteractionShouldBegin:")]
    bool PreviewInteractionShouldBegin(UIPreviewInteraction previewInteraction);

    // @optional -(void)previewInteraction:(UIPreviewInteraction * _Nonnull)previewInteraction didUpdateCommitTransition:(CGFloat)transitionProgress ended:(BOOL)ended __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=10_0)));
    [NoWatch, NoTV, iOS(10, 0)]
    [Export("previewInteraction:didUpdateCommitTransition:ended:")]
    void PreviewInteraction(UIPreviewInteraction previewInteraction, nfloat transitionProgress, bool ended);
}

// @protocol UIPopoverPresentationControllerDelegate <UIAdaptivePresentationControllerDelegate>
[NoTV]
[Protocol, Model]
interface UIPopoverPresentationControllerDelegate : IUIAdaptivePresentationControllerDelegate
{
    // @optional -(void)prepareForPopoverPresentation:(UIPopoverPresentationController * _Nonnull)popoverPresentationController;
    [Export("prepareForPopoverPresentation:")]
    void PrepareForPopoverPresentation(UIPopoverPresentationController popoverPresentationController);

    // @optional -(BOOL)popoverPresentationControllerShouldDismissPopover:(UIPopoverPresentationController * _Nonnull)popoverPresentationController;
    [Export("popoverPresentationControllerShouldDismissPopover:")]
    bool PopoverPresentationControllerShouldDismissPopover(UIPopoverPresentationController popoverPresentationController);

    // @optional -(void)popoverPresentationControllerDidDismissPopover:(UIPopoverPresentationController * _Nonnull)popoverPresentationController;
    [Export("popoverPresentationControllerDidDismissPopover:")]
    void PopoverPresentationControllerDidDismissPopover(UIPopoverPresentationController popoverPresentationController);

    // @optional -(void)popoverPresentationController:(UIPopoverPresentationController * _Nonnull)popoverPresentationController willRepositionPopoverToRect:(CGRect * _Nonnull)rect inView:(UIView * _Nonnull * _Nonnull)view;
    [Export("popoverPresentationController:willRepositionPopoverToRect:inView:")]
    unsafe void PopoverPresentationController(UIPopoverPresentationController popoverPresentationController, CGRect* rect, out UIView view);
}

// @interface UIPopoverPresentationController : UIPresentationController
[NoTV, iOS(8, 0)]
[BaseType(typeof(UIPresentationController))]
interface UIPopoverPresentationController
{
    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIPopoverPresentationControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIPopoverPresentationControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (assign, nonatomic) UIPopoverArrowDirection permittedArrowDirections;
    [Export("permittedArrowDirections", ArgumentSemantic.Assign)]
    UIPopoverArrowDirection PermittedArrowDirections { get; set; }

    // @property (nonatomic, strong) UIView * _Nullable sourceView;
    [NullAllowed, Export("sourceView", ArgumentSemantic.Strong)]
    UIView SourceView { get; set; }

    // @property (assign, nonatomic) CGRect sourceRect;
    [Export("sourceRect", ArgumentSemantic.Assign)]
    CGRect SourceRect { get; set; }

    // @property (assign, nonatomic) BOOL canOverlapSourceViewRect __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("canOverlapSourceViewRect")]
    bool CanOverlapSourceViewRect { get; set; }

    // @property (nonatomic, strong) UIBarButtonItem * _Nullable barButtonItem;
    [NullAllowed, Export("barButtonItem", ArgumentSemantic.Strong)]
    UIBarButtonItem BarButtonItem { get; set; }

    // @property (readonly, nonatomic) UIPopoverArrowDirection arrowDirection;
    [Export("arrowDirection")]
    UIPopoverArrowDirection ArrowDirection { get; }

    // @property (copy, nonatomic) NSArray<UIView *> * _Nullable passthroughViews;
    [NullAllowed, Export("passthroughViews", ArgumentSemantic.Copy)]
    UIView[] PassthroughViews { get; set; }

    // @property (copy, nonatomic) UIColor * _Nullable backgroundColor;
    [NullAllowed, Export("backgroundColor", ArgumentSemantic.Copy)]
    UIColor BackgroundColor { get; set; }

    // @property (readwrite, nonatomic) UIEdgeInsets popoverLayoutMargins;
    [Export("popoverLayoutMargins", ArgumentSemantic.Assign)]
    UIEdgeInsets PopoverLayoutMargins { get; set; }

    // @property (readwrite, nonatomic, strong) Class<UIPopoverBackgroundViewMethods> _Nullable popoverBackgroundViewClass;
    [NullAllowed, Export("popoverBackgroundViewClass", ArgumentSemantic.Strong)]
    UIPopoverBackgroundViewMethods PopoverBackgroundViewClass { get; set; }
}

// @protocol UIDynamicAnimatorDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIDynamicAnimatorDelegate
{
    // @optional -(void)dynamicAnimatorWillResume:(UIDynamicAnimator * _Nonnull)animator;
    [Export("dynamicAnimatorWillResume:")]
    void DynamicAnimatorWillResume(UIDynamicAnimator animator);

    // @optional -(void)dynamicAnimatorDidPause:(UIDynamicAnimator * _Nonnull)animator;
    [Export("dynamicAnimatorDidPause:")]
    void DynamicAnimatorDidPause(UIDynamicAnimator animator);
}

// @interface UIDynamicAnimator : NSObject
[iOS(7, 0)]
[BaseType(typeof(NSObject))]
interface UIDynamicAnimator
{
    // -(instancetype _Nonnull)initWithReferenceView:(UIView * _Nonnull)view __attribute__((objc_designated_initializer));
    [Export("initWithReferenceView:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIView view);

    // -(void)addBehavior:(UIDynamicBehavior * _Nonnull)behavior;
    [Export("addBehavior:")]
    void AddBehavior(UIDynamicBehavior behavior);

    // -(void)removeBehavior:(UIDynamicBehavior * _Nonnull)behavior;
    [Export("removeBehavior:")]
    void RemoveBehavior(UIDynamicBehavior behavior);

    // -(void)removeAllBehaviors;
    [Export("removeAllBehaviors")]
    void RemoveAllBehaviors();

    // @property (readonly, nonatomic) UIView * _Nullable referenceView;
    [NullAllowed, Export("referenceView")]
    UIView ReferenceView { get; }

    // @property (readonly, copy, nonatomic) NSArray<__kindof UIDynamicBehavior *> * _Nonnull behaviors;
    [Export("behaviors", ArgumentSemantic.Copy)]
    UIDynamicBehavior[] Behaviors { get; }

    // -(NSArray<id<UIDynamicItem>> * _Nonnull)itemsInRect:(CGRect)rect;
    [Export("itemsInRect:")]
    UIDynamicItem[] ItemsInRect(CGRect rect);

    // -(void)updateItemUsingCurrentState:(id<UIDynamicItem> _Nonnull)item;
    [Export("updateItemUsingCurrentState:")]
    void UpdateItemUsingCurrentState(UIDynamicItem item);

    // @property (readonly, getter = isRunning, nonatomic) BOOL running;
    [Export("running")]
    bool Running { [Bind("isRunning")] get; }

    // @property (readonly, nonatomic) NSTimeInterval elapsedTime;
    [Export("elapsedTime")]
    double ElapsedTime { get; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIDynamicAnimatorDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIDynamicAnimatorDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }
}

// @interface UICollectionViewAdditions (UIDynamicAnimator)
[Category]
[BaseType(typeof(UIDynamicAnimator))]
interface UIDynamicAnimator_UICollectionViewAdditions
{
    // -(instancetype _Nonnull)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout;
    [Export("initWithCollectionViewLayout:")]
    IntPtr Constructor(UICollectionViewLayout layout);

    // -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForCellAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("layoutAttributesForCellAtIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes LayoutAttributesForCellAtIndexPath(NSIndexPath indexPath);

    // -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForSupplementaryViewOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("layoutAttributesForSupplementaryViewOfKind:atIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryViewOfKind(string kind, NSIndexPath indexPath);

    // -(UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForDecorationViewOfKind:(NSString * _Nonnull)decorationViewKind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
    [Export("layoutAttributesForDecorationViewOfKind:atIndexPath:")]
    [return: NullAllowed]
    UICollectionViewLayoutAttributes LayoutAttributesForDecorationViewOfKind(string decorationViewKind, NSIndexPath indexPath);
}

// @interface UIPushBehavior : UIDynamicBehavior
[iOS(7, 0)]
[BaseType(typeof(UIDynamicBehavior))]
interface UIPushBehavior
{
    // -(instancetype _Nonnull)initWithItems:(NSArray<id<UIDynamicItem>> * _Nonnull)items mode:(UIPushBehaviorMode)mode __attribute__((objc_designated_initializer));
    [Export("initWithItems:mode:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIDynamicItem[] items, UIPushBehaviorMode mode);

    // -(void)addItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("addItem:")]
    void AddItem(UIDynamicItem item);

    // -(void)removeItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("removeItem:")]
    void RemoveItem(UIDynamicItem item);

    // @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
    [Export("items", ArgumentSemantic.Copy)]
    UIDynamicItem[] Items { get; }

    // -(UIOffset)targetOffsetFromCenterForItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("targetOffsetFromCenterForItem:")]
    UIOffset TargetOffsetFromCenterForItem(UIDynamicItem item);

    // -(void)setTargetOffsetFromCenter:(UIOffset)o forItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("setTargetOffsetFromCenter:forItem:")]
    void SetTargetOffsetFromCenter(UIOffset o, UIDynamicItem item);

    // @property (readonly, nonatomic) UIPushBehaviorMode mode;
    [Export("mode")]
    UIPushBehaviorMode Mode { get; }

    // @property (readwrite, nonatomic) BOOL active;
    [Export("active")]
    bool Active { get; set; }

    // @property (readwrite, nonatomic) CGFloat angle;
    [Export("angle")]
    nfloat Angle { get; set; }

    // @property (readwrite, nonatomic) CGFloat magnitude;
    [Export("magnitude")]
    nfloat Magnitude { get; set; }

    // @property (readwrite, nonatomic) CGVector pushDirection;
    [Export("pushDirection", ArgumentSemantic.Assign)]
    CGVector PushDirection { get; set; }

    // -(void)setAngle:(CGFloat)angle magnitude:(CGFloat)magnitude;
    [Export("setAngle:magnitude:")]
    void SetAngle(nfloat angle, nfloat magnitude);
}

// @interface UISnapBehavior : UIDynamicBehavior
[iOS(7, 0)]
[BaseType(typeof(UIDynamicBehavior))]
interface UISnapBehavior
{
    // -(instancetype _Nonnull)initWithItem:(id<UIDynamicItem> _Nonnull)item snapToPoint:(CGPoint)point __attribute__((objc_designated_initializer));
    [Export("initWithItem:snapToPoint:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIDynamicItem item, CGPoint point);

    // @property (assign, nonatomic) CGPoint snapPoint __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("snapPoint", ArgumentSemantic.Assign)]
    CGPoint SnapPoint { get; set; }

    // @property (assign, nonatomic) CGFloat damping;
    [Export("damping")]
    nfloat Damping { get; set; }
}

// @interface UIDynamicItemBehavior : UIDynamicBehavior
[iOS(7, 0)]
[BaseType(typeof(UIDynamicBehavior))]
interface UIDynamicItemBehavior
{
    // -(instancetype _Nonnull)initWithItems:(NSArray<id<UIDynamicItem>> * _Nonnull)items __attribute__((objc_designated_initializer));
    [Export("initWithItems:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIDynamicItem[] items);

    // -(void)addItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("addItem:")]
    void AddItem(UIDynamicItem item);

    // -(void)removeItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("removeItem:")]
    void RemoveItem(UIDynamicItem item);

    // @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
    [Export("items", ArgumentSemantic.Copy)]
    UIDynamicItem[] Items { get; }

    // @property (readwrite, nonatomic) CGFloat elasticity;
    [Export("elasticity")]
    nfloat Elasticity { get; set; }

    // @property (readwrite, nonatomic) CGFloat friction;
    [Export("friction")]
    nfloat Friction { get; set; }

    // @property (readwrite, nonatomic) CGFloat density;
    [Export("density")]
    nfloat Density { get; set; }

    // @property (readwrite, nonatomic) CGFloat resistance;
    [Export("resistance")]
    nfloat Resistance { get; set; }

    // @property (readwrite, nonatomic) CGFloat angularResistance;
    [Export("angularResistance")]
    nfloat AngularResistance { get; set; }

    // @property (readwrite, nonatomic) CGFloat charge __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("charge")]
    nfloat Charge { get; set; }

    // @property (getter = isAnchored, nonatomic) BOOL anchored __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("anchored")]
    bool Anchored { [Bind("isAnchored")] get; set; }

    // @property (readwrite, nonatomic) BOOL allowsRotation;
    [Export("allowsRotation")]
    bool AllowsRotation { get; set; }

    // -(void)addLinearVelocity:(CGPoint)velocity forItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("addLinearVelocity:forItem:")]
    void AddLinearVelocity(CGPoint velocity, UIDynamicItem item);

    // -(CGPoint)linearVelocityForItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("linearVelocityForItem:")]
    CGPoint LinearVelocityForItem(UIDynamicItem item);

    // -(void)addAngularVelocity:(CGFloat)velocity forItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("addAngularVelocity:forItem:")]
    void AddAngularVelocity(nfloat velocity, UIDynamicItem item);

    // -(CGFloat)angularVelocityForItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("angularVelocityForItem:")]
    nfloat AngularVelocityForItem(UIDynamicItem item);
}

// @interface UIFieldBehavior : UIDynamicBehavior
[iOS(9, 0)]
[BaseType(typeof(UIDynamicBehavior))]
[DisableDefaultCtor]
interface UIFieldBehavior
{
    // -(void)addItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("addItem:")]
    void AddItem(UIDynamicItem item);

    // -(void)removeItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("removeItem:")]
    void RemoveItem(UIDynamicItem item);

    // @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
    [Export("items", ArgumentSemantic.Copy)]
    UIDynamicItem[] Items { get; }

    // @property (assign, nonatomic) CGPoint position;
    [Export("position", ArgumentSemantic.Assign)]
    CGPoint Position { get; set; }

    // @property (nonatomic, strong) UIRegion * _Nonnull region;
    [Export("region", ArgumentSemantic.Strong)]
    UIRegion Region { get; set; }

    // @property (assign, nonatomic) CGFloat strength;
    [Export("strength")]
    nfloat Strength { get; set; }

    // @property (assign, nonatomic) CGFloat falloff;
    [Export("falloff")]
    nfloat Falloff { get; set; }

    // @property (assign, nonatomic) CGFloat minimumRadius;
    [Export("minimumRadius")]
    nfloat MinimumRadius { get; set; }

    // @property (assign, nonatomic) CGVector direction;
    [Export("direction", ArgumentSemantic.Assign)]
    CGVector Direction { get; set; }

    // @property (assign, nonatomic) CGFloat smoothness;
    [Export("smoothness")]
    nfloat Smoothness { get; set; }

    // @property (assign, nonatomic) CGFloat animationSpeed;
    [Export("animationSpeed")]
    nfloat AnimationSpeed { get; set; }

    // +(instancetype _Nonnull)dragField;
    [Static]
    [Export("dragField")]
    UIFieldBehavior DragField();

    // +(instancetype _Nonnull)vortexField;
    [Static]
    [Export("vortexField")]
    UIFieldBehavior VortexField();

    // +(instancetype _Nonnull)radialGravityFieldWithPosition:(CGPoint)position;
    [Static]
    [Export("radialGravityFieldWithPosition:")]
    UIFieldBehavior RadialGravityFieldWithPosition(CGPoint position);

    // +(instancetype _Nonnull)linearGravityFieldWithVector:(CGVector)direction;
    [Static]
    [Export("linearGravityFieldWithVector:")]
    UIFieldBehavior LinearGravityFieldWithVector(CGVector direction);

    // +(instancetype _Nonnull)velocityFieldWithVector:(CGVector)direction;
    [Static]
    [Export("velocityFieldWithVector:")]
    UIFieldBehavior VelocityFieldWithVector(CGVector direction);

    // +(instancetype _Nonnull)noiseFieldWithSmoothness:(CGFloat)smoothness animationSpeed:(CGFloat)speed;
    [Static]
    [Export("noiseFieldWithSmoothness:animationSpeed:")]
    UIFieldBehavior NoiseFieldWithSmoothness(nfloat smoothness, nfloat speed);

    // +(instancetype _Nonnull)turbulenceFieldWithSmoothness:(CGFloat)smoothness animationSpeed:(CGFloat)speed;
    [Static]
    [Export("turbulenceFieldWithSmoothness:animationSpeed:")]
    UIFieldBehavior TurbulenceFieldWithSmoothness(nfloat smoothness, nfloat speed);

    // +(instancetype _Nonnull)springField;
    [Static]
    [Export("springField")]
    UIFieldBehavior SpringField();

    // +(instancetype _Nonnull)electricField;
    [Static]
    [Export("electricField")]
    UIFieldBehavior ElectricField();

    // +(instancetype _Nonnull)magneticField;
    [Static]
    [Export("magneticField")]
    UIFieldBehavior MagneticField();

    // +(instancetype _Nonnull)fieldWithEvaluationBlock:(CGVector (^ _Nonnull)(UIFieldBehavior * _Nonnull, CGPoint, CGVector, CGFloat, CGFloat, NSTimeInterval))block;
    [Static]
    [Export("fieldWithEvaluationBlock:")]
    UIFieldBehavior FieldWithEvaluationBlock(Func<UIFieldBehavior, CGPoint, CGVector, nfloat, nfloat, double, CGVector> block);
}

// @interface UIGravityBehavior : UIDynamicBehavior
[iOS(7, 0)]
[BaseType(typeof(UIDynamicBehavior))]
interface UIGravityBehavior
{
    // -(instancetype _Nonnull)initWithItems:(NSArray<id<UIDynamicItem>> * _Nonnull)items __attribute__((objc_designated_initializer));
    [Export("initWithItems:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIDynamicItem[] items);

    // -(void)addItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("addItem:")]
    void AddItem(UIDynamicItem item);

    // -(void)removeItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("removeItem:")]
    void RemoveItem(UIDynamicItem item);

    // @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
    [Export("items", ArgumentSemantic.Copy)]
    UIDynamicItem[] Items { get; }

    // @property (readwrite, nonatomic) CGVector gravityDirection;
    [Export("gravityDirection", ArgumentSemantic.Assign)]
    CGVector GravityDirection { get; set; }

    // @property (readwrite, nonatomic) CGFloat angle;
    [Export("angle")]
    nfloat Angle { get; set; }

    // @property (readwrite, nonatomic) CGFloat magnitude;
    [Export("magnitude")]
    nfloat Magnitude { get; set; }

    // -(void)setAngle:(CGFloat)angle magnitude:(CGFloat)magnitude;
    [Export("setAngle:magnitude:")]
    void SetAngle(nfloat angle, nfloat magnitude);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern const UIFloatRange UIFloatRangeZero __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Field("UIFloatRangeZero", "__Internal")]
    UIFloatRange UIFloatRangeZero { get; }

    // extern const UIFloatRange UIFloatRangeInfinite __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Field("UIFloatRangeInfinite", "__Internal")]
    UIFloatRange UIFloatRangeInfinite { get; }
}

// @interface UIAttachmentBehavior : UIDynamicBehavior
[iOS(7, 0)]
[BaseType(typeof(UIDynamicBehavior))]
interface UIAttachmentBehavior
{
    // -(instancetype _Nonnull)initWithItem:(id<UIDynamicItem> _Nonnull)item attachedToAnchor:(CGPoint)point;
    [Export("initWithItem:attachedToAnchor:")]
    IntPtr Constructor(UIDynamicItem item, CGPoint point);

    // -(instancetype _Nonnull)initWithItem:(id<UIDynamicItem> _Nonnull)item offsetFromCenter:(UIOffset)offset attachedToAnchor:(CGPoint)point __attribute__((objc_designated_initializer));
    [Export("initWithItem:offsetFromCenter:attachedToAnchor:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIDynamicItem item, UIOffset offset, CGPoint point);

    // -(instancetype _Nonnull)initWithItem:(id<UIDynamicItem> _Nonnull)item1 attachedToItem:(id<UIDynamicItem> _Nonnull)item2;
    [Export("initWithItem:attachedToItem:")]
    IntPtr Constructor(UIDynamicItem item1, UIDynamicItem item2);

    // -(instancetype _Nonnull)initWithItem:(id<UIDynamicItem> _Nonnull)item1 offsetFromCenter:(UIOffset)offset1 attachedToItem:(id<UIDynamicItem> _Nonnull)item2 offsetFromCenter:(UIOffset)offset2 __attribute__((objc_designated_initializer));
    [Export("initWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIDynamicItem item1, UIOffset offset1, UIDynamicItem item2, UIOffset offset2);

    // +(instancetype _Nonnull)slidingAttachmentWithItem:(id<UIDynamicItem> _Nonnull)item1 attachedToItem:(id<UIDynamicItem> _Nonnull)item2 attachmentAnchor:(CGPoint)point axisOfTranslation:(CGVector)axis __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Static]
    [Export("slidingAttachmentWithItem:attachedToItem:attachmentAnchor:axisOfTranslation:")]
    UIAttachmentBehavior SlidingAttachmentWithItem(UIDynamicItem item1, UIDynamicItem item2, CGPoint point, CGVector axis);

    // +(instancetype _Nonnull)slidingAttachmentWithItem:(id<UIDynamicItem> _Nonnull)item attachmentAnchor:(CGPoint)point axisOfTranslation:(CGVector)axis __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Static]
    [Export("slidingAttachmentWithItem:attachmentAnchor:axisOfTranslation:")]
    UIAttachmentBehavior SlidingAttachmentWithItem(UIDynamicItem item, CGPoint point, CGVector axis);

    // +(instancetype _Nonnull)limitAttachmentWithItem:(id<UIDynamicItem> _Nonnull)item1 offsetFromCenter:(UIOffset)offset1 attachedToItem:(id<UIDynamicItem> _Nonnull)item2 offsetFromCenter:(UIOffset)offset2 __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Static]
    [Export("limitAttachmentWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:")]
    UIAttachmentBehavior LimitAttachmentWithItem(UIDynamicItem item1, UIOffset offset1, UIDynamicItem item2, UIOffset offset2);

    // +(instancetype _Nonnull)fixedAttachmentWithItem:(id<UIDynamicItem> _Nonnull)item1 attachedToItem:(id<UIDynamicItem> _Nonnull)item2 attachmentAnchor:(CGPoint)point __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Static]
    [Export("fixedAttachmentWithItem:attachedToItem:attachmentAnchor:")]
    UIAttachmentBehavior FixedAttachmentWithItem(UIDynamicItem item1, UIDynamicItem item2, CGPoint point);

    // +(instancetype _Nonnull)pinAttachmentWithItem:(id<UIDynamicItem> _Nonnull)item1 attachedToItem:(id<UIDynamicItem> _Nonnull)item2 attachmentAnchor:(CGPoint)point __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Static]
    [Export("pinAttachmentWithItem:attachedToItem:attachmentAnchor:")]
    UIAttachmentBehavior PinAttachmentWithItem(UIDynamicItem item1, UIDynamicItem item2, CGPoint point);

    // @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
    [Export("items", ArgumentSemantic.Copy)]
    UIDynamicItem[] Items { get; }

    // @property (readonly, nonatomic) UIAttachmentBehaviorType attachedBehaviorType;
    [Export("attachedBehaviorType")]
    UIAttachmentBehaviorType AttachedBehaviorType { get; }

    // @property (readwrite, nonatomic) CGPoint anchorPoint;
    [Export("anchorPoint", ArgumentSemantic.Assign)]
    CGPoint AnchorPoint { get; set; }

    // @property (readwrite, nonatomic) CGFloat length;
    [Export("length")]
    nfloat Length { get; set; }

    // @property (readwrite, nonatomic) CGFloat damping;
    [Export("damping")]
    nfloat Damping { get; set; }

    // @property (readwrite, nonatomic) CGFloat frequency;
    [Export("frequency")]
    nfloat Frequency { get; set; }

    // @property (readwrite, nonatomic) CGFloat frictionTorque __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("frictionTorque")]
    nfloat FrictionTorque { get; set; }

    // @property (readwrite, nonatomic) UIFloatRange attachmentRange __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("attachmentRange", ArgumentSemantic.Assign)]
    UIFloatRange AttachmentRange { get; set; }
}

// @protocol UICollisionBehaviorDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UICollisionBehaviorDelegate
{
    // @optional -(void)collisionBehavior:(UICollisionBehavior * _Nonnull)behavior beganContactForItem:(id<UIDynamicItem> _Nonnull)item1 withItem:(id<UIDynamicItem> _Nonnull)item2 atPoint:(CGPoint)p;
    [Export("collisionBehavior:beganContactForItem:withItem:atPoint:")]
    void BeganContactForItem(UICollisionBehavior behavior, UIDynamicItem item1, UIDynamicItem item2, CGPoint p);

    // @optional -(void)collisionBehavior:(UICollisionBehavior * _Nonnull)behavior endedContactForItem:(id<UIDynamicItem> _Nonnull)item1 withItem:(id<UIDynamicItem> _Nonnull)item2;
    [Export("collisionBehavior:endedContactForItem:withItem:")]
    void EndedContactForItem(UICollisionBehavior behavior, UIDynamicItem item1, UIDynamicItem item2);

    // @optional -(void)collisionBehavior:(UICollisionBehavior * _Nonnull)behavior beganContactForItem:(id<UIDynamicItem> _Nonnull)item withBoundaryIdentifier:(id<NSCopying> _Nullable)identifier atPoint:(CGPoint)p;
    [Export("collisionBehavior:beganContactForItem:withBoundaryIdentifier:atPoint:")]
    void BeganContactForItem(UICollisionBehavior behavior, UIDynamicItem item, [NullAllowed] NSCopying identifier, CGPoint p);

    // @optional -(void)collisionBehavior:(UICollisionBehavior * _Nonnull)behavior endedContactForItem:(id<UIDynamicItem> _Nonnull)item withBoundaryIdentifier:(id<NSCopying> _Nullable)identifier;
    [Export("collisionBehavior:endedContactForItem:withBoundaryIdentifier:")]
    void EndedContactForItem(UICollisionBehavior behavior, UIDynamicItem item, [NullAllowed] NSCopying identifier);
}

// @interface UICollisionBehavior : UIDynamicBehavior
[iOS(7, 0)]
[BaseType(typeof(UIDynamicBehavior))]
interface UICollisionBehavior
{
    // -(instancetype _Nonnull)initWithItems:(NSArray<id<UIDynamicItem>> * _Nonnull)items __attribute__((objc_designated_initializer));
    [Export("initWithItems:")]
    [DesignatedInitializer]
    IntPtr Constructor(UIDynamicItem[] items);

    // -(void)addItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("addItem:")]
    void AddItem(UIDynamicItem item);

    // -(void)removeItem:(id<UIDynamicItem> _Nonnull)item;
    [Export("removeItem:")]
    void RemoveItem(UIDynamicItem item);

    // @property (readonly, copy, nonatomic) NSArray<id<UIDynamicItem>> * _Nonnull items;
    [Export("items", ArgumentSemantic.Copy)]
    UIDynamicItem[] Items { get; }

    // @property (readwrite, nonatomic) UICollisionBehaviorMode collisionMode;
    [Export("collisionMode", ArgumentSemantic.Assign)]
    UICollisionBehaviorMode CollisionMode { get; set; }

    // @property (readwrite, nonatomic) BOOL translatesReferenceBoundsIntoBoundary;
    [Export("translatesReferenceBoundsIntoBoundary")]
    bool TranslatesReferenceBoundsIntoBoundary { get; set; }

    // -(void)setTranslatesReferenceBoundsIntoBoundaryWithInsets:(UIEdgeInsets)insets;
    [Export("setTranslatesReferenceBoundsIntoBoundaryWithInsets:")]
    void SetTranslatesReferenceBoundsIntoBoundaryWithInsets(UIEdgeInsets insets);

    // -(void)addBoundaryWithIdentifier:(id<NSCopying> _Nonnull)identifier forPath:(UIBezierPath * _Nonnull)bezierPath;
    [Export("addBoundaryWithIdentifier:forPath:")]
    void AddBoundaryWithIdentifier(NSCopying identifier, UIBezierPath bezierPath);

    // -(void)addBoundaryWithIdentifier:(id<NSCopying> _Nonnull)identifier fromPoint:(CGPoint)p1 toPoint:(CGPoint)p2;
    [Export("addBoundaryWithIdentifier:fromPoint:toPoint:")]
    void AddBoundaryWithIdentifier(NSCopying identifier, CGPoint p1, CGPoint p2);

    // -(UIBezierPath * _Nullable)boundaryWithIdentifier:(id<NSCopying> _Nonnull)identifier;
    [Export("boundaryWithIdentifier:")]
    [return: NullAllowed]
    UIBezierPath BoundaryWithIdentifier(NSCopying identifier);

    // -(void)removeBoundaryWithIdentifier:(id<NSCopying> _Nonnull)identifier;
    [Export("removeBoundaryWithIdentifier:")]
    void RemoveBoundaryWithIdentifier(NSCopying identifier);

    // @property (readonly, copy, nonatomic) NSArray<id<NSCopying>> * _Nullable boundaryIdentifiers;
    [NullAllowed, Export("boundaryIdentifiers", ArgumentSemantic.Copy)]
    NSCopying[] BoundaryIdentifiers { get; }

    // -(void)removeAllBoundaries;
    [Export("removeAllBoundaries")]
    void RemoveAllBoundaries();

    [Wrap("WeakCollisionDelegate")]
    [NullAllowed]
    UICollisionBehaviorDelegate CollisionDelegate { get; set; }

    // @property (readwrite, nonatomic, weak) id<UICollisionBehaviorDelegate> _Nullable collisionDelegate;
    [NullAllowed, Export("collisionDelegate", ArgumentSemantic.Weak)]
    NSObject WeakCollisionDelegate { get; set; }
}

// @interface UIRegion : NSObject <NSCopying, NSCoding>
[iOS(9, 0)]
[BaseType(typeof(NSObject))]
interface UIRegion : INSCopying, INSCoding
{
    // @property (readonly, nonatomic, class) UIRegion * _Nonnull infiniteRegion;
    [Static]
    [Export("infiniteRegion")]
    UIRegion InfiniteRegion { get; }

    // -(instancetype _Nonnull)initWithRadius:(CGFloat)radius;
    [Export("initWithRadius:")]
    IntPtr Constructor(nfloat radius);

    // -(instancetype _Nonnull)initWithSize:(CGSize)size;
    [Export("initWithSize:")]
    IntPtr Constructor(CGSize size);

    // -(instancetype _Nonnull)inverseRegion;
    [Export("inverseRegion")]
    UIRegion InverseRegion();

    // -(instancetype _Nonnull)regionByUnionWithRegion:(UIRegion * _Nonnull)region;
    [Export("regionByUnionWithRegion:")]
    UIRegion RegionByUnionWithRegion(UIRegion region);

    // -(instancetype _Nonnull)regionByDifferenceFromRegion:(UIRegion * _Nonnull)region;
    [Export("regionByDifferenceFromRegion:")]
    UIRegion RegionByDifferenceFromRegion(UIRegion region);

    // -(instancetype _Nonnull)regionByIntersectionWithRegion:(UIRegion * _Nonnull)region;
    [Export("regionByIntersectionWithRegion:")]
    UIRegion RegionByIntersectionWithRegion(UIRegion region);

    // -(BOOL)containsPoint:(CGPoint)point;
    [Export("containsPoint:")]
    bool ContainsPoint(CGPoint point);
}

// @interface UITextDragPreviewRenderer : NSObject
[NoWatch, NoTV, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UITextDragPreviewRenderer
{
    // -(instancetype _Nonnull)initWithLayoutManager:(NSLayoutManager * _Nonnull)layoutManager range:(NSRange)range;
    [Export("initWithLayoutManager:range:")]
    IntPtr Constructor(NSLayoutManager layoutManager, NSRange range);

    // -(instancetype _Nonnull)initWithLayoutManager:(NSLayoutManager * _Nonnull)layoutManager range:(NSRange)range unifyRects:(BOOL)unifyRects __attribute__((objc_designated_initializer));
    [Export("initWithLayoutManager:range:unifyRects:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSLayoutManager layoutManager, NSRange range, bool unifyRects);

    // @property (readonly, nonatomic) NSLayoutManager * _Nonnull layoutManager;
    [Export("layoutManager")]
    NSLayoutManager LayoutManager { get; }

    // @property (readonly, nonatomic) UIImage * _Nonnull image;
    [Export("image")]
    UIImage Image { get; }

    // @property (readonly, nonatomic) CGRect firstLineRect;
    [Export("firstLineRect")]
    CGRect FirstLineRect { get; }

    // @property (readonly, nonatomic) CGRect bodyRect;
    [Export("bodyRect")]
    CGRect BodyRect { get; }

    // @property (readonly, nonatomic) CGRect lastLineRect;
    [Export("lastLineRect")]
    CGRect LastLineRect { get; }

    // -(void)adjustFirstLineRect:(CGRect * _Nonnull)firstLineRect bodyRect:(CGRect * _Nonnull)bodyRect lastLineRect:(CGRect * _Nonnull)lastLineRect textOrigin:(CGPoint)origin;
    [Export("adjustFirstLineRect:bodyRect:lastLineRect:textOrigin:")]
    unsafe void AdjustFirstLineRect(CGRect* firstLineRect, CGRect* bodyRect, CGRect* lastLineRect, CGPoint origin);
}

// @interface URLPreviews (UIDragPreview)
[Category]
[BaseType(typeof(UIDragPreview))]
interface UIDragPreview_URLPreviews
{
    // +(instancetype _Nonnull)previewForURL:(NSURL * _Nonnull)url __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Static]
    [Export("previewForURL:")]
    UIDragPreview PreviewForURL(NSUrl url);

    // +(instancetype _Nonnull)previewForURL:(NSURL * _Nonnull)url title:(NSString * _Nullable)title __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Static]
    [Export("previewForURL:title:")]
    UIDragPreview PreviewForURL(NSUrl url, [NullAllowed] string title);
}

// @interface URLPreviews (UITargetedDragPreview)
[Category]
[BaseType(typeof(UITargetedDragPreview))]
interface UITargetedDragPreview_URLPreviews
{
    // +(instancetype _Nonnull)previewForURL:(NSURL * _Nonnull)url target:(UIDragPreviewTarget * _Nonnull)target __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Static]
    [Export("previewForURL:target:")]
    UITargetedDragPreview PreviewForURL(NSUrl url, UIDragPreviewTarget target);

    // +(instancetype _Nonnull)previewForURL:(NSURL * _Nonnull)url title:(NSString * _Nullable)title target:(UIDragPreviewTarget * _Nonnull)target __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, iOS(11, 0)]
    [Static]
    [Export("previewForURL:title:target:")]
    UITargetedDragPreview PreviewForURL(NSUrl url, [NullAllowed] string title, UIDragPreviewTarget target);
}

// @interface UIViewPropertyAnimator : NSObject <UIViewImplicitlyAnimating, NSCopying>
[iOS(10, 0)]
[BaseType(typeof(NSObject))]
interface UIViewPropertyAnimator : IUIViewImplicitlyAnimating, INSCopying
{
    // @property (readonly, copy, nonatomic) id<UITimingCurveProvider> _Nullable timingParameters;
    [NullAllowed, Export("timingParameters", ArgumentSemantic.Copy)]
    UITimingCurveProvider TimingParameters { get; }

    // @property (readonly, nonatomic) NSTimeInterval duration;
    [Export("duration")]
    double Duration { get; }

    // @property (readonly, nonatomic) NSTimeInterval delay;
    [Export("delay")]
    double Delay { get; }

    // @property (getter = isUserInteractionEnabled, nonatomic) BOOL userInteractionEnabled;
    [Export("userInteractionEnabled")]
    bool UserInteractionEnabled { [Bind("isUserInteractionEnabled")] get; set; }

    // @property (getter = isManualHitTestingEnabled, nonatomic) BOOL manualHitTestingEnabled;
    [Export("manualHitTestingEnabled")]
    bool ManualHitTestingEnabled { [Bind("isManualHitTestingEnabled")] get; set; }

    // @property (getter = isInterruptible, nonatomic) BOOL interruptible;
    [Export("interruptible")]
    bool Interruptible { [Bind("isInterruptible")] get; set; }

    // @property (nonatomic) BOOL scrubsLinearly __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("scrubsLinearly")]
    bool ScrubsLinearly { get; set; }

    // @property (nonatomic) BOOL pausesOnCompletion __attribute__((availability(ios, introduced=11_0)));
    [iOS(11, 0)]
    [Export("pausesOnCompletion")]
    bool PausesOnCompletion { get; set; }

    // -(instancetype _Nonnull)initWithDuration:(NSTimeInterval)duration timingParameters:(id<UITimingCurveProvider> _Nonnull)parameters __attribute__((objc_designated_initializer));
    [Export("initWithDuration:timingParameters:")]
    [DesignatedInitializer]
    IntPtr Constructor(double duration, UITimingCurveProvider parameters);

    // -(instancetype _Nonnull)initWithDuration:(NSTimeInterval)duration curve:(UIViewAnimationCurve)curve animations:(void (^ _Nullable)(void))animations;
    [Export("initWithDuration:curve:animations:")]
    IntPtr Constructor(double duration, UIViewAnimationCurve curve, [NullAllowed] Action animations);

    // -(instancetype _Nonnull)initWithDuration:(NSTimeInterval)duration controlPoint1:(CGPoint)point1 controlPoint2:(CGPoint)point2 animations:(void (^ _Nullable)(void))animations;
    [Export("initWithDuration:controlPoint1:controlPoint2:animations:")]
    IntPtr Constructor(double duration, CGPoint point1, CGPoint point2, [NullAllowed] Action animations);

    // -(instancetype _Nonnull)initWithDuration:(NSTimeInterval)duration dampingRatio:(CGFloat)ratio animations:(void (^ _Nullable)(void))animations;
    [Export("initWithDuration:dampingRatio:animations:")]
    IntPtr Constructor(double duration, nfloat ratio, [NullAllowed] Action animations);

    // +(instancetype _Nonnull)runningPropertyAnimatorWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(UIViewAnimatingPosition))completion;
    [Static]
    [Export("runningPropertyAnimatorWithDuration:delay:options:animations:completion:")]
    UIViewPropertyAnimator RunningPropertyAnimatorWithDuration(double duration, double delay, UIViewAnimationOptions options, Action animations, [NullAllowed] Action<UIViewAnimatingPosition> completion);

    // -(void)addAnimations:(void (^ _Nonnull)(void))animation delayFactor:(CGFloat)delayFactor;
    [Export("addAnimations:delayFactor:")]
    void AddAnimations(Action animation, nfloat delayFactor);

    // -(void)addAnimations:(void (^ _Nonnull)(void))animation;
    [Export("addAnimations:")]
    void AddAnimations(Action animation);

    // -(void)addCompletion:(void (^ _Nonnull)(UIViewAnimatingPosition))completion;
    [Export("addCompletion:")]
    void AddCompletion(Action<UIViewAnimatingPosition> completion);

    // -(void)continueAnimationWithTimingParameters:(id<UITimingCurveProvider> _Nullable)parameters durationFactor:(CGFloat)durationFactor;
    [Export("continueAnimationWithTimingParameters:durationFactor:")]
    void ContinueAnimationWithTimingParameters([NullAllowed] UITimingCurveProvider parameters, nfloat durationFactor);
}

// @interface UIFeedbackGenerator : NSObject
[NoWatch, NoTV, iOS(10, 0)]
[BaseType(typeof(NSObject))]
interface UIFeedbackGenerator
{
    // -(void)prepare;
    [Export("prepare")]
    void Prepare();
}

// @interface UISelectionFeedbackGenerator : UIFeedbackGenerator
[NoWatch, NoTV, iOS(10, 0)]
[BaseType(typeof(UIFeedbackGenerator))]
interface UISelectionFeedbackGenerator
{
    // -(void)selectionChanged;
    [Export("selectionChanged")]
    void SelectionChanged();
}

// @interface UIImpactFeedbackGenerator : UIFeedbackGenerator
[NoWatch, NoTV, iOS(10, 0)]
[BaseType(typeof(UIFeedbackGenerator))]
interface UIImpactFeedbackGenerator
{
    // -(instancetype _Nonnull)initWithStyle:(UIImpactFeedbackStyle)style;
    [Export("initWithStyle:")]
    IntPtr Constructor(UIImpactFeedbackStyle style);

    // -(void)impactOccurred;
    [Export("impactOccurred")]
    void ImpactOccurred();
}

// @interface UINotificationFeedbackGenerator : UIFeedbackGenerator
[NoWatch, NoTV, iOS(10, 0)]
[BaseType(typeof(UIFeedbackGenerator))]
interface UINotificationFeedbackGenerator
{
    // -(void)notificationOccurred:(UINotificationFeedbackType)notificationType;
    [Export("notificationOccurred:")]
    void NotificationOccurred(UINotificationFeedbackType notificationType);
}

// @interface UIGestureRecognizerProtected (UIGestureRecognizer)
[Category]
[BaseType(typeof(UIGestureRecognizer))]
interface UIGestureRecognizer_UIGestureRecognizerProtected
{
    // @property (readwrite, nonatomic) UIGestureRecognizerState state;
    [Export("state", ArgumentSemantic.Assign)]
    UIGestureRecognizerState State { get; set; }

    // -(void)ignoreTouch:(UITouch * _Nonnull)touch forEvent:(UIEvent * _Nonnull)event;
    [Export("ignoreTouch:forEvent:")]
    void IgnoreTouch(UITouch touch, UIEvent @event);

    // -(void)ignorePress:(UIPress * _Nonnull)button forEvent:(UIPressesEvent * _Nonnull)event __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("ignorePress:forEvent:")]
    void IgnorePress(UIPress button, UIPressesEvent @event);

    // -(void)reset;
    [Export("reset")]
    void Reset();

    // -(BOOL)canPreventGestureRecognizer:(UIGestureRecognizer * _Nonnull)preventedGestureRecognizer;
    [Export("canPreventGestureRecognizer:")]
    bool CanPreventGestureRecognizer(UIGestureRecognizer preventedGestureRecognizer);

    // -(BOOL)canBePreventedByGestureRecognizer:(UIGestureRecognizer * _Nonnull)preventingGestureRecognizer;
    [Export("canBePreventedByGestureRecognizer:")]
    bool CanBePreventedByGestureRecognizer(UIGestureRecognizer preventingGestureRecognizer);

    // -(BOOL)shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("shouldRequireFailureOfGestureRecognizer:")]
    bool ShouldRequireFailureOfGestureRecognizer(UIGestureRecognizer otherGestureRecognizer);

    // -(BOOL)shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer __attribute__((availability(ios, introduced=7_0)));
    [iOS(7, 0)]
    [Export("shouldBeRequiredToFailByGestureRecognizer:")]
    bool ShouldBeRequiredToFailByGestureRecognizer(UIGestureRecognizer otherGestureRecognizer);

    // -(void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
    [Export("touchesBegan:withEvent:")]
    void TouchesBegan(NSSet<UITouch> touches, UIEvent @event);

    // -(void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
    [Export("touchesMoved:withEvent:")]
    void TouchesMoved(NSSet<UITouch> touches, UIEvent @event);

    // -(void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
    [Export("touchesEnded:withEvent:")]
    void TouchesEnded(NSSet<UITouch> touches, UIEvent @event);

    // -(void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
    [Export("touchesCancelled:withEvent:")]
    void TouchesCancelled(NSSet<UITouch> touches, UIEvent @event);

    // -(void)touchesEstimatedPropertiesUpdated:(NSSet<UITouch *> * _Nonnull)touches __attribute__((availability(ios, introduced=9_1)));
    [iOS(9, 1)]
    [Export("touchesEstimatedPropertiesUpdated:")]
    void TouchesEstimatedPropertiesUpdated(NSSet<UITouch> touches);

    // -(void)pressesBegan:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nonnull)event __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("pressesBegan:withEvent:")]
    void PressesBegan(NSSet<UIPress> presses, UIPressesEvent @event);

    // -(void)pressesChanged:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nonnull)event __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("pressesChanged:withEvent:")]
    void PressesChanged(NSSet<UIPress> presses, UIPressesEvent @event);

    // -(void)pressesEnded:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nonnull)event __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("pressesEnded:withEvent:")]
    void PressesEnded(NSSet<UIPress> presses, UIPressesEvent @event);

    // -(void)pressesCancelled:(NSSet<UIPress *> * _Nonnull)presses withEvent:(UIPressesEvent * _Nonnull)event __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("pressesCancelled:withEvent:")]
    void PressesCancelled(NSSet<UIPress> presses, UIPressesEvent @event);
}

// typedef void (^UIGraphicsDrawingActions)(__kindof UIGraphicsRendererContext * _Nonnull);
delegate void UIGraphicsDrawingActions(UIGraphicsRendererContext arg0);

// @interface UIGraphicsRendererProtected (UIGraphicsRenderer)
[Category]
[BaseType(typeof(UIGraphicsRenderer))]
interface UIGraphicsRenderer_UIGraphicsRendererProtected
{
    // +(Class _Nonnull)rendererContextClass __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Static]
    [Export("rendererContextClass")]
    [Verify(MethodToProperty)]
    Class RendererContextClass { get; }

    // +(CGContextRef _Nullable)contextWithFormat:(UIGraphicsRendererFormat * _Nonnull)format __attribute__((availability(ios, introduced=10_0))) __attribute__((cf_returns_retained));
    [iOS(10, 0)]
    [Static]
    [Export("contextWithFormat:")]
    [return: NullAllowed]
    unsafe CGContextRef* ContextWithFormat(UIGraphicsRendererFormat format);

    // +(void)prepareCGContext:(CGContextRef _Nonnull)context withRendererContext:(UIGraphicsRendererContext * _Nonnull)rendererContext __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Static]
    [Export("prepareCGContext:withRendererContext:")]
    unsafe void PrepareCGContext(CGContextRef* context, UIGraphicsRendererContext rendererContext);

    // -(BOOL)runDrawingActions:(UIGraphicsDrawingActions _Nonnull)drawingActions completionActions:(UIGraphicsDrawingActions _Nullable)completionActions error:(NSError * _Nullable * _Nullable)error __attribute__((availability(ios, introduced=10_0)));
    [iOS(10, 0)]
    [Export("runDrawingActions:completionActions:error:")]
    bool RunDrawingActions(UIGraphicsDrawingActions drawingActions, [NullAllowed] UIGraphicsDrawingActions completionActions, [NullAllowed] out NSError error);
}

// @interface UIPencilInteraction : NSObject <UIInteraction>
[NoWatch, NoTV, iOS(12, 1)]
[BaseType(typeof(NSObject))]
interface UIPencilInteraction : IUIInteraction
{
    // @property (readonly, nonatomic, class) UIPencilPreferredAction preferredTapAction;
    [Static]
    [Export("preferredTapAction")]
    UIPencilPreferredAction PreferredTapAction { get; }

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIPencilInteractionDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIPencilInteractionDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (getter = isEnabled, nonatomic) BOOL enabled;
    [Export("enabled")]
    bool Enabled { [Bind("isEnabled")] get; set; }
}

// @protocol UIPencilInteractionDelegate <NSObject>
[NoWatch, NoTV, iOS(12, 1)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIPencilInteractionDelegate
{
    // @optional -(void)pencilInteractionDidTap:(UIPencilInteraction * _Nonnull)interaction;
    [Export("pencilInteractionDidTap:")]
    void PencilInteractionDidTap(UIPencilInteraction interaction);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const _Nonnull UIDocumentBrowserErrorDomain __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=11.0)));
    [NoWatch, NoTV, NoMac, iOS(11, 0)]
    [Field("UIDocumentBrowserErrorDomain", "__Internal")]
    NSString UIDocumentBrowserErrorDomain { get; }
}

// @interface UIDocumentBrowserViewController : UIViewController <NSCoding>
[NoWatch, NoTV, NoMac, iOS(11, 0)]
[BaseType(typeof(UIViewController))]
interface UIDocumentBrowserViewController : INSCoding
{
    // -(instancetype _Nonnull)initForOpeningFilesWithContentTypes:(NSArray<NSString *> * _Nullable)allowedContentTypes __attribute__((objc_designated_initializer));
    [Export("initForOpeningFilesWithContentTypes:")]
    [DesignatedInitializer]
    IntPtr Constructor([NullAllowed] string[] allowedContentTypes);

    [Wrap("WeakDelegate")]
    [NullAllowed]
    UIDocumentBrowserViewControllerDelegate Delegate { get; set; }

    // @property (nonatomic, weak) id<UIDocumentBrowserViewControllerDelegate> _Nullable delegate;
    [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
    NSObject WeakDelegate { get; set; }

    // @property (assign, nonatomic) BOOL allowsDocumentCreation;
    [Export("allowsDocumentCreation")]
    bool AllowsDocumentCreation { get; set; }

    // @property (assign, nonatomic) BOOL allowsPickingMultipleItems;
    [Export("allowsPickingMultipleItems")]
    bool AllowsPickingMultipleItems { get; set; }

    // @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull allowedContentTypes;
    [Export("allowedContentTypes", ArgumentSemantic.Copy)]
    string[] AllowedContentTypes { get; }

    // @property (nonatomic, strong) NSArray<UIBarButtonItem *> * _Nonnull additionalLeadingNavigationBarButtonItems;
    [Export("additionalLeadingNavigationBarButtonItems", ArgumentSemantic.Strong)]
    UIBarButtonItem[] AdditionalLeadingNavigationBarButtonItems { get; set; }

    // @property (nonatomic, strong) NSArray<UIBarButtonItem *> * _Nonnull additionalTrailingNavigationBarButtonItems;
    [Export("additionalTrailingNavigationBarButtonItems", ArgumentSemantic.Strong)]
    UIBarButtonItem[] AdditionalTrailingNavigationBarButtonItems { get; set; }

    // -(void)revealDocumentAtURL:(NSURL * _Nonnull)url importIfNeeded:(BOOL)importIfNeeded completion:(void (^ _Nullable)(NSURL * _Nullable, NSError * _Nullable))completion;
    [Export("revealDocumentAtURL:importIfNeeded:completion:")]
    void RevealDocumentAtURL(NSUrl url, bool importIfNeeded, [NullAllowed] Action<NSURL, NSError> completion);

    // -(void)importDocumentAtURL:(NSURL * _Nonnull)documentURL nextToDocumentAtURL:(NSURL * _Nonnull)neighbourURL mode:(UIDocumentBrowserImportMode)importMode completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completion;
    [Export("importDocumentAtURL:nextToDocumentAtURL:mode:completionHandler:")]
    void ImportDocumentAtURL(NSUrl documentURL, NSUrl neighbourURL, UIDocumentBrowserImportMode importMode, Action<NSURL, NSError> completion);

    // -(UIDocumentBrowserTransitionController * _Nonnull)transitionControllerForDocumentAtURL:(NSURL * _Nonnull)documentURL __attribute__((availability(ios, introduced=12.0)));
    [iOS(12, 0)]
    [Export("transitionControllerForDocumentAtURL:")]
    UIDocumentBrowserTransitionController TransitionControllerForDocumentAtURL(NSUrl documentURL);

    // -(UIDocumentBrowserTransitionController * _Nonnull)transitionControllerForDocumentURL:(NSURL * _Nonnull)documentURL __attribute__((availability(ios, introduced=11.0, deprecated=12.0)));
    [Introduced(PlatformName.iOS, 11, 0)]
    [Deprecated(PlatformName.iOS, 12, 0)]
    [Export("transitionControllerForDocumentURL:")]
    UIDocumentBrowserTransitionController TransitionControllerForDocumentURL(NSUrl documentURL);

    // @property (nonatomic, strong) NSArray<UIDocumentBrowserAction *> * _Nonnull customActions;
    [Export("customActions", ArgumentSemantic.Strong)]
    UIDocumentBrowserAction[] CustomActions { get; set; }

    // @property (assign, nonatomic) UIDocumentBrowserUserInterfaceStyle browserUserInterfaceStyle;
    [Export("browserUserInterfaceStyle", ArgumentSemantic.Assign)]
    UIDocumentBrowserUserInterfaceStyle BrowserUserInterfaceStyle { get; set; }
}

// @protocol UIDocumentBrowserViewControllerDelegate <NSObject>
[NoWatch, NoTV, NoMac, iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface UIDocumentBrowserViewControllerDelegate
{
    // @optional -(void)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller didPickDocumentURLs:(NSArray<NSURL *> * _Nonnull)documentURLs __attribute__((availability(ios, introduced=11.0, deprecated=12.0)));
    [Introduced(PlatformName.iOS, 11, 0)]
    [Deprecated(PlatformName.iOS, 12, 0)]
    [Export("documentBrowser:didPickDocumentURLs:")]
    void DocumentBrowser(UIDocumentBrowserViewController controller, NSUrl[] documentURLs);

    // @optional -(void)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller didPickDocumentsAtURLs:(NSArray<NSURL *> * _Nonnull)documentURLs __attribute__((availability(ios, introduced=12.0)));
    [iOS(12, 0)]
    [Export("documentBrowser:didPickDocumentsAtURLs:")]
    void DocumentBrowser(UIDocumentBrowserViewController controller, NSUrl[] documentURLs);

    // @optional -(void)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller didRequestDocumentCreationWithHandler:(void (^ _Nonnull)(NSURL * _Nullable, UIDocumentBrowserImportMode))importHandler;
    [Export("documentBrowser:didRequestDocumentCreationWithHandler:")]
    void DocumentBrowser(UIDocumentBrowserViewController controller, Action<NSURL, UIDocumentBrowserImportMode> importHandler);

    // @optional -(void)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller didImportDocumentAtURL:(NSURL * _Nonnull)sourceURL toDestinationURL:(NSURL * _Nonnull)destinationURL;
    [Export("documentBrowser:didImportDocumentAtURL:toDestinationURL:")]
    void DocumentBrowser(UIDocumentBrowserViewController controller, NSUrl sourceURL, NSUrl destinationURL);

    // @optional -(void)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller failedToImportDocumentAtURL:(NSURL * _Nonnull)documentURL error:(NSError * _Nullable)error;
    [Export("documentBrowser:failedToImportDocumentAtURL:error:")]
    void DocumentBrowser(UIDocumentBrowserViewController controller, NSUrl documentURL, [NullAllowed] NSError error);

    // @optional -(NSArray<__kindof UIActivity *> * _Nonnull)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller applicationActivitiesForDocumentURLs:(NSArray<NSURL *> * _Nonnull)documentURLs;
    [Export("documentBrowser:applicationActivitiesForDocumentURLs:")]
    UIActivity[] DocumentBrowser(UIDocumentBrowserViewController controller, NSUrl[] documentURLs);

    // @optional -(void)documentBrowser:(UIDocumentBrowserViewController * _Nonnull)controller willPresentActivityViewController:(UIActivityViewController * _Nonnull)activityViewController;
    [Export("documentBrowser:willPresentActivityViewController:")]
    void DocumentBrowser(UIDocumentBrowserViewController controller, UIActivityViewController activityViewController);
}

// @interface UIDocumentBrowserTransitionController : NSObject <UIViewControllerAnimatedTransitioning>
[NoWatch, NoTV, NoMac, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIDocumentBrowserTransitionController : IUIViewControllerAnimatedTransitioning
{
    // @property (nonatomic, strong) NSProgress * _Nullable loadingProgress;
    [NullAllowed, Export("loadingProgress", ArgumentSemantic.Strong)]
    NSProgress LoadingProgress { get; set; }

    // @property (nonatomic, weak) UIView * _Nullable targetView;
    [NullAllowed, Export("targetView", ArgumentSemantic.Weak)]
    UIView TargetView { get; set; }
}

// @interface UIDocumentBrowserAction : NSObject
[NoWatch, NoTV, NoMac, iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface UIDocumentBrowserAction
{
    // -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier localizedTitle:(NSString * _Nonnull)localizedTitle availability:(UIDocumentBrowserActionAvailability)availability handler:(void (^ _Nonnull)(NSArray<NSURL *> * _Nonnull))handler __attribute__((objc_designated_initializer));
    [Export("initWithIdentifier:localizedTitle:availability:handler:")]
    [DesignatedInitializer]
    IntPtr Constructor(string identifier, string localizedTitle, UIDocumentBrowserActionAvailability availability, Action<NSArray<NSURL>> handler);

    // @property (readonly, nonatomic) NSString * _Nonnull identifier;
    [Export("identifier")]
    string Identifier { get; }

    // @property (readonly, nonatomic) NSString * _Nonnull localizedTitle;
    [Export("localizedTitle")]
    string LocalizedTitle { get; }

    // @property (readonly, nonatomic) UIDocumentBrowserActionAvailability availability;
    [Export("availability")]
    UIDocumentBrowserActionAvailability Availability { get; }

    // @property (nonatomic, strong) UIImage * _Nullable image;
    [NullAllowed, Export("image", ArgumentSemantic.Strong)]
    UIImage Image { get; set; }

    // @property (copy, nonatomic) NSArray<NSString *> * _Nonnull supportedContentTypes;
    [Export("supportedContentTypes", ArgumentSemantic.Copy)]
    string[] SupportedContentTypes { get; set; }

    // @property (assign, nonatomic) BOOL supportsMultipleItems;
    [Export("supportsMultipleItems")]
    bool SupportsMultipleItems { get; set; }
}

// @interface WKBackForwardListItem : NSObject
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface WKBackForwardListItem
{
    // @property (readonly, copy) NSURL * _Nonnull URL;
    [Export("URL", ArgumentSemantic.Copy)]
    NSUrl URL { get; }

    // @property (readonly, copy) NSString * _Nullable title;
    [NullAllowed, Export("title")]
    string Title { get; }

    // @property (readonly, copy) NSURL * _Nonnull initialURL;
    [Export("initialURL", ArgumentSemantic.Copy)]
    NSUrl InitialURL { get; }
}

// @interface WKBackForwardList : NSObject
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface WKBackForwardList
{
    // @property (readonly, nonatomic, strong) WKBackForwardListItem * _Nullable currentItem;
    [NullAllowed, Export("currentItem", ArgumentSemantic.Strong)]
    WKBackForwardListItem CurrentItem { get; }

    // @property (readonly, nonatomic, strong) WKBackForwardListItem * _Nullable backItem;
    [NullAllowed, Export("backItem", ArgumentSemantic.Strong)]
    WKBackForwardListItem BackItem { get; }

    // @property (readonly, nonatomic, strong) WKBackForwardListItem * _Nullable forwardItem;
    [NullAllowed, Export("forwardItem", ArgumentSemantic.Strong)]
    WKBackForwardListItem ForwardItem { get; }

    // -(WKBackForwardListItem * _Nullable)itemAtIndex:(NSInteger)index;
    [Export("itemAtIndex:")]
    [return: NullAllowed]
    WKBackForwardListItem ItemAtIndex(nint index);

    // @property (readonly, copy, nonatomic) NSArray<WKBackForwardListItem *> * _Nonnull backList;
    [Export("backList", ArgumentSemantic.Copy)]
    WKBackForwardListItem[] BackList { get; }

    // @property (readonly, copy, nonatomic) NSArray<WKBackForwardListItem *> * _Nonnull forwardList;
    [Export("forwardList", ArgumentSemantic.Copy)]
    WKBackForwardListItem[] ForwardList { get; }
}

// @interface WKContentRuleList : NSObject
[Mac(10, 13), iOS(11, 0)]
[BaseType(typeof(NSObject))]
interface WKContentRuleList
{
    // @property (readonly, copy, nonatomic) NSString * identifier;
    [Export("identifier")]
    string Identifier { get; }
}

// @interface WKContentRuleListStore : NSObject
[Mac(10, 13), iOS(11, 0)]
[BaseType(typeof(NSObject))]
interface WKContentRuleListStore
{
    // +(instancetype)defaultStore;
    [Static]
    [Export("defaultStore")]
    WKContentRuleListStore DefaultStore();

    // +(instancetype)storeWithURL:(NSURL *)url;
    [Static]
    [Export("storeWithURL:")]
    WKContentRuleListStore StoreWithURL(NSUrl url);

    // -(void)compileContentRuleListForIdentifier:(NSString *)identifier encodedContentRuleList:(NSString *)encodedContentRuleList completionHandler:(void (^)(WKContentRuleList *, NSError *))completionHandler;
    [Export("compileContentRuleListForIdentifier:encodedContentRuleList:completionHandler:")]
    void CompileContentRuleListForIdentifier(string identifier, string encodedContentRuleList, Action<WKContentRuleList, NSError> completionHandler);

    // -(void)lookUpContentRuleListForIdentifier:(NSString *)identifier completionHandler:(void (^)(WKContentRuleList *, NSError *))completionHandler;
    [Export("lookUpContentRuleListForIdentifier:completionHandler:")]
    void LookUpContentRuleListForIdentifier(string identifier, Action<WKContentRuleList, NSError> completionHandler);

    // -(void)removeContentRuleListForIdentifier:(NSString *)identifier completionHandler:(void (^)(NSError *))completionHandler;
    [Export("removeContentRuleListForIdentifier:completionHandler:")]
    void RemoveContentRuleListForIdentifier(string identifier, Action<NSError> completionHandler);

    // -(void)getAvailableContentRuleListIdentifiers:(void (^)(NSArray<NSString *> *))completionHandler;
    [Export("getAvailableContentRuleListIdentifiers:")]
    void GetAvailableContentRuleListIdentifiers(Action<NSArray<NSString>> completionHandler);
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const _Nonnull WKErrorDomain __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, introduced=10.10)));
    [Mac(10, 10), iOS(8, 0)]
    [Field("WKErrorDomain", "__Internal")]
    NSString WKErrorDomain { get; }
}

// @interface WKSecurityOrigin : NSObject
[Mac(10, 11), iOS(9, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface WKSecurityOrigin
{
    // @property (readonly, copy, nonatomic) NSString * _Nonnull protocol;
    [Export("protocol")]
    string Protocol { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull host;
    [Export("host")]
    string Host { get; }

    // @property (readonly, nonatomic) NSInteger port;
    [Export("port")]
    nint Port { get; }
}

// @interface WKWebView : UIView
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(UIView))]
interface WKWebView
{
    // @property (readonly, copy, nonatomic) WKWebViewConfiguration * _Nonnull configuration;
    [Export("configuration", ArgumentSemantic.Copy)]
    WKWebViewConfiguration Configuration { get; }

    [Wrap("WeakNavigationDelegate")]
    [NullAllowed]
    WKNavigationDelegate NavigationDelegate { get; set; }

    // @property (nonatomic, weak) id<WKNavigationDelegate> _Nullable navigationDelegate;
    [NullAllowed, Export("navigationDelegate", ArgumentSemantic.Weak)]
    NSObject WeakNavigationDelegate { get; set; }

    [Wrap("WeakUIDelegate")]
    [NullAllowed]
    WKUIDelegate UIDelegate { get; set; }

    // @property (nonatomic, weak) id<WKUIDelegate> _Nullable UIDelegate;
    [NullAllowed, Export("UIDelegate", ArgumentSemantic.Weak)]
    NSObject WeakUIDelegate { get; set; }

    // @property (readonly, nonatomic, strong) WKBackForwardList * _Nonnull backForwardList;
    [Export("backForwardList", ArgumentSemantic.Strong)]
    WKBackForwardList BackForwardList { get; }

    // -(instancetype _Nonnull)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration __attribute__((objc_designated_initializer));
    [Export("initWithFrame:configuration:")]
    [DesignatedInitializer]
    IntPtr Constructor(CGRect frame, WKWebViewConfiguration configuration);

    // -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
    [Export("initWithCoder:")]
    [DesignatedInitializer]
    IntPtr Constructor(NSCoder coder);

    // -(WKNavigation * _Nullable)loadRequest:(NSURLRequest * _Nonnull)request;
    [Export("loadRequest:")]
    [return: NullAllowed]
    WKNavigation LoadRequest(NSUrlRequest request);

    // -(WKNavigation * _Nullable)loadFileURL:(NSURL * _Nonnull)URL allowingReadAccessToURL:(NSURL * _Nonnull)readAccessURL __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Export("loadFileURL:allowingReadAccessToURL:")]
    [return: NullAllowed]
    WKNavigation LoadFileURL(NSUrl URL, NSUrl readAccessURL);

    // -(WKNavigation * _Nullable)loadHTMLString:(NSString * _Nonnull)string baseURL:(NSURL * _Nullable)baseURL;
    [Export("loadHTMLString:baseURL:")]
    [return: NullAllowed]
    WKNavigation LoadHTMLString(string @string, [NullAllowed] NSUrl baseURL);

    // -(WKNavigation * _Nullable)loadData:(NSData * _Nonnull)data MIMEType:(NSString * _Nonnull)MIMEType characterEncodingName:(NSString * _Nonnull)characterEncodingName baseURL:(NSURL * _Nonnull)baseURL __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Export("loadData:MIMEType:characterEncodingName:baseURL:")]
    [return: NullAllowed]
    WKNavigation LoadData(NSData data, string MIMEType, string characterEncodingName, NSUrl baseURL);

    // -(WKNavigation * _Nullable)goToBackForwardListItem:(WKBackForwardListItem * _Nonnull)item;
    [Export("goToBackForwardListItem:")]
    [return: NullAllowed]
    WKNavigation GoToBackForwardListItem(WKBackForwardListItem item);

    // @property (readonly, copy, nonatomic) NSString * _Nullable title;
    [NullAllowed, Export("title")]
    string Title { get; }

    // @property (readonly, copy, nonatomic) NSURL * _Nullable URL;
    [NullAllowed, Export("URL", ArgumentSemantic.Copy)]
    NSUrl URL { get; }

    // @property (readonly, getter = isLoading, nonatomic) BOOL loading;
    [Export("loading")]
    bool Loading { [Bind("isLoading")] get; }

    // @property (readonly, nonatomic) double estimatedProgress;
    [Export("estimatedProgress")]
    double EstimatedProgress { get; }

    // @property (readonly, nonatomic) BOOL hasOnlySecureContent;
    [Export("hasOnlySecureContent")]
    bool HasOnlySecureContent { get; }

    // @property (readonly, nonatomic) SecTrustRef _Nullable serverTrust __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
    [Mac(10, 12), iOS(10, 0)]
    [NullAllowed, Export("serverTrust")]
    unsafe SecTrustRef* ServerTrust { get; }

    // @property (readonly, nonatomic) BOOL canGoBack;
    [Export("canGoBack")]
    bool CanGoBack { get; }

    // @property (readonly, nonatomic) BOOL canGoForward;
    [Export("canGoForward")]
    bool CanGoForward { get; }

    // -(WKNavigation * _Nullable)goBack;
    [NullAllowed, Export("goBack")]
    [Verify(MethodToProperty)]
    WKNavigation GoBack { get; }

    // -(WKNavigation * _Nullable)goForward;
    [NullAllowed, Export("goForward")]
    [Verify(MethodToProperty)]
    WKNavigation GoForward { get; }

    // -(WKNavigation * _Nullable)reload;
    [NullAllowed, Export("reload")]
    [Verify(MethodToProperty)]
    WKNavigation Reload { get; }

    // -(WKNavigation * _Nullable)reloadFromOrigin;
    [NullAllowed, Export("reloadFromOrigin")]
    [Verify(MethodToProperty)]
    WKNavigation ReloadFromOrigin { get; }

    // -(void)stopLoading;
    [Export("stopLoading")]
    void StopLoading();

    // -(void)evaluateJavaScript:(NSString * _Nonnull)javaScriptString completionHandler:(void (^ _Nullable)(id _Nullable, NSError * _Nullable))completionHandler;
    [Export("evaluateJavaScript:completionHandler:")]
    void EvaluateJavaScript(string javaScriptString, [NullAllowed] Action<NSObject, NSError> completionHandler);

    // -(void)takeSnapshotWithConfiguration:(WKSnapshotConfiguration * _Nullable)snapshotConfiguration completionHandler:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(ios, introduced=11.0)));
    [iOS(11, 0)]
    [Export("takeSnapshotWithConfiguration:completionHandler:")]
    void TakeSnapshotWithConfiguration([NullAllowed] WKSnapshotConfiguration snapshotConfiguration, Action<UIImage, NSError> completionHandler);

    // @property (nonatomic) BOOL allowsBackForwardNavigationGestures;
    [Export("allowsBackForwardNavigationGestures")]
    bool AllowsBackForwardNavigationGestures { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable customUserAgent __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [NullAllowed, Export("customUserAgent")]
    string CustomUserAgent { get; set; }

    // @property (nonatomic) BOOL allowsLinkPreview __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Export("allowsLinkPreview")]
    bool AllowsLinkPreview { get; set; }

    // @property (readonly, nonatomic, strong) UIScrollView * _Nonnull scrollView;
    [Export("scrollView", ArgumentSemantic.Strong)]
    UIScrollView ScrollView { get; }

    // +(BOOL)handlesURLScheme:(NSString * _Nonnull)urlScheme __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
    [Mac(10, 13), iOS(11, 0)]
    [Static]
    [Export("handlesURLScheme:")]
    bool HandlesURLScheme(string urlScheme);
}

// @interface WKDeprecated (WKWebView)
[Category]
[BaseType(typeof(WKWebView))]
interface WKWebView_WKDeprecated
{
    // @property (readonly, copy, nonatomic) NSArray * _Nonnull certificateChain __attribute__((availability(ios, introduced=9.0, deprecated=10.0))) __attribute__((availability(macos, introduced=10.11, deprecated=10.12)));
    [Introduced(PlatformName.iOS, 9, 0)]
    [Deprecated(PlatformName.iOS, 10, 0)]
    [Introduced(PlatformName.MacOSX, 10, 11)]
    [Deprecated(PlatformName.MacOSX, 10, 12)]
    [Export("certificateChain", ArgumentSemantic.Copy)]
    [Verify(StronglyTypedNSArray)]
    NSObject[] CertificateChain { get; }
}

// @interface WKFrameInfo : NSObject <NSCopying>
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface WKFrameInfo : INSCopying
{
    // @property (readonly, getter = isMainFrame, nonatomic) BOOL mainFrame;
    [Export("mainFrame")]
    bool MainFrame { [Bind("isMainFrame")] get; }

    // @property (readonly, copy, nonatomic) NSURLRequest * _Nonnull request;
    [Export("request", ArgumentSemantic.Copy)]
    NSUrlRequest Request { get; }

    // @property (readonly, nonatomic) WKSecurityOrigin * _Nonnull securityOrigin __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Export("securityOrigin")]
    WKSecurityOrigin SecurityOrigin { get; }

    // @property (readonly, nonatomic, weak) WKWebView * _Nullable webView __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
    [Mac(10, 13), iOS(11, 0)]
    [NullAllowed, Export("webView", ArgumentSemantic.Weak)]
    WKWebView WebView { get; }
}

// @protocol WKHTTPCookieStoreObserver <NSObject>
[Mac(10, 13), iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface WKHTTPCookieStoreObserver
{
    // @optional -(void)cookiesDidChangeInCookieStore:(WKHTTPCookieStore * _Nonnull)cookieStore;
    [Export("cookiesDidChangeInCookieStore:")]
    void CookiesDidChangeInCookieStore(WKHttpCookieStore cookieStore);
}

// @interface WKHTTPCookieStore : NSObject
[Mac(10, 13), iOS(11, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface WKHTTPCookieStore
{
    // -(void)getAllCookies:(void (^ _Nonnull)(NSArray<NSHTTPCookie *> * _Nonnull))completionHandler;
    [Export("getAllCookies:")]
    void GetAllCookies(Action<NSArray<NSHTTPCookie>> completionHandler);

    // -(void)setCookie:(NSHTTPCookie * _Nonnull)cookie completionHandler:(void (^ _Nullable)(void))completionHandler;
    [Export("setCookie:completionHandler:")]
    void SetCookie(NSHttpCookie cookie, [NullAllowed] Action completionHandler);

    // -(void)deleteCookie:(NSHTTPCookie * _Nonnull)cookie completionHandler:(void (^ _Nullable)(void))completionHandler;
    [Export("deleteCookie:completionHandler:")]
    void DeleteCookie(NSHttpCookie cookie, [NullAllowed] Action completionHandler);

    // -(void)addObserver:(id<WKHTTPCookieStoreObserver> _Nonnull)observer;
    [Export("addObserver:")]
    void AddObserver(WKHTTPCookieStoreObserver observer);

    // -(void)removeObserver:(id<WKHTTPCookieStoreObserver> _Nonnull)observer;
    [Export("removeObserver:")]
    void RemoveObserver(WKHTTPCookieStoreObserver observer);
}

// @interface WKNavigation : NSObject
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface WKNavigation
{
}

// @interface WKNavigationAction : NSObject
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface WKNavigationAction
{
    // @property (readonly, copy, nonatomic) WKFrameInfo * _Nonnull sourceFrame;
    [Export("sourceFrame", ArgumentSemantic.Copy)]
    WKFrameInfo SourceFrame { get; }

    // @property (readonly, copy, nonatomic) WKFrameInfo * _Nullable targetFrame;
    [NullAllowed, Export("targetFrame", ArgumentSemantic.Copy)]
    WKFrameInfo TargetFrame { get; }

    // @property (readonly, nonatomic) WKNavigationType navigationType;
    [Export("navigationType")]
    WKNavigationType NavigationType { get; }

    // @property (readonly, copy, nonatomic) NSURLRequest * _Nonnull request;
    [Export("request", ArgumentSemantic.Copy)]
    NSUrlRequest Request { get; }
}

// @protocol WKNavigationDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface WKNavigationDelegate
{
    // @optional -(void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
    [Export("webView:decidePolicyForNavigationAction:decisionHandler:")]
    void WebView(WKWebView webView, WKNavigationAction navigationAction, Action<WKNavigationActionPolicy> decisionHandler);

    // @optional -(void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationResponse:(WKNavigationResponse * _Nonnull)navigationResponse decisionHandler:(void (^ _Nonnull)(WKNavigationResponsePolicy))decisionHandler;
    [Export("webView:decidePolicyForNavigationResponse:decisionHandler:")]
    void WebView(WKWebView webView, WKNavigationResponse navigationResponse, Action<WKNavigationResponsePolicy> decisionHandler);

    // @optional -(void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
    [Export("webView:didStartProvisionalNavigation:")]
    void WebView(WKWebView webView, WKNavigation navigation);

    // @optional -(void)webView:(WKWebView * _Nonnull)webView didReceiveServerRedirectForProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
    [Export("webView:didReceiveServerRedirectForProvisionalNavigation:")]
    void WebView(WKWebView webView, WKNavigation navigation);

    // @optional -(void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
    [Export("webView:didFailProvisionalNavigation:withError:")]
    void WebView(WKWebView webView, WKNavigation navigation, NSError error);

    // @optional -(void)webView:(WKWebView * _Nonnull)webView didCommitNavigation:(WKNavigation * _Null_unspecified)navigation;
    [Export("webView:didCommitNavigation:")]
    void WebView(WKWebView webView, WKNavigation navigation);

    // @optional -(void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
    [Export("webView:didFinishNavigation:")]
    void WebView(WKWebView webView, WKNavigation navigation);

    // @optional -(void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
    [Export("webView:didFailNavigation:withError:")]
    void WebView(WKWebView webView, WKNavigation navigation, NSError error);

    // @optional -(void)webView:(WKWebView * _Nonnull)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
    [Export("webView:didReceiveAuthenticationChallenge:completionHandler:")]
    void WebView(WKWebView webView, NSUrlAuthenticationChallenge challenge, Action<NSURLSessionAuthChallengeDisposition, NSURLCredential> completionHandler);

    // @optional -(void)webViewWebContentProcessDidTerminate:(WKWebView * _Nonnull)webView __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Export("webViewWebContentProcessDidTerminate:")]
    void WebViewWebContentProcessDidTerminate(WKWebView webView);
}

// @interface WKNavigationResponse : NSObject
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface WKNavigationResponse
{
    // @property (readonly, getter = isForMainFrame, nonatomic) BOOL forMainFrame;
    [Export("forMainFrame")]
    bool ForMainFrame { [Bind("isForMainFrame")] get; }

    // @property (readonly, copy, nonatomic) NSURLResponse * _Nonnull response;
    [Export("response", ArgumentSemantic.Copy)]
    NSUrlResponse Response { get; }

    // @property (readonly, nonatomic) BOOL canShowMIMEType;
    [Export("canShowMIMEType")]
    bool CanShowMIMEType { get; }
}

// @interface WKPreferences : NSObject <NSSecureCoding>
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface WKPreferences : INSSecureCoding
{
    // @property (nonatomic) CGFloat minimumFontSize;
    [Export("minimumFontSize")]
    nfloat MinimumFontSize { get; set; }

    // @property (nonatomic) BOOL javaScriptEnabled;
    [Export("javaScriptEnabled")]
    bool JavaScriptEnabled { get; set; }

    // @property (nonatomic) BOOL javaScriptCanOpenWindowsAutomatically;
    [Export("javaScriptCanOpenWindowsAutomatically")]
    bool JavaScriptCanOpenWindowsAutomatically { get; set; }
}

// @protocol WKPreviewActionItem <UIPreviewActionItem>
[iOS(10, 0)]
[Protocol, Model]
interface WKPreviewActionItem : IUIPreviewActionItem
{
    // @required @property (readonly, copy, nonatomic) NSString * identifier;
    [Abstract]
    [Export("identifier")]
    string Identifier { get; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const WKPreviewActionItemIdentifierOpen __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10.0)));
    [iOS(10, 0)]
    [Field("WKPreviewActionItemIdentifierOpen", "__Internal")]
    NSString WKPreviewActionItemIdentifierOpen { get; }

    // extern NSString *const WKPreviewActionItemIdentifierAddToReadingList __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10.0)));
    [iOS(10, 0)]
    [Field("WKPreviewActionItemIdentifierAddToReadingList", "__Internal")]
    NSString WKPreviewActionItemIdentifierAddToReadingList { get; }

    // extern NSString *const WKPreviewActionItemIdentifierCopy __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10.0)));
    [iOS(10, 0)]
    [Field("WKPreviewActionItemIdentifierCopy", "__Internal")]
    NSString WKPreviewActionItemIdentifierCopy { get; }

    // extern NSString *const WKPreviewActionItemIdentifierShare __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10.0)));
    [iOS(10, 0)]
    [Field("WKPreviewActionItemIdentifierShare", "__Internal")]
    NSString WKPreviewActionItemIdentifierShare { get; }
}

// @interface WKPreviewElementInfo : NSObject <NSCopying>
[iOS(10, 0)]
[BaseType(typeof(NSObject))]
interface WKPreviewElementInfo : INSCopying
{
    // @property (readonly, nonatomic) NSURL * _Nullable linkURL;
    [NullAllowed, Export("linkURL")]
    NSUrl LinkURL { get; }
}

// @interface WKProcessPool : NSObject <NSSecureCoding>
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface WKProcessPool : INSSecureCoding
{
}

// @interface WKScriptMessage : NSObject
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface WKScriptMessage
{
    // @property (readonly, copy, nonatomic) id _Nonnull body;
    [Export("body", ArgumentSemantic.Copy)]
    NSObject Body { get; }

    // @property (readonly, nonatomic, weak) WKWebView * _Nullable webView;
    [NullAllowed, Export("webView", ArgumentSemantic.Weak)]
    WKWebView WebView { get; }

    // @property (readonly, copy, nonatomic) WKFrameInfo * _Nonnull frameInfo;
    [Export("frameInfo", ArgumentSemantic.Copy)]
    WKFrameInfo FrameInfo { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull name;
    [Export("name")]
    string Name { get; }
}

// @protocol WKScriptMessageHandler <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface WKScriptMessageHandler
{
    // @required -(void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
    [Abstract]
    [Export("userContentController:didReceiveScriptMessage:")]
    void DidReceiveScriptMessage(WKUserContentController userContentController, WKScriptMessage message);
}

// @interface WKSnapshotConfiguration : NSObject <NSCopying>
[Mac(10, 13), iOS(11, 0)]
[BaseType(typeof(NSObject))]
interface WKSnapshotConfiguration : INSCopying
{
    // @property (nonatomic) CGRect rect;
    [Export("rect", ArgumentSemantic.Assign)]
    CGRect Rect { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable snapshotWidth;
    [NullAllowed, Export("snapshotWidth", ArgumentSemantic.Copy)]
    NSNumber SnapshotWidth { get; set; }
}

// @protocol WKUIDelegate <NSObject>
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface WKUIDelegate
{
    // @optional -(WKWebView * _Nullable)webView:(WKWebView * _Nonnull)webView createWebViewWithConfiguration:(WKWebViewConfiguration * _Nonnull)configuration forNavigationAction:(WKNavigationAction * _Nonnull)navigationAction windowFeatures:(WKWindowFeatures * _Nonnull)windowFeatures;
    [Export("webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:")]
    [return: NullAllowed]
    WKWebView WebView(WKWebView webView, WKWebViewConfiguration configuration, WKNavigationAction navigationAction, WKWindowFeatures windowFeatures);

    // @optional -(void)webViewDidClose:(WKWebView * _Nonnull)webView __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Export("webViewDidClose:")]
    void WebViewDidClose(WKWebView webView);

    // @optional -(void)webView:(WKWebView * _Nonnull)webView runJavaScriptAlertPanelWithMessage:(NSString * _Nonnull)message initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(void))completionHandler;
    [Export("webView:runJavaScriptAlertPanelWithMessage:initiatedByFrame:completionHandler:")]
    void WebView(WKWebView webView, string message, WKFrameInfo frame, Action completionHandler);

    // @optional -(void)webView:(WKWebView * _Nonnull)webView runJavaScriptConfirmPanelWithMessage:(NSString * _Nonnull)message initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
    [Export("webView:runJavaScriptConfirmPanelWithMessage:initiatedByFrame:completionHandler:")]
    void WebView(WKWebView webView, string message, WKFrameInfo frame, Action<bool> completionHandler);

    // @optional -(void)webView:(WKWebView * _Nonnull)webView runJavaScriptTextInputPanelWithPrompt:(NSString * _Nonnull)prompt defaultText:(NSString * _Nullable)defaultText initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(NSString * _Nullable))completionHandler;
    [Export("webView:runJavaScriptTextInputPanelWithPrompt:defaultText:initiatedByFrame:completionHandler:")]
    void WebView(WKWebView webView, string prompt, [NullAllowed] string defaultText, WKFrameInfo frame, Action<NSString> completionHandler);

    // @optional -(BOOL)webView:(WKWebView * _Nonnull)webView shouldPreviewElement:(WKPreviewElementInfo * _Nonnull)elementInfo __attribute__((availability(ios, introduced=10.0)));
    [iOS(10, 0)]
    [Export("webView:shouldPreviewElement:")]
    bool WebView(WKWebView webView, WKPreviewElementInfo elementInfo);

    // @optional -(UIViewController * _Nullable)webView:(WKWebView * _Nonnull)webView previewingViewControllerForElement:(WKPreviewElementInfo * _Nonnull)elementInfo defaultActions:(NSArray<id<WKPreviewActionItem>> * _Nonnull)previewActions __attribute__((availability(ios, introduced=10.0)));
    [iOS(10, 0)]
    [Export("webView:previewingViewControllerForElement:defaultActions:")]
    [return: NullAllowed]
    UIViewController WebView(WKWebView webView, WKPreviewElementInfo elementInfo, WKPreviewActionItem[] previewActions);

    // @optional -(void)webView:(WKWebView * _Nonnull)webView commitPreviewingViewController:(UIViewController * _Nonnull)previewingViewController __attribute__((availability(ios, introduced=10.0)));
    [iOS(10, 0)]
    [Export("webView:commitPreviewingViewController:")]
    void WebView(WKWebView webView, UIViewController previewingViewController);
}

// @protocol WKURLSchemeHandler <NSObject>
[Mac(10, 13), iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface WKURLSchemeHandler
{
    // @required -(void)webView:(WKWebView * _Nonnull)webView startURLSchemeTask:(id<WKURLSchemeTask> _Nonnull)urlSchemeTask;
    [Abstract]
    [Export("webView:startURLSchemeTask:")]
    void StartURLSchemeTask(WKWebView webView, WKURLSchemeTask urlSchemeTask);

    // @required -(void)webView:(WKWebView * _Nonnull)webView stopURLSchemeTask:(id<WKURLSchemeTask> _Nonnull)urlSchemeTask;
    [Abstract]
    [Export("webView:stopURLSchemeTask:")]
    void StopURLSchemeTask(WKWebView webView, WKURLSchemeTask urlSchemeTask);
}

// @protocol WKURLSchemeTask <NSObject>
[Mac(10, 13), iOS(11, 0)]
[Protocol, Model]
[BaseType(typeof(NSObject))]
interface WKURLSchemeTask
{
    // @required @property (readonly, copy, nonatomic) NSURLRequest * _Nonnull request;
    [Abstract]
    [Export("request", ArgumentSemantic.Copy)]
    NSUrlRequest Request { get; }

    // @required -(void)didReceiveResponse:(NSURLResponse * _Nonnull)response;
    [Abstract]
    [Export("didReceiveResponse:")]
    void DidReceiveResponse(NSUrlResponse response);

    // @required -(void)didReceiveData:(NSData * _Nonnull)data;
    [Abstract]
    [Export("didReceiveData:")]
    void DidReceiveData(NSData data);

    // @required -(void)didFinish;
    [Abstract]
    [Export("didFinish")]
    void DidFinish();

    // @required -(void)didFailWithError:(NSError * _Nonnull)error;
    [Abstract]
    [Export("didFailWithError:")]
    void DidFailWithError(NSError error);
}

// @interface WKUserContentController : NSObject <NSSecureCoding>
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface WKUserContentController : INSSecureCoding
{
    // @property (readonly, copy, nonatomic) NSArray<WKUserScript *> * _Nonnull userScripts;
    [Export("userScripts", ArgumentSemantic.Copy)]
    WKUserScript[] UserScripts { get; }

    // -(void)addUserScript:(WKUserScript * _Nonnull)userScript;
    [Export("addUserScript:")]
    void AddUserScript(WKUserScript userScript);

    // -(void)removeAllUserScripts;
    [Export("removeAllUserScripts")]
    void RemoveAllUserScripts();

    // -(void)addScriptMessageHandler:(id<WKScriptMessageHandler> _Nonnull)scriptMessageHandler name:(NSString * _Nonnull)name;
    [Export("addScriptMessageHandler:name:")]
    void AddScriptMessageHandler(WKScriptMessageHandler scriptMessageHandler, string name);

    // -(void)removeScriptMessageHandlerForName:(NSString * _Nonnull)name;
    [Export("removeScriptMessageHandlerForName:")]
    void RemoveScriptMessageHandlerForName(string name);

    // -(void)addContentRuleList:(WKContentRuleList * _Nonnull)contentRuleList __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
    [Mac(10, 13), iOS(11, 0)]
    [Export("addContentRuleList:")]
    void AddContentRuleList(WKContentRuleList contentRuleList);

    // -(void)removeContentRuleList:(WKContentRuleList * _Nonnull)contentRuleList __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
    [Mac(10, 13), iOS(11, 0)]
    [Export("removeContentRuleList:")]
    void RemoveContentRuleList(WKContentRuleList contentRuleList);

    // -(void)removeAllContentRuleLists __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
    [Mac(10, 13), iOS(11, 0)]
    [Export("removeAllContentRuleLists")]
    void RemoveAllContentRuleLists();
}

// @interface WKUserScript : NSObject <NSCopying>
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface WKUserScript : INSCopying
{
    // @property (readonly, copy, nonatomic) NSString * _Nonnull source;
    [Export("source")]
    string Source { get; }

    // @property (readonly, nonatomic) WKUserScriptInjectionTime injectionTime;
    [Export("injectionTime")]
    WKUserScriptInjectionTime InjectionTime { get; }

    // @property (readonly, getter = isForMainFrameOnly, nonatomic) BOOL forMainFrameOnly;
    [Export("forMainFrameOnly")]
    bool ForMainFrameOnly { [Bind("isForMainFrameOnly")] get; }

    // -(instancetype _Nonnull)initWithSource:(NSString * _Nonnull)source injectionTime:(WKUserScriptInjectionTime)injectionTime forMainFrameOnly:(BOOL)forMainFrameOnly;
    [Export("initWithSource:injectionTime:forMainFrameOnly:")]
    IntPtr Constructor(string source, WKUserScriptInjectionTime injectionTime, bool forMainFrameOnly);
}

// @interface WKWebViewConfiguration : NSObject <NSSecureCoding, NSCopying>
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface WKWebViewConfiguration : INSSecureCoding, INSCopying
{
    // @property (nonatomic, strong) WKProcessPool * _Nonnull processPool;
    [Export("processPool", ArgumentSemantic.Strong)]
    WKProcessPool ProcessPool { get; set; }

    // @property (nonatomic, strong) WKPreferences * _Nonnull preferences;
    [Export("preferences", ArgumentSemantic.Strong)]
    WKPreferences Preferences { get; set; }

    // @property (nonatomic, strong) WKUserContentController * _Nonnull userContentController;
    [Export("userContentController", ArgumentSemantic.Strong)]
    WKUserContentController UserContentController { get; set; }

    // @property (nonatomic, strong) WKWebsiteDataStore * _Nonnull websiteDataStore __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Export("websiteDataStore", ArgumentSemantic.Strong)]
    WKWebsiteDataStore WebsiteDataStore { get; set; }

    // @property (nonatomic) BOOL suppressesIncrementalRendering;
    [Export("suppressesIncrementalRendering")]
    bool SuppressesIncrementalRendering { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable applicationNameForUserAgent __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [NullAllowed, Export("applicationNameForUserAgent")]
    string ApplicationNameForUserAgent { get; set; }

    // @property (nonatomic) BOOL allowsAirPlayForMediaPlayback __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Export("allowsAirPlayForMediaPlayback")]
    bool AllowsAirPlayForMediaPlayback { get; set; }

    // @property (nonatomic) WKAudiovisualMediaTypes mediaTypesRequiringUserActionForPlayback __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(macos, introduced=10.12)));
    [Mac(10, 12), iOS(10, 0)]
    [Export("mediaTypesRequiringUserActionForPlayback", ArgumentSemantic.Assign)]
    WKAudiovisualMediaTypes MediaTypesRequiringUserActionForPlayback { get; set; }

    // @property (nonatomic) BOOL allowsInlineMediaPlayback;
    [Export("allowsInlineMediaPlayback")]
    bool AllowsInlineMediaPlayback { get; set; }

    // @property (nonatomic) WKSelectionGranularity selectionGranularity;
    [Export("selectionGranularity", ArgumentSemantic.Assign)]
    WKSelectionGranularity SelectionGranularity { get; set; }

    // @property (nonatomic) BOOL allowsPictureInPictureMediaPlayback __attribute__((availability(ios, introduced=9_0)));
    [iOS(9, 0)]
    [Export("allowsPictureInPictureMediaPlayback")]
    bool AllowsPictureInPictureMediaPlayback { get; set; }

    // @property (nonatomic) WKDataDetectorTypes dataDetectorTypes __attribute__((availability(ios, introduced=10.0)));
    [iOS(10, 0)]
    [Export("dataDetectorTypes", ArgumentSemantic.Assign)]
    WKDataDetectorTypes DataDetectorTypes { get; set; }

    // @property (nonatomic) BOOL ignoresViewportScaleLimits __attribute__((availability(ios, introduced=10.0)));
    [iOS(10, 0)]
    [Export("ignoresViewportScaleLimits")]
    bool IgnoresViewportScaleLimits { get; set; }

    // -(void)setURLSchemeHandler:(id<WKURLSchemeHandler> _Nullable)urlSchemeHandler forURLScheme:(NSString * _Nonnull)urlScheme __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
    [Mac(10, 13), iOS(11, 0)]
    [Export("setURLSchemeHandler:forURLScheme:")]
    void SetURLSchemeHandler([NullAllowed] WKURLSchemeHandler urlSchemeHandler, string urlScheme);

    // -(id<WKURLSchemeHandler> _Nullable)urlSchemeHandlerForURLScheme:(NSString * _Nonnull)urlScheme __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
    [Mac(10, 13), iOS(11, 0)]
    [Export("urlSchemeHandlerForURLScheme:")]
    [return: NullAllowed]
    WKURLSchemeHandler UrlSchemeHandlerForURLScheme(string urlScheme);
}

// @interface WKDeprecated (WKWebViewConfiguration)
[Category]
[BaseType(typeof(WKWebViewConfiguration))]
interface WKWebViewConfiguration_WKDeprecated
{
    // @property (nonatomic) BOOL mediaPlaybackRequiresUserAction __attribute__((availability(ios, introduced=8.0, deprecated=9.0)));
    [Introduced(PlatformName.iOS, 8, 0)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("mediaPlaybackRequiresUserAction")]
    bool MediaPlaybackRequiresUserAction { get; set; }

    // @property (nonatomic) BOOL mediaPlaybackAllowsAirPlay __attribute__((availability(ios, introduced=8.0, deprecated=9.0)));
    [Introduced(PlatformName.iOS, 8, 0)]
    [Deprecated(PlatformName.iOS, 9, 0)]
    [Export("mediaPlaybackAllowsAirPlay")]
    bool MediaPlaybackAllowsAirPlay { get; set; }

    // @property (nonatomic) BOOL requiresUserActionForMediaPlayback __attribute__((availability(ios, introduced=9.0, deprecated=10.0)));
    [Introduced(PlatformName.iOS, 9, 0)]
    [Deprecated(PlatformName.iOS, 10, 0)]
    [Export("requiresUserActionForMediaPlayback")]
    bool RequiresUserActionForMediaPlayback { get; set; }
}

[Static]
[Verify(ConstantsInterfaceAssociation)]
partial interface Constants
{
    // extern NSString *const _Nonnull WKWebsiteDataTypeFetchCache __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
    [Mac(10, 13, 4), iOS(11, 3)]
    [Field("WKWebsiteDataTypeFetchCache", "__Internal")]
    NSString WKWebsiteDataTypeFetchCache { get; }

    // extern NSString *const _Nonnull WKWebsiteDataTypeDiskCache __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Field("WKWebsiteDataTypeDiskCache", "__Internal")]
    NSString WKWebsiteDataTypeDiskCache { get; }

    // extern NSString *const _Nonnull WKWebsiteDataTypeMemoryCache __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Field("WKWebsiteDataTypeMemoryCache", "__Internal")]
    NSString WKWebsiteDataTypeMemoryCache { get; }

    // extern NSString *const _Nonnull WKWebsiteDataTypeOfflineWebApplicationCache __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Field("WKWebsiteDataTypeOfflineWebApplicationCache", "__Internal")]
    NSString WKWebsiteDataTypeOfflineWebApplicationCache { get; }

    // extern NSString *const _Nonnull WKWebsiteDataTypeCookies __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Field("WKWebsiteDataTypeCookies", "__Internal")]
    NSString WKWebsiteDataTypeCookies { get; }

    // extern NSString *const _Nonnull WKWebsiteDataTypeSessionStorage __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Field("WKWebsiteDataTypeSessionStorage", "__Internal")]
    NSString WKWebsiteDataTypeSessionStorage { get; }

    // extern NSString *const _Nonnull WKWebsiteDataTypeLocalStorage __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Field("WKWebsiteDataTypeLocalStorage", "__Internal")]
    NSString WKWebsiteDataTypeLocalStorage { get; }

    // extern NSString *const _Nonnull WKWebsiteDataTypeWebSQLDatabases __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Field("WKWebsiteDataTypeWebSQLDatabases", "__Internal")]
    NSString WKWebsiteDataTypeWebSQLDatabases { get; }

    // extern NSString *const _Nonnull WKWebsiteDataTypeIndexedDBDatabases __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(macos, introduced=10.11)));
    [Mac(10, 11), iOS(9, 0)]
    [Field("WKWebsiteDataTypeIndexedDBDatabases", "__Internal")]
    NSString WKWebsiteDataTypeIndexedDBDatabases { get; }

    // extern NSString *const _Nonnull WKWebsiteDataTypeServiceWorkerRegistrations __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(macos, introduced=10.13.4)));
    [Mac(10, 13, 4), iOS(11, 3)]
    [Field("WKWebsiteDataTypeServiceWorkerRegistrations", "__Internal")]
    NSString WKWebsiteDataTypeServiceWorkerRegistrations { get; }
}

// @interface WKWebsiteDataRecord : NSObject
[Mac(10, 11), iOS(9, 0)]
[BaseType(typeof(NSObject))]
interface WKWebsiteDataRecord
{
    // @property (readonly, copy, nonatomic) NSString * _Nonnull displayName;
    [Export("displayName")]
    string DisplayName { get; }

    // @property (readonly, copy, nonatomic) NSSet<NSString *> * _Nonnull dataTypes;
    [Export("dataTypes", ArgumentSemantic.Copy)]
    NSSet<NSString> DataTypes { get; }
}

// @interface WKWebsiteDataStore : NSObject <NSSecureCoding>
[Mac(10, 11), iOS(9, 0)]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
interface WKWebsiteDataStore : INSSecureCoding
{
    // +(WKWebsiteDataStore * _Nonnull)defaultDataStore;
    [Static]
    [Export("defaultDataStore")]
    [Verify(MethodToProperty)]
    WKWebsiteDataStore DefaultDataStore { get; }

    // +(WKWebsiteDataStore * _Nonnull)nonPersistentDataStore;
    [Static]
    [Export("nonPersistentDataStore")]
    [Verify(MethodToProperty)]
    WKWebsiteDataStore NonPersistentDataStore { get; }

    // @property (readonly, getter = isPersistent, nonatomic) BOOL persistent;
    [Export("persistent")]
    bool Persistent { [Bind("isPersistent")] get; }

    // +(NSSet<NSString *> * _Nonnull)allWebsiteDataTypes;
    [Static]
    [Export("allWebsiteDataTypes")]
    [Verify(MethodToProperty)]
    NSSet<NSString> AllWebsiteDataTypes { get; }

    // -(void)fetchDataRecordsOfTypes:(NSSet<NSString *> * _Nonnull)dataTypes completionHandler:(void (^ _Nonnull)(NSArray<WKWebsiteDataRecord *> * _Nonnull))completionHandler;
    [Export("fetchDataRecordsOfTypes:completionHandler:")]
    void FetchDataRecordsOfTypes(NSSet<NSString> dataTypes, Action<NSArray<WKWebsiteDataRecord>> completionHandler);

    // -(void)removeDataOfTypes:(NSSet<NSString *> * _Nonnull)dataTypes forDataRecords:(NSArray<WKWebsiteDataRecord *> * _Nonnull)dataRecords completionHandler:(void (^ _Nonnull)(void))completionHandler;
    [Export("removeDataOfTypes:forDataRecords:completionHandler:")]
    void RemoveDataOfTypes(NSSet<NSString> dataTypes, WKWebsiteDataRecord[] dataRecords, Action completionHandler);

    // -(void)removeDataOfTypes:(NSSet<NSString *> * _Nonnull)dataTypes modifiedSince:(NSDate * _Nonnull)date completionHandler:(void (^ _Nonnull)(void))completionHandler;
    [Export("removeDataOfTypes:modifiedSince:completionHandler:")]
    void RemoveDataOfTypes(NSSet<NSString> dataTypes, NSDate date, Action completionHandler);

    // @property (readonly, nonatomic) WKHTTPCookieStore * _Nonnull httpCookieStore __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, introduced=10.13)));
    [Mac(10, 13), iOS(11, 0)]
    [Export("httpCookieStore")]
    WKHttpCookieStore HttpCookieStore { get; }
}

// @interface WKWindowFeatures : NSObject
[Mac(10, 10), iOS(8, 0)]
[BaseType(typeof(NSObject))]
interface WKWindowFeatures
{
    // @property (readonly, nonatomic) NSNumber * _Nullable menuBarVisibility;
    [NullAllowed, Export("menuBarVisibility")]
    NSNumber MenuBarVisibility { get; }

    // @property (readonly, nonatomic) NSNumber * _Nullable statusBarVisibility;
    [NullAllowed, Export("statusBarVisibility")]
    NSNumber StatusBarVisibility { get; }

    // @property (readonly, nonatomic) NSNumber * _Nullable toolbarsVisibility;
    [NullAllowed, Export("toolbarsVisibility")]
    NSNumber ToolbarsVisibility { get; }

    // @property (readonly, nonatomic) NSNumber * _Nullable allowsResizing;
    [NullAllowed, Export("allowsResizing")]
    NSNumber AllowsResizing { get; }

    // @property (readonly, nonatomic) NSNumber * _Nullable x;
    [NullAllowed, Export("x")]
    NSNumber X { get; }

    // @property (readonly, nonatomic) NSNumber * _Nullable y;
    [NullAllowed, Export("y")]
    NSNumber Y { get; }

    // @property (readonly, nonatomic) NSNumber * _Nullable width;
    [NullAllowed, Export("width")]
    NSNumber Width { get; }

    // @property (readonly, nonatomic) NSNumber * _Nullable height;
    [NullAllowed, Export("height")]
    NSNumber Height { get; }
}

// @interface TBSWebViewController : UIViewController
[BaseType(typeof(UIViewController))]
interface TBSWebViewController
{
    // -(void)loadRequestWithURL:(NSURL * _Nonnull)url;
    [Export("loadRequestWithURL:")]
    void LoadRequestWithURL(NSUrl url);

    // -(void)setWXSdkAppId:(NSString * _Nonnull)appid;
    [Export("setWXSdkAppId:")]
    void SetWXSdkAppId(string appid);

    // -(void)setQQConectAppId:(NSString * _Nonnull)appid;
    [Export("setQQConectAppId:")]
    void SetQQConectAppId(string appid);
}

// @interface TBSWKWebView : WKWebView
[BaseType(typeof(WKWebView))]
interface TBSWKWebView
{
}



}